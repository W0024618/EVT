Our issue is fix Unknown issue from Austin Texas carefully.

http://localhost:3000/partition/USA%2FCanada%20Default/details

 "USA/Canada Default": {
      "total": 5,
      "Employee": 1,
      "Contractor": 4,
      "floors": {
        "Texas": 4,
        "Unknown": 1
      }


US.CO.HQ. 15. 15th Floor Executive Southwest Entrance 15.312A

   "LocaleMessageTime": "2025-08-13T08:51:58.000Z",
      "ObjectName1": "Sawyer, Jesse",
      "Door": "US.CO.HQ. 15. 15th Floor Executive Southwest Entrance 15.312A",
      "EmployeeID": "W0018251",
      "CardNumber": "614225",
      "PartitionName2": "USA/Canada Default",
      "PersonGUID": "A74A3CD3-1278-4FA3-9ADE-C44E7C9BA94E",
      "PersonnelType": "Contractor",
      "Direction": "InDirection",
      "snapshotTime": "2025-08-13T08:51:58.000Z",
      "floor": "Unknown"
    },


This door is from Denver and 15th Floor not Austin texas ..
so let fix this issue carefully.



2) New York display 

Today's Total Headcount
1
Today's Employees Count
1
Today's Contractors Count
0
Realtime Headcount
4
Realtime Employees Count
4
Realtime Contractors Count
0


this is not correct Today HeadCount 

Correct is 

Today's Total Headcount
37
Today's Employees Count
36
Today's Contractors Count
1

so check below file line by line and fix this issue carefully..
//C:\Users\W0024618\Desktop\namer-occupancy-frontend\namer-occupancy-frontend\src\pages\PartitionDetail.jsx
import React, { useEffect, useState } from "react";
import { useMemo } from 'react';
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup"; // This is correct

import buildingCapacities from "../data/buildingCapacities";

import seatCapacities from "../data/seatCapacities";



export default function PartitionDetail() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // Auto‐refresh live summary
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);


  



  // Load historical summary once
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) return <LoadingSpinner />;

  // Totals for cards
  const lastDay = history.summaryByDate.at(-1);
  const partToday = lastDay.region;
  const live = liveSummary.realtime[partition] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    TempBadge: 0,
    floors: {},
  };

  // Build floorEntries with capacity
 const floorEntries = Object.entries(live.floors)
  .filter(([floor]) => floor && floor.trim() !== '')
  .map(([floor, cnt]) => {
    const name = floor.trim();
    const capacity = buildingCapacities[name] ?? seatCapacities[partition] ?? 0;
    const pct = capacity ? Math.round((cnt / capacity) * 100) : 0;

    return {
      name,
      Headcount: cnt,
      Capacity: capacity,
      breakdown: {
        Headcount: cnt,
        'Total Seat': capacity,
        Usage: `${pct}%`,
      },
    };
  });



  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>
        <Container maxWidth={false} disableGutters>
          {/* Back button */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>

          {/* Six‐card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
  {[
    {
      title: "Today's Total Headcount",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.total,
      icon: <i className="fa-solid fa-users" style={{ color: '#E57373', fontSize: 25 }} />,
      border: '#FFD666'
    },
    {
      title: "Today's Employees Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Employee,
      icon: <i className="bi bi-people" style={{ color: '#81C784', fontSize: 25 }} />,
      border: '#81C784'
    },
    {
      title: "Today's Contractors Count",
      value: historyLoading ? <CircularProgress size={20} /> : partToday.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color: '#64B5F6', fontSize: 25 }} />,
      border: '#FFE599'
    },
    {
      title: "Realtime Headcount",
      value: live.total,
      icon: <i className="fa-solid fa-users" style={{ color: '#BA68C8', fontSize: 25 }} />,
      border: '#FFF2CC'
    },
    {
      title: "Realtime Employees Count",
      value: live.Employee,
      icon: <i className="bi bi-people" style={{ color: '#FFB74D', fontSize: 25 }} />,
      border: '#FFD666'
    },
    {
      title: "Realtime Contractors Count",
      value: live.Contractor,
      icon: <i className="fa-solid fa-circle-user" style={{ color: '#4DB6AC', fontSize: 25 }} />,
      border: '#FFE599'
    }
  ].map(card => (
    <Box key={card.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
      <SummaryCard
        title={card.title}
        total={card.value}
        stats={[]}
        icon={card.icon}
        sx={{
          height: 140,
          border: `2px solid ${card.border}`
        }}
      />
    </Box>
  ))}
</Box>

          {/* Floor‐capacity chart */}
          <Box mb={4} sx={{ 
            px: "20px", 
            p: 2, 
            border: "2px solid #FFC107",
            background: 'rgba(0,0,0,0.4)'
          }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
              <Typography variant="h6" sx={{ color: '#FFC107' }}>
                Live Floor Headcount against Occupancy
              </Typography>
              <Typography variant="body2" sx={{ color: '#FFC107' }}>
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head: "#28B463", cap: "#FDDA0D" }}
              axisProps={{
                xAxis: { tick: { fill: "#fff" } },
                yAxis: { tick: { fill: "#fff" } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}










// src/utils/doorMap.js


/**
 * Normalize door names for consistent matching.
 * 1) Trim + collapse multiple spaces
 * 2) Remove ".", strip ordinal suffixes (1st, 15th → 1, 15)
 * 3) Uppercase
 */
function normalizeDoor(name) {
  return name
    .trim()
    // collapse whitespace
    .replace(/\s+/g, ' ')
    // strip ordinal suffixes e.g. “15th” → “15”
    .replace(/(\d+)(ST|ND|RD|TH)\b/gi, '$1')
    // remove literal dots
    .replace(/\./g, '')
    .toUpperCase();
}

/**
 * doorMap: Array of mappings from (partition, door) to in/out floors.
 * PartitionName2 must match exactly the partition strings used by the service.
 */
const doorMap = [

  // ==== US.CO.OBS (Denver) ====
  // Floor 12
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. SOUTH LOBBY DOORS-IN'),   inDirectionFloor: 'Floor 12', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. IDF RESTRICTED DOOR'),    inDirectionFloor: 'Floor 12', outDirectionFloor: 'Floor 12' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. STORAGE ROOM_11:01:0A'), inDirectionFloor: 'Floor 12', outDirectionFloor: 'Floor 12' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. NORTH STAIRWELL-IN'),    inDirectionFloor: 'Floor 12', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. FREIGHT ELEVATOR LOBBY-IN'), inDirectionFloor: 'Floor 12', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. MOTHERS ROOM_11:01:CC'), inDirectionFloor: 'Floor 12', outDirectionFloor: 'Floor 12' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. SOUTH STAIRWELL-IN'),   inDirectionFloor: 'Floor 12', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 12. NORTH LOBBY DOORS-IN'),  inDirectionFloor: 'Floor 12', outDirectionFloor: 'Out of office' },

  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 01. FOCUS AREA WEST-IN'),  inDirectionFloor: 'Floor 01', outDirectionFloor: 'Floor 01' },

  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 01. Focus Area North-IN'),  inDirectionFloor: 'Floor 01', outDirectionFloor: 'Floor 01' },


  // Floor 11
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. IDF ROOM_11:01:42 RESTRICTED DOOR'), inDirectionFloor: 'Floor 11', outDirectionFloor: 'Floor 11' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. STORAGE ROOM_11:01:DD'),            inDirectionFloor: 'Floor 11', outDirectionFloor: 'Floor 11' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. NORTH STAIRWELL-IN'),               inDirectionFloor: 'Floor 11', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. FREIGHT ELEVATOR LOBBY-IN'),         inDirectionFloor: 'Floor 11', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. QUIET ROOM_11:01:0E'),              inDirectionFloor: 'Floor 11', outDirectionFloor: 'Floor 11' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. SOUTH STAIRWELL-IN'),               inDirectionFloor: 'Floor 11', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. NORTH LOBBY DOORS-IN'),             inDirectionFloor: 'Floor 11', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 11. SOUTH LOBBY DOORS-IN'),             inDirectionFloor: 'Floor 11', outDirectionFloor: 'Out of office' },

  // Floor 09
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. IDF ROOM_11:00:98 RESTRICTED DOOR'), inDirectionFloor: 'Floor 09', outDirectionFloor: 'Floor 09' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. STORAGE ROOM_11:01:05'),           inDirectionFloor: 'Floor 09', outDirectionFloor: 'Floor 09' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. SOUTH STAIRWELL-IN'),              inDirectionFloor: 'Floor 09', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. FREIGHT ELEVATOR LOBBY-IN'),        inDirectionFloor: 'Floor 09', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. WELLNESS ROOM_11:01:E1'),          inDirectionFloor: 'Floor 09', outDirectionFloor: 'Floor 09' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. NORTH STAIRWELL-IN'),              inDirectionFloor: 'Floor 09', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. NORTH LOBBY DOORS-IN'),            inDirectionFloor: 'Floor 09', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 09. SOUTH LOBBY DOORS-IN'),            inDirectionFloor: 'Floor 09', outDirectionFloor: 'Out of office' },

  // Floor 13
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. FREIGHT ELEVATOR LOBBY-IN'),        inDirectionFloor: 'Floor 13', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. SOUTH LOBBY DOORS-IN'),            inDirectionFloor: 'Floor 13', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. NORTH STAIRWELL-IN'),              inDirectionFloor: 'Floor 13', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. IDF ROOM_11:01:8C RESTRICTED DOOR'), inDirectionFloor: 'Floor 13', outDirectionFloor: 'Floor 13' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. NORTH LOBBY DOORS-IN'),            inDirectionFloor: 'Floor 13', outDirectionFloor: 'Floor 13' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. STORAGE ROOM_11:01:75'),           inDirectionFloor: 'Floor 13', outDirectionFloor: 'Floor 13' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. MOTHERS ROOM_11:01:A3'),           inDirectionFloor: 'Floor 13', outDirectionFloor: 'Floor 13' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 13. SOUTH STAIRWELL-IN'),              inDirectionFloor: 'Floor 13', outDirectionFloor: 'Out of office' },

  // Floor 06
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. MAIL ROOM_11:00:17'),              inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. NORTH ENTRY-IN'),                 inDirectionFloor: 'Floor 06', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. SECURITY CONTROL ROOM_11:01:22 RESTRICTED DOOR'), inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. EUC LAB STORAGE_11:01:CA'),        inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. IT WORK LAB_11:01:99'),            inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. E-WASTE STORAGE_11:01:96'),        inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. EUC LAB DOOR_11:01:D4'),           inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. EAST STAIRWELL-IN'),               inDirectionFloor: 'Floor 06', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. MDF ROOM_11:00:D5 RESTRICTED DOOR'), inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. FITNESS CENTER EAST_11:01:02'),   inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. SOUTH CENTER HALL ENTRY-IN'),      inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. FITNESS CENTER WEST_11:01:B9'),   inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. SOUTH ENTRANCE-IN'),              inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 06. MORSE STUDIO'),                   inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },

  // also catch the no-space variant that’s coming through from the reader
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ.06. MAIL ROOM_11:00:17'), inDirectionFloor: 'Floor 06', outDirectionFloor: 'Floor 06' },
 
 // Floor 01
  // { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 01. FOCUS AREA WEST-IN'),  inDirectionFloor: 'Floor 01', outDirectionFloor: 'Floor 01' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 01. FOCUS AREA WEST-IN'),  inDirectionFloor: 'Floor 01', outDirectionFloor: 'Floor 01' },

  // Retail North (two variants)
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 01. RETAIL NORTH_10:03:1A'), inDirectionFloor: 'Floor 01', outDirectionFloor: 'Floor 01' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ.01. RETAIL NORTH_10:03:1A'),  inDirectionFloor: 'Floor 01', outDirectionFloor: 'Floor 01' },
 


  // Floor 14
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. NORTH LOBBY DOORS-IN'),           inDirectionFloor: 'Floor 14', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. SOUTH LOBBY DOORS-IN'),           inDirectionFloor: 'Floor 14', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. NORTH STAIRWELL-IN'),             inDirectionFloor: 'Floor 14', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. STORAGE ROOM'),                   inDirectionFloor: 'Floor 14', outDirectionFloor: 'Floor 14' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. IDF ROOM_11:01:0F RESTRICTED DOOR'), inDirectionFloor: 'Floor 14', outDirectionFloor: 'Floor 14' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. FREIGHT ELEVATOR LOBBY-IN'),       inDirectionFloor: 'Floor 14', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14 AV SUPPORT_11:01:6E'),             inDirectionFloor: 'Floor 14', outDirectionFloor: 'Floor 14' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. WELLNESS ROOM_11:01:B0'),         inDirectionFloor: 'Floor 14', outDirectionFloor: 'Floor 14' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. SOUTH STAIRWELL-IN'),             inDirectionFloor: 'Floor 14', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. CATERING PANTRY NORTH DOOR_11:01:00'), inDirectionFloor: 'Floor 14', outDirectionFloor: 'Floor 14' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 14. CATERING PANTRY SOUTH DOOR_11:01:19'), inDirectionFloor: 'Floor 14', outDirectionFloor: 'Floor 14' },

  // Floor 15 (IN‐direction entries)
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. NORTH LOBBY DOORS-IN'),           inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. EXECUTIVE ENTRANCE_10:03:9F'),   inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. EXEC ADMINS ENTRANCE_10:04:4F'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. WEST STORAGE_10:06:6F'),         inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. SOUTH STAIRWELL-IN'),            inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-IN'),inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. IDF ROOM_11:01:97 RESTRICTED DOOR'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. SOUTH LOBBY DOORS-IN'),          inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-IN'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-IN'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. NORTH STAIRWELL-IN'),            inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. WELLNESS ROOM_11:00:24'),        inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. AV SUPPORT ROOM_11:01:56'),     inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. CATERING KITCHEN_11:01:AE'),     inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. TRAINING STORAGE ROOM_11:01:90'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. 15TH FLOOR NORTH STORAGE 15.430'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTHWEST ENTRANCE 15.312A'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTH ENTRANCE 15.312B'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. 15TH FLOOR SIBLEY CONFERENCE ROOM SOUTHWEST ENTRANCE 15.201A'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. 15TH FLOOR SIBLEY CONFERENCE ROOM SOUTHEAST ENTRANCE 15.201B'), inDirectionFloor: 'Floor 15', outDirectionFloor: 'Floor 15' },

  // Floor 15 (OUT‐direction door names without “-IN” suffix)
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR'),     inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT'),         inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR'),   inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. NORTH LOBBY DOORS'),                  inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. NORTH STAIRWELL'),                   inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. SOUTH LOBBY DOORS'),                  inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },
  { partition: 'US.CO.OBS', door: normalizeDoor('US.CO.HQ. 15. SOUTH STAIRWELL'),                   inDirectionFloor: 'Floor 15', outDirectionFloor: 'Out of office' },

  // ==== US.NYC ====

{ partition: 'US.NYC', door: normalizeDoor('US.NYC.80Pine Street.Lobby Door'),          inDirectionFloor: 'New York', outDirectionFloor: 'Out of office' },

  { partition: 'US.NYC', door: normalizeDoor('US.NYC.199 Water St.South Entrance Dr'),          inDirectionFloor: 'New York', outDirectionFloor: 'Out of office' },
  { partition: 'US.NYC', door: normalizeDoor('US.NYC.199 Water St.Northeast Entrance Dr'),    inDirectionFloor: 'New York', outDirectionFloor: 'Out of office' },
  { partition: 'US.NYC', door: normalizeDoor('US.NYC.199 Water St.Northwest Entrance Dr'),    inDirectionFloor: 'New York', outDirectionFloor: 'Out of office' },
  { partition: 'US.NYC', door: normalizeDoor('US.NYC.199 Water St.Storage Room'),             inDirectionFloor: 'New York', outDirectionFloor: 'New York' },
  // existing “bare” IDF mapping (no prefix)
  { partition: 'US.NYC', door: normalizeDoor('199 Water St.IDF Restricted Door'),            inDirectionFloor: 'New York', outDirectionFloor: 'New York' },
  // **new** mapping for the prefixed door name that was logging unmapped
  { partition: 'US.NYC', door: normalizeDoor('US.NYC.199 Water St.IDF Restricted Door'),    inDirectionFloor: 'New York', outDirectionFloor: 'New York' },

  // ==== US.FL.MIAMI ====
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI MAIN LOBBY DOOR 1'), inDirectionFloor: 'Miami', outDirectionFloor: 'Out of office' },
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI MAIN LOBBY DOOR 2 (NORTH ENTRANCE)'), inDirectionFloor: 'Miami', outDirectionFloor: 'Out of office' },
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI WEST DOOR ENTRANCE DOOR 3'), inDirectionFloor: 'Miami', outDirectionFloor: 'Out of office' },
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI STORAGE ROOM'), inDirectionFloor: 'Miami', outDirectionFloor: 'Miami' },
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI IDF ROOM'), inDirectionFloor: 'Miami', outDirectionFloor: 'Miami' },
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI IT LAB ROOM DOOR'), inDirectionFloor: 'Miami', outDirectionFloor: 'Miami' },
  { partition: 'US.FL.MIAMI', door: normalizeDoor('US.FL.MIAMI EMERGENCY EXIT DOOR'), inDirectionFloor: 'Miami', outDirectionFloor: 'Out of office' },

  // ---- ADD THIS for the 15th-floor Southeast Entrance too ----
  { partition: 'USA/Canada Default',
    door: normalizeDoor('US.CO.HQ. 15. 15th Floor Executive Southeast Entrance 15.313'),
    inDirectionFloor: 'Floor 15',
    outDirectionFloor: 'Out of office' },

  // ==== USA/Canada Default (Austin, Texas overrides plus Denver wildcard) ====

  { partition: 'USA/Canada Default', door: normalizeDoor('*'), inDirectionFloor: 'Denver', outDirectionFloor: 'Out of office' },
  { partition: 'USA/Canada Default', door: normalizeDoor('AUSTIN MAIN ENTRY'), inDirectionFloor: 'Texas', outDirectionFloor: 'Out of office' },
  { partition: 'USA/Canada Default', door: normalizeDoor('AUSTIN EAST ENTRY'), inDirectionFloor: 'Texas', outDirectionFloor: 'Out of office' },
  { partition: 'USA/Canada Default', door: normalizeDoor('AUSTIN IDF ROOM DOOR'), inDirectionFloor: 'Texas', outDirectionFloor: 'Texas' },
  { partition: 'USA/Canada Default', door: normalizeDoor('AUSTIN WEST ENTRY DOOR'), inDirectionFloor: 'Texas', outDirectionFloor: 'Out of office' },

  
 { partition: 'USA/Canada Default',
  door: normalizeDoor('US.CO.HQ. 15. 15th Floor Executive South Entrance 15.312B'),
  inDirectionFloor: 'Floor 15',
  outDirectionFloor: 'Out of office' },

];

module.exports = doorMap;
module.exports.normalizeDoor = normalizeDoor;










// src/controllers/occupancy.controller.js

  const service       = require('../services/occupancy.service');
  const doorMap       = require('../utils/doorMap');
  const normalizeDoor = doorMap.normalizeDoor;
  const roles         = require('../utils/roles');
  const tzMap         = require('../utils/timezones'); // partition→IANA tz
 

  /**
   * Determine if the given PersonnelType is considered an employee.
   */
  function isEmployeeType(pt) {
    return ['Employee','Terminated Employee','Terminated Personnel'].includes(pt);
  }

  /**
   * Map (partition, door, direction) → logical floor name.
   * Tracks any unmapped doors in the provided Set.
   */
  function lookupFloor(partition, door, direction, unmapped) {
    const normPart = partition.trim().toUpperCase();
    const normDoor = normalizeDoor(door);

    // 1) exact partition+door match
    let entry = doorMap.find(d =>
      d.partition.trim().toUpperCase() === normPart &&
      d.door === normDoor
    );

    // 1b) fallback for OBS doors mapped under Default
    if (!entry && normPart === 'US.CO.OBS') {
      entry = doorMap.find(d =>
        d.partition.trim().toUpperCase() === 'USA/CANADA DEFAULT' &&
        d.door === normDoor
      );
    }

    // 2) general OBS wildcard (‘*’) under Default
    if (!entry && normPart === 'US.CO.OBS') {
      entry = doorMap.find(d =>
        d.partition.trim().toUpperCase() === 'USA/CANADA DEFAULT' &&
        d.door === '*'
      );
    }

    // 2b) heuristic: catch any “15” or “1” in the door name for OBS
    if (!entry && normPart === 'US.CO.OBS') {
      if (/\b15\b/.test(normDoor)) {
        return direction === 'InDirection' ? 'Floor 15' : 'Out of office';
      }
      if (/\b1\b/.test(normDoor)) {
        return direction === 'InDirection' ? 'Floor 01' : 'Out of office';
      }
    }

    // 3) still no mapping? record and bail
    if (!entry) {
      unmapped.add(`${partition}|${door}`);
      return null;
    }

    return direction === 'InDirection'
      ? entry.inDirectionFloor
      : entry.outDirectionFloor;
  }


/**
 * Format an ISO timestamp into the given partition’s timezone, with AM/PM.
 */
function formatInZone(isoString, partition) {
  const tz = tzMap[partition] || 'UTC';
  return new Intl.DateTimeFormat('en-US', {
    timeZone: tz,
    hour12:  true,
    year:    'numeric',
    month:   '2-digit',
    day:     '2-digit',
    hour:    'numeric',
    minute:  '2-digit',
    second:  '2-digit'
  }).format(new Date(isoString));
}


  /**
   * GET /api/occupancy/live
   */
  exports.getLiveOccupancy = async (req, res) => {
    try {
      const data = await service.fetchLiveOccupancy();
      res.json({ success:true, count:data.length, data });
    } catch (e) {
      console.error(e);
      res.status(500).json({ success:false, message:'Live occupancy fetch failed' });
    }
  };


  

/**
 * GET /api/occupancy/live
 */
exports.getLiveOccupancy = async (req, res) => {
  try {
    const data = await service.fetchLiveOccupancy();
    res.json({ success:true, count:data.length, data });
  } catch (e) {
    console.error(e);
    res.status(500).json({ success:false, message:'Live occupancy fetch failed' });
  }
};


/**
 * GET /api/occupancy/live-summary
 * Optional query param: ts=ISO timestamp (UTC, e.g. "...?ts=2025-07-15T10:30:00Z")
 */
exports.getLiveSummary = async (req, res) => {
  try {
    const { ts } = req.query;

    // ────────────────────────────
    // 1) Time-travel branch (pure UTC)
    // ────────────────────────────
    if (ts) {
      const timestamp = new Date(ts);
      if (isNaN(timestamp)) {
        return res
          .status(400)
          .json({ success:false, message:'invalid ts query param' });
      }

      // UTC date string of ts
      const dayStr = timestamp.toISOString().slice(0,10); // e.g. "2025-07-15"

      // a) fetch last 24h, narrow to that UTC date
      const raw     = await service.fetchHistoricalData({ days:1, location:null });
      const sameDay = raw.filter(r => 
        new Date(r.LocaleMessageTime).toISOString().slice(0,10) === dayStr
      );

      // b) keep only swipes ≤ ts
      const upTo = sameDay.filter(r => new Date(r.LocaleMessageTime) <= timestamp);

      // c) last swipe per person ≤ ts
      const lastByPerson = {};
      upTo.forEach(r => {
        const key = r.PersonGUID;
        const t   = new Date(r.LocaleMessageTime).getTime();
        if (!lastByPerson[key] ||
            t > new Date(lastByPerson[key].LocaleMessageTime).getTime()) {
          lastByPerson[key] = r;
        }
      });

      // d) build “today” & realtime snapshot
      const today    = { total:0, Employee:0, Contractor:0 };
      const realtime = {};
      const details  = [];
      const unmapped = new Set();

      Object.values(lastByPerson).forEach(r => {
        // count
        const isEmp = isEmployeeType(r.PersonnelType);
        today.total++;
        if (isEmp) today.Employee++; else today.Contractor++;

        // floor mapping
        const floorName = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmapped) || 'Unknown';
        if (floorName === 'Out of office') return;

        // tally realtime
        const p = r.PartitionName2;
        realtime[p] = realtime[p] || { total:0, Employee:0, Contractor:0, floors:{} };
        realtime[p].total++;
        if (isEmp) realtime[p].Employee++; else realtime[p].Contractor++;
        realtime[p].floors[floorName] = (realtime[p].floors[floorName]||0) + 1;

        // detail row (UTC)
        details.push({
          ...r,
          snapshotTime:      r.LocaleMessageTime,
          LocaleMessageTime: new Date(r.LocaleMessageTime).toISOString(),
          floor:             floorName
        });
      });

      return res.json({
        success:      true,
        timestampUtc: timestamp.toISOString(),
        today,
        realtime,
        details
      });
    }

    // ────────────────────────────
    // 2) Default live branch
    // ────────────────────────────
    const swipes = await service.fetchLiveOccupancy();

    // 2a) “today” = first swipe per person (UTC date = today)
    const first = {};
    swipes.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!first[r.PersonGUID] ||
          t < new Date(first[r.PersonGUID].LocaleMessageTime).getTime()) {
        first[r.PersonGUID] = r;
      }
    });
    const today = { total:0, Employee:0, Contractor:0 };
    Object.values(first).forEach(r => {
      today.total++;
      isEmployeeType(r.PersonnelType)
        ? today.Employee++
        : today.Contractor++;
    });

    // 2b) “realtime” = last swipe per person
    const last     = {};
    const realtime = {};
    const details  = [];
    const unmapped = new Set();

    swipes.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!last[r.PersonGUID] ||
          t > new Date(last[r.PersonGUID].LocaleMessageTime).getTime()) {
        last[r.PersonGUID] = r;
      }
    });

    Object.values(last).forEach(r => {
      // skip OUT→“Out of office”
      if (r.Direction === 'OutDirection') {
        const fl = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmapped);
        if (fl === 'Out of office') return;
      }

      // floor
      const floorName = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmapped) || 'Unknown';
      if (floorName === 'Out of office') return;

      // tally
      const p = r.PartitionName2;
      realtime[p] = realtime[p] || { total:0, Employee:0, Contractor:0, floors:{} };
      realtime[p].total++;
      isEmployeeType(r.PersonnelType)
        ? realtime[p].Employee++
        : realtime[p].Contractor++;
      realtime[p].floors[floorName] = (realtime[p].floors[floorName]||0) + 1;

      // detail
      details.push({
        ...r,
        snapshotTime:      r.LocaleMessageTime,
        LocaleMessageTime: new Date(r.LocaleMessageTime).toISOString(),
        floor:             floorName
      });
    });

    return res.json({ success:true, today, realtime, details });
  }
  catch (err) {
    console.error('live-summary error:', err);
    return res.status(500).json({ success:false, message:'Live summary failed' });
  }
};




  /**
   * GET /api/occupancy/history
   * Optional query params: start=YYYY-MM-DD, end=YYYY-MM-DD
   * Optional URL param: :location
   */
  exports.getHistoricalOccupancy = async (req, res) => {
    try {
      const { start, end } = req.query;
      const location       = req.params.location || null;

      if (start && end) {
        // --- average-over-range logic ---
        const startD = new Date(start);
        const endD   = new Date(end);
        if (isNaN(startD) || isNaN(endD) || endD < startD) {
          return res
            .status(400)
            .json({ success:false, message:'invalid start/end date range' });
        }

        // inclusive days count
        const days = Math.ceil((endD - startD)/(1000*60*60*24)) + 1;
        const raw  = await service.fetchHistoricalData({ days, location });

        // bucket unique PersonGUID per date
        const byDate = {};
        raw.forEach(r => {
          const t    = new Date(r.LocaleMessageTime);
          const date = t.toISOString().slice(0,10);
          if (date < start || date > end) return;
          byDate[date] = byDate[date] || new Set();
          byDate[date].add(r.PersonGUID);
        });

        // build breakdown & average
        const dates     = Object.keys(byDate).sort();
        const breakdown = dates.map(d => ({ date: d, count: byDate[d].size }));
        const sum       = breakdown.reduce((s,x) => s + x.count, 0);
        const average   = breakdown.length ? sum/breakdown.length : 0;

        return res.json({
          success:   true,
          start,
          end,
          average,
          breakdown
        });
      }

      // --- default history logic ---
      const raw = await service.fetchHistoricalOccupancy(location);
      const byDate = {};
      const details = [];

      raw.forEach(r => {
        const iso = (r.LocaleMessageTime instanceof Date)
          ? r.LocaleMessageTime.toISOString()
          : r.LocaleMessageTime;
        const date = iso.slice(0,10);
        byDate[date] = byDate[date] || {};
        const prev = byDate[date][r.PersonGUID];
        if (!prev || new Date(iso) < new Date(prev.LocaleMessageTime)) {
          byDate[date][r.PersonGUID] = { ...r, LocaleMessageTime: iso };
        }
      });

      const summaryByDate = Object.keys(byDate).sort().map(date => {
        const recs = Object.values(byDate[date]);
        details.push(...recs);
        const region = { total:0, Employee:0, Contractor:0 };
        const partitions = {};

        recs.forEach(r => {
          region.total++;
          isEmployeeType(r.PersonnelType) ? region.Employee++ : region.Contractor++;
          if (!location) {
            partitions[r.PartitionName2] = partitions[r.PartitionName2] || { total:0, Employee:0, Contractor:0 };
            partitions[r.PartitionName2].total++;
            isEmployeeType(r.PersonnelType)
              ? partitions[r.PartitionName2].Employee++
              : partitions[r.PartitionName2].Contractor++;
          }
        });

        return {
          date,
          day: new Date(date).toLocaleDateString('en-US',{ weekday:'long' }),
          region: location ? { name: location, ...region } : { name: 'NAMER', ...region },
          partitions: location ? undefined : partitions
        };
      });

      res.json({ success:true, summaryByDate, details });

    } catch (e) {
      console.error('history error:', e);
      res.status(500).json({ success:false, message:'Historical fetch failed' });
    }
  };

  /**
   * GET /api/occupancy/security-officers
   */
  exports.getSecurityOfficersInBuilding = async (req, res) => {
    try {
      const swipes = await service.fetchSecuritySwipes();
      const lastByOfficer = {};

      swipes.forEach(s => {
        const key = s.EmployeeID;
        if (!lastByOfficer[key] ||
            new Date(s.LocaleMessageTime) > new Date(lastByOfficer[key].LocaleMessageTime)) {
          lastByOfficer[key] = s;
        }
      });

      const present = Object.values(lastByOfficer)
        .filter(s => s.Direction === 'InDirection')
        .map(s => {
          const floor = lookupFloor(s.PartitionName2, s.Door, s.Direction, new Set()) || 'Unknown';
          return { badge: s.EmployeeID, time: s.LocaleMessageTime, floor };
        });

      res.json({ success:true, present });
    } catch (e) {
      console.error(e);
      res.status(500).json({ success:false, message:'Security officers fetch failed' });
    }
  };

  /**
   * GET /api/occupancy/visitors-by-floor
   */
  exports.getVisitorCountsByFloor = async (req, res) => {
    try {
      const raw = await service.fetchVisitorCountsByFloor();
      const unmapped = new Set();
      const floorCounts = raw.reduce((acc, { PartitionName2, Floor, visitorCount }) => {
        const floor = lookupFloor(PartitionName2, Floor, 'InDirection', unmapped) || 'Unknown';
        acc[floor] = (acc[floor]||0) + visitorCount;
        return acc;
      }, {});
      const counts = Object.entries(floorCounts)
                          .map(([floor, visitorCount]) => ({ floor, visitorCount }));
      res.json({ success:true, counts });
    } catch (e) {
      console.error(e);
      res.status(500).json({ success:false, message:'Visitor counts fetch failed' });
    }
  };

  /**
   * GET /api/occupancy/badge-rejections
   */
  exports.getBadgeRejections = async (req, res) => {
    try {
      const { liveCount, history } = await service.fetchBadgeRejectionDetails();

      // normalize history rows
      const normHistory = history.map(r => {
        const dateOnlyStr = (r.DateOnly instanceof Date)
          ? r.DateOnly.toISOString().slice(0,10)
          : String(r.DateOnly).slice(0,10);
        let swipeTimeStr;
        if (r.SwipeTime instanceof Date) {
          swipeTimeStr = r.SwipeTime.toISOString().slice(11,19);
        } else {
          const m = String(r.SwipeTime).match(/(\d{2}:\d{2}:\d{2})/);
          swipeTimeStr = m ? m[1] : String(r.SwipeTime);
        }
        return { ...r, DateOnly: dateOnlyStr, SwipeTime: swipeTimeStr, Door: r.Door };
      });

      const todayDate = new Date().toISOString().slice(0,10);
      const todayRows = normHistory.filter(r => r.DateOnly === todayDate);

      const today = {
        total:      liveCount,
        Employee:   todayRows.filter(r => r.PersonnelType === 'Employee').length,
        Contractor: todayRows.filter(r => r.PersonnelType !== 'Employee').length
      };

      const realtime = {};
      todayRows.forEach(r => {
        const loc = r.Location || 'Unknown';
        if (!realtime[loc]) realtime[loc] = { total:0, Employee:0, Contractor:0 };
        realtime[loc].total++;
        if (r.PersonnelType === 'Employee') realtime[loc].Employee++;
        else realtime[loc].Contractor++;
      });

      res.json({ success:true, today, realtime, details: normHistory });
    } catch (e) {
      console.error('Badge‐rejection fetch failed:', e);
      res.status(500).json({ success:false, message:'Badge rejections fetch failed' });
    }
  };

  /**
   * GET /api/occupancy/vendor-time/:badgeId
   */
  exports.getVendorTimeCalc = async (req, res) => {
    try {
      const { badgeId } = req.params;
      const swipes       = await service.fetchVendorSwipes({ vendorBadgeId: badgeId });
      const durations    = [];
      let inTime         = null;

      swipes.forEach(s => {
        const t = new Date(s.LocaleMessageTime);
        if (s.Direction === 'InDirection') {
          inTime = t;
        } else if (s.Direction === 'OutDirection' && inTime) {
          durations.push((t - inTime) / 3600000);
          inTime = null;
        }
      });

      res.json({ success:true, badgeId, durations });
    } catch (e) {
      console.error(e);
      res.status(500).json({ success:false, message:'Vendor time calc failed' });
    }
  };



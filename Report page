Now Check Logic for Euroc Admit Rejection 
why date and time Automatically changes 

issue is when i select 12 th August we got exact 12 th August Data but in date section it display 11th August 
and also time is diffrance 

for more infomation our EMEA 
Server are physicially in - Frankfurt  (EMEA Server)
LACA server in Costa Rica 
Namer Server Denver 
APAC Server in Pune 

so as per server we need to their city local time and date 

this is for more information 
so 
query already uses localMessageDateTime so i think we dont need to convert it ....

fix this issue carefully.

// src/pages/ReportsPage.jsx
import React, { useState } from 'react';
import {
  Box, FormControl, InputLabel, Select, OutlinedInput,
  Checkbox, ListItemText, MenuItem, Button,
  CircularProgress, Typography, TextField, Tabs, Tab, Grid, Paper, Drawer, IconButton, Divider, List, ListItem, ListItemIcon, Avatar, Collapse
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import axios from 'axios';
import ExcelJS from 'exceljs';
import * as XLSX from 'xlsx';


import MenuIcon from '@mui/icons-material/Menu';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import PlaceIcon from '@mui/icons-material/Place';
import PeopleIcon from '@mui/icons-material/People';
import DownloadIcon from '@mui/icons-material/CloudDownload';
import FilterListIcon from '@mui/icons-material/FilterList';
// Static lists
const EMPLOYEE_OPTIONS = [
  'Vainilaitis, Valdas',
  'Tomasevic, Kazimez',
  'Sesickis, Janas',
  'Valiunas, Sigitas'
];
const REGION_OPTIONS = ['apac', 'emea', 'laca', 'namer'];
const LOCATION_MAP = {
  apac: ['APAC.Default', 'CN.Beijing', 'JP.Tokyo', 'PH.Manila', 'MY.Kuala Lumpur', 'IN.Pune'],
  emea: ['AUT.Vienna', 'DU.Abu Dhabi', 'IE.Dublin', 'IT.Rome', 'LT.Vilnius', 'MA.Casablanca', 'RU.Moscow', 'UK.London', 'ES.Madrid'],
  laca: ['AR.Cordoba', 'CR.Costa Rica Partition', 'MX.Mexico City', 'PE.Lima', 'BR.Sao Paulo', 'PA.Panama City'],
  namer: ['US.NYC', 'US.Denver', 'US.Austin', 'US.Miami']
};

function formatDisplayDate(date) {
  const d = new Date(date);
  const day = d.getDate();
  const suf = day % 10 === 1 && day !== 11 ? 'st'
    : day % 10 === 2 && day !== 12 ? 'nd'
      : day % 10 === 3 && day !== 13 ? 'rd' : 'th';
  const mon = d.toLocaleString('default', { month: 'long' });
  return `${day}${suf} ${mon} ${d.getFullYear()}`;
}


export default function ReportsPage() {
  // --- state ---
  const [tab, setTab] = useState(0);

  const [region, setRegion] = useState('emea');
  const [location, setLocation] = useState('');
  const [from, setFrom] = useState(null);
  const [to, setTo] = useState(null);
  const [showFromCal, setShowFromCal] = useState(false);
  const [showToCal, setShowToCal] = useState(false);
  const [selectedEmps, setSelectedEmps] = useState([]);
  const [loading, setLoading] = useState(false);


    // helper â€” convert "YYYY-MM-DD..." (ISO) into a local midnight Date (avoids UTC shift)
  const isoDateOnlyToLocalDate = (iso) => {
    if (!iso) return null;
    const s = iso.toString().slice(0, 10);
    const [y, m, d] = s.split('-').map(n => parseInt(n, 10));
    return new Date(y, m - 1, d);
  };


  // Handle tab switch (Daily / Raw / Rejection)
  const handleTabChange = (_, v) => {
    setTab(v);
    // reset all filters
    setRegion('emea');
    setLocation('');
    setFrom(null);
    setTo(null);
    setSelectedEmps([]);
  };



  /** Time Duration Excel generator */
  const generateTimeDurationExcel = async data => {
    const wb = new ExcelJS.Workbook();
    const ws = wb.addWorksheet('Time Duration');

    // Title row
    ws.mergeCells('A1:M1');

ws.getCell('A1').value =
  `${region.toUpperCase()} Time Duration Report - ${formatDisplayDate(from)} to ${formatDisplayDate(to)}`;
      
    ws.getCell('A1').font = { bold: true, size: 14 };
    ws.getCell('A1').alignment = { horizontal: 'center' };
    // Header row
    const headers = [
      'Sr. No.', 'Employee Name', 'Employee ID', 'Personnel Type',
      'Partition', 'Text5', 'Year', 'Week', 'Date',
      'First Swipe', 'Last Swipe', 'Duration', 'Category',
      'Days Present', 'Violation Days', 'Clean Days', 'Defaulter'
    ];
    const headerRow = ws.addRow(headers);
    headerRow.font = { bold: true };
    headerRow.alignment = { horizontal: 'center', vertical: 'middle' };
    headerRow.eachCell(c => {
      c.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });

    // Columns widths
    ws.columns = [
      { key: 'sr', width: 8 },
      { key: 'name', width: 25 },
      { key: 'id', width: 15 },
      { key: 'ptype', width: 18 },
      { key: 'part', width: 15 },
      { key: 'txt5', width: 20 },
      { key: 'year', width: 8 },
      { key: 'week', width: 6 },
      { key: 'date', width: 12 },
      { key: 'first', width: 16 },
      { key: 'last', width: 16 },
      { key: 'dur', width: 10 },
      { key: 'cat', width: 12 },
      { key: 'dpw', width: 12 },
      { key: 'vdw', width: 14 },
      { key: 'cdw', width: 12 },
      { key: 'def', width: 10 }
    ];




    data.forEach((r, idx) => {
      const first = new Date(r.FirstSwipeTime);
      const last = new Date(r.LastSwipeTime);
      const date = new Date(r.ShiftedDate);
      const row = ws.addRow([
        idx + 1,
        r.ObjectName1,
        r.EmployeeID,
        r.PersonnelType,
        r.PartitionName2,
        r.text5,
        r.YearNumber,
        r.WeekNumber,
        date,
        first,
        last,
        r.DurationHHMM,
        r.TimeDiffCategory,
        r.DaysPresentInWeek,
        r.ViolationDaysInWeek,
        r.CleanDaysInWeek,
        r.Defaulter
      ]);

      // Date & time formatting
      row.getCell(9).numFmt = 'dd-mmm-yy';
      row.getCell(10).numFmt = 'h:mm:ss AM/PM';
      row.getCell(11).numFmt = 'h:mm:ss AM/PM';

      row.eachCell(c => {
        c.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
        c.alignment = { vertical: 'middle', horizontal: 'left' };
      });
    });

    ws.autoFilter = 'A2:Q2';

    const buf = await wb.xlsx.writeBuffer();
    const blob = new Blob([buf], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    });

   const filename =
  `TimeDuration_${region.toUpperCase()}_${formatDisplayDate(from)}_to_${formatDisplayDate(to)}.xlsx`;


    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
  };


  // --- Excel for Daily Access (unchanged) ---
  const generateDailyAccessExcel = async allRows => {
    const wb = new ExcelJS.Workbook();

    for (const emp of selectedEmps) {
      const ws = wb.addWorksheet(emp.substring(0, 31));
      ws.addRow([
        'Date', 'Time', 'Name', 'Contractor ID', 'Card No',
        'Door Name', 'Message Type', 'Partition', 'Swipe'
      ]);
      const hdr = ws.getRow(1);
      hdr.font = { bold: true };
      hdr.alignment = { vertical: 'middle', horizontal: 'center' };
      hdr.eachCell(c => {
        c.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
      });
      ws.columns = [
        { key: 'date', width: 12 },
        { key: 'time', width: 12 },
        { key: 'name', width: 25 },
        { key: 'id', width: 15 },
        { key: 'card', width: 15 },
        { key: 'door', width: 40 },
        { key: 'msg', width: 15 },
        { key: 'part', width: 15 },
        { key: 'swipe', width: 10 }
      ];
      const rows = allRows.filter(r => r.ObjectName1 === emp);
      if (!rows.length) {
        ws.mergeCells('A2', 'I2');
        ws.getCell('A2').value = 'There is no swipe records found in Ccure';
        ws.getCell('A2').alignment = { horizontal: 'center' };
      } else {


        rows.forEach(r => {
          const dt = new Date(r.LocaleMessageTime);
          const row = ws.addRow([
            dt, dt,
            r.ObjectName1,
            r.EmployeeID,
            r.CardNumber,
            r.Door || r.ObjectName2 || '',
            r.AdmitCode || r.Messagetype || '',
            r.location,
            r.Swipe || r.Direction || ''
          ]);
          row.getCell(1).numFmt = 'dd-mmm-yy';
          row.getCell(2).numFmt = 'h:mm:ss AM/PM';


          row.eachCell(c => {
            c.border = {
              top: { style: 'thin' }, left: { style: 'thin' },
              bottom: { style: 'thin' }, right: { style: 'thin' }
            };
            c.alignment = { vertical: 'middle', horizontal: 'left' };
          });
        });
      }
      ws.autoFilter = 'A1:I1';
    }

    const buf = await wb.xlsx.writeBuffer();
    const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    const filename = `Daily Access Report(${formatDisplayDate(from)} to ${formatDisplayDate(to)}).xlsx`;
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
  };





  // --- Excel for Rejection (unchanged except UTC->local fix) ---
  const generateRejectionExcel = async data => {
    const wb = new ExcelJS.Workbook();
    const ws = wb.addWorksheet('Rejection');

    // Title
    const title = `${region.toUpperCase()} Rejection Report - ${formatDisplayDate(from)}`;
    ws.mergeCells('A1:J1');
    ws.getCell('A1').value = title;
    ws.getCell('A1').font = { bold: true, size: 14 };
    ws.getCell('A1').alignment = { horizontal: 'center' };

    // Header
    const headers = [
      'Sr. No.', 'Date', 'Time', 'Employee Name', 'Employee ID',
      'Access Card No.', 'Rejection Type', 'Door Name', 'Location', 'Swipe'
    ];
    const headerRow = ws.addRow(headers);
    headerRow.font = { bold: true };
    headerRow.alignment = { vertical: 'middle', horizontal: 'center' };
    headerRow.eachCell(c => {
      c.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });

    // Columns
    ws.columns = [
      { key: 'sr', width: 8 },
      { key: 'date', width: 12 },
      { key: 'time', width: 12 },
      { key: 'name', width: 25 },
      { key: 'id', width: 15 },
      { key: 'card', width: 15 },
      { key: 'type', width: 15 },
      { key: 'door', width: 40 },
      { key: 'loc', width: 15 },
      { key: 'swipe', width: 10 }
    ];

    // Data


    data.forEach((r, idx) => {
  // ensure DateOnly becomes a local Date (avoid new Date('YYYY-MM-DD') UTC parsing)
  const localDate = r.DateOnly ? isoDateOnlyToLocalDate(r.DateOnly) : new Date(r.LocaleMessageTime);

  // Build time: if Swipe_Time exists (often an ISO of time), extract time values then put into local date
  let timeDt;
  if (r.Swipe_Time) {
    const tObj = new Date(r.Swipe_Time);
    // Use local getters to avoid shifting the local date unexpectedly
    timeDt = new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(),
                      tObj.getHours(), tObj.getMinutes(), tObj.getSeconds());
  } else {
    timeDt = new Date(r.LocaleMessageTime);
  }

  const row = ws.addRow([
    idx + 1, localDate, timeDt,
    r.ObjectName1 || '0',
    r.EmployeeID || '0',
    r.CardNumber || '0',
    r.Rejection_Type || '',
    r.Door || r.ObjectName2 || '',
    r.location || '',
    r.Direction || r.Swipe || ''
  ]);
  row.getCell(2).numFmt = 'dd-mmm-yy';
  row.getCell(3).numFmt = 'h:mm:ss AM/PM';
      
      row.eachCell(c => {
        c.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
        c.alignment = { vertical: 'middle', horizontal: 'left' };
      });
    });

    // Summary
    const counts = data.reduce((a, r) => {
      const k = r.Rejection_Type || 'Unknown';
      a[k] = (a[k] || 0) + 1; return a;
    }, {});
    let rowIdx = 3;
    ws.getCell(rowIdx, 11).value = 'Rejection';
    ws.getCell(rowIdx, 12).value = 'Count';
    [11, 12].forEach(c => {
      const cell = ws.getCell(rowIdx, c);
      cell.font = { bold: true };
      cell.alignment = { horizontal: 'center' };
      cell.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });
    rowIdx++;
    Object.entries(counts).forEach(([type, cnt]) => {
      ws.getCell(rowIdx, 11).value = type;
      ws.getCell(rowIdx, 12).value = cnt;
      [11, 12].forEach(c => {
        const cell = ws.getCell(rowIdx, c);
        cell.alignment = { horizontal: 'left' };
        cell.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
      });
      rowIdx++;
    });
    // Total
    ws.getCell(rowIdx, 11).value = 'Total';
    ws.getCell(rowIdx, 12).value = data.length;
    [11, 12].forEach(c => {
      const cell = ws.getCell(rowIdx, c);
      cell.font = { bold: true };
      cell.alignment = { horizontal: 'left' };
      cell.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });

    // Download
    const buf = await wb.xlsx.writeBuffer();
    const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    const filename = `${region.toUpperCase()} Rejection Report - ${formatDisplayDate(from)}.xlsx`;
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
  };



  const [rawSearch, setRawSearch] = useState(''); // search string for Raw report (name or id)
  const [rawAdmitFilter, setRawAdmitFilter] = useState('all'); // 'all' | 'admit' | 'reject'



  
const handleGenerate = async () => {
  setLoading(true);
  try {
    const baseParams = { region, location: location || undefined };

    // Helper: format dates in local time without timezone conversion for API parameters
    const formatLocalDate = (date, endOfDay = false) => {
      const d = new Date(date);
      if (endOfDay) d.setHours(23, 59, 59, 999);
      else d.setHours(0, 0, 0, 0);
      const pad = n => n.toString().padStart(2, '0');
      return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}` +
             `T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    };

    // Helper: convert ISO date-only string (YYYY-MM-DD...) into a local midnight Date (avoids UTC shift)
    const isoDateOnlyToLocalDate = (iso) => {
      if (!iso) return null;
      const s = iso.toString().slice(0, 10); // YYYY-MM-DD
      const [y, m, d] = s.split('-').map(n => parseInt(n, 10));
      return new Date(y, m - 1, d);
    };

    const pad2 = n => n.toString().padStart(2, '0');
    const toLocalYMD = date => `${date.getFullYear()}-${pad2(date.getMonth()+1)}-${pad2(date.getDate())}`;

    // ----- 0: Daily Access -----
    if (tab === 0) {
      const params = {
        ...baseParams,
        from: formatLocalDate(from),
        to: formatLocalDate(to, true),
        employees: selectedEmps.join(',')
      };
      const resp = await axios.get('/api/reports/daily-access', { params });

      const startDate = new Date(from); startDate.setHours(8, 0, 0, 0);
      const endDate = new Date(to); endDate.setHours(8, 0, 0, 0);

      const rows = (resp.data && resp.data.data) || [];
      const filtered = rows.filter(r => {
        const dt = new Date(r.LocaleMessageTime);
        return dt >= startDate && dt < endDate;
      });

      await generateDailyAccessExcel(filtered);
      return;
    }

    // ----- 1: Raw -----
    if (tab === 1) {
      const params = { ...baseParams, startDate: formatLocalDate(from), endDate: formatLocalDate(to, true) };
      const resp = await axios.get('/api/reports/raw', { params });

      const startDate = new Date(from); startDate.setHours(0, 0, 0, 0);
      const endDate = new Date(to); endDate.setHours(23, 59, 59, 999);

      const rowsSrc = (resp.data && resp.data.data) || [];
      const rows = rowsSrc.filter(r => {
        const date = r.DateOnly ? isoDateOnlyToLocalDate(r.DateOnly) : new Date(r.LocaleMessageTime);
        return date >= startDate && date <= endDate;
      });

      let filtered = rows;
      if (rawSearch && rawSearch.trim() !== '') {
        const s = rawSearch.trim().toLowerCase();
        filtered = rows.filter(r => {
          const id = r.EmployeeID ? String(r.EmployeeID).toLowerCase() : '';
          const name = r.ObjectName1 ? String(r.ObjectName1).toLowerCase() : '';
          return id.includes(s) || name.includes(s);
        });
      }

      const ws = XLSX.utils.json_to_sheet(filtered);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Raw');

      const fileStart = startDate.toISOString().slice(0, 10);
      const fileEnd = endDate.toISOString().slice(0, 10);
      const filename = `RawReport_${region}_${fileStart}_to_${fileEnd}.xlsx`;
      XLSX.writeFile(wb, filename);
      return;
    }

    // ----- 2: Rejection -----
    if (tab === 2) {
      const params = { ...baseParams, startDate: formatLocalDate(from), endDate: formatLocalDate(to, true) };
      const resp = await axios.get('/api/reports/rejection', { params });

      const startDate = new Date(from); startDate.setHours(0, 0, 0, 0);
      const endDate = new Date(to); endDate.setHours(23, 59, 59, 999);

      const rowsSrc = (resp.data && resp.data.data) || [];
      const rows = rowsSrc.filter(r => {
        const date = r.DateOnly ? isoDateOnlyToLocalDate(r.DateOnly) : new Date(r.LocaleMessageTime);
        return date >= startDate && date <= endDate;
      });

      await generateRejectionExcel(rows);
      return;
    }

    // ----- 3: EUROC Admit-Reject (single day) -----
    if (tab === 3) {
      if (region.toLowerCase() !== 'emea') {
        alert('EUROC report is only available for region EMEA. Please select EMEA.');
        return;
      }
      if (!from) {
        alert('Please select a date (From) for EUROC report.');
        return;
      }

      const dateParam = toLocalYMD(new Date(from));
      const params = { region: 'emea', date: dateParam };
      const resp = await axios.get('/api/reports/euroc-admit-rejection', { params });
      const { data } = resp.data || {}; // { admit: [], rejection: [], summary: [] }

      const wb = new ExcelJS.Workbook();

      // Admit sheet
      const admitTitle = `EUROC Admit Report - ${formatDisplayDate(from)}`;
      const ws1 = wb.addWorksheet('EUROC Admit');
      ws1.mergeCells('A1:I1');
      ws1.getCell('A1').value = admitTitle;
      ws1.getCell('A1').font = { bold: true, size: 14 };
      ws1.getCell('A1').alignment = { horizontal: 'center' };

      const admitHeaders = [
        'Sr. No.', 'Date', 'Time', 'Employee Name',
        'Access Card No.', 'Personnel Type', 'Door Name', 'Location', 'Swipe'
      ];
      const hdrRow1 = ws1.addRow(admitHeaders);
      hdrRow1.font = { bold: true };
      hdrRow1.alignment = { vertical: 'middle', horizontal: 'center' };
      hdrRow1.eachCell(c => {
        c.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
      });

      ws1.columns = [
        { key:'sr', width:8 }, { key:'date', width:12 }, { key:'time', width:12 },
        { key:'name', width:30 }, { key:'card', width:15 }, { key:'ptype', width:20 },
        { key:'door', width:50 }, { key:'loc', width:18 }, { key:'swipe', width:8 }
      ];

      (data.admit || []).forEach((r, idx) => {
        // prefer LocaleMessageTime if present
        let fullDt = r.LocaleMessageTime ? new Date(r.LocaleMessageTime) : null;

        if (!fullDt && r.DateOnly) {
          if (r.Swipe_Time) {
            // Get time components from Swipe_Time â€” use local getters to avoid day shifts
            const tobj = new Date(r.Swipe_Time);
            const hh = tobj.getHours(), mm = tobj.getMinutes(), ss = tobj.getSeconds();
            const dateStr = r.DateOnly.slice(0, 10); // YYYY-MM-DD
            const [yy, mm2, dd] = dateStr.split('-').map(n => parseInt(n, 10));
            fullDt = new Date(yy, mm2 - 1, dd, hh, mm, ss); // explicit local datetime
          } else {
            fullDt = isoDateOnlyToLocalDate(r.DateOnly);
          }
        }

        const dateCell = fullDt ? new Date(fullDt.getFullYear(), fullDt.getMonth(), fullDt.getDate()) : '';
        const timeCell = fullDt || '';

        const row = ws1.addRow([
          idx + 1, dateCell, timeCell,
          r.ObjectName1 || '',
          r.CardNumber || '',
          r.PersonnelType || '',
          r.Door || r.ObjectName2 || '',
          r.location || '',
          r.Direction || ''
        ]);
        row.getCell(2).numFmt = 'dd-mmm-yy';
        row.getCell(3).numFmt = 'h:mm:ss AM/PM';
        row.eachCell(c => {
          c.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
          c.alignment = { vertical: 'middle', horizontal: 'left' };
        });
      });

      // Rejection sheet
      const ws2 = wb.addWorksheet('EUROC Rejection');
      ws2.mergeCells('A1:J1');
      ws2.getCell('A1').value = `EUROC Rejection Report - ${formatDisplayDate(from)}`;
      ws2.getCell('A1').font = { bold: true, size: 14 };
      ws2.getCell('A1').alignment = { horizontal: 'center' };

      const headerRow2 = ws2.addRow(['Sr. No.', 'Date', 'Time', 'Employee Name', 'Access Card No.', 'Rejection Type', 'Door Name', 'Location', 'Swipe']);
      headerRow2.font = { bold: true };
      headerRow2.alignment = { vertical: 'middle', horizontal: 'center' };
      headerRow2.eachCell(c => {
        c.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
      });

      ws2.columns = [
        { key:'sr', width:8 }, { key:'date', width:12 }, { key:'time', width:12 },
        { key:'name', width:30 }, { key:'card', width:15 }, { key:'type', width:15 },
        { key:'door', width:50 }, { key:'loc', width:18 }, { key:'swipe', width:8 }
      ];

      (data.rejection || []).forEach((r, idx) => {
        let fullDt = r.LocaleMessageTime ? new Date(r.LocaleMessageTime) : null;

        if (!fullDt && r.DateOnly) {
          if (r.Swipe_Time) {
            const tobj = new Date(r.Swipe_Time);
            // use local getters to avoid timezone-induced day shifts
            const hh = tobj.getHours(), mm = tobj.getMinutes(), ss = tobj.getSeconds();
            const dateStr = r.DateOnly.slice(0, 10);
            const [yy, mm2, dd] = dateStr.split('-').map(n => parseInt(n, 10));
            fullDt = new Date(yy, mm2 - 1, dd, hh, mm, ss);
          } else {
            fullDt = isoDateOnlyToLocalDate(r.DateOnly);
          }
        }

        const dateCell = fullDt ? new Date(fullDt.getFullYear(), fullDt.getMonth(), fullDt.getDate()) : '';
        const timeCell = fullDt || '';

        const row = ws2.addRow([
          idx + 1, dateCell, timeCell,
          r.ObjectName1 || '',
          r.CardNumber || '',
          r.Rejection_Type || '',
          r.Door || '',
          r.location || '',
          r.Direction || ''
        ]);
        row.getCell(2).numFmt = 'dd-mmm-yy';
        row.getCell(3).numFmt = 'h:mm:ss AM/PM';
        row.eachCell(c => {
          c.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
          c.alignment = { vertical: 'middle', horizontal: 'left' };
        });
      });

      // Summary block (same as before)
      const counts = data.summary || [];
      let startRow = 3;
      ws2.getCell(startRow, 11).value = 'Rejection';
      ws2.getCell(startRow, 12).value = 'Count';
      [11, 12].forEach(col => {
        const cell = ws2.getCell(startRow, col);
        cell.font = { bold: true };
        cell.alignment = { horizontal: 'center' };
        cell.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
      });
      startRow++;
      counts.forEach(c => {
        ws2.getCell(startRow, 11).value = c.Rejection_Type || 'Unknown';
        ws2.getCell(startRow, 12).value = c.Count || 0;
        [11, 12].forEach(col => {
          const cell = ws2.getCell(startRow, col);
          cell.alignment = { horizontal: 'left' };
          cell.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
        });
        startRow++;
      });
      ws2.getCell(startRow, 11).value = 'Grand Total';
      ws2.getCell(startRow, 12).value = (data.rejection || []).length;
      [11, 12].forEach(col => {
        const cell = ws2.getCell(startRow, col);
        cell.font = { bold: true };
        cell.alignment = { horizontal: 'left' };
        cell.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
      });

      // Download workbook
      const buf = await wb.xlsx.writeBuffer();
      const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const filename = `EUROC_Admit_Rejection_${dateParam}.xlsx`;
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = filename;
      link.click();
      return;
    }


    // ----- 4: Time Duration -----
if (tab === 4) {
  // require both start & end strictly
  if (!from || !to) {
    alert('Please select both Start Date and End Date for Time Duration report.');
    return;
  }
  const startParam = toLocalYMD(new Date(from));
  const endParam = toLocalYMD(new Date(to));
  const params = {
    region,
    startDate: startParam,
    endDate: endParam,
    partition: location ? location.split('.').pop() : 'Default'
  };
  const resp = await axios.get('/api/reports/time-duration', { params });
  await generateTimeDurationExcel(resp.data.data || []);
  return;
}




    // ----- 5: HeadCount / External navigation -----
    if (tab === 5) {
      let url = '';

      if (region === 'laca') {
        if (!location) url = 'http://10.199.22.57:3003/history';
        else {
          const LACA_URLS = {
            'CR.Costa Rica Partition': 'http://10.199.22.57:3003/partition/CR.Costa%20Rica%20Partition/history',
            'MX.Mexico City': 'http://10.199.22.57:3003/partition/MX.Mexico%20City/history',
            'AR.Cordoba': 'http://10.199.22.57:3003/partition/AR.Cordoba/history',
            'PA.Panama City': 'http://10.199.22.57:3003/partition/PA.Panama%20City/history',
            'PE.Lima': 'http://10.199.22.57:3003/partition/PE.Lima/history',
            'BR.Sao Paulo': 'http://10.199.22.57:3003/partition/BR.Sao%20Paulo/history'
          };
          url = LACA_URLS[location] || 'http://10.199.22.57:3003/history';
        }
      } else if (region === 'namer') {
        if (!location) url = 'http://10.199.22.57:3002/history';
        else {
          const NAMER_URLS = {
            'US.Denver': 'http://10.199.22.57:3002/partition/US.CO.OBS/history',
            'US.Miami': 'http://10.199.22.57:3002/partition/US.FL.Miami/history',
            'US.NYC': 'http://10.199.22.57:3002/partition/US.NYC/history',
            'US.Austin': 'http://10.199.22.57:3002/partition/USA%2FCanada%20Default/history'
          };
          url = NAMER_URLS[location] || 'http://10.199.22.57:3002/history';
        }
      } else if (region === 'apac') {
        if (!location) url = 'http://10.199.22.57:3000/history';
        else {
          const APAC_URLS = {
            'IN.Pune': 'http://10.199.22.57:3000/partition/Pune/history',
            'MY.Kuala Lumpur': 'http://10.199.22.57:3000/partition/MY.Kuala Lumpur/history',
            'PH.Manila': 'http://10.199.22.57:3000/partition/PH.Manila/history',
            'JP.Tokyo': 'http://10.199.22.57:3000/history',
            'CN.Beijing': 'http://10.199.22.57:3000/history',
            'APAC.Default': 'http://10.199.22.57:3000/history'
          };
          url = APAC_URLS[location] || 'http://10.199.22.57:3000/history';
        }
      } else if (region === 'emea') {
        if (!location) url = 'http://10.199.22.57:3001/history';
        else {
          const EMEA_URLS = {
            'AUT.Vienna': 'http://10.199.22.57:3001/history',
            'DU.Abu Dhabi': 'http://10.199.22.57:3001/history',
            'IE.Dublin': 'http://10.199.22.57:3001/history',
            'IT.Rome': 'http://10.199.22.57:3001/history',
            'LT.Vilnius': 'http://10.199.22.57:3001/history',
            'MA.Casablanca': 'http://10.199.22.57:3001/history',
            'RU.Moscow': 'http://10.199.22.57:3001/history',
            'UK.London': 'http://10.199.22.57:3001/history',
            'ES.Madrid': 'http://10.199.22.57:3001/history'
          };
          url = EMEA_URLS[location] || 'http://10.199.22.57:3001/history';
        }
      }

      if (url) window.location.href = url;
      else alert('Invalid region or location selected.');
      return;
    }

  } catch (err) {
    console.error(err);
    alert('Failed to generate report');
  } finally {
    setLoading(false);
  }
};





const disabled = loading
  || !region
  || (tab === 0 && (!from || !to || selectedEmps.length === 0)) // Daily Access
  || (tab === 1 && (!from || !to)) // Raw
  || (tab === 2 && (!from || !to)) // Rejection - require date range
  || (tab === 3 && !from) // EUROC (single day)
  || (tab === 4 && (!from || !to));


  // helper variable to keep navigation special-case consistent
  const navDisabled = !region || loading;


  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Box sx={{ minHeight: '100vh', background: 'linear-gradient(180deg,#070707 0%, #111 100%)', color: '#fff' }}>
        {/* Topbar / Header */}
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2,
            px: 3,
            py: 2,
            borderBottom: '1px solid rgba(255,204,0,0.08)',
            background: 'linear-gradient(90deg, rgba(20,20,20,0.7), rgba(0,0,0,0.4))'
          }}
        >
          <Avatar sx={{ bgcolor: '#000', border: '3px solid #FFCC00', width: 56, height: 56 }}>
            <Typography sx={{ color: '#FFCC00', fontWeight: 900 }}>WU</Typography>
          </Avatar>

          <Box sx={{ flex: 1 }}>
            <Typography variant="h5" sx={{ fontWeight: 900, letterSpacing: 0.6 }}>
              Global Security Operation Center
            </Typography>
            <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              Reports & Exports â€” Secure access, fast insights
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>



<Button
  startIcon={<DownloadIcon />}
  onClick={handleGenerate}
  // navigation special-case should be tab === 5 (HeadCount)
  disabled={tab === 5 ? navDisabled : disabled}
  sx={{
    bgcolor: '#FFCC00',
    color: '#000',
    fontWeight: 800,
    px: 3,
    py: 1,
    borderRadius: 3,
    boxShadow: '0 6px 22px rgba(255,204,0,0.18)',
    transformOrigin: 'center',
    '&:hover': { bgcolor: '#ffd84d', transform: 'translateY(-2px)' }
  }}
>
  {loading ? 'Loadingâ€¦'
           : (tab === 5 ? (location ? `Navigate ${location.split('.').pop()}` : `Navigate ${region.toUpperCase()}`) : 'Export to Excel')}
</Button>
            
          </Box>
        </Box>

        {/* Main content: Sidebar + Content */}
        <Grid container sx={{ px: 3, py: 4 }} spacing={3}>
          {/* Sidebar */}
          <Grid item xs={12} md={3}>
            <Paper
              elevation={8}
              sx={{
                p: 2.5,
                borderRadius: 3,
                height: { xs: 'auto', md: 'calc(100vh - 150px)' },
                overflow: 'auto',
                background: 'linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.015))',
                border: '1px solid rgba(255,204,0,0.06)'
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                <Box>
                  <Typography variant="subtitle1" sx={{ fontWeight: 800, color: '#FFCC00' }}>Filters</Typography>
                  <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                    Narrow down by region, date and employees
                  </Typography>
                </Box>
                <IconButton size="small" sx={{ color: '#FFCC00' }}>
                  <FilterListIcon />
                </IconButton>
              </Box>

              <Divider sx={{ my: 1, borderColor: 'rgba(255,204,0,0.06)' }} />

              {/* Region */}
              <Box sx={{ mt: 1 }}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#FFCC00' }}>Region</InputLabel>
                  <Select
                    value={region}
                    onChange={e => { setRegion(e.target.value); setLocation(''); }}
                    input={<OutlinedInput label="Region" />}
                    sx={{
                      color: '#fff',
                      '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.24)' }
                    }}
                  >
                    {REGION_OPTIONS.map(r => <MenuItem key={r} value={r}>{r.toUpperCase()}</MenuItem>)}
                  </Select>
                </FormControl>
              </Box>

              {/* Location */}
              <Box sx={{ mt: 2 }}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#FFCC00' }}>Location</InputLabel>
                  <Select
                    value={location}
                    onChange={e => setLocation(e.target.value)}
                    input={<OutlinedInput label="Location" />}
                    disabled={!region}
                    sx={{
                      color: '#fff',
                      '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.12)' }
                    }}
                  >
                    {(LOCATION_MAP[region] || []).map(loc => <MenuItem key={loc} value={loc}>{loc.split('.').pop()}</MenuItem>)}
                  </Select>
                </FormControl>
              </Box>

              <Divider sx={{ my: 2, borderColor: 'rgba(255,204,0,0.04)' }} />

              {/* Employee search (only for Raw tab) */}
              {tab === 1 && (
                <Box sx={{ mt: 2 }}>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                    Employee (name or ID)
                  </Typography>
                  <TextField
                    fullWidth
                    placeholder="Type employee name or ID (e.g. 'Jejurkar' or '323471')"
                    label="Search Employee"
                    value={rawSearch}
                    onChange={(e) => setRawSearch(e.target.value)}
                    sx={{
                      '& .MuiInputBase-input': { color: '#fff' },
                      '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                    }}
                    InputLabelProps={{ style: { color: '#FFCC00' } }}
                  />
                  <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.55)', mt: 1, display: 'block' }}>
                    Leave empty to export all raw rows for the date range.
                  </Typography>
                </Box>
              )}



              {/* Dates */}
              {tab !== 5 && (
                <Box>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                    Date Range
                  </Typography>
                  <Box sx={{ display: 'grid', gap: 1.25 }}>
                    <TextField
                      label={tab === 0 ? 'From Date' : 'Start Date'}
                      value={from ? from.toLocaleDateString() : ''}
                      readOnly
                      onClick={() => setShowFromCal(true)}
                      sx={{
                        '& .MuiInputBase-input': { color: '#fff' },
                        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                      }}
                    />
                    <TextField
                      label={tab === 0 ? 'To Date' : 'End Date'}
                      value={to ? to.toLocaleDateString() : ''}
                      readOnly
                      onClick={() => setShowToCal(true)}
                      sx={{
                        '& .MuiInputBase-input': { color: '#fff' },
                        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                      }}
                    />
                  </Box>

                  {/* Static pickers (keeps your existing state handlers) */}
                  {showFromCal && (
                    <Box sx={{ mt: 1 }}>
                      <StaticDatePicker
                        displayStaticWrapperAs="desktop"
                        value={from}
                        onChange={(newValue) => setFrom(newValue)}
                        onAccept={() => setShowFromCal(false)}
                        onClose={() => setShowFromCal(false)}
                        renderInput={(params) => <TextField {...params} />}
                        views={['year', 'month', 'day']}
                      />
                    </Box>
                  )}
                  {showToCal && (
                    <Box sx={{ mt: 1 }}>
                      <StaticDatePicker
                        displayStaticWrapperAs="desktop"
                        value={to}
                        onChange={(newValue) => setTo(newValue)}
                        onAccept={() => setShowToCal(false)}
                        onClose={() => setShowToCal(false)}
                        renderInput={(params) => <TextField {...params} />}
                        views={['year', 'month', 'day']}
                      />
                    </Box>
                  )}
                </Box>
              )}

              <Divider sx={{ my: 2, borderColor: 'rgba(255,204,0,0.04)' }} />

              {/* Employees (only Daily) */}
              {tab === 0 && (
                <Box>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                    Employees
                  </Typography>
                  <FormControl fullWidth>
                    <InputLabel sx={{ color: '#FFCC00' }}>Employees</InputLabel>
                    <Select
                      multiple
                      value={selectedEmps}
                      onChange={e => setSelectedEmps(e.target.value)}
                      input={<OutlinedInput label="Employees" />}
                      renderValue={vals => vals.join(', ')}
                      sx={{
                        color: '#fff',
                        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.06)' }
                      }}
                    >
                      {EMPLOYEE_OPTIONS.map(n => (
                        <MenuItem key={n} value={n}>
                          <Checkbox checked={selectedEmps.includes(n)} />
                          <ListItemText primary={n} />
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Box>
              )}

              {/* Helpful hint */}
              <Box sx={{ mt: 3, p: 2, borderRadius: 2, background: 'rgba(255,255,255,0.02)' }}>
                <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
                  Tip: For daily exports pick employees & a single day range. For Time Duration choose the required partition via Location.
                </Typography>
              </Box>
            </Paper>
          </Grid>

          {/* Main panel */}
          <Grid item xs={12} md={9}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              {/* Tabs (visual only) */}
              <Paper
                elevation={3}
                sx={{
                  px: 2,
                  py: 1,
                  borderRadius: 2,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  gap: 2,
                  border: '1px solid rgba(255,204,0,0.04)'
                }}
              >
                <Tabs
                  value={tab}
                  onChange={handleTabChange}
                  sx={{
                    '& .MuiTab-root': {
                      textTransform: 'none',
                      minWidth: 120,
                      fontWeight: 700,
                      color: 'rgba(255,255,255,0.8)'
                    },
                    '& .Mui-selected': { color: '#FFCC00' }
                  }}
                >
                  <Tab icon={<CalendarTodayIcon />} label="Daily Access" />
                  <Tab icon={<PeopleIcon />} label="Raw" />
                  <Tab icon={<PlaceIcon />} label="Rejection" />
                  <Tab icon={<PeopleIcon />} label="EUROC Admit-Reject" />

                  <Tab icon={<CalendarTodayIcon />} label="Time Duration" />
                  <Tab icon={<PeopleIcon />} label="HeadCount" />

                </Tabs>

                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                  <Button
                    variant="text"
                    startIcon={<FilterListIcon />}
                    sx={{ color: 'rgba(255,255,255,0.65)', textTransform: 'none' }}
                    onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
                  >
                    Reset View
                  </Button>
                </Box>
              </Paper>

              {/* Action summary + CTA */}
              <Paper elevation={6} sx={{ p: 3, borderRadius: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 2 }}>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 900 }}>Export Center</Typography>
                  <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.7)' }}>
                    Selected Region: <strong style={{ color: '#FFCC00' }}>{region.toUpperCase()}</strong> {location ? `â€¢ ${location.split('.').pop()}` : ''}
                  </Typography>
                  <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                    Choose tab, select filters and export reports in Excel.
                  </Typography>
                </Box>

                <Box>


<Button
  startIcon={loading ? <CircularProgress size={20} /> : <DownloadIcon />}
  disabled={tab === 5 ? navDisabled : disabled}
  onClick={handleGenerate}



                    sx={{
                      bgcolor: '#FFCC00',
                      color: '#000',
                      fontWeight: 900,
                      px: 4,
                      py: 1,
                      borderRadius: 3,
                      boxShadow: '0 8px 30px rgba(255,204,0,0.22)',
                      '&:hover': { bgcolor: '#ffd84d', transform: 'translateY(-3px)' }
                    }}
                  >

                     {loading
    ? 'Loadingâ€¦'
    : (tab === 5
        ? (location ? `Navigate ${location.split('.').pop()}` : `Navigate ${region.toUpperCase()}`)
        : 'Export to Excel')}
</Button>

                </Box>
              </Paper>

            </Box>
          </Grid>

        </Grid>
      </Box>
    </LocalizationProvider>
  );

}



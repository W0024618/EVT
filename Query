-- Admitted swipes: CardAdmitted
SET NOCOUNT ON;
GO

DECLARE @StartDate DATE = '2025-09-01';      -- report start (1 Sep 2025)
DECLARE @EndDate   DATE = CONVERT(DATE, GETDATE());  -- report end = today

-- ---------- List of databases (add all 21 ACVSUJournal_* DBs here) ----------
DECLARE @DBList TABLE (db SYSNAME);
INSERT INTO @DBList (db) VALUES
 ('ACVSUJournal_00010021');  -- add remaining DB names, one row per DB

-- ---------- temporary table to collect all rows ----------
IF OBJECT_ID('tempdb..#AllAdmittedSwipes') IS NOT NULL DROP TABLE #AllAdmittedSwipes;
CREATE TABLE #AllAdmittedSwipes (
    SourceDB SYSNAME,
    LocaleMessageTime DATETIME2,
    DateOnly DATE,
    EmployeeName NVARCHAR(255),
    EmployeeID NVARCHAR(200),
    PersonnelTypeName NVARCHAR(255),
    DoorName NVARCHAR(255),
    PartitionName2 NVARCHAR(255),
    LogicalLocation NVARCHAR(255),
    MessageType NVARCHAR(100),
    SwipeCardObjectID NVARCHAR(200),
    SwipeCardNumber NVARCHAR(200),
    Profile_Disabled BIT,
    Active_Card_Numbers NVARCHAR(MAX),
    Deactive_Card_Numbers NVARCHAR(MAX)
);

-- ---------- build and run dynamic SQL to pull from each DB ----------
DECLARE @sql NVARCHAR(MAX) = N'';
DECLARE @db SYSNAME;

DECLARE db_cursor CURSOR FAST_FORWARD FOR
    SELECT db FROM @DBList;
OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = @sql + N'
    INSERT INTO #AllAdmittedSwipes (
        SourceDB, LocaleMessageTime, DateOnly, EmployeeName, EmployeeID, PersonnelTypeName,
        DoorName, PartitionName2, LogicalLocation, MessageType, SwipeCardObjectID, SwipeCardNumber,
        Profile_Disabled, Active_Card_Numbers, Deactive_Card_Numbers
    )
    SELECT
        N' + QUOTENAME(@db,'''') + N' AS SourceDB,
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) AS DateOnly,
        t1.[ObjectName1] AS EmployeeName,
        CASE WHEN t2.[Int1] IS NULL OR t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR(200)) END AS EmployeeID,
        t3.[Name] AS PersonnelTypeName,
        t1.[ObjectName2] AS DoorName,
        t1.[PartitionName2],
        CASE
            WHEN t1.[ObjectName2] LIKE ''%HQ%'' THEN ''Denver''
            WHEN t1.[ObjectName2] LIKE ''%Austin%'' THEN ''Austin''
            WHEN t1.[ObjectName2] LIKE ''%Miami%'' THEN ''Miami''
            WHEN t1.[ObjectName2] LIKE ''%NYC%'' THEN ''New York''
            WHEN t1.[ObjectName2] LIKE ''APAC_PI%'' THEN ''Taguig City''
            WHEN t1.[ObjectName2] LIKE ''APAC_PH%'' THEN ''Quezon City''
            WHEN t1.[ObjectName2] LIKE ''%PUN%'' THEN ''Pune''
            WHEN t1.[ObjectName2] LIKE ''%HYD%'' THEN ''Hyderabad''
            ELSE t1.[PartitionName2]
        END AS LogicalLocation,
        t1.[MessageType],
        CAST(t1.ObjectIdentity2 AS NVARCHAR(200)) AS SwipeCardObjectID,
        COALESCE(ac.CardNumber, CAST(t1.ObjectIdentity2 AS NVARCHAR(200))) AS SwipeCardNumber,
        t2.Disabled AS Profile_Disabled,
        -- Active card numbers (concatenate)
        ISNULL(
          STUFF((
            SELECT ', ' + COALESCE(CAST(ac2.CardNumber AS NVARCHAR(100)), CAST(ac2.ObjectID AS NVARCHAR(100)))
            FROM ACVSCore.Access.Credential ac2
            WHERE ac2.Name = t2.Name
              AND (
                (ac2.ExpirationDateTime IS NULL OR ac2.ExpirationDateTime >= GETDATE())
                AND (ac2.Disabled IS NULL OR ac2.Disabled = 0)
                AND (ac2.Lost IS NULL OR ac2.Lost = 0)
                AND (ac2.Stolen IS NULL OR ac2.Stolen = 0)
              )
            FOR XML PATH(''''), TYPE
          ).value(''.'', ''NVARCHAR(MAX)''), 1, 2, ''), '''') AS Active_Card_Numbers,
        -- Deactive card numbers
        ISNULL(
          STUFF((
            SELECT ', ' + COALESCE(CAST(ac3.CardNumber AS NVARCHAR(100)), CAST(ac3.ObjectID AS NVARCHAR(100)))
            FROM ACVSCore.Access.Credential ac3
            WHERE ac3.Name = t2.Name
              AND NOT (
                (ac3.ExpirationDateTime IS NULL OR ac3.ExpirationDateTime >= GETDATE())
                AND (ac3.Disabled IS NULL OR ac3.Disabled = 0)
                AND (ac3.Lost IS NULL OR ac3.Lost = 0)
                AND (ac3.Stolen IS NULL OR ac3.Stolen = 0)
              )
            FOR XML PATH(''''), TYPE
          ).value(''.'', ''NVARCHAR(MAX)''), 1, 2, ''), '''') AS Deactive_Card_Numbers
    FROM ' + QUOTENAME(@db) + N'.dbo.ACVSUJournalLog AS t1
    LEFT JOIN ACVSCore.Access.Personnel AS t2
        ON t1.ObjectIdentity1 = t2.GUID
    LEFT JOIN ACVSCore.Access.PersonnelType AS t3
        ON t2.PersonnelTypeID = t3.ObjectID
    LEFT JOIN ACVSCore.Access.Credential ac
        ON TRY_CAST(t1.ObjectIdentity2 AS NVARCHAR(200)) = CAST(ac.ObjectID AS NVARCHAR(200))
    WHERE
        t1.MessageType = ''CardAdmitted''
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) BETWEEN ' + QUOTENAME(CONVERT(NVARCHAR(10), @StartDate, 120),'''') + N' AND ' + QUOTENAME(CONVERT(NVARCHAR(10), @EndDate, 120),'''') + N'
        AND LOWER(RTRIM(LTRIM(ISNULL(t3.[Name],'''')))) IN (''employee'',''terminated personnel'');
    ';

    FETCH NEXT FROM db_cursor INTO @db;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Execute dynamic SQL
EXEC sp_executesql @sql;

-- Final output: all admitted swipe records
SELECT
    SourceDB,
    DateOnly AS [Date],
    LocaleMessageTime AS [SwipeTime],
    EmployeeName,
    EmployeeID,
    PersonnelTypeName,
    DoorName,
    PartitionName2 AS PartitionName,
    LogicalLocation,
    MessageType,
    SwipeCardObjectID,
    SwipeCardNumber AS [CardNumberUsedOnSwipe],
    Profile_Disabled,
    Active_Card_Numbers AS [Active card number],
    Deactive_Card_Numbers AS [Deactive card number]
FROM #AllAdmittedSwipes
ORDER BY SourceDB, LocaleMessageTime;

-- cleanup
IF OBJECT_ID('tempdb..#AllAdmittedSwipes') IS NOT NULL DROP TABLE #AllAdmittedSwipes;
GO









-- Rejected/Denied swipes: CardRejected / CardDenied
SET NOCOUNT ON;
GO

DECLARE @StartDate DATE = '2025-09-01';      -- report start
DECLARE @EndDate   DATE = CONVERT(DATE, GETDATE());  -- report end = today

DECLARE @DBList TABLE (db SYSNAME);
INSERT INTO @DBList (db) VALUES
 ('ACVSUJournal_00010021');  -- add remaining DB names, one row per DB

IF OBJECT_ID('tempdb..#AllRejectedSwipes') IS NOT NULL DROP TABLE #AllRejectedSwipes;
CREATE TABLE #AllRejectedSwipes (
    SourceDB SYSNAME,
    LocaleMessageTime DATETIME2,
    DateOnly DATE,
    EmployeeName NVARCHAR(255),
    EmployeeID NVARCHAR(200),
    PersonnelTypeName NVARCHAR(255),
    DoorName NVARCHAR(255),
    PartitionName2 NVARCHAR(255),
    LogicalLocation NVARCHAR(255),
    MessageType NVARCHAR(100),
    SwipeCardObjectID NVARCHAR(200),
    SwipeCardNumber NVARCHAR(200),
    Profile_Disabled BIT,
    Active_Card_Numbers NVARCHAR(MAX),
    Deactive_Card_Numbers NVARCHAR(MAX)
);

DECLARE @sql NVARCHAR(MAX) = N'';
DECLARE @db SYSNAME;

DECLARE db_cursor CURSOR FAST_FORWARD FOR
    SELECT db FROM @DBList;
OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = @sql + N'
    INSERT INTO #AllRejectedSwipes (
        SourceDB, LocaleMessageTime, DateOnly, EmployeeName, EmployeeID, PersonnelTypeName,
        DoorName, PartitionName2, LogicalLocation, MessageType, SwipeCardObjectID, SwipeCardNumber,
        Profile_Disabled, Active_Card_Numbers, Deactive_Card_Numbers
    )
    SELECT
        N' + QUOTENAME(@db,'''') + N' AS SourceDB,
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) AS DateOnly,
        t1.[ObjectName1] AS EmployeeName,
        CASE WHEN t2.[Int1] IS NULL OR t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR(200)) END AS EmployeeID,
        t3.[Name] AS PersonnelTypeName,
        t1.[ObjectName2] AS DoorName,
        t1.[PartitionName2],
        CASE
            WHEN t1.[ObjectName2] LIKE ''%HQ%'' THEN ''Denver''
            WHEN t1.[ObjectName2] LIKE ''%Austin%'' THEN ''Austin''
            WHEN t1.[ObjectName2] LIKE ''%Miami%'' THEN ''Miami''
            WHEN t1.[ObjectName2] LIKE ''%NYC%'' THEN ''New York''
            WHEN t1.[ObjectName2] LIKE ''APAC_PI%'' THEN ''Taguig City''
            WHEN t1.[ObjectName2] LIKE ''APAC_PH%'' THEN ''Quezon City''
            WHEN t1.[ObjectName2] LIKE ''%PUN%'' THEN ''Pune''
            WHEN t1.[ObjectName2] LIKE ''%HYD%'' THEN ''Hyderabad''
            ELSE t1.[PartitionName2]
        END AS LogicalLocation,
        t1.[MessageType],
        CAST(t1.ObjectIdentity2 AS NVARCHAR(200)) AS SwipeCardObjectID,
        COALESCE(ac.CardNumber, CAST(t1.ObjectIdentity2 AS NVARCHAR(200))) AS SwipeCardNumber,
        t2.Disabled AS Profile_Disabled,
        ISNULL(
          STUFF((
            SELECT ', ' + COALESCE(CAST(ac2.CardNumber AS NVARCHAR(100)), CAST(ac2.ObjectID AS NVARCHAR(100)))
            FROM ACVSCore.Access.Credential ac2
            WHERE ac2.Name = t2.Name
              AND (
                (ac2.ExpirationDateTime IS NULL OR ac2.ExpirationDateTime >= GETDATE())
                AND (ac2.Disabled IS NULL OR ac2.Disabled = 0)
                AND (ac2.Lost IS NULL OR ac2.Lost = 0)
                AND (ac2.Stolen IS NULL OR ac2.Stolen = 0)
              )
            FOR XML PATH(''''), TYPE
          ).value(''.'', ''NVARCHAR(MAX)''), 1, 2, ''), '''') AS Active_Card_Numbers,
        ISNULL(
          STUFF((
            SELECT ', ' + COALESCE(CAST(ac3.CardNumber AS NVARCHAR(100)), CAST(ac3.ObjectID AS NVARCHAR(100)))
            FROM ACVSCore.Access.Credential ac3
            WHERE ac3.Name = t2.Name
              AND NOT (
                (ac3.ExpirationDateTime IS NULL OR ac3.ExpirationDateTime >= GETDATE())
                AND (ac3.Disabled IS NULL OR ac3.Disabled = 0)
                AND (ac3.Lost IS NULL OR ac3.Lost = 0)
                AND (ac3.Stolen IS NULL OR ac3.Stolen = 0)
              )
            FOR XML PATH(''''), TYPE
          ).value(''.'', ''NVARCHAR(MAX)''), 1, 2, ''), '''') AS Deactive_Card_Numbers
    FROM ' + QUOTENAME(@db) + N'.dbo.ACVSUJournalLog AS t1
    LEFT JOIN ACVSCore.Access.Personnel AS t2
        ON t1.ObjectIdentity1 = t2.GUID
    LEFT JOIN ACVSCore.Access.PersonnelType AS t3
        ON t2.PersonnelTypeID = t3.ObjectID
    LEFT JOIN ACVSCore.Access.Credential ac
        ON TRY_CAST(t1.ObjectIdentity2 AS NVARCHAR(200)) = CAST(ac.ObjectID AS NVARCHAR(200))
    WHERE
        t1.MessageType IN (''CardRejected'', ''CardDenied'')
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) BETWEEN ' + QUOTENAME(CONVERT(NVARCHAR(10), @StartDate, 120),'''') + N' AND ' + QUOTENAME(CONVERT(NVARCHAR(10), @EndDate, 120),'''') + N'
        AND LOWER(RTRIM(LTRIM(ISNULL(t3.[Name],'''')))) IN (''employee'',''terminated personnel'');
    ';

    FETCH NEXT FROM db_cursor INTO @db;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

EXEC sp_executesql @sql;

SELECT
    SourceDB,
    DateOnly AS [Date],
    LocaleMessageTime AS [SwipeTime],
    EmployeeName,
    EmployeeID,
    PersonnelTypeName,
    DoorName,
    PartitionName2 AS PartitionName,
    LogicalLocation,
    MessageType,
    SwipeCardObjectID,
    SwipeCardNumber AS [CardNumberUsedOnSwipe],
    Profile_Disabled,
    Active_Card_Numbers AS [Active card number],
    Deactive_Card_Numbers AS [Deactive card number]
FROM #AllRejectedSwipes
ORDER BY SourceDB, LocaleMessageTime;

IF OBJECT_ID('tempdb..#AllRejectedSwipes') IS NOT NULL DROP TABLE #AllRejectedSwipes;
GO






















Now Remove all Filter We need Details like 
Run repoet from 1 sep to today i need both Admited and rejected data for Employee Build Query for Admited and 2nd for Rejected...
Where display 
Employee name , Profile Card Active Card number and Profile Deactive Card number  and 
Whhen Employee swipe Badge then Which Badge use Employee Card Number 
Generate ALl Swipe Records Query for all Region ( ALl location 21 ) 


From Below Query refer and Remove Logical location Filter and Primary Location Filter keep all 21 Location Data 

/* Combined Headcount - updated with Denver / PrimaryLocation HQ filter
   - EmployeeName (ObjectName1), DoorName (ObjectName2), PrimaryLocation (Text5)
   - Filter PersonnelType to Employee OR Terminated Personnel (case-insensitive)
   - Location filter: LogicalLocation = 'Denver' OR (PrimaryLocation contains 'denver' AND contains 'hq')
   - Add additional DB names to @DBList if you want to scan more DBs
*/

SET NOCOUNT ON;
GO

DECLARE @targetDate DATE = '2025-09-09';  -- adjust as required

-- ---------- List of databases (add more if needed) ----------
DECLARE @DBList TABLE (db SYSNAME);
INSERT INTO @DBList (db) VALUES
 ('ACVSUJournal_00010021');  -- add other ACVSUJournal_* DB names here as additional rows

-- ---------- Combined list of PartitionName2 values you care about (kept for earlier broad filtering if needed) ----------
DECLARE @PartitionList NVARCHAR(MAX) =
    '''LT.Vilnius'',''AUT.Vienna'',''IE.DUblin'',''DU.Abu Dhab'',''ES.Madrid'',''IT.Rome'',''MA.Casablanca'',''RU.Moscow'',''UK.London'','
  + '''APAC.Default'',''IN.HYD'',''JP.Tokyo'',''PH.Manila'',''MY.Kuala Lumpur'','
  + '''AR.Cordoba'',''BR.Sao Paulo'',''CR.Costa Rica Partition'',''MX.Mexico City'',''PA.Panama City'',''PE.Lima''';

-- ---------- Drop temp table if left over ----------
IF OBJECT_ID('tempdb..#CombinedEmployeeData') IS NOT NULL
    DROP TABLE #CombinedEmployeeData;

-- Create temp table explicitly
CREATE TABLE #CombinedEmployeeData (
    SourceDB SYSNAME,
    ObjectName1 NVARCHAR(255),   -- EmployeeName source
    ObjectName2 NVARCHAR(255),   -- DoorName source
    EmployeeID NVARCHAR(200),
    PersonnelTypeID INT,
    PersonnelTypeName NVARCHAR(255),
    Text5 NVARCHAR(255),         -- PrimaryLocation source
    PartitionName2 NVARCHAR(255),
    LocaleMessageTime DATETIME2,
    MessageType NVARCHAR(100),
    EmployeeIdentity NVARCHAR(200),
    CardNumber NVARCHAR(200),
    LogicalLocation NVARCHAR(255)
);

-- ---------- Build dynamic SQL that inserts from each DB ----------
DECLARE @sql NVARCHAR(MAX) = N'';
DECLARE @db SYSNAME;

DECLARE db_cursor CURSOR FAST_FORWARD FOR
    SELECT db FROM @DBList;

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = @sql + N'
    INSERT INTO #CombinedEmployeeData (
        SourceDB, ObjectName1, ObjectName2, EmployeeID, PersonnelTypeID, PersonnelTypeName,
        Text5, PartitionName2, LocaleMessageTime, MessageType, EmployeeIdentity, CardNumber, LogicalLocation
    )
    SELECT
        N' + QUOTENAME(@db,'''') + N' AS SourceDB,
        t1.[ObjectName1],
        t1.[ObjectName2],
        CASE WHEN t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR(200)) END AS EmployeeID,
        t2.[PersonnelTypeID],
        t3.[Name] AS PersonnelTypeName,
        t2.[Text5],
        t1.[PartitionName2],
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.[MessageType],
        CAST(t1.ObjectIdentity1 AS NVARCHAR(200)) AS EmployeeIdentity,
        NULL AS CardNumber,
        CASE
            WHEN t1.[ObjectName2] LIKE ''%HQ%'' THEN ''Denver''
            WHEN t1.[ObjectName2] LIKE ''%Austin%'' THEN ''Austin''
            WHEN t1.[ObjectName2] LIKE ''%Miami%'' THEN ''Miami''
            WHEN t1.[ObjectName2] LIKE ''%NYC%'' THEN ''New York''
            WHEN t1.[ObjectName2] LIKE ''APAC_PI%'' THEN ''Taguig City''
            WHEN t1.[ObjectName2] LIKE ''APAC_PH%'' THEN ''Quezon City''
            WHEN t1.[ObjectName2] LIKE ''%PUN%'' THEN ''Pune''
            WHEN t1.[ObjectName2] LIKE ''%HYD%'' THEN ''Hyderabad''
            ELSE t1.[PartitionName2]
        END AS LogicalLocation
    FROM ' + QUOTENAME(@db) + N'.dbo.ACVSUJournalLog AS t1
    INNER JOIN [ACVSCore].[Access].[Personnel] AS t2
        ON t1.ObjectIdentity1 = t2.GUID
    INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3
        ON t2.PersonnelTypeID = t3.ObjectID
    WHERE
        t1.MessageType = ''CardAdmitted''
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) = ' + QUOTENAME(CONVERT(NVARCHAR(10), @targetDate, 120),'''') + N'
        AND (
            t1.PartitionName2 IN (' + @PartitionList + N')
            OR t1.ObjectName2 LIKE ''%HQ%'' OR t1.ObjectName2 LIKE ''%Austin%'' OR t1.ObjectName2 LIKE ''%Miami%'' OR t1.ObjectName2 LIKE ''%NYC%'' 
            OR t1.ObjectName2 LIKE ''APAC_PI%'' OR t1.ObjectName2 LIKE ''APAC_PH%'' OR t1.ObjectName2 LIKE ''%PUN%'' OR t1.ObjectName2 LIKE ''%HYD%''
        );
    ';

    FETCH NEXT FROM db_cursor INTO @db;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Execute the dynamic insert SQL
EXEC sp_executesql @sql;

-- ---------- De-duplicate & pick latest swipe per person per date ----------
;WITH LatestPerPerson AS (
    SELECT
        SourceDB,
        ObjectName1,
        ObjectName2,
        EmployeeID,
        PersonnelTypeID,
        PersonnelTypeName,
        Text5,
        PartitionName2,
        LocaleMessageTime,
        MessageType,
        EmployeeIdentity,
        CardNumber,
        LogicalLocation,
        CONVERT(DATE, LocaleMessageTime) AS [DateOnly],
        ROW_NUMBER() OVER (
            PARTITION BY 
              COALESCE(NULLIF(EmployeeIdentity, ''), NULLIF(EmployeeID, ''), ObjectName1),
              CONVERT(DATE, LocaleMessageTime)
            ORDER BY LocaleMessageTime DESC
        ) AS rn
    FROM #CombinedEmployeeData
)
SELECT
   
    ObjectName1    AS EmployeeName,
    ObjectName2    AS DoorName,
    PersonnelTypeName AS PersonnelType,
    EmployeeID,
    Text5          AS PrimaryLocation,
    PartitionName2,
    LogicalLocation,
    MessageType,
    [DateOnly]     AS [Date],
    LocaleMessageTime
FROM LatestPerPerson
WHERE rn = 1
    -- Personnel type filter (case-insensitive): keep only Employee and Terminated Personnel
    AND LOWER(RTRIM(LTRIM(PersonnelTypeName))) IN ('employee','terminated personnel')
    -- LOCATION filter: either logical 'Denver' OR PrimaryLocation contains both 'denver' and 'hq' (case-insensitive)
    AND (
         LogicalLocation = 'Denver'
         OR (
             Text5 IS NOT NULL
             AND LOWER(Text5) LIKE '%denver%'
             AND LOWER(Text5) LIKE '%hq%'         -- covers 'WU HQ', 'WU-HQ', 'HQ', etc.
         )
    )
ORDER BY LogicalLocation, PersonnelTypeName, ObjectName1;

-- cleanup
IF OBJECT_ID('tempdb..#CombinedEmployeeData') IS NOT NULL
    DROP TABLE #CombinedEmployeeData;

GO





refer below Query for profile Active card and Deactive card number ...
nd 



USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

;WITH EmpAgg AS (
    SELECT
      AP.ObjectID           AS EmployeeObjID,
      AP.Name               AS EmpName,
      CASE WHEN AP.Int1 = 0 OR AP.Int1 IS NULL
           THEN AP.Text12
           ELSE CAST(AP.Int1 AS NVARCHAR(50))
      END AS EmployeeID,
      ISNULL(PT.Name, '')   AS PersonnelType,
      AP.Disabled           AS Profile_Disabled,
      -- Primary location from Personnel.Text5
      ISNULL(AP.Text5, '')  AS PrimaryLocation,

      COUNT(ACR.Name)       AS Profile_Cards,

      SUM(
        CASE
          WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
            AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
            AND (ACR.Lost IS NULL OR ACR.Lost = 0)
            AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards,

      CASE
        WHEN COUNT(ACR.Name) - SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        ) < 0 THEN 0
        ELSE COUNT(ACR.Name) - SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )
      END AS Deactive_Cards,

      -- Active card numbers (CAST CardNumber to NVARCHAR to avoid varchar->numeric conversion)
      ISNULL(
        STUFF(
          (
            SELECT ', ' + COALESCE(CAST(ACR2.CardNumber AS NVARCHAR(100)), CAST(ACR2.ObjectID AS NVARCHAR(50)))
            FROM ACVSCore.Access.Credential ACR2
            WHERE ACR2.Name = AP.Name
              AND (
                 (ACR2.ExpirationDateTime IS NULL OR ACR2.ExpirationDateTime >= GETDATE())
                 AND (ACR2.Disabled IS NULL OR ACR2.Disabled = 0)
                 AND (ACR2.Lost IS NULL OR ACR2.Lost = 0)
                 AND (ACR2.Stolen IS NULL OR ACR2.Stolen = 0)
              )
            FOR XML PATH(''), TYPE
          ).value('.', 'NVARCHAR(MAX)')
        , 1, 2, '')
      , '') AS Active_Card_Numbers,

      -- Deactive card numbers (also cast)
      ISNULL(
        STUFF(
          (
            SELECT ', ' + COALESCE(CAST(ACR3.CardNumber AS NVARCHAR(100)), CAST(ACR3.ObjectID AS NVARCHAR(50)))
            FROM ACVSCore.Access.Credential ACR3
            WHERE ACR3.Name = AP.Name
              AND NOT (
                 (ACR3.ExpirationDateTime IS NULL OR ACR3.ExpirationDateTime >= GETDATE())
                 AND (ACR3.Disabled IS NULL OR ACR3.Disabled = 0)
                 AND (ACR3.Lost IS NULL OR ACR3.Lost = 0)
                 AND (ACR3.Stolen IS NULL OR ACR3.Stolen = 0)
              )
            FOR XML PATH(''), TYPE
          ).value('.', 'NVARCHAR(MAX)')
        , 1, 2, '')
      , '') AS Deactive_Card_Numbers

    FROM ACVSCore.Access.Personnel AP
    LEFT JOIN ACVSCore.Access.Credential ACR
      ON AP.Name = ACR.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = AP.PersonnelTypeID
    GROUP BY
      AP.ObjectID,
      AP.Name,
      AP.Int1,
      AP.Text12,
      PT.Name,
      AP.Disabled,
      AP.Text5
),
EmpAggWithStatus AS (
    SELECT
      EmployeeObjID,
      EmpName,
      EmployeeID,
      PersonnelType,
      Profile_Disabled,
      Profile_Cards,
      Active_Cards,
      Deactive_Cards,
      Active_Card_Numbers,
      Deactive_Card_Numbers,
      PrimaryLocation,
      CASE
        WHEN Profile_Disabled = 1 THEN 'Deactive'
        WHEN Profile_Disabled = 0 AND Active_Cards > 0 THEN 'Active'
        ELSE 'Deactive'
      END AS Employee_Status
    FROM EmpAgg
)

-- Final select: Clearance Count added BEFORE Clearance column
SELECT
  e.EmployeeObjID,
  e.EmpName,
  e.EmployeeID,
  e.PersonnelType,
  e.PrimaryLocation         AS [Primary Location],
  e.Profile_Cards           AS [Profile cards],
  e.Active_Cards,
  e.Active_Card_Numbers     AS [Active card number],
  e.Deactive_Cards,
  e.Deactive_Card_Numbers   AS [Deactive card number],
  CASE WHEN img.Image IS NULL THEN 'No' ELSE 'Yes' END AS [Image],
  e.Employee_Status,
  clr.ClearanceCount        AS [Clearance Count],      -- <-- NEW column
  clr.Clearances            AS [Clearance]
FROM EmpAggWithStatus e

OUTER APPLY (
    -- image presence check only (no binary returned)
    SELECT TOP (1) AI.Image
    FROM ACVSCore.Access.Images AI
    WHERE AI.ParentId = e.EmployeeObjID
      AND DATALENGTH(AI.Image) > 0
    ORDER BY AI.ObjectID DESC
) img

OUTER APPLY (
    -- return both clearance count and concatenated clearance names
    SELECT
      (SELECT COUNT(1) FROM ACVSCore.Access.PersonnelClearancePair APC_count WHERE APC_count.PersonnelID = e.EmployeeObjID) AS ClearanceCount,
      STUFF((
        SELECT ', ' + AC2.Name
        FROM ACVSCore.Access.PersonnelClearancePair APC2
        INNER JOIN ACVSCore.Access.Clearance AC2
          ON AC2.ObjectID = APC2.ClearanceID
        WHERE APC2.PersonnelID = e.EmployeeObjID
        FOR XML PATH(''), TYPE
      ).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS Clearances
) clr

ORDER BY e.EmpName;
GO






Refer both Query carefully and Build 2 Query for Admited and rejected data 
Where display Employee name , Employee ID 
Door NAme , Partation Name , Active Card Number , Decative Card Number , When Badge swipe this card Number 
For Admited and Rejected 


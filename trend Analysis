I have Update all file as per above suggestion  now we got 

(.venv) PS C:\Users\W0024618\Desktop\Trend Analysis\backend> python app.py
 * Serving Flask app 'app'
 * Debug mode: on
INFO:werkzeug:WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8002
INFO:werkzeug:Press CTRL+C to quit
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 134-209-644



Check each file line by line and fix this 
Alos Strickly Build below Mention Scenario carefully 





I implemented 10 sample scenarios in trend_runner.py. Hereâ€™s a list of 20+ you can add (copy the pattern and implement function; most rely on computed features or can be added by adding fields to compute_features):
	1.	long_gap_>=90min (done)
	2.	short_duration_<4h (done)
	3.	coffee_badging (done)
	4.	low_swipe_count_<=2 (done)
	5.	single_door (done)
	6.	only_in (done)
	7.	only_out (done)
	8.	overtime_>=10h (done)
	9.	very_long_duration_>=16h (done)
	10.	zero_swipes (done)
	11.	unusually_high_swipes (e.g., > median*3)
	12.	repeated_short_breaks (many gaps < 5 min)
	13.	multiple_location_same_day (visits recorded in multiple Partitions)
	14.	weekend_activity (swipes on Sat/Sun)
	15.	repeated_rejection_count (use Rejection_Type from raw if present)
	16.	badge_sharing_suspected (same card used by different person_uid)
	17.	early_arrival_before_06 (needs FirstSwipe field)
	18.	late_exit_after_22 (needs LastSwipe field)
	19.	shift_inconsistency (duration deviates from historical median)
	20.	trending_decline (3-week sliding avg decline)
	21.	consecutive_absent_days (zero swipes 3+ days)
	22.	high_variance_duration (std dev high vs historical)
	23.	short_duration_on_high_presence_days (duration<4h though DaysPresentInWeek high)



Refer Raw Report Query carefully and Build Scenarion Strickly....



Refer Database details file 
And Connect all Server

// //C:\Users\W0024618\Desktop\global-page\backend\config\dbConfig.js
// import sql from 'mssql';

// // shared options
// const commonOpts = {
//   options: {
//     encrypt: true,
//     trustServerCertificate: true
//   },
//   // increase timeouts (milliseconds)
//   // requestTimeout: maximum time for a single request to complete
//   requestTimeout: 300000,      // 5 minutes
//   // connectionTimeout: time to wait while establishing connection
//   connectionTimeout: 30000,    // 30 seconds
//   // pool defaults
//   pool: {
//     max: 10,
//     min: 0,
//     idleTimeoutMillis: 30000
//   }
// };

// // lowercase keys only

// const regions = {
//   apac: {
//     user: 'GSOC_Test',
//     password: 'Westernccure@2025',
//     server: 'SRVWUPNQ0986V',
//     database: 'ACVSUJournal_00010030',
//     ...commonOpts
//   },
//   emea: {
//     user: 'GSOC_Test',
//     password: 'Westernccure@2025',
//     server: 'SRVWUFRA0986V',
//     database: 'ACVSUJournal_00011029',
//     ...commonOpts
//   },
//   laca: {
//     user: 'GSOC_Test',
//     password: 'Westernccure@2025',
//     server: 'SRVWUSJO0986V',
//     database: 'ACVSUJournal_00010030',
//     ...commonOpts
//   },
//   namer: {
//     user: 'GSOC_Test',
//     password: 'Westernccure@2025',
//     server: 'SRVWUDEN0891V',
//     database: 'ACVSUJournal_00010030',
//     ...commonOpts
//   }
// };

// const pools = {};

// /**
//  * @param {string} regionKey  one of the keys in `regions`, case-insensitive
//  */
// export async function getPool(regionKey) {
//   const key = (regionKey || '').toLowerCase();
//   const cfg = regions[key];
//   if (!cfg) {
//     throw new Error(`Unknown region: ${regionKey}`);
//   }
//   if (!pools[key]) {
//     pools[key] = await new sql.ConnectionPool(cfg).connect();
//   }
//   return pools[key];
// }

// export { sql };









//Test

//C:\Users\W0024618\Desktop\global-page\backend\config\dbConfig.js
import sql from 'mssql';

// shared options
const commonOpts = {
  options: {
    encrypt: true,
    trustServerCertificate: true
  },
  // increase timeouts (milliseconds)
  requestTimeout: 300000,      // 5 minutes
  connectionTimeout: 30000,    // 30 seconds
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  }
};

// lowercase keys only
// NOTE: moved to `databases` array so we can reference previous/other ACVSUJournal DBs easily.
const regions = {
  apac: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUPNQ0986V',
    // primary DB first; add previous/other ACVSUJournal DB names to this array as needed
    databases: ['ACVSUJournal_00010030','ACVSUJournal_00010029','ACVSUJournal_00010028','ACVSUJournal_00010027','ACVSUJournal_00010026','ACVSUJournal_00010025'],
    ...commonOpts
  },
  emea: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUFRA0986V',
    databases: ['ACVSUJournal_00011029','ACVSUJournal_00011028','ACVSUJournal_00011027','ACVSUJournal_00011026','ACVSUJournal_00011025','ACVSUJournal_00011024','ACVSUJournal_00011023'],
    ...commonOpts
  },
  laca: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUSJO0986V',
    databases: ['ACVSUJournal_00010030','ACVSUJournal_00010029','ACVSUJournal_00010028','ACVSUJournal_00010027','ACVSUJournal_00010026','ACVSUJournal_00010025'],
    ...commonOpts
  },
  namer: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUDEN0891V',
    databases: ['ACVSUJournal_00010030','ACVSUJournal_00010029','ACVSUJournal_00010028','ACVSUJournal_00010027','ACVSUJournal_00010026','ACVSUJournal_00010025'],
    ...commonOpts
  }
};

const pools = {};

/**
 * @param {string} regionKey  one of the keys in `regions`, case-insensitive
 */
export async function getPool(regionKey) {
  const key = (regionKey || '').toLowerCase();
  const cfg = regions[key];
  if (!cfg) {
    throw new Error(`Unknown region: ${regionKey}`);
  }

  // Use the first database in the array as the connection default (so queries without explicit db still work).
  if (Array.isArray(cfg.databases) && cfg.databases.length) {
    cfg.database = cfg.databases[0];
  } else if (!cfg.database) {
    // If no database specified, leave it alone (the server's default DB will be used).
    cfg.database = undefined;
  }

  if (!pools[key]) {
    pools[key] = await new sql.ConnectionPool(cfg).connect();
  }
  return pools[key];
}

/**
 * Return array of database names configured for a region (always returns array).
 * This is intentionally exported for other modules to dynamically build fully-qualified table references.
 */
export function getRegionDatabases(regionKey) {
  const key = (regionKey || '').toLowerCase();
  const cfg = regions[key];
  if (!cfg) return [];
  if (Array.isArray(cfg.databases) && cfg.databases.length) return cfg.databases.slice();
  if (cfg.database) return [cfg.database];
  return [];
}

/**
 * Safe bracketed DB name for embedding into SQL identifiers.
 */
export function bracketDb(dbName) {
  if (!dbName) return '';
  // protect against accidental injection: remove closing bracket then bracket it
  const safe = String(dbName).replace(/]/g, '');
  return `[${safe}]`;
}

export { sql };




  const query = `
  WITH ${regionCTEs},
  CombinedQuery AS(
    SELECT 
       DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
       t1.ObjectName1,
       t1.PartitionName2       AS PartitionName2,
       t5_card.CardNumber,
       t5_admit.value          AS AdmitCode,
       t5_dir.value            AS Direction,
       t1.ObjectName2          AS Door,
       t5_rej.value            AS Rejection_Type,
       CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
            THEN t2.Text12
            ELSE CAST(t2.Int1 AS NVARCHAR)
       END                       AS EmployeeID,
       t3.Name                  AS PersonnelType,
       t1.MessageType,
       t1.XmlGUID,
       CASE
         WHEN (UPPER(ISNULL(@regionKey,'')) = 'NAMER' OR t1.PartitionName2 LIKE 'US.%' OR t1.PartitionName2 LIKE 'USA%')
         THEN
           CASE
             WHEN t1.ObjectName2 LIKE '%HQ%' THEN 'Denver-HQ'
             WHEN t1.ObjectName2 LIKE '%Austin%' THEN 'Austin Texas'
             WHEN t1.ObjectName2 LIKE '%Miami%' THEN 'Miami'
             WHEN t1.ObjectName2 LIKE '%NYC%' THEN 'New York'
             ELSE t1.PartitionName2
           END
         WHEN (UPPER(ISNULL(@regionKey,'')) = 'APAC' OR t1.PartitionName2 LIKE 'APAC.%' OR t1.PartitionName2 LIKE 'APAC%')
         THEN
           CASE
             WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
             WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
             WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
             WHEN t1.ObjectName2 LIKE '%HYD%' THEN 'Hyderabad'
             ELSE t1.PartitionName2
           END
         ELSE t1.PartitionName2
       END AS Location
    FROM AllLogs AS t1
    LEFT JOIN ACVSCore.Access.Personnel     AS t2 ON t1.ObjectIdentity1 = t2.GUID
    LEFT JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeId   = t3.ObjectID
    LEFT JOIN AllShred       AS t5_admit
      ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN AllShred       AS t5_dir
      ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
    LEFT JOIN AllXml         AS t_xml ON t1.XmlGUID = t_xml.GUID
    LEFT JOIN (
      SELECT GUID, [value]
      FROM AllShred
      WHERE [Name] IN ('Card','CHUID')
    ) AS SCard ON t1.XmlGUID = SCard.GUID
    OUTER APPLY (
      SELECT COALESCE(
        TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
        TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
        SCard.[value]
      ) AS CardNumber
    ) AS t5_card
    LEFT JOIN AllShred AS t5_rej
      ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
    WHERE
      t1.MessageType IN ('CardAdmitted' , 'CardRejected')
      AND (
        @location IS NULL
        OR t1.PartitionName2 = @location
        OR (
          (CASE
            WHEN (UPPER(ISNULL(@regionKey,'')) = 'NAMER' OR t1.PartitionName2 LIKE 'US.%' OR t1.PartitionName2 LIKE 'USA%')
            THEN
              CASE
                WHEN t1.ObjectName2 LIKE '%HQ%' THEN 'Denver-HQ'
                WHEN t1.ObjectName2 LIKE '%Austin%' THEN 'Austin Texas'
                WHEN t1.ObjectName2 LIKE '%Miami%' THEN 'Miami'
                WHEN t1.ObjectName2 LIKE '%NYC%' THEN 'New York'
                ELSE NULL
              END
            WHEN (UPPER(ISNULL(@regionKey,'')) = 'APAC' OR t1.PartitionName2 LIKE 'APAC.%' OR t1.PartitionName2 LIKE 'APAC%')
            THEN
              CASE
                WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
                WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
                WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
                WHEN t1.ObjectName2 LIKE '%HYD%' THEN 'Hyderabad'
                ELSE NULL
              END
            ELSE NULL
          END) = @location
        )
      )
      AND (
        UPPER(ISNULL(@admitFilter,'all')) = 'ALL'
        OR (UPPER(@admitFilter) = 'ADMIT'  AND t1.MessageType = 'CardAdmitted')
        OR (UPPER(@admitFilter) = 'REJECT' AND t1.MessageType = 'CardRejected')
      )
      AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) BETWEEN @startDate AND @endDate
      /* optional employees filter: CSV of tokens - match against EmployeeID, Name or CardNumber */
     
     
         AND (
        @employees IS NULL
        OR EXISTS (
          SELECT 1
          FROM STRING_SPLIT(@employees,',') AS E
          WHERE LTRIM(RTRIM(E.value)) <> ''
            AND (
                /* EmployeeID (contractors use Text12, others use Int1) - case insensitive */
                UPPER(
                  COALESCE(
                    CASE WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN ISNULL(t2.Text12,'') ELSE ISNULL(CAST(t2.Int1 AS NVARCHAR), '') END,
                    ''
                  )
                ) LIKE '%' + UPPER(LTRIM(RTRIM(E.value))) + '%'
                /* Employee name - case insensitive */
                OR UPPER(ISNULL(t2.Text1,'')) LIKE '%' + UPPER(LTRIM(RTRIM(E.value))) + '%'
                /* Card number (from shredding or parsed xml) - case insensitive */
                OR UPPER(ISNULL(SCard.[value], '')) LIKE '%' + UPPER(LTRIM(RTRIM(E.value))) + '%'
            )
        )
      )
)
  SELECT
    LocaleMessageTime,
    CONVERT(date,    LocaleMessageTime) AS DateOnly,
    CONVERT(time(0), LocaleMessageTime) AS Swipe_Time,
    EmployeeID,
    ObjectName1,
    PersonnelType,
    Location,
    CardNumber,
    AdmitCode,
    Direction,
    Door,
    Rejection_Type
  FROM CombinedQuery
  ORDER BY LocaleMessageTime ASC;
  `;












    # find these earlier in compute_features — replace the candidate lists
    name_candidates = ['employeename', 'objectname1', 'objectname', 'employee_name', 'name', 'object_name']
    # prefer Int1 / Text12 first (these map to Personnel.Int1/Text12), do NOT include employeeidentity here
    employeeid_candidates = ['int1', 'text12', 'employeeid', 'employee_id', 'empid', 'id']
    card_candidates = ['cardnumber', 'chuid', 'card', 'card_no', 'cardnum']
    door_candidates = ['door', 'doorname', 'door_name']
    direction_candidates = ['direction', 'directionname', 'direction_name']

    name_col = next((cols_lower[c] for c in name_candidates if c in cols_lower), None)
    empid_col = next((cols_lower[c] for c in employeeid_candidates if c in cols_lower), None)
    card_col = next((cols_lower[c] for c in card_candidates if c in cols_lower), None)
    door_col = next((cols_lower[c] for c in door_candidates if c in cols_lower), None)
    dir_col = next((cols_lower[c] for c in direction_candidates if c in cols_lower), None)







    def agg_swipe_group(g):
        # ... (keep earlier gap/time/direction calculations unchanged)

        # pick first non-placeholder, non-guid card number if present (prefer cardnumber/chuid)
        card_numbers = []
        if card_col and card_col in g.columns:
            card_numbers = list(pd.unique(g[card_col].dropna()))
        elif 'CardNumber' in g.columns:
            card_numbers = list(pd.unique(g['CardNumber'].dropna()))

        card_number = None
        for c in card_numbers:
            n = _normalize_id_val(c)
            # explicitly reject GUIDs as card numbers
            if n and not _looks_like_guid(n):
                card_number = n
                break

        # stable id/name from the group using discovered columns first
        employee_id = None
        employee_name = None
        employee_identity = None
        personnel_type = None

        # Employee ID: prefer Int1/Text12 then EmployeeID; DO NOT use EmployeeIdentity as EmployeeID
        # use _pick_first_non_guid_value to skip GUIDs automatically
        if empid_col and empid_col in g.columns:
            vals = g[empid_col].dropna().astype(str).map(lambda x: x.strip())
            employee_id = _pick_first_non_guid_value(vals)
            if employee_id is None and not vals.empty:
                # final trial: numeric normalization (strip .0) but still reject GUIDs
                v0 = vals.iloc[0]
                normalized = _normalize_id_val(v0)
                if normalized and not _looks_like_guid(normalized):
                    employee_id = normalized
        elif 'EmployeeID' in g.columns:
            vals = g['EmployeeID'].dropna().astype(str).map(lambda x: x.strip())
            employee_id = _pick_first_non_guid_value(vals)
            if employee_id is None and not vals.empty:
                v0 = vals.iloc[0]
                normalized = _normalize_id_val(v0)
                if normalized and not _looks_like_guid(normalized):
                    employee_id = normalized

        # Employee identity (GUID) — keep but do not promote to EmployeeID
        if 'EmployeeIdentity' in g.columns:
            vals = g['EmployeeIdentity'].dropna().astype(str).map(lambda x: x.strip())
            if not vals.empty:
                employee_identity = vals.iloc[0]

        # Employee name: pick non-GUID candidate
        candidate_name_vals = None
        if name_col and name_col in g.columns:
            candidate_name_vals = g[name_col].dropna().astype(str).map(lambda x: x.strip())
        elif 'EmployeeName' in g.columns:
            candidate_name_vals = g['EmployeeName'].dropna().astype(str).map(lambda x: x.strip())
        elif 'ObjectName1' in g.columns:
            candidate_name_vals = g['ObjectName1'].dropna().astype(str).map(lambda x: x.strip())

        if candidate_name_vals is not None and not candidate_name_vals.empty:
            employee_name = _pick_first_non_guid_value(candidate_name_vals)
            if employee_name is None:
                # accept any value that looks like a name
                for v in candidate_name_vals:
                    if _looks_like_name(v) and not _is_placeholder_str(v):
                        employee_name = str(v).strip()
                        break

        # First/Last swipe times
        first_swipe = None
        last_swipe = None
        if times:
            first_swipe = times[0]
            last_swipe = times[-1]

        return pd.Series({
            'CountSwipes': int(len(g)),
            'MaxSwipeGapSeconds': max_gap,
            'ShortGapCount': int(short_gap_count),
            'InCount': in_count,
            'OutCount': out_count,
            'UniqueDoors': unique_doors,
            'UniqueLocations': unique_locations,
            'RejectionCount': rejection_count,
            'CardNumber': card_number,
            'EmployeeID': employee_id,
            'EmployeeIdentity': employee_identity,
            'EmployeeName': employee_name,
            'PersonnelType': personnel_type,
            'FirstSwipe': first_swipe,
            'LastSwipe': last_swipe
        })










        # ----- Schema-aware fallback resolution -----
        # Prefer Personnel.Int1 as EmployeeID when missing (do NOT use EmployeeIdentity/person_uid)
        if not emp_id:
            emp_tokens = ['Int1', 'Text12', 'EmployeeID', 'empid', 'id']
            resolved_emp = _resolve_field_from_record(r, emp_tokens)
            if resolved_emp is not None:
                try:
                    s = str(resolved_emp).strip()
                    # remove trailing .0 for floats
                    if '.' in s:
                        f = float(s)
                        if math.isfinite(f) and f.is_integer():
                            s = str(int(f))
                    # If the resolved value looks like a GUID, do NOT use it as EmployeeID
                    if _looks_like_guid(s):
                        out['EmployeeID'] = None
                        emp_id = None
                    else:
                        out['EmployeeID'] = s
                        emp_id = s
                except Exception:
                    if _looks_like_guid(resolved_emp):
                        out['EmployeeID'] = None
                        emp_id = None
                    else:
                        out['EmployeeID'] = resolved_emp
                        emp_id = resolved_emp

        # Prefer Credential.CardNumber / CHUID / Card as CardNumber when missing — reject GUIDs/placeholders
        if out.get('CardNumber') in (None, '', 'nan'):
            card_tokens = ['CardNumber', 'CHUID', 'Card', 'card_no', 'cardnum']
            resolved_card = _resolve_field_from_record(r, card_tokens)
            if resolved_card is not None:
                try:
                    cs = str(resolved_card).strip()
                    if _looks_like_guid(cs) or _is_placeholder_str(cs):
                        out['CardNumber'] = None
                    else:
                        out['CardNumber'] = cs
                except Exception:
                    out['CardNumber'] = None





        # final safety: ensure EmployeeID/CardNumber are not GUID-like tokens
        if 'EmployeeID' in out and isinstance(out['EmployeeID'], str) and _looks_like_guid(out['EmployeeID']):
            out['EmployeeID'] = None
        if 'CardNumber' in out and isinstance(out['CardNumber'], str) and _looks_like_guid(out['CardNumber']):
            out['CardNumber'] = None










Check only Employee name , Employee ID , Card number logic onlyy...


{
      "LocaleMessageTime": "2025-10-28T23:11:25.000Z",
      "ObjectName1": "Lemus, Genesis",
      "Door": "US.CO.HQ. 15. Freight Elevator Lobby East Door-IN",
      "EmployeeID": "W0027745",
      "CardNumber": "618075",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "E78FB912-A154-4790-B213-ED656D78D471",
      "PersonnelType": "Contractor",
      "Direction": "InDirection",
      "snapshotTime": "2025-10-28T23:11:25.000Z",
      "floor": "Floor 15"
    },
    {
      "LocaleMessageTime": "2025-10-28T21:32:10.000Z",
      "ObjectName1": "Vargas, Erika",
      "Door": "US.CO.HQ. 14. Freight Elevator Lobby-IN",
      "EmployeeID": "W0026176",
      "CardNumber": "617979",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "6F93B492-C95A-436E-996A-92202EFB9915",
      "PersonnelType": "Contractor",
      "Direction": "InDirection",
      "snapshotTime": "2025-10-28T21:32:10.000Z",
      "floor": "Floor 14"
    },





  const query = `
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1           AS ObjectName1,
        t1.ObjectName2           AS Door,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END                       AS EmployeeID,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          sc.value
        )                         AS CardNumber,
        CASE
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
            OR t1.PartitionName2 = 'US.CO.OBS' THEN 'US.CO.OBS'
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
            OR t1.PartitionName2 = 'USA/Canada Default' THEN 'USA/Canada Default'
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' 
            OR t1.PartitionName2 = 'US.FL.Miami' THEN 'US.FL.Miami'
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%'
            OR t1.PartitionName2 = 'US.NYC' THEN 'US.NYC'
          ELSE t1.PartitionName2
        END AS PartitionName2,
        t1.[${journalIdCol}]        AS PersonGUID,
        t3.Name                   AS PersonnelType,
        t5d.value                 AS Direction,
        CASE
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
            THEN 'Denver-HQ'
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
            THEN 'Austin Texas'
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' THEN 'Miami'
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%' 
            THEN 'New York'
          WHEN t1.PartitionName2 = 'US.CO.OBS' THEN 'Denver-HQ'
          WHEN t1.PartitionName2 = 'USA/Canada Default' THEN 'Austin Texas'
          WHEN t1.PartitionName2 = 'US.FL.Miami' THEN 'Miami'
          WHEN t1.PartitionName2 = 'US.NYC' THEN 'New York'
          ELSE 'Other'
        END AS LogicalLocation
      FROM dbo.ACVSUJournalLog AS t1
      LEFT JOIN ACVSCore.Access.Personnel AS t2 ON t1.[${journalIdCol}] = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN dbo.ACVSUJournalLogxmlShred AS t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN dbo.ACVSUJournalLogxml AS t_xml ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value FROM dbo.ACVSUJournalLogxmlShred WHERE Name IN ('Card','CHUID')
      ) AS sc ON t1.XmlGUID = sc.GUID
      WHERE t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${ quoteList(partitionList) })
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) = CONVERT(DATE, GETDATE())
    )
    SELECT
      LocaleMessageTime,
      ObjectName1,
      Door,
      EmployeeID,
      CardNumber,
      PartitionName2,
      LogicalLocation,
      PersonGUID,
      PersonnelType,
      Direction
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `;
  const result = await pool.request().query(query);
  return result.recordset;
};










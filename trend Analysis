<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Trend Analysis — Dashboard</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <!-- React + ReactDOM + Babel (quick prototyping) -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      body { font-family: Inter, Roboto, Arial, sans-serif; margin: 0; padding: 0; background:#f6f7fb; color:#1f2937; }
      .container { max-width:1200px; margin:24px auto; padding:20px; background:#fff; border-radius:8px; box-shadow:0 6px 18px rgba(16,24,40,0.06); }
      header { display:flex; align-items:center; justify-content:space-between; gap:12px; flex-wrap:wrap; }
      header h1 { margin:0; font-size:20px; }
      .controls { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
      input[type="date"] { padding:8px; border-radius:6px; border:1px solid #e2e8f0; }
      button { padding:8px 12px; border-radius:6px; border:0; background:#2563eb; color:#fff; cursor:pointer; }
      button.secondary { background:#64748b; }
      button.ghost { background:transparent; color:#0f172a; border:1px solid #e2e8f0; }
      .cards { display:flex; gap:12px; margin-top:16px; }
      .card { flex:1; background:#f8fafc; padding:12px; border-radius:8px; text-align:center; }
      .card h3 { margin:4px 0; font-size:18px; }
      .card p { margin:0; color:#6b7280; }
      .main { display:flex; gap:18px; margin-top:18px; }
      .left { flex: 2; }
      .right { flex: 1; min-width:260px; }
      .chart-wrap { background:#fff; padding:10px; border-radius:8px; box-shadow: inset 0 0 0 1px #f1f5f9; }
      table { width:100%; border-collapse:collapse; margin-top:12px; }
      th, td { padding:8px 6px; border-bottom:1px solid #eef2f7; font-size:13px; vertical-align:middle; }
      th { background:#fafafa; position:sticky; top:0; z-index:1; text-align:left; }
      .small { font-size:12px; color:#475569; }
      .pill { display:inline-block; padding:4px 8px; border-radius:999px; background:#e6f2ff; color:#075985; font-size:12px; cursor:pointer; margin:2px; }
      .chip { display:inline-block; padding:6px 10px; border-radius:999px; background:#eef2ff; color:#034f84; font-size:13px; cursor:pointer; margin:3px; }
      .searchbar { margin-top:12px; display:flex; gap:8px; align-items:center; }
      .searchbar input { padding:8px; border-radius:6px; border:1px solid #e2e8f0; width:280px; }
      .pagination { margin-top:10px; display:flex; gap:8px; align-items:center; justify-content:flex-start; }
      .muted { color:#64748b; font-size:13px; }
      .spinner { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; background:rgba(255,255,255,0.6); z-index:999; }
      .modal { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; z-index:1000; }
      .modal-inner { width:900px; max-width:95%; max-height:85%; overflow:auto; background:#fff; border-radius:8px; padding:16px; box-shadow:0 10px 40px rgba(2,6,23,0.3); }
      .close-btn { float:right; background:#ef4444; color:#fff; border-radius:6px; padding:6px 8px; border:0; cursor:pointer; }
      pre { white-space:pre-wrap; word-wrap:break-word; background:#0f172a; color:#fff; padding:12px; border-radius:8px; }
      .row-click { cursor:pointer; }
      .overlap-pill { display:inline-block; padding:4px 8px; border-radius:6px; background:#fff2dd; color:#92400e; font-size:12px; }
      .evidence-table { width:100%; border-collapse:collapse; margin-top:8px; }
      .evidence-table th, .evidence-table td { padding:6px 8px; border:1px solid #e6edf3; font-size:13px; text-align:left; }
      .gap-flag { background:#fff5f0; color:#9a3412; padding:4px 6px; border-radius:6px; display:inline-block; margin-left:8px; }
      .explain { background:#f8fafc; padding:10px; border-radius:8px; margin-top:8px; }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      (function(){
        const { useState, useEffect, useRef } = React;

        // CHANGE THIS IF YOUR API HOST DIFFERS
        const API_BASE = "http://10.199.45.239:8002";

        // Map scenario keys -> human friendly explanation (edit as needed)
        const SCENARIO_EXPLANATIONS = {
          "long_gap_>=90min": "Long gap between swipes (>= 90 minutes) — could indicate long out-of-office break.",
          "short_duration_<4h": "Short total duration in office (< 4 hours).",
          "coffee_badging": "Frequent short badge cycles (>=4) with short duration — possible 'coffee badging'.",
          "low_swipe_count_<=2": "Low swipe count (<=2) for the day.",
          "single_door": "All swipes used the same door — single-door behavior.",
          "only_in": "Only IN swipe(s) recorded for the day.",
          "only_out": "Only OUT swipe(s) recorded for the day.",
          "overtime_>=10h": "Long duration (>=10 hours) — overtime.",
          "very_long_duration_>=16h": "Very long duration (>=16 hours) — suspiciously long presence.",
          "zero_swipes": "No swipes recorded.",
          "unusually_high_swipes": "Unusually high number of swipes versus historical median.",
          "repeated_short_breaks": "Multiple short breaks within the day.",
          "multiple_location_same_day": "Swipes recorded at multiple locations same day.",
          "weekend_activity": "Activity recorded on weekend.",
          "repeated_rejection_count": "Several card rejections.",
          "badge_sharing_suspected": "Badge sharing suspected (same card used by multiple persons on same day).",
          "early_arrival_before_06": "First swipe before 06:00.",
          "late_exit_after_22": "Last swipe after 22:00.",
          "shift_inconsistency": "Duration inconsistent with historical shift patterns.",
          "trending_decline": "Historical trending decline flagged.",
          "consecutive_absent_days": "Marked absent for consecutive days historically.",
          "high_variance_duration": "High variance in durations historically.",
          "short_duration_on_high_presence_days": "Short duration even though employee usually attends many days.",
          "swipe_overlap": "Simultaneous swipe(s) near the same time with other uid(s) (possible tailgating or collusion)."
        };

        function pad(n){ return n.toString().padStart(2,'0'); }
        function formatDateISO(d){
          if(!d) return "";
          const dt = (d instanceof Date) ? d : new Date(d);
          return dt.getFullYear() + "-" + pad(dt.getMonth()+1) + "-" + pad(dt.getDate());
        }
        function datesBetween(start, end){
          var out = [];
          var cur = new Date(start);
          while(cur <= end){
            out.push(new Date(cur));
            cur.setDate(cur.getDate()+1);
          }
          return out;
        }
        function safeDateDisplay(val){
          if(!val && val !== 0) return "";
          try {
            var d = (val instanceof Date) ? val : new Date(val);
            if(isNaN(d.getTime())) return String(val);
            return d.toLocaleString();
          } catch(e) {
            return String(val);
          }
        }
        function sanitizeName(row){
          return row.EmployeeName || row.EmployeeName_x || row.EmployeeName_y || row.person_uid || "";
        }
        function downloadCSV(rows, filename){
          if(!rows || !rows.length) { alert("No rows to export"); return; }
          var cols = Object.keys(rows[0]);
          var lines = [cols.join(",")];
          rows.forEach(function(r){
            var row = cols.map(function(c){
              var v = (r[c] === undefined || r[c] === null) ? "" : String(r[c]).replace(/\n/g,' ');
              return JSON.stringify(v);
            }).join(",");
            lines.push(row);
          });
          var blob = new Blob([lines.join("\n")], {type:'text/csv'});
          var url = URL.createObjectURL(blob);
          var a = document.createElement('a'); a.href = url; a.download = filename || 'export.csv'; a.click(); URL.revokeObjectURL(url);
        }

        // Simple CSV parser which handles quoted fields and commas inside quotes
        function parseCSV(text){
          const rows = [];
          let i = 0, N = text.length;
          let cur = '', inQuotes = false, curRow = [];
          while(i < N){
            const ch = text[i];
            if(inQuotes){
              if(ch === '"'){
                if(i+1 < N && text[i+1] === '"'){ cur += '"'; i += 2; continue; } // escaped quote
                inQuotes = false;
                i++; continue;
              } else {
                cur += ch; i++; continue;
              }
            } else {
              if(ch === '"'){ inQuotes = true; i++; continue; }
              if(ch === ','){ curRow.push(cur); cur = ''; i++; continue; }
              if(ch === '\r'){ i++; continue; }
              if(ch === '\n'){ curRow.push(cur); rows.push(curRow); curRow = []; cur = ''; i++; continue; }
              cur += ch; i++;
            }
          }
          // push last
          if(cur !== '' || inQuotes || curRow.length){
            curRow.push(cur);
            rows.push(curRow);
          }
          // convert to objects using first row as header
          if(rows.length === 0) return [];
          const headers = rows[0].map(h => (h || '').trim());
          const out = [];
          for(let r=1; r<rows.length; r++){
            const row = rows[r];
            if(row.length === 1 && row[0] === '') continue; // skip empty
            const obj = {};
            for(let c=0;c<headers.length;c++){
              obj[headers[c]] = (row[c] !== undefined) ? row[c] : null;
            }
            out.push(obj);
          }
          return out;
        }

        function App(){
          var yesterday = new Date();
          yesterday.setDate(yesterday.getDate()-1);

          const [dateFrom, setDateFrom] = useState(formatDateISO(yesterday));
          const [dateTo, setDateTo] = useState(formatDateISO(new Date()));
          const [loading, setLoading] = useState(false);
          const [summary, setSummary] = useState({rows:0, flagged_rows:0, files:[], end_date:null});
          const [rows, setRows] = useState([]);
          const [reasonsCount, setReasonsCount] = useState({});
          const [filterText, setFilterText] = useState("");
          const [page, setPage] = useState(1);
          const [selectedReason, setSelectedReason] = useState("");
          const [modalRow, setModalRow] = useState(null);
          const [modalDetails, setModalDetails] = useState(null); // {aggregated_rows, raw_swipe_files, raw_swipes_parsed}
          const [modalLoading, setModalLoading] = useState(false);
          const pageSize = 25;
          const chartRef = useRef(null);
          const chartInst = useRef(null);

          useEffect(function(){
            // load latest on mount
            loadLatest();
          }, []);

          async function runForRange(){
            setLoading(true);
            setRows([]);
            setSummary({rows:0, flagged_rows:0, files:[], end_date:null});
            setReasonsCount({});
            try {
              var start = new Date(dateFrom);
              var end = new Date(dateTo);
              var dateList = datesBetween(start, end).map(d => formatDateISO(d));
              var accRows = [];
              var totalRows = 0, totalFlagged = 0, files = [];
              for(var i=0;i<dateList.length;i++){
                var d = dateList[i];
                var url = API_BASE + "/run?date=" + d;
                var r = await fetch(url, { method:'GET' });
                if(!r.ok){
                  var txt = await r.text();
                  throw new Error("API returned " + r.status + ": " + txt);
                }
                var js = await r.json();
                var sample = js.sample || [];
                if(Array.isArray(sample) && sample.length) accRows = accRows.concat(sample);
                if(typeof js.rows === 'number') totalRows += js.rows; else totalRows += (Array.isArray(sample) ? sample.length : 0);
                totalFlagged += (js.flagged_rows || 0);
                if(js.files) files = files.concat(js.files);
              }
              setRows(accRows);
              setSummary({rows: totalRows, flagged_rows: totalFlagged, files: files, end_date: formatDateISO(new Date(dateTo))});
              computeReasons(accRows);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message);
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          async function loadLatest(){
            setLoading(true);
            try{
              var r = await fetch(API_BASE + "/latest");
              if(!r.ok) throw new Error("latest failed: " + r.status);
              var js = await r.json();
              var sample = js.sample || [];
              if(!Array.isArray(sample)) sample = [];
              setRows(sample);
              setSummary({rows: (js.rows || sample.length || 0), flagged_rows: (sample.filter(function(x){ return !!x.Reasons; }).length || 0), files:[js.file]});
              computeReasons(sample);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message + (err.message === 'latest failed: 0' ? " (check backend/CORS)" : ""));
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          function computeReasons(dataRows){
            var counts = {};
            (dataRows || []).forEach(function(r){
              if(!r.Reasons) return;
              var parts = String(r.Reasons).split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              parts.forEach(function(p){ counts[p] = (counts[p] || 0) + 1; });
            });
            setReasonsCount(counts);
            buildChart(counts);
          }

          function buildChart(counts){
            var labels = Object.keys(counts).sort(function(a,b){ return counts[b] - counts[a]; });
            var values = labels.map(function(l){ return counts[l]; });
            var ctx = chartRef.current && chartRef.current.getContext ? chartRef.current.getContext('2d') : null;
            if(!ctx) return;
            try { if(chartInst.current) chartInst.current.destroy(); } catch(e){}
            chartInst.current = new Chart(ctx, {
              type:'bar',
              data:{ labels: labels, datasets:[{ label:'Events', data: values, backgroundColor:'rgba(37,99,235,0.85)' }] },
              options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } }, scales:{ y:{ beginAtZero:true } } }
            });
          }

          // filtering & pagination
          var filtered = (rows || []).filter(function(r){
            var hay = (sanitizeName(r) + " " + (r.EmployeeID||"") + " " + (r.CardNumber||"") + " " + (r.Reasons||"")).toLowerCase();
            var textOk = !filterText || hay.indexOf(filterText.toLowerCase()) !== -1;
            var reasonOk = !selectedReason || (r.Reasons && ((";" + String(r.Reasons) + ";").indexOf(selectedReason) !== -1));
            return textOk && reasonOk;
          });
          var totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
          var pageRows = filtered.slice((page-1)*pageSize, page*pageSize);

          function exportFiltered(){
            downloadCSV(filtered, "trend_filtered_export.csv");
          }

          // click a reason chip to filter
          function onReasonClick(reason){
            if(!reason) { setSelectedReason(""); return; }
            if(selectedReason === reason) setSelectedReason(""); else setSelectedReason(reason);
            setPage(1);
          }

          // show details modal and fetch evidence
          async function openModal(row){
            setModalRow(row);
            setModalDetails(null);
            setModalLoading(true);
            try {
              const q = encodeURIComponent(row.EmployeeID || row.person_uid || "");
              const resp = await fetch(API_BASE + "/record?employee_id=" + q);
              if(!resp.ok){
                const txt = await resp.text();
                throw new Error("record failed: " + resp.status + " - " + txt);
              }
              const js = await resp.json();
              // js: { aggregated_rows, raw_swipe_files }
              const details = { aggregated_rows: js.aggregated_rows || [], raw_swipe_files: js.raw_swipe_files || [], raw_swipes_parsed: [] };
              // fetch raw files (if any) and parse
              for(let i=0;i<details.raw_swipe_files.length;i++){
                const fname = details.raw_swipe_files[i];
                try {
                  const r = await fetch(API_BASE + "/swipes/" + encodeURIComponent(fname));
                  if(!r.ok){
                    console.warn("Failed to fetch swipe file", fname, r.status);
                    continue;
                  }
                  const txt = await r.text();
                  const parsed = parseCSV(txt);
                  // attempt to normalize/convert LocaleMessageTime to Date for sorting
                  parsed.forEach(p=>{
                    if(p.LocaleMessageTime) {
                      // try many formats; keep original string if invalid
                      const d = new Date(p.LocaleMessageTime);
                      p._ts = isNaN(d.getTime()) ? null : d;
                    } else {
                      p._ts = null;
                    }
                  });
                  details.raw_swipes_parsed.push({ filename: fname, rows: parsed });
                } catch(e){
                  console.warn("error fetching/parsing", fname, e);
                }
              }
              setModalDetails(details);
            } catch(e){
              alert("Failed loading details: " + e.message);
              console.error(e);
            } finally {
              setModalLoading(false);
            }
          }
          function closeModal(){ setModalRow(null); setModalDetails(null); }

          // convenience counts for cards
          var rowsCount = (summary && typeof summary.rows === 'number') ? summary.rows : (rows ? rows.length : 0);
          var flaggedCount = (summary && typeof summary.flagged_rows === 'number') ? summary.flagged_rows : (rows ? rows.filter(function(r){ return !!r.Reasons; }).length : 0);
          var flaggedPct = rowsCount ? Math.round((flaggedCount*100)/(rowsCount||1)) : 0;

          // small helper to render overlap pill: OverlapWith field or swipe_overlap boolean
          function renderOverlapCell(r){
            var ov = r.OverlapWith || r.swipe_overlap || r.overlap_with || null;
            if(ov && typeof ov === 'string'){
              var parts = ov.split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              if(parts.length === 0) return <span className="muted">—</span>;
              return <span className="overlap-pill" title={ov}>{parts.length} overlap</span>;
            } else if(r.swipe_overlap === true || r.swipe_overlap === "True"){
              return <span className="overlap-pill">overlap</span>;
            }
            return <span className="muted">—</span>;
          }

          // helper: render human-friendly reasons explanation
          function renderReasonExplanations(reasonText){
            if(!reasonText) return <div className="muted">No flags</div>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return (
              <div>
                {parts.map((p,idx)=>(
                  <div key={idx} style={{marginBottom:6}}>
                    <b>{p}</b> — <span className="small">{ SCENARIO_EXPLANATIONS[p] || "No explanation available." }</span>
                  </div>
                ))}
              </div>
            );
          }

          // helper: render swipe timeline across all fetched raw files
          function renderSwipeTimeline(details){
            if(!details || !details.raw_swipes_parsed || details.raw_swipes_parsed.length === 0){
              return <div className="muted">No raw swipe evidence available.</div>;
            }
            // flatten rows
            let all = [];
            details.raw_swipes_parsed.forEach(s => {
              (s.rows || []).forEach(r => {
                // keep source file name
                r._source = s.filename;
                // normalize time
                if(!r._ts && r.LocaleMessageTime){
                  const d = new Date(r.LocaleMessageTime);
                  r._ts = isNaN(d.getTime()) ? null : d;
                }
                all.push(r);
              });
            });
            // sort by time
            all.sort(function(a,b){
              if(a._ts && b._ts) return a._ts - b._ts;
              if(a._ts) return -1;
              if(b._ts) return 1;
              return 0;
            });
            // display table and detect gaps
            // compute gap seconds between consecutive swipes
            const GAP_THRESHOLD_SEC = 5 * 3600; // 5 hours default (you can change)
            let rowsOut = [];
            for(let i=0;i<all.length;i++){
              const cur = all[i];
              const prev = (i>0) ? all[i-1] : null;
              let gapSec = null;
              if(prev && prev._ts && cur._ts){
                gapSec = Math.round((cur._ts - prev._ts)/1000);
              }
              rowsOut.push({ idx:i, row:cur, gapSec });
            }
            return (
              <div>
                <table className="evidence-table">
                  <thead>
                    <tr>
                      <th>Time</th>
                      <th>Direction</th>
                      <th>Door</th>
                      <th>CardNumber</th>
                      <th>person_uid</th>
                      <th>Source file</th>
                      <th>Note</th>
                    </tr>
                  </thead>
                  <tbody>
                    { rowsOut.map(function(rObj){
                        const r = rObj.row;
                        const gapSec = rObj.gapSec;
                        const gapFlag = gapSec !== null && gapSec >= GAP_THRESHOLD_SEC;
                        return (
                          <tr key={rObj.idx}>
                            <td className="small">{ r._ts ? r._ts.toLocaleString() : (r.LocaleMessageTime || '-') }</td>
                            <td className="small">{ r.Direction || '-' }</td>
                            <td className="small">{ r.Door || r.DoorName || '-' }</td>
                            <td className="small">{ r.CardNumber || '-' }</td>
                            <td className="small">{ r.person_uid || r.EmployeeID || '-' }</td>
                            <td className="small">{ r._source }</td>
                            <td className="small">
                              { gapFlag && <span className="gap-flag">{ Math.round(gapSec/3600) }h gap</span> }
                            </td>
                          </tr>
                        );
                      }) }
                  </tbody>
                </table>
                <div style={{marginTop:8}} className="small muted">
                  Note: gaps >= { Math.round((5*3600)/3600) } hours are highlighted above.
                </div>
              </div>
            );
          }

          return (
            <div className="container" role="main" aria-live="polite">
              { loading && <div className="spinner"><div style={{padding:16, background:'#fff', borderRadius:8, boxShadow:'0 4px 20px rgba(2,6,23,0.1)'}}>Loading…</div></div> }

              <header>
                <h1>Trend Analysis — Pune</h1>
                <div className="controls">
                  <label className="small">From</label>
                  <input type="date" value={dateFrom} onChange={function(e){ setDateFrom(e.target.value); }} disabled={loading} />
                  <label className="small">To</label>
                  <input type="date" value={dateTo} onChange={function(e){ setDateTo(e.target.value); }} disabled={loading} />
                  <button onClick={runForRange} disabled={loading}>Run (date/range)</button>
                  <button className="secondary" onClick={loadLatest} disabled={loading}>Load latest</button>
                  <button className="ghost" onClick={exportFiltered} disabled={loading}>Export filtered</button>
                </div>
              </header>

              <div className="cards" aria-hidden={loading}>
                <div className="card">
                  <h3>{ (rowsCount !== undefined && rowsCount !== null) ? rowsCount : 0 }</h3>
                  <p>Rows analysed</p>
                </div>
                <div className="card">
                  <h3>{ (flaggedCount !== undefined && flaggedCount !== null) ? flaggedCount : 0 }</h3>
                  <p>Flagged rows</p>
                </div>
                <div className="card">
                  <h3>{ flaggedPct }%</h3>
                  <p>Flagged rate</p>
                </div>
              </div>

              <div style={{marginTop:12}}>
                <strong>Top reasons (click to filter)</strong>
                <div style={{marginTop:8}}>
                  { Object.keys(reasonsCount).length === 0 && <span className="muted">No flags found</span> }
                  { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).slice(0,18).map(function(kv){
                      var name = kv[0], count = kv[1];
                      var active = selectedReason === name;
                      return <button key={name} className="chip" style={{background: active ? '#dbeafe' : undefined, border: active ? '1px solid #60a5fa' : undefined}} onClick={function(){ onReasonClick(name); }}>{name} <span style={{marginLeft:8, opacity:0.8}} className="small">({count})</span></button>;
                  }) }
                </div>
              </div>

              <div className="main">
                <div className="left">
                  <div className="chart-wrap" style={{height:260}}>
                    <canvas ref={chartRef}></canvas>
                  </div>

                  <div className="searchbar">
                    <input placeholder="Search name, employee id, card or reason..." value={filterText} onChange={function(e){ setFilterText(e.target.value); setPage(1); }} />
                    <div className="muted">Showing { filtered.length } / { rows.length } rows</div>
                  </div>

                  <table>
                    <thead>
                      <tr>
                        <th>Employee</th>
                        <th className="small">ID</th>
                        <th className="small">Card</th>
                        <th className="small">Date</th>
                        <th className="small">Duration</th>
                        <th className="small">Reasons</th>
                        <th className="small">Overlap</th>
                      </tr>
                    </thead>
                    <tbody>
                      { pageRows.map(function(r, idx){
                          var empName = sanitizeName(r);
                          var displayDate = safeDateDisplay(r.Date || r.FirstSwipe || r.LastSwipe);
                          var durText = r.Duration || (r.DurationMinutes ? Math.round(r.DurationMinutes) + " min" : "");
                          return (
                            <tr key={idx} className="row-click" onClick={function(){ openModal(r); }}>
                              <td>{ empName || <span className="muted">—</span> }</td>
                              <td className="small">{ r.EmployeeID || "" }</td>
                              <td className="small">{ r.CardNumber || "" }</td>
                              <td className="small">{ displayDate }</td>
                              <td className="small">{ durText }</td>
                              <td className="small">{ r.Reasons ? <span className="pill">{ r.Reasons }</span> : <span className="muted">OK</span> }</td>
                              <td className="small">{ renderOverlapCell(r) }</td>
                            </tr>
                        );
                      }) }
                    </tbody>
                  </table>

                  <div className="pagination">
                    <button onClick={function(){ setPage(function(p){ return Math.max(1,p-1); }); }} disabled={page<=1}>Prev</button>
                    <div className="muted">Page { page } / { totalPages }</div>
                    <button onClick={function(){ setPage(function(p){ return Math.min(totalPages,p+1); }); }} disabled={page>=totalPages}>Next</button>
                  </div>
                </div>

                <aside className="right">
                  <div style={{marginBottom:12}}>
                    <strong>Files:</strong>
                    <div className="muted">{ (summary.files || []).join(", ") }</div>
                  </div>

                  <div style={{marginBottom:12}}>
                    <strong>Top reasons summary</strong>
                    <ul>
                      { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).slice(0,10).map(function(kv){
                          return <li key={kv[0]}><b>{kv[1]}</b> — <span className="small">{kv[0]}</span></li>;
                        }) }
                      { Object.keys(reasonsCount).length === 0 && <div className="muted">No flags found</div> }
                    </ul>
                  </div>

                  <div>
                    <strong>Help</strong>
                    <div className="small muted" style={{marginTop:6}}>
                      - Click <b>Run</b> to trigger analysis for chosen date(s).<br/>
                      - Range calls `/run?date=YYYY-MM-DD` for each date in the range sequentially.<br/>
                      - Click a row to open Details & evidence. Frontend will call `/record?employee_id=...` and then download raw swipe CSV(s) (served from `/swipes/<filename>`).<br/>
                      - If you see CORS errors, enable Flask-Cors on the backend or run the frontend from the same host as API.
                    </div>
                  </div>

                  <div style={{marginTop:12}}>
                    <strong>Raw JSON preview (first row)</strong>
                    <pre>{ rows[0] ? JSON.stringify(rows[0], null, 2) : "No sample yet" }</pre>
                  </div>
                </aside>
              </div>

              { modalRow &&
                <div className="modal" onClick={closeModal}>
                  <div className="modal-inner" onClick={function(e){ e.stopPropagation(); }}>
                    <button className="close-btn" onClick={closeModal}>Close</button>
                    <h3>Details</h3>

                    { modalLoading && <div className="muted">Loading evidence…</div> }

                    <div style={{marginTop:8}}>
                      <strong>Name:</strong> { sanitizeName(modalRow) } <br/>
                      <strong>EmployeeID:</strong> { modalRow.EmployeeID || "—" } <br/>
                      <strong>Card:</strong> { modalRow.CardNumber || "—" } <br/>
                      <strong>Date:</strong> { safeDateDisplay(modalRow.Date || modalRow.FirstSwipe) } <br/>
                      <strong>Duration:</strong> { modalRow.Duration || (modalRow.DurationMinutes ? Math.round(modalRow.DurationMinutes) + " min" : "—") } <br/>
                      <strong>Reasons:</strong> { modalRow.Reasons || "—" } <br/>
                      <strong>OverlapWith:</strong> { modalRow.OverlapWith || modalRow.swipe_overlap || "—" } <br/>
                    </div>

                    <div className="explain">
                      <strong>Why highlighted</strong>
                      <div style={{marginTop:6}}>
                        { renderReasonExplanations(modalRow.Reasons) }
                      </div>
                    </div>

                    <hr/>

                    <h4>Swipe Evidence</h4>
                    <div style={{marginTop:8}}>
                      { modalDetails && modalDetails.raw_swipe_files && modalDetails.raw_swipe_files.length > 0
                        ? <div className="small muted">Files: { modalDetails.raw_swipe_files.join(", ") }</div>
                        : <div className="muted">No raw swipe files found for this person/date.</div>
                      }

                      { /* Render swipe timeline */ }
                      <div style={{marginTop:8}}>
                        { modalDetails ? renderSwipeTimeline(modalDetails) : <div className="muted">Evidence not loaded yet.</div> }
                      </div>

                      { modalDetails && modalDetails.raw_swipe_files && modalDetails.raw_swipe_files.length > 0 &&
                        <div style={{marginTop:12}}>
                          <button onClick={function(){
                            // download first evidence file as-is
                            const fname = modalDetails.raw_swipe_files[0];
                            if(!fname) return;
                            window.location = API_BASE + "/swipes/" + encodeURIComponent(fname);
                          }}>Download first evidence CSV</button>
                        </div>
                      }
                    </div>

                    <hr/>
                    <h4>Full aggregated payload</h4>
                    <pre>{ JSON.stringify(modalRow, null, 2) }</pre>
                  </div>
                </div>
              }

            </div>
          );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
      })();
    </script>
  </body>
</html>













C:\Users\W0024618\Desktop\Trend Analysis\frontend\index.html

<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Trend Analysis — Dashboard</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <!-- React + ReactDOM + Babel (quick prototyping) -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      body { font-family: Inter, Roboto, Arial, sans-serif; margin: 0; padding: 0; background:#f6f7fb; color:#1f2937; }
      .container { max-width:1200px; margin:24px auto; padding:20px; background:#fff; border-radius:8px; box-shadow:0 6px 18px rgba(16,24,40,0.06); }
      header { display:flex; align-items:center; justify-content:space-between; gap:12px; flex-wrap:wrap; }
      header h1 { margin:0; font-size:20px; }
      .controls { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
      input[type="date"] { padding:8px; border-radius:6px; border:1px solid #e2e8f0; }
      button { padding:8px 12px; border-radius:6px; border:0; background:#2563eb; color:#fff; cursor:pointer; }
      button.secondary { background:#64748b; }
      button.ghost { background:transparent; color:#0f172a; border:1px solid #e2e8f0; }
      .cards { display:flex; gap:12px; margin-top:16px; }
      .card { flex:1; background:#f8fafc; padding:12px; border-radius:8px; text-align:center; }
      .card h3 { margin:4px 0; font-size:18px; }
      .card p { margin:0; color:#6b7280; }
      .main { display:flex; gap:18px; margin-top:18px; }
      .left { flex: 2; }
      .right { flex: 1; min-width:260px; }
      .chart-wrap { background:#fff; padding:10px; border-radius:8px; box-shadow: inset 0 0 0 1px #f1f5f9; }
      table { width:100%; border-collapse:collapse; margin-top:12px; }
      th, td { padding:8px 6px; border-bottom:1px solid #eef2f7; font-size:13px; vertical-align:middle; }
      th { background:#fafafa; position:sticky; top:0; z-index:1; text-align:left; }
      .small { font-size:12px; color:#475569; }
      .pill { display:inline-block; padding:4px 8px; border-radius:999px; background:#e6f2ff; color:#075985; font-size:12px; cursor:pointer; margin:2px; }
      .chip { display:inline-block; padding:6px 10px; border-radius:999px; background:#eef2ff; color:#034f84; font-size:13px; cursor:pointer; margin:3px; }
      .searchbar { margin-top:12px; display:flex; gap:8px; align-items:center; }
      .searchbar input { padding:8px; border-radius:6px; border:1px solid #e2e8f0; width:280px; }
      .pagination { margin-top:10px; display:flex; gap:8px; align-items:center; justify-content:flex-start; }
      .muted { color:#64748b; font-size:13px; }
      .spinner { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; background:rgba(255,255,255,0.6); z-index:999; }
      .modal { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; z-index:1000; }
      .modal-inner { width:760px; max-width:95%; max-height:85%; overflow:auto; background:#fff; border-radius:8px; padding:16px; box-shadow:0 10px 40px rgba(2,6,23,0.3); }
      .close-btn { float:right; background:#ef4444; color:#fff; border-radius:6px; padding:6px 8px; border:0; cursor:pointer; }
      pre { white-space:pre-wrap; word-wrap:break-word; background:#0f172a; color:#fff; padding:12px; border-radius:8px; }
      .row-click { cursor:pointer; }
      .overlap-pill { display:inline-block; padding:4px 8px; border-radius:6px; background:#fff2dd; color:#92400e; font-size:12px; }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      (function(){
        const { useState, useEffect, useRef } = React;

        const API_BASE = "http://10.199.45.239:8002";

        function pad(n){ return n.toString().padStart(2,'0'); }
        function formatDateISO(d){
          if(!d) return "";
          const dt = (d instanceof Date) ? d : new Date(d);
          return dt.getFullYear() + "-" + pad(dt.getMonth()+1) + "-" + pad(dt.getDate());
        }
        function datesBetween(start, end){
          var out = [];
          var cur = new Date(start);
          while(cur <= end){
            out.push(new Date(cur));
            cur.setDate(cur.getDate()+1);
          }
          return out;
        }
        function safeDateDisplay(val){
          if(!val && val !== 0) return "";
          try {
            var d = (val instanceof Date) ? val : new Date(val);
            if(isNaN(d.getTime())) return String(val);
            return d.toLocaleString();
          } catch(e) {
            return String(val);
          }
        }
        function sanitizeName(row){
          return row.EmployeeName || row.EmployeeName_x || row.EmployeeName_y || row.person_uid || "";
        }
        function downloadCSV(rows, filename){
          if(!rows || !rows.length) { alert("No rows to export"); return; }
          var cols = Object.keys(rows[0]);
          var lines = [cols.join(",")];
          rows.forEach(function(r){
            var row = cols.map(function(c){
              var v = (r[c] === undefined || r[c] === null) ? "" : String(r[c]).replace(/\n/g,' ');
              return JSON.stringify(v);
            }).join(",");
            lines.push(row);
          });
          var blob = new Blob([lines.join("\n")], {type:'text/csv'});
          var url = URL.createObjectURL(blob);
          var a = document.createElement('a'); a.href = url; a.download = filename || 'export.csv'; a.click(); URL.revokeObjectURL(url);
        }

        function App(){
          var yesterday = new Date();
          yesterday.setDate(yesterday.getDate()-1);

          const [dateFrom, setDateFrom] = useState(formatDateISO(yesterday));
          const [dateTo, setDateTo] = useState(formatDateISO(new Date()));
          const [loading, setLoading] = useState(false);
          const [summary, setSummary] = useState({rows:0, flagged_rows:0, files:[], end_date:null});
          const [rows, setRows] = useState([]);
          const [reasonsCount, setReasonsCount] = useState({});
          const [filterText, setFilterText] = useState("");
          const [page, setPage] = useState(1);
          const [selectedReason, setSelectedReason] = useState("");
          const [modalRow, setModalRow] = useState(null);
          const pageSize = 25;
          const chartRef = useRef(null);
          const chartInst = useRef(null);

          useEffect(function(){
            // load latest on mount
            loadLatest();
          }, []);

          async function runForRange(){
            setLoading(true);
            setRows([]);
            setSummary({rows:0, flagged_rows:0, files:[], end_date:null});
            setReasonsCount({});
            try {
              var start = new Date(dateFrom);
              var end = new Date(dateTo);
              var dateList = datesBetween(start, end).map(d => formatDateISO(d));
              var accRows = [];
              var totalRows = 0, totalFlagged = 0, files = [];
              for(var i=0;i<dateList.length;i++){
                var d = dateList[i];
                var url = API_BASE + "/run?date=" + d;
                var r = await fetch(url, { method:'GET' });
                if(!r.ok){
                  var txt = await r.text();
                  throw new Error("API returned " + r.status + ": " + txt);
                }
                var js = await r.json();
                var sample = js.sample || [];
                if(Array.isArray(sample) && sample.length) accRows = accRows.concat(sample);
                if(typeof js.rows === 'number') totalRows += js.rows; else totalRows += (Array.isArray(sample) ? sample.length : 0);
                totalFlagged += (js.flagged_rows || 0);
                if(js.files) files = files.concat(js.files);
              }
              setRows(accRows);
              setSummary({rows: totalRows, flagged_rows: totalFlagged, files: files, end_date: formatDateISO(new Date(dateTo))});
              computeReasons(accRows);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message);
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          async function loadLatest(){
            setLoading(true);
            try{
              var r = await fetch(API_BASE + "/latest");
              if(!r.ok) throw new Error("latest failed: " + r.status);
              var js = await r.json();
              var sample = js.sample || [];
              if(!Array.isArray(sample)) sample = [];
              setRows(sample);
              setSummary({rows: (js.rows || sample.length || 0), flagged_rows: (sample.filter(function(x){ return !!x.Reasons; }).length || 0), files:[js.file]});
              computeReasons(sample);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message);
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          function computeReasons(dataRows){
            var counts = {};
            (dataRows || []).forEach(function(r){
              if(!r.Reasons) return;
              var parts = String(r.Reasons).split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              parts.forEach(function(p){ counts[p] = (counts[p] || 0) + 1; });
            });
            setReasonsCount(counts);
            buildChart(counts);
          }

          function buildChart(counts){
            var labels = Object.keys(counts).sort(function(a,b){ return counts[b] - counts[a]; });
            var values = labels.map(function(l){ return counts[l]; });
            var ctx = chartRef.current && chartRef.current.getContext ? chartRef.current.getContext('2d') : null;
            if(!ctx) return;
            try { if(chartInst.current) chartInst.current.destroy(); } catch(e){}
            chartInst.current = new Chart(ctx, {
              type:'bar',
              data:{ labels: labels, datasets:[{ label:'Events', data: values, backgroundColor:'rgba(37,99,235,0.85)' }] },
              options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } }, scales:{ y:{ beginAtZero:true } } }
            });
          }

          // filtering & pagination
          var filtered = (rows || []).filter(function(r){
            var hay = (sanitizeName(r) + " " + (r.EmployeeID||"") + " " + (r.CardNumber||"") + " " + (r.Reasons||"")).toLowerCase();
            var textOk = !filterText || hay.indexOf(filterText.toLowerCase()) !== -1;
            var reasonOk = !selectedReason || (r.Reasons && ((";" + String(r.Reasons) + ";").indexOf(selectedReason) !== -1));
            return textOk && reasonOk;
          });
          var totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
          var pageRows = filtered.slice((page-1)*pageSize, page*pageSize);

          function exportFiltered(){
            downloadCSV(filtered, "trend_filtered_export.csv");
          }

          // click a reason chip to filter
          function onReasonClick(reason){
            if(!reason) { setSelectedReason(""); return; }
            if(selectedReason === reason) setSelectedReason(""); else setSelectedReason(reason);
            setPage(1);
          }

          // show details modal
          function openModal(row){
            setModalRow(row);
          }
          function closeModal(){ setModalRow(null); }

          // convenience counts for cards
          var rowsCount = (summary && typeof summary.rows === 'number') ? summary.rows : (rows ? rows.length : 0);
          var flaggedCount = (summary && typeof summary.flagged_rows === 'number') ? summary.flagged_rows : (rows ? rows.filter(function(r){ return !!r.Reasons; }).length : 0);
          var flaggedPct = rowsCount ? Math.round((flaggedCount*100)/(rowsCount||1)) : 0;

          // small helper to render overlap pill: OverlapWith field or swipe_overlap boolean
          function renderOverlapCell(r){
            var ov = r.OverlapWith || r.swipe_overlap || r.overlap_with || null;
            if(ov && typeof ov === 'string'){
              var parts = ov.split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              if(parts.length === 0) return <span className="muted">—</span>;
              return <span className="overlap-pill" title={ov}>{parts.length} overlap</span>;
            } else if(r.swipe_overlap === true || r.swipe_overlap === "True"){
              return <span className="overlap-pill">overlap</span>;
            }
            return <span className="muted">—</span>;
          }

          return (
            <div className="container" role="main" aria-live="polite">
              { loading && <div className="spinner"><div style={{padding:16, background:'#fff', borderRadius:8, boxShadow:'0 4px 20px rgba(2,6,23,0.1)'}}>Loading…</div></div> }

              <header>
                <h1>Trend Analysis — Pune</h1>
                <div className="controls">
                  <label className="small">From</label>
                  <input type="date" value={dateFrom} onChange={function(e){ setDateFrom(e.target.value); }} disabled={loading} />
                  <label className="small">To</label>
                  <input type="date" value={dateTo} onChange={function(e){ setDateTo(e.target.value); }} disabled={loading} />
                  <button onClick={runForRange} disabled={loading}>Run (date/range)</button>
                  <button className="secondary" onClick={loadLatest} disabled={loading}>Load latest</button>
                  <button className="ghost" onClick={exportFiltered} disabled={loading}>Export filtered</button>
                </div>
              </header>

              <div className="cards" aria-hidden={loading}>
                <div className="card">
                  <h3>{ (rowsCount !== undefined && rowsCount !== null) ? rowsCount : 0 }</h3>
                  <p>Rows analysed</p>
                </div>
                <div className="card">
                  <h3>{ (flaggedCount !== undefined && flaggedCount !== null) ? flaggedCount : 0 }</h3>
                  <p>Flagged rows</p>
                </div>
                <div className="card">
                  <h3>{ flaggedPct }%</h3>
                  <p>Flagged rate</p>
                </div>
              </div>

              <div style={{marginTop:12}}>
                <strong>Top reasons (click to filter)</strong>
                <div style={{marginTop:8}}>
                  { Object.keys(reasonsCount).length === 0 && <span className="muted">No flags found</span> }
                  { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).slice(0,18).map(function(kv){
                      var name = kv[0], count = kv[1];
                      var active = selectedReason === name;
                      return <button key={name} className="chip" style={{background: active ? '#dbeafe' : undefined, border: active ? '1px solid #60a5fa' : undefined}} onClick={function(){ onReasonClick(name); }}>{name} <span style={{marginLeft:8, opacity:0.8}} className="small">({count})</span></button>;
                  }) }
                </div>
              </div>

              <div className="main">
                <div className="left">
                  <div className="chart-wrap" style={{height:260}}>
                    <canvas ref={chartRef}></canvas>
                  </div>

                  <div className="searchbar">
                    <input placeholder="Search name, employee id, card or reason..." value={filterText} onChange={function(e){ setFilterText(e.target.value); setPage(1); }} />
                    <div className="muted">Showing { filtered.length } / { rows.length } rows</div>
                  </div>

                  <table>
                    <thead>
                      <tr>
                        <th>Employee</th>
                        <th className="small">ID</th>
                        <th className="small">Card</th>
                        <th className="small">Date</th>
                        <th className="small">Duration</th>
                        <th className="small">Reasons</th>
                        <th className="small">Overlap</th>
                      </tr>
                    </thead>
                    <tbody>
                      { pageRows.map(function(r, idx){
                          var empName = sanitizeName(r);
                          var displayDate = safeDateDisplay(r.Date || r.FirstSwipe || r.LastSwipe);
                          var durText = r.Duration || (r.DurationMinutes ? Math.round(r.DurationMinutes) + " min" : "");
                          return (
                            <tr key={idx} className="row-click" onClick={function(){ openModal(r); }}>
                              <td>{ empName || <span className="muted">—</span> }</td>
                              <td className="small">{ r.EmployeeID || "" }</td>
                              <td className="small">{ r.CardNumber || "" }</td>
                              <td className="small">{ displayDate }</td>
                              <td className="small">{ durText }</td>
                              <td className="small">{ r.Reasons ? <span className="pill">{ r.Reasons }</span> : <span className="muted">OK</span> }</td>
                              <td className="small">{ renderOverlapCell(r) }</td>
                            </tr>
                        );
                      }) }
                    </tbody>
                  </table>

                  <div className="pagination">
                    <button onClick={function(){ setPage(function(p){ return Math.max(1,p-1); }); }} disabled={page<=1}>Prev</button>
                    <div className="muted">Page { page } / { totalPages }</div>
                    <button onClick={function(){ setPage(function(p){ return Math.min(totalPages,p+1); }); }} disabled={page>=totalPages}>Next</button>
                  </div>
                </div>

                <aside className="right">
                  <div style={{marginBottom:12}}>
                    <strong>Files:</strong>
                    <div className="muted">{ (summary.files || []).join(", ") }</div>
                  </div>

                  <div style={{marginBottom:12}}>
                    <strong>Top reasons summary</strong>
                    <ul>
                      { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).slice(0,10).map(function(kv){
                          return <li key={kv[0]}><b>{kv[1]}</b> — <span className="small">{kv[0]}</span></li>;
                        }) }
                      { Object.keys(reasonsCount).length === 0 && <div className="muted">No flags found</div> }
                    </ul>
                  </div>

                  <div>
                    <strong>Help</strong>
                    <div className="small muted" style={{marginTop:6}}>
                      - Click <b>Run</b> to trigger analysis for chosen date(s).<br/>
                      - Range calls `/run?date=YYYY-MM-DD` for each date in the range sequentially.<br/>
                      - Overlap participants are visible inside a row's JSON details (click the row).<br/>
                      - Export filtered rows with the Export button.
                    </div>
                  </div>

                  <div style={{marginTop:12}}>
                    <strong>Raw JSON preview (first row)</strong>
                    <pre>{ rows[0] ? JSON.stringify(rows[0], null, 2) : "No sample yet" }</pre>
                  </div>
                </aside>
              </div>

              { modalRow &&
                <div className="modal" onClick={closeModal}>
                  <div className="modal-inner" onClick={function(e){ e.stopPropagation(); }}>
                    <button className="close-btn" onClick={closeModal}>Close</button>
                    <h3>Details</h3>
                    <div style={{marginTop:8}}>
                      <strong>Name:</strong> { sanitizeName(modalRow) } <br/>
                      <strong>EmployeeID:</strong> { modalRow.EmployeeID || "—" } <br/>
                      <strong>Card:</strong> { modalRow.CardNumber || "—" } <br/>
                      <strong>Date:</strong> { safeDateDisplay(modalRow.Date || modalRow.FirstSwipe) } <br/>
                      <strong>Duration:</strong> { modalRow.Duration || (modalRow.DurationMinutes ? Math.round(modalRow.DurationMinutes) + " min" : "—") } <br/>
                      <strong>Reasons:</strong> { modalRow.Reasons || "—" } <br/>
                      <strong>OverlapWith:</strong> { modalRow.OverlapWith || modalRow.swipe_overlap || "—" } <br/>
                    </div>
                    <hr/>
                    <h4>Full payload</h4>
                    <pre>{ JSON.stringify(modalRow, null, 2) }</pre>
                  </div>
                </div>
              }

            </div>
          );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
      })();
    </script>
  </body>
</html>















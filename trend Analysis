(.venv) PS C:\Users\W0024618\Desktop\Trend Analysis\backend> python app.py
Traceback (most recent call last):
  File "C:\Users\W0024618\Desktop\Trend Analysis\backend\app.py", line 7, in <module>
    from flask_cors import CORS
ModuleNotFoundError: No module named 'flask_cors'
(.venv) PS C:\Users\W0024618\Desktop\Trend Analysis\backend> 



# backend/app.py
from flask import Flask, jsonify, request
from datetime import datetime
from pathlib import Path
import logging
import pandas as pd
from flask_cors import CORS

# import runner
from trend_runner import run_trend_for_date

app = Flask(__name__)
CORS(app)  # enable CORS for browser testing
logging.basicConfig(level=logging.INFO)

# Resolve output directory relative to this file
BASE_DIR = Path(__file__).parent.resolve()
DEFAULT_OUTDIR = BASE_DIR / "outputs"
DEFAULT_OUTDIR.mkdir(parents=True, exist_ok=True)

@app.route('/')
def root():
    return "Trend Analysis API â€” Pune test"

@app.route('/run', methods=['GET', 'POST'])
def run_trend():
    # Accept date param (YYYY-MM-DD). If not provided, default to today.
    date_str = None
    if request.method == 'GET':
        date_str = request.args.get('date')
    else:
        if request.is_json:
            date_str = (request.json or {}).get('date')

    if date_str:
        try:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except Exception as e:
            return jsonify({"error": f"Invalid date format: {e}"}), 400
    else:
        target_date = datetime.now().date()

    # call runner with absolute outdir
    outdir = str(DEFAULT_OUTDIR)
    try:
        df = run_trend_for_date(target_date, outdir=outdir)
    except Exception as e:
        logging.exception("run_trend_for_date failed")
        return jsonify({"error": str(e)}), 500

    if df is None or df.empty:
        return jsonify({"message": "No records computed", "rows": 0}), 200

    flagged = df[df['Reasons'].notna()]
    return jsonify({
        "date": target_date.isoformat(),
        "rows": int(len(df)),
        "flagged_rows": int(len(flagged))
    })

@app.route('/latest', methods=['GET'])
def latest_results():
    p = Path(DEFAULT_OUTDIR)
    csvs = sorted(p.glob("trend_pune_*.csv"), reverse=True)
    if not csvs:
        return jsonify({"error": "no outputs found"}), 404
    df = pd.read_csv(csvs[0])
    sample = df.head(5).to_dict(orient='records') if not df.empty else []
    return jsonify({
        "file": csvs[0].name,
        "rows": int(len(df)),
        "sample": sample
    })

if __name__ == "__main__":
    # bind 0.0.0.0 so it is reachable on LAN (e.g., 10.199.46.101)
    app.run(host="0.0.0.0", port=8002, debug=True)




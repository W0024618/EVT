
# Updated denverAttendance.py
# Changes implemented:
# - Interleave monthly "Mon Total" columns after each month's day columns in header (e.g., Jan Total).
# - Date header formatted as "Wed, 1 January, 2025".
# - Weekend (Sat/Sun) columns highlighted with light red background.
# - Presence cells: 1 => green background, 0 => light red background.
# - Month total and Grand total columns/rows use light yellow background.
# - All cells aligned center.
# - Removed any stray/garbled rows; only employee rows + monthly totals + grand total are written.
# - Kept original DB fetching & dedupe logic intact.
#
# Note: This file depends on sqlalchemy, pandas, xlsxwriter. It writes an xlsx file and returns its path.

import os
from datetime import date, datetime, timedelta
from pathlib import Path
import pandas as pd
import re

ODBC_DRIVER = os.getenv("ODBC_DRIVER", "ODBC Driver 17 for SQL Server")
DB_SERVER = os.getenv("DB_SERVER", "SRVWUDEN0890V")
DB_USER = os.getenv("DB_USER", "GSOC_Test")
DB_PASSWORD = os.getenv("DB_PASSWORD", "Westernuniongsoc@2025")

DB_LIST = [
    "ACVSUJournal_00010021",
    "ACVSUJournal_00010020",
    "ACVSUJournal_00010019",
]

SQL_TEMPLATE = r"""
SELECT
    t1.[ObjectName1] AS EmployeeName,
    t1.[ObjectName2] AS Door,
    CASE WHEN t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR(200)) END AS EmployeeID,
    t3.[Name] AS PersonnelTypeName,
    CAST(t1.ObjectIdentity1 AS NVARCHAR(200)) AS EmployeeIdentity,
    t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t2.Text5 AS PrimaryLocation,
    CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        WHEN t1.[ObjectName2] LIKE '%Austin%' THEN 'Austin'
        WHEN t1.[ObjectName2] LIKE '%Miami%' THEN 'Miami'
        WHEN t1.[ObjectName2] LIKE '%NYC%' THEN 'New York'
        WHEN t1.[ObjectName2] LIKE 'APAC_PI%' THEN 'Taguig City'
        WHEN t1.[ObjectName2] LIKE 'APAC_PH%' THEN 'Quezon City'
        WHEN t1.[ObjectName2] LIKE '%PUN%' THEN 'Pune'
        WHEN t1.[ObjectName2] LIKE '%HYD%' THEN 'Hyderabad'
        ELSE t1.[PartitionName2]
    END AS LogicalLocation
FROM [{db}].dbo.ACVSUJournalLog AS t1
INNER JOIN ACVSCore.Access.Personnel AS t2 ON t1.ObjectIdentity1 = t2.GUID
INNER JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeID = t3.ObjectID
WHERE
    t1.MessageType = 'CardAdmitted'
    AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) BETWEEN '{start}' AND '{end}'
    AND (
        t1.[ObjectName2] LIKE '%HQ%'
        OR (t2.Text5 IS NOT NULL AND LOWER(t2.Text5) LIKE '%denver%' AND LOWER(t2.Text5) LIKE '%hq%')
        OR t1.[PartitionName2] = 'Denver'
    )
    AND LOWER(LTRIM(RTRIM(t3.[Name]))) IN ('employee','terminated personnel')
"""

def _get_engine(database: str) -> 'sqlalchemy.engine.Engine':
    from sqlalchemy import create_engine
    from urllib.parse import quote_plus
    odbc_str = (
        f"DRIVER={{{ODBC_DRIVER}}};"
        f"SERVER={DB_SERVER};"
        f"DATABASE={database};"
        f"UID={DB_USER};"
        f"PWD={DB_PASSWORD};"
        "TrustServerCertificate=Yes;Connection Timeout=30;"
    )
    quoted = quote_plus(odbc_str)
    url = f"mssql+pyodbc:///?odbc_connect={quoted}"
    return create_engine(url, pool_pre_ping=True, fast_executemany=True)

def _fetch_swipes_between(start_date: date, end_date: date) -> pd.DataFrame:
    start_s = start_date.strftime("%Y-%m-%d")
    end_s = end_date.strftime("%Y-%m-%d")
    frames = []
    for db in DB_LIST:
        sql = SQL_TEMPLATE.format(db=db, start=start_s, end=end_s)
        try:
            engine = _get_engine(db)
            with engine.connect() as conn:
                df = pd.read_sql(sql, conn)
            if not df.empty:
                df["SourceDB"] = db
                frames.append(df)
        except Exception:
            # keep going if a DB can't be reached
            continue
    if not frames:
        return pd.DataFrame()
    out = pd.concat(frames, ignore_index=True)
    out.columns = [c.strip() for c in out.columns]
    out["LocaleMessageTime"] = pd.to_datetime(out.get("LocaleMessageTime"), errors="coerce")
    return out

def generate_monthly_denver_report(start_date: date = None, end_date: date = None, outdir: str = None) -> str:
    if start_date is None:
        start_date = date(2025, 1, 1)
    if end_date is None:
        end_date = datetime.now().date()
    swipes = _fetch_swipes_between(start_date, end_date)

    # Deduplicate and filter (keep original logic intent)
    swipes["DateOnly"] = swipes["LocaleMessageTime"].dt.date.fillna(pd.NaT)
    def _dedupe_key(row):
        for col in ("EmployeeIdentity", "EmployeeID", "EmployeeName"):
            val = str(row.get(col)).strip() if row.get(col) else None
            if val and val.lower() not in ('', 'nan', 'none', 'null'):
                return val
        return None
    if swipes.empty:
        # prepare empty but valid xlsx with header layout
        ordered_days = []
        cur = start_date
        while cur <= end_date:
            ordered_days.append(cur)
            cur += timedelta(days=1)
        # still create file with headers
        return _write_excel([], ordered_days, {}, outdir, start_date, end_date)

    swipes["dedupe_key"] = swipes.apply(_dedupe_key, axis=1)
    swipes = swipes[swipes["dedupe_key"].notna()]
    swipes = swipes[swipes["PersonnelTypeName"].str.strip().str.lower().isin(["employee", "terminated personnel"])]
    swipes = swipes[swipes["LogicalLocation"].str.strip().str.lower() == "denver"]
    swipes = swipes.sort_values(["dedupe_key", "DateOnly", "LocaleMessageTime"], ascending=[True, True, False])
    swipes = swipes.drop_duplicates(subset=["dedupe_key", "DateOnly"], keep="first")

    # ordered days list
    ordered_days = []
    cur = start_date
    while cur <= end_date:
        ordered_days.append(cur)
        cur += timedelta(days=1)

    # presence matrix (index = dedupe_key, columns = date objects)
    presence = pd.DataFrame(0, index=sorted(swipes["dedupe_key"].unique()), columns=ordered_days)
    for _, r in swipes.iterrows():
        uid = r["dedupe_key"]
        d = r["DateOnly"]
        if pd.isna(d):
            continue
        try:
            presence.at[uid, d] = 1
        except Exception:
            continue

    meta = swipes.groupby("dedupe_key", as_index=True).agg({
        "EmployeeName": "first",
        "EmployeeID": "first",
        "PersonnelTypeName": "first"
    })

    # Build rows (list of dicts)
    rows = []
    for uid in sorted(meta.index):
        empid = meta.loc[uid, "EmployeeID"]
        empname = meta.loc[uid, "EmployeeName"]
        row = {"Emp ID": empid, "Emp Name": empname}
        for d in ordered_days:
            key = d.strftime("%Y-%m-%d")
            value = int(presence.at[uid, d]) if (uid in presence.index and d in presence.columns) else 0
            row[key] = value
        rows.append(row)
    df = pd.DataFrame(rows)

    # Create months mapping maintaining chronological order
    months = {}
    for d in ordered_days:
        mon_key = d.strftime("%b")  # e.g., Jan, Feb
        months.setdefault(mon_key, []).append(d.strftime("%Y-%m-%d"))

    return _write_excel(df, ordered_days, months, outdir, start_date, end_date)

def _write_excel(df, ordered_days, months, outdir, start_date, end_date):
    """
    df: DataFrame with columns 'Emp ID', 'Emp Name', and day columns named 'YYYY-MM-DD'
    ordered_days: list of date objects (chronological)
    months: dict mapping month short name -> list of 'YYYY-MM-DD' strings
    """
    outdir = Path(outdir or Path.cwd() / "output")
    outdir.mkdir(parents=True, exist_ok=True)
    fname = outdir / f"denver_attendance_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"

    import xlsxwriter
    workbook = xlsxwriter.Workbook(str(fname))
    worksheet = workbook.add_worksheet("Attendance")
    worksheet.hide_gridlines(2)

    # Formats
    header_fmt = workbook.add_format({"bold": True, "border": 1, "align": "center", "valign": "vcenter", "bg_color": "#87CEEB"})
    center_fmt = {"border": 1, "align": "center", "valign": "vcenter"}

    cell_fmt = workbook.add_format({**center_fmt})
    present_fmt = workbook.add_format({**center_fmt, "bg_color": "#C6EFCE"})     # light green
    absent_fmt = workbook.add_format({**center_fmt, "bg_color": "#FFC7CE"})      # light red for absent
    weekend_header_fmt = workbook.add_format({**center_fmt, "bg_color": "#FFDADA", "bold": True})
    weekend_cell_fmt = workbook.add_format({**center_fmt, "bg_color": "#FFDADA"})
    month_total_header_fmt = workbook.add_format({**center_fmt, "bg_color": "#FFEB9C", "bold": True})
    month_total_cell_fmt = workbook.add_format({**center_fmt, "bg_color": "#FFEB9C"})
    grand_total_fmt = workbook.add_format({**center_fmt, "bg_color": "#FFEB9C", "bold": True})
    empname_fmt = workbook.add_format({**center_fmt})

    # Build final columns in desired order: Emp ID, Emp Name, [Jan days..., Jan Total], [Feb days..., Feb Total], ..., Grand Total
    final_columns = ["Emp ID", "Emp Name"]
    month_order = list(months.keys())
    # Ensure months are in chronological order by scanning ordered_days
    # Build ordered month list by unique month abbrev in ordered_days
    seen = []
    for d in ordered_days:
        m = d.strftime("%b")
        if m not in seen:
            seen.append(m)
    month_order = seen

    month_day_lists = [months[m] for m in month_order]

    for m, day_list in zip(month_order, month_day_lists):
        final_columns.extend(day_list)
        final_columns.append(f"{m} Total")
    final_columns.append("Grand Total")

    # Write header row with formatted date strings
    for col_idx, col_name in enumerate(final_columns):
        if re.match(r"\d{4}-\d{2}-\d{2}", str(col_name)):
            # parse date string to nice format: "Wed, 1 January, 2025"
            d = datetime.strptime(col_name, "%Y-%m-%d").date()
            # Weekday short name (Mon/Tue...) or full? user wanted like "Wed, 1 January, 2025"
            header_label = f"{d.strftime('%a')}, {d.day} {d.strftime('%B')}, {d.year}"
            # Highlight weekend headers
            if d.weekday() >= 5:  # Sat=5, Sun=6
                worksheet.write(0, col_idx, header_label, weekend_header_fmt)
            else:
                worksheet.write(0, col_idx, header_label, header_fmt)
        elif col_name.endswith("Total"):
            # month total or grand total header
            worksheet.write(0, col_idx, col_name, month_total_header_fmt)
        else:
            worksheet.write(0, col_idx, col_name, header_fmt)

    # Set column widths a bit
    worksheet.set_column(0, 0, 15)  # Emp ID
    worksheet.set_column(1, 1, 30)  # Emp Name
    # other columns set to small width
    worksheet.set_column(2, len(final_columns)-1, 12)

    # Write employee rows
    if isinstance(df, (list, tuple)):
        df_rows = []
    else:
        df_rows = df.to_dict(orient="records") if not df.empty else []

    start_row = 1
    for r_idx, row in enumerate(df_rows):
        excel_row = start_row + r_idx
        # Emp ID and name
        worksheet.write(excel_row, 0, row.get("Emp ID"), empname_fmt)
        worksheet.write(excel_row, 1, row.get("Emp Name"), empname_fmt)
        # iterate months/days in same order as header
        col_ptr = 2
        for m, day_list in zip(month_order, month_day_lists):
            for day in day_list:
                val = int(row.get(day, 0) or 0)
                # If weekend column
                d = datetime.strptime(day, "%Y-%m-%d").date()
                if val == 1:
                    # present -> green even on weekends (user wanted green for present)
                    worksheet.write(excel_row, col_ptr, val, present_fmt)
                else:
                    # absent -> if weekend, light red (weekend highlight), else absent red
                    if d.weekday() >= 5:
                        worksheet.write(excel_row, col_ptr, val, weekend_cell_fmt)
                    else:
                        worksheet.write(excel_row, col_ptr, val, absent_fmt)
                col_ptr += 1
            # month total per employee
            month_total = sum(int(row.get(day, 0) or 0) for day in day_list)
            worksheet.write(excel_row, col_ptr, month_total, month_total_cell_fmt)
            col_ptr += 1

        # Grand total per employee
        # sum across all date columns
        all_date_cols = [c for c in row.keys() if re.match(r"\d{4}-\d{2}-\d{2}", str(c))]
        grand = sum(int(row.get(day, 0) or 0) for day in all_date_cols)
        worksheet.write(excel_row, col_ptr, grand, grand_total_fmt)

    # After all employees, write monthly totals row(s) (one row that summarizes column sums)
    summary_row = start_row + len(df_rows)  # next empty row
    # label cell: use "Total" as requested (no month-year suffix). To avoid repeated identical labels being confusing,
    # we will prefix with blank row and then write per-month totals with appropriate first col label "Total".
    worksheet.write(summary_row, 0, "Total", month_total_header_fmt)
    worksheet.write(summary_row, 1, "", month_total_header_fmt)
    col_ptr = 2
    for m, day_list in zip(month_order, month_day_lists):
        for day in day_list:
            # compute column sum for day
            if isinstance(df, (list, tuple)) or df.empty:
                day_sum = 0
            else:
                day_sum = int(df.get(day, pd.Series(dtype=int)).sum())
            # weekend header style for sum? treat as month total cell style for visibility
            d = datetime.strptime(day, "%Y-%m-%d").date()
            if d.weekday() >= 5:
                worksheet.write(summary_row, col_ptr, day_sum, month_total_cell_fmt)
            else:
                worksheet.write(summary_row, col_ptr, day_sum, month_total_cell_fmt)
            col_ptr += 1
        # write month total (sum of day sums)
        if isinstance(df, (list, tuple)) or df.empty:
            msum = 0
        else:
            msum = int(df[[d for d in day_list]].sum(axis=1).sum())
        worksheet.write(summary_row, col_ptr, msum, month_total_cell_fmt)
        col_ptr += 1

    # Final grand total cell (sum of all day columns)
    grand_col_idx = len(final_columns) - 1
    # compute grand total (sum of all day columns in df)
    if isinstance(df, (list, tuple)) or df.empty:
        grand_total_val = 0
    else:
        day_cols = [c for c in df.columns if re.match(r"\d{4}-\d{2}-\d{2}", c)]
        grand_total_val = int(df[day_cols].sum(axis=1).sum()) if day_cols else 0
    worksheet.write(summary_row, grand_col_idx, grand_total_val, grand_total_fmt)

    # Optional: Freeze header row
    worksheet.freeze_panes(1, 2)

    workbook.close()
    return str(fname)

if __name__ == "__main__":
    # quick local test path generation (won't connect to DB when run without DB)
    path = generate_monthly_denver_report()
    print("Wrote:", path)






















this Code gave me Correct output so Dont make any unnecessary changes.
Now Currently We got Output like ...


Emp ID	Emp Name	2025-01-01	2025-01-02	2025-01-03	2025-01-04	2025-01-05	2025-01-06	2025-01-07	2025-01-08	2025-01-09	2025-01-10	2025-01-11	2025-01-12	2025-01-13	2025-01-14	2025-01-15	2025-01-16	2025-01-17	2025-01-18	2025-01-19	2025-01-20	2025-01-21	2025-01-22	2025-01-23	2025-01-24	2025-01-25	2025-01-26	2025-01-27	2025-01-28	2025-01-29	2025-01-30	2025-01-31	2025-02-01	2025-02-02	2025-02-03	2025-02-04	2025-02-05	2025-02-06	2025-02-07	2025-02-08	2025-02-09	2025-02-10	2025-02-11	2025-02-12	2025-02-13	2025-02-14	2025-02-15	2025-02-16	2025-02-17	2025-02-18	2025-02-19	2025-02-20	2025-02-21	2025-02-22	2025-02-23	2025-02-24	2025-02-25	2025-02-26	2025-02-27	2025-02-28	2025-03-01	2025-03-02	2025-03-03	2025-03-04	2025-03-05	2025-03-06	2025-03-07	2025-03-08	2025-03-09	2025-03-10	2025-03-11	2025-03-12	2025-03-13	2025-03-14	2025-03-15	2025-03-16	2025-03-17	2025-03-18	2025-03-19	2025-03-20	2025-03-21	2025-03-22	2025-03-23	2025-03-24	2025-03-25	2025-03-26	2025-03-27	2025-03-28	2025-03-29	2025-03-30	2025-03-31	2025-04-01	2025-04-02	2025-04-03	2025-04-04	2025-04-05	2025-04-06	2025-04-07	2025-04-08	2025-04-09	2025-04-10	2025-04-11	2025-04-12	2025-04-13	2025-04-14	2025-04-15	2025-04-16	2025-04-17	2025-04-18	2025-04-19	2025-04-20	2025-04-21	2025-04-22	2025-04-23	2025-04-24	2025-04-25	2025-04-26	2025-04-27	2025-04-28	2025-04-29	2025-04-30	2025-05-01	2025-05-02	2025-05-03	2025-05-04	2025-05-05	2025-05-06	2025-05-07	2025-05-08	2025-05-09	2025-05-10	2025-05-11	2025-05-12	2025-05-13	2025-05-14	2025-05-15	2025-05-16	2025-05-17	2025-05-18	2025-05-19	2025-05-20	2025-05-21	2025-05-22	2025-05-23	2025-05-24	2025-05-25	2025-05-26	2025-05-27	2025-05-28	2025-05-29	2025-05-30	2025-05-31	2025-06-01	2025-06-02	2025-06-03	2025-06-04	2025-06-05	2025-06-06	2025-06-07	2025-06-08	2025-06-09	2025-06-10	2025-06-11	2025-06-12	2025-06-13	2025-06-14	2025-06-15	2025-06-16	2025-06-17	2025-06-18	2025-06-19	2025-06-20	2025-06-21	2025-06-22	2025-06-23	2025-06-24	2025-06-25	2025-06-26	2025-06-27	2025-06-28	2025-06-29	2025-06-30	2025-07-01	2025-07-02	2025-07-03	2025-07-04	2025-07-05	2025-07-06	2025-07-07	2025-07-08	2025-07-09	2025-07-10	2025-07-11	2025-07-12	2025-07-13	2025-07-14	2025-07-15	2025-07-16	2025-07-17	2025-07-18	2025-07-19	2025-07-20	2025-07-21	2025-07-22	2025-07-23	2025-07-24	2025-07-25	2025-07-26	2025-07-27	2025-07-28	2025-07-29	2025-07-30	2025-07-31	2025-08-01	2025-08-02	2025-08-03	2025-08-04	2025-08-05	2025-08-06	2025-08-07	2025-08-08	2025-08-09	2025-08-10	2025-08-11	2025-08-12	2025-08-13	2025-08-14	2025-08-15	2025-08-16	2025-08-17	2025-08-18	2025-08-19	2025-08-20	2025-08-21	2025-08-22	2025-08-23	2025-08-24	2025-08-25	2025-08-26	2025-08-27	2025-08-28	2025-08-29	2025-08-30	2025-08-31	2025-09-01	2025-09-02	2025-09-03	2025-09-04	2025-09-05	2025-09-06	2025-09-07	2025-09-08	2025-09-09	2025-09-10	2025-09-11	2025-09-12	2025-09-13	2025-09-14	2025-09-15	2025-09-16	2025-09-17	2025-09-18	2025-09-19	2025-09-20	2025-09-21	2025-09-22	2025-09-23	2025-09-24	2025-09-25	2025-09-26	2025-09-27	2025-09-28	2025-09-29	2025-09-30	Jan Total	Feb Total	Mar Total	Apr Total	May Total	Jun Total	Jul Total	Aug Total	Sep Total	Grand Total


Expected Output is 

Emp ID	Emp Name	2025-01-01	2025-01-02	2025-01-03	2025-01-04	2025-01-05	2025-01-06	2025-01-07	2025-01-08	2025-01-09	2025-01-10	2025-01-11	2025-01-12	2025-01-13	2025-01-14	2025-01-15	2025-01-16	2025-01-17	2025-01-18	2025-01-19	2025-01-20	2025-01-21	2025-01-22	2025-01-23	2025-01-24	2025-01-25	2025-01-26	2025-01-27	2025-01-28	2025-01-29	2025-01-30	2025-01-31  Jan Total 2025-02-01	2025-02-02	2025-02-03	2025-02-04	2025-02-05	2025-02-06	2025-02-07	2025-02-08	2025-02-09	2025-02-10	2025-02-11	2025-02-12	2025-02-13	2025-02-14	2025-02-15	2025-02-16	2025-02-17	2025-02-18	2025-02-19	2025-02-20	2025-02-21	2025-02-22	2025-02-23	2025-02-24	2025-02-25	2025-02-26	2025-02-27	2025-02-28	Feb Total 2025-03-01	2025-03-02	2025-03-03	2025-03-04	2025-03-05	2025-03-06	2025-03-07	2025-03-08	2025-03-09	2025-03-10	2025-03-11	2025-03-12	2025-03-13	2025-03-14	2025-03-15	2025-03-16	2025-03-17	2025-03-18	2025-03-19	2025-03-20	2025-03-21	2025-03-22	2025-03-23	2025-03-24	2025-03-25	2025-03-26	2025-03-27	2025-03-28	2025-03-29	2025-03-30	2025-03-31 March total 	2025-04-01	2025-04-02	2025-04-03	2025-04-04	2025-04-05	2025-04-06	2025-04-07	2025-04-08	2025-04-09	2025-04-10	2025-04-11	2025-04-12	2025-04-13	2025-04-14	2025-04-15	2025-04-16	2025-04-17	2025-04-18	2025-04-19	2025-04-20	2025-04-21	2025-04-22	2025-04-23	2025-04-24	2025-04-25	2025-04-26	2025-04-27	2025-04-28	2025-04-29	2025-04-30 APRIL Total 2025-05-01	2025-05-02	2025-05-03	2025-05-04	2025-05-05	2025-05-06	2025-05-07	2025-05-08	2025-05-09	2025-05-10	2025-05-11	2025-05-12	2025-05-13	2025-05-14	2025-05-15	2025-05-16	2025-05-17	2025-05-18	2025-05-19	2025-05-20	2025-05-21	2025-05-22	2025-05-23	2025-05-24	2025-05-25	2025-05-26	2025-05-27	2025-05-28	2025-05-29	2025-05-30	2025-05-31 May Total 2025-06-01	2025-06-02	2025-06-03	2025-06-04	2025-06-05	2025-06-06	2025-06-07	2025-06-08	2025-06-09	2025-06-10	2025-06-11	2025-06-12	2025-06-13	2025-06-14	2025-06-15	2025-06-16	2025-06-17	2025-06-18	2025-06-19	2025-06-20	2025-06-21	2025-06-22	2025-06-23	2025-06-24	2025-06-25	2025-06-26	2025-06-27	2025-06-28	2025-06-29	2025-06-30 June Total 2025-07-01	2025-07-02	2025-07-03	2025-07-04	2025-07-05	2025-07-06	2025-07-07	2025-07-08	2025-07-09	2025-07-10	2025-07-11	2025-07-12	2025-07-13	2025-07-14	2025-07-15	2025-07-16	2025-07-17	2025-07-18	2025-07-19	2025-07-20	2025-07-21	2025-07-22	2025-07-23	2025-07-24	2025-07-25	2025-07-26	2025-07-27	2025-07-28	2025-07-29	2025-07-30	2025-07-31 July Total 2025-08-01	2025-08-02	2025-08-03	2025-08-04	2025-08-05	2025-08-06	2025-08-07	2025-08-08	2025-08-09	2025-08-10	2025-08-11	2025-08-12	2025-08-13	2025-08-14	2025-08-15	2025-08-16	2025-08-17	2025-08-18	2025-08-19	2025-08-20	2025-08-21	2025-08-22	2025-08-23	2025-08-24	2025-08-25	2025-08-26	2025-08-27	2025-08-28	2025-08-29	2025-08-30	2025-08-31	2025-09-01	2025-09-02	2025-09-03	2025-09-04	2025-09-05	2025-09-06	2025-09-07	2025-09-08	2025-09-09	2025-09-10	2025-09-11	2025-09-12	2025-09-13	2025-09-14	2025-09-15	2025-09-16	2025-09-17	2025-09-18	2025-09-19	2025-09-20	2025-09-21	2025-09-22	2025-09-23	2025-09-24	2025-09-25	2025-09-26	2025-09-27	2025-09-28	2025-09-29	2025-09-30 Sep Total   Grand Total

Upadte Header rows as per Expection...


also after all Employee ID 
below display like 
Sep-2025 Total	
Here We dont need Sep-2025  
Display only Total and Total Column sum ( 2nd jan Total Count , 3rd Jan Count )

also below Currently we are display ..

	Klausner, Tom DLeFevre, KimmyWhiteneck, Peter J.Cheplowitz, AlexHagood, NatashaMcMahon, DannyJawad, SamSwoboda, BrendanAromando, Dakota ChristopherSierra, PacoLytle, Alison S.Ramirez, LuciaLinehan, EmilyLewis, David WayneKorf, AdamDalessandro, KatelynRout, NibeditaMoore, KenyaFetterley, JamieBright, DeidreaAdams, BenStewart, ColeEldred, EricSchloeman, WilliamMeyers, MatthewWagle, Kiran P.Powar, SantoshElnaffar, YousefDalal, ShivaniViswanathan, Sasi kumarJeyachandran, BharathAnderson, JonathanLittle, Kersten D.Hertel, DaltonLee, LettyRubino, Gary PNataraja, Akshaysiddam, bhanuchandraRavada, Manmadha RajuReyes, ClaudiaSamala, Ramchandra ReddyGupta *, AbhinavNagpure, VaishaliCavalieri, KammiAllen, JenWehrheim, JustinSingh, KuldeepGrieze, AinorasPeterman, IreneTamulionyte, AkvileThumma, VijayRupczynski, BobBarcia, Ana MarielBonger, TonyPydi, Surya PrashantThornton, AkoGomez, MelodyDHARAMSHI, PRANAYKonrad, JoeStrauss, ChrisMullis, JuliaReddi, SatishValenzuela, Roberto JRDanielewski, DariuszMartin, RachelSmith, KathrynShao, YanStair, WendyCramer, JimFrancon, AxelGonzalez, Lisa RichelleBrachfeld, JoeHariharan, PrakashHadley, TomKeyser, AshliCulp, JustinHoldridge, AdamStewartson, Sloane EliseCarroll, TimothyIlangoraja, JesseRitter-Martin, AgathaTrujillo, NickDhamodharan, Gopi KrishnaBird, RyanZhawred, Stephen R.Pandorf, CooperHinsey, MarkKundu, DebabrataBrunnschweiler, Nick AntonioGell, WinstonMiller, AmyTorres, GabeRotter, BradleyRalston, LaurenGale, ShariDimov, TatjanaBrown, Marcus CKraft, JessicaArellano, Adam JoseStencel, BartRosario, JoshuaMarx, MarySchenck, AdamQuerry, Emily ERossignol, DebyNegi, AsheeshBunger, DavidBartlett, TerriJohn, JobyMcGinley, SarahLaurinec-Studer, EmilyPogodzinski, ShelleyCho, KarenLitz, NickGandhi, Denish AnilkumarSorbo, GabrielBathla, SwatiRojo Lesnick, ItziaHolloway, WillClarke, MalcolmUrbanek-Falbo, Heather ARassouw, DelphineGraham, PaulaFores, IgnacioTaylor, JarodDico, JanMurphy, TimRamantauskas, PauliusYusufov, ArtNimmer, ChaseColeman, BradDalvi, GirishJordan, Brian EricMacdonald, ChrisBallard, Molly S.Burns, RobynKolli, DivijaAreti, NarasimharaoAngelini, GiovanniNguyen, Tien LeMichaud, Kristi R.Perea, Kristy KBochmann, MicheleMahajan, VaibhavFileva, AnnaGinjupalli, Venkata Giri PrasadMandino, William A.Santos, JavierLay, KatrinaBabino, MaximilianoCann, RosieHopkins, DaycenLorenzo, Christopher J.Kinney, Jessica LeighBoshears, Rhen JamesEdwards, EricaNelson, Ava LuciaGouri setti, GouthamHartnett, KevinStitt, Monica MichelleTaylor, AustinLentz, Andrea MarieBelfield, Meridith VanInwegenBrehmer, Steven JLord Eisert, StephenieSeetharam, KasirajanYurek, MeganKulkarni, PrasadBurden, SeanBurugadda, Venkata RaghuveerSnurka, JonCrowley, SaritaGole, JasonRuiz, PatricioFerreira de Carvalho, DeniseWyant, Cammy JHayrynen, Shauna LMukhopadhyay, ParomitaBernstein, JoshBellotto, AlessandroMontgomery, HeatherSinha, Shivesh kumarMunoz, AndresSevugan, VigneshwaranFormento, DennisMaslar, Rebecca LynnStanley, MarkLake, QuintonDoze, SarahBoyd, Eric RSymons, Candice PatriciaPolice, Mallikarjun ReddyStonyte-Yapura, RasaYeskoo, Christopher PaulGarson, HeatherShi, NiWitham, AmyAllen, GabrielleBerry, MarthaArchuleta, MarkOchoa, MariaAuberry, AmeeCarmichael, ShereeMaciel, Monique ACheruku, Saketh ReddyJensen, MikaKong, DavidWilliams, Ericka KristenSingla, RohitJurado, JoseLee, Brian ChristopherMarostica, DanGodbout, BruceRickman, Venessa D.Kraft, NickSplatt, GordonBouwman, Simon RMorrissey, SeanBunge, JoanRussell, JuliaBennett, MatthewSullivan, PatrickDeLong, Brandee LynneFerguson, Todd JZwart, KatieRivera, LuisAlexander, Timothy JustinKroeker, NathanDuque Norena, SantiagoBurke, Griffin LSundarrajan, SucindranNelson, BrentDierks, Kevin S.Anderson, JenniferJaalouk, CynthiaDavis, DianaWeeks, Michael BWalker, LisaWright, DeniceNguyen, AnnieKhayut, BorislavBarakat, Mazen RCasco, Carolina JTaborda, MarcelaBarta, Jennifer MSteele, LalaPettit, NikkiDolce, Billy JoeCeaser, Nico A.Murri, RichKolage, TruptiJustice, Colt W.Valaikiene, RusneDavies, KatieRamadan, AbdallaSuthiana, Steven SatwikaChavan, Suhas PGlaser, MarkChapman, ChadCortes, DeliaRodrigues Santos, MarcioPugaonkar, PranavLavey, John KennedyCarlson, WilliamBruns, Devira A.Varala, Srikanth ReddyRopp, NeelaChandrasekar, KarthickRyan, Rebecca DawnOrozco, BernieAubin, Christopher JamesSlusser, AlexLozinskiy, VladRankin, Katy LynnBrown, TylerMalamud, VladMcDonough, Scott AMorgan, Mathilde Marie MadeleineKadali, Pradeep KumarManzo Santa Cruz, PriscillaYamasaki, Beau ZacharySwiekatun, SueMantey, Isaac AleawobuBurri, Srinivasa RaoKidder, Jack deForestRiedl, LibbyHinrichs, Dean M.Mejia, DaniloIarusso, CathyOrr, NickiLopez, CindyHuss, JulieLechner, Coleman T.Jalihal, SadhanaOwens, BrittanyPrince, MichellePant, ChandreshLofton, MontiquaMontoya, CathyMulumudi, ShyamRamirez, IsaacSada, RodrigoMontoya, Gloria EsthelaUnhock, LindseyKowal, Jeff ZSquibbs, GraceLopez, Jean CarloRodriguez, OraliaBhagat, VikramHartnett, Lawrence Wayne PikeLovelace, Ben A.McSwain, AndrewMcCormick, Carin SHarris, LynnMoran, GraceGonzalez, FedericoHartman, DonavanVargas, JorgePlummer, KelleyGreenholz, SteveThompson, MichelleEl Hassani El Alaoui, HoudaYokley, AlexKavanoor Sampath, Lakshmi LavanyaChennamaneni, Sudhamsh RaoBlanco, JuanPineda, Mercedes G.Trucke, DanielHammer, ChrisPatapanchala, Venkata BhargavHarrison, Rebecca MWynne, AdamWilliams, Ashleigh P.McMillan, JerimiaRenzo, Jennifer ChungWest, RickDerrig, WhitneyVega Hernandez, Lluvia MarahiSzymanski, CorneliaMiller, AlyssaPeters, MonicaJoscelyne, KrystalBelavadi, AmodPritchard, Dustin GSaenz, Robert JVaruvel Kurz, David RajaMorris, KristalElmore, NinaSpence, ShannonLiggins, LinaParker, Jeramie D.Hess, MatthewLopez, AlexYelgalwar, AbhishekSharpe, StuPhin, TeresaWesche, Elisa ClarkCole, ChristelVasireddy, Kranti RekhaSingleton, DeniseThompson, Nicholas WBencomo, ElizabethOberoi, AdityaPhillips, Collin AnthonyVignolo, AshtonJuarez, NatalieMcDaniel, PaigeGanesh, RamsrivatsanD'Nicuola, JeffTorres, CandyCoffelt, TyTaylor, BlaineHoward, StephanieQuintana Ramirez, JimenaLeVier, TimMusirigari, Divya ReddyParuvakkat, Ranjith MenonGerassimova, OlgaPruneau, Alyssa LaurenIzenstark, SpencerDobrinic, UnaDeavers, NomHaley, StephanieHewage, Mahesh Nishshanka AriyadasaRidgway, BrandonNichols, WilliamBambarger, AshleyTrostle, CharlesValluru, SathyanarayanaDash, NikhilNieto, Felicia FKeegan, Colleen ElizabethMalloy, SamanthaTayler, JoshWhite, Matthew BPicado, WillyNigam, HarshStansbury, MegginHenry, CarlosSheetz, JakeWalker, AndrewJampani, PriyathamYakusheva, PolinaPesa, RichTran, TrinhVukanti, Ranjith ReddySilvestre, MarthaPatel, MohilHanson, Nancy PSmith, JamesInsam, ReneRuiz Salas, GeryShaw, BrandonDeese, FrankRagi, SumanthVojjala, PrashanthPoltl, ChrisKane, MaryDubey, DhirendraTopiwalla, NehaFarajAllah, MazzaLuft, MathiasSalnaite, GabrieleRamirez, JessicaPendleton, MarlisBarnes, Amy RGallegos, KristinaByers, MikeVaisiauskaite, LauraTessitore, Jacqueline EChavez, LindseyErwin, AdlaiChin, RyanNassar, Lena C.Grimes, BenKattikar, Sunil DasharathGrother, Benjamin IShah, SwatiMyers, AliciaStoller, Rachel ParkerMeka, VarunYarram, Srinivasa ReddyMiles, MikeErkaeva, LolaGall, JulieHuggins, MichaelMartinez, Ethan RyanSharpe, TravisRugg, Deborah FischerRaut, BhushanGarcia, LuisArikatla, PallaviPlotkin, YuliyaPorter, MarkHennager, Sheri DelaineThompson, AlexanderMandalas, NicholasMulholland, MaryRobbins, Julie MAschenbrenner, Sangkhone J.Kay, Paul MatthewDaly, Tim PSteiner, John-MichaelBarnett Miller, Enrique AlbertoKnutson, WendyWilbon, TahashaFritts, Rhonda LynnStazick, JeffKarnati, DineshLucito, Therese AWelch, NicholasKuppusamy, VinothBowers, AnitaSherman, LisaFox, RichGarcia Carrillo, MelanyRackauskas, PovilasAl Haideri, HumamGriset, Zachary FrancisNavarro, Maria CelesteSmith, TylerWallace, CaraSingh, PavanHanif, AamirStoglin, RaeganTarlekar, NileshEnriquez, JenniferLaCroix, Jonathan ScottDebrand, AxelDinucci, Jane R.Smith, ChrisRowe, Nichoel LSawhney, SharadGhaderi, AbolMorales, John MMercado, LizMitchell, Heather LNair, Satheesh ChandranResnick, DavidChu, SusanScordo, AJHarpe, KierstenZaltauskiene, UgneNguyen, ToanMoore, TasiaFarrier, BrendanAlvisini, MassimilianoEspitia, EduardoGAIHRE, BIBEKAguero, EmmanuelNair, DipinAldecoba, FranciaZhuang, RyanBopearachchigedon, Pradeep KamalNichols, TomSavenko, OlesyaUppalapati, SrinivasHawksworth, BenLee, Michael DKouahi, SaurelSammon, MarniSpetoskey, RyanFogleman, Ana Leticia OikawaMilazzo, MariaGardebled, RyanMilliner, MichallaWilliams, Casey DaltonDerugo, IvanStinemetze, StephenKorlapathi, Chandu BabuLee, RubyLenich, Paul ADoran, JuliaStone, RobBaker, GrahamKrause, Kile P.Muhammadi, WasimaHerrera, LuciaTouhami El Ouazzani, MohamedGriffin, AbigailWickwire, KyleTakkellapati, VenkateswarluNyam-Ochir, IngaJoerres, JeffCarney, JasonShaikh, Mohammed RayyanVenkatesan, SaravananCasse, AlesyaColombo, CharlesGarlapati, VamsiSeaman, RyanLaurent, GregoryPayne, Jodi RFerando, SamPatait, KonicaKrishnam, ShreyaLasswell, Laura B.Tucson, AaronMcMillan, RyanRanjan, SwatiKopier, KellyGarces, KerriDa Silva, PriscilaMcCarthy, TylerZajd, Walter JPaka, SonikaKaptanian, ChristineGilmour, DanHatch, Don AdamsNaeff, AlexWeil, SamuelSharkey, CraigCagwin, MattFletchinger, Erica DawnTrujillo, JeffAllen, Lindsey A.Shaw, AlexArcher, AaronGeleta, IyasuClendaniel, GaryBorders, ChrisArchuleta, RichPatel, Rushikesh SuryakantKessel, LynnRohr, Scott CorneliusLartey, Diamond S.Harmer, RichardDeBakey, BenMancero, AlexLee, KimTacderas, CodyLupo, WendyBimmerle, Liesel MGehrke, TeressaLincoln, MathewPearson, Alex SMonje, Karla GHaley, BrysonLachuriya, SumeetEnglish, ChristineLeDuff, BreyonChabolla, MarthaWare, DominaeBorini, CaraGlendenning, HeatherRoelke, Cindy MSchoenfeld, JohannOdau, Jason LSunkara, AmarnadhSinha, DeepshikhaWright, JennaKalimuthu, GunasekarMartinez Reynoso, IsraelSnead, Tyler WilliamHuang, KathyShilhan, CraigFord, PatrickAcevedo, AlondraJacobs, JuliaVences, JeanetteDobnak, JoshBell, LaurenNye, WilliamLe, TommyPadasala Nagesh, Gowri ShankarBanton, Jamison M.Piltz, SandraTreaster, Emily MayReasch, JessicaBirajdar, ChetanRadhakrishnan, SaravananDeCampos, RobMuralidoss, NaveenHundon, Linda KDulik, AJSanchez, Roy StacyDyess, MelissaMitchell, TaraAtkins, KurtLatchman, JuneKinsel, KathyLadoja, AjibolaArias Chaves, JohannApodaca, ScottWilliams, Blake MontgomeryHuynh, HannahBogachov, MaxHernandez, YuriDagenhart, ChadHolzworth, John RobertZhang, JoryGifford, Paul MichaelKahn, Tyler A.Hypsher, ZoCross, AubreeMiller, SibylleRanganathan, SenthilnathanSmith, Caitlin MO'Brien, SeanThatikonda, PriyankaIsetta, Cintia EAdams, ReggieCarmichael, Sheila S.Formento, MaximilianoGrubb, Leanne WarrinerUechi, BreanaPak, PrestonSalazar, DavidSubramanian, PonnurajHojan, LaurenVatsavai, AnveshSharma, YogitaMcGranahan, DevinLarson-Curcio, LenetteMishra, Brajesh RGracia, ReneMcCoy, Katy C.Khuu, MayMarquez, MaurentMcCallon, AnnaBhasin, NikhilHutcheson, SallieBolinski, JasonPUENTE, ALEJANDROWest, MeganBerger, ChristianCooper, Barry DerekRushall, DavidFink, LisaKasim Ramesh, Vinay ChanderRivas, Yarethzi DenisseMendoza, MiaDeNatale, Jack VandeverZapolskis, KarolisRicoy, Maia SolTarango, MonicaDaniel, ConnerKeen, SamuelRiekenberg, GrantKroisenbrunner, ReinhardKamsani, MallikarjunWeiss, Chelsea P.DeSmidt, Thomas RMarsella Calles, JavierSprague, RachelAnhuth, MichaelMedina, YeniferGorantla, AshokBailey, AaronAdams, MarkJerison, RozinaTonelli, Christine KRusso, DominickLewis, Lisa MNati, Anil KLudwinski, Annalisa RuthHume, KaylaKohler, Joshua D.Seres, MarkAgarwal, DivaTews, EricSalazar, StephanieDahmer, Erin JoWilliams, Priscilla LWard, Brian MichaelOrdonez, LuzVillacis, LisaGutierrez, Alexa NicolePark, LeslieSanchez Aranguren, HugoGelroth, VanessaBrown, RobinSubramanian, NivethidhaHartford, LaceyPage, DonnaStepanian, JuliaMole, Kevin C.Zamora, JohanPotla, NarenderRiefenberg, MicheleWillett, MaxNeti, YashwantWriston, Nathan AGottschalk, Roger LLarson, EmilyPleasant, JulieRodriguez, DiegoIvie, Sharrae RaelynGodkin, Preston JohnBrown, JessicaKeelan, MichaelFrancis, MargoMorales, CarlosPericoli, Alejandro MarianoBarakat, Monthir R.Roberts, ClaySarai, RanjitUche, Dike AgwuMcCoy, TaylorReyes, PerfCorby, SuzieFredrickson, Dan PGallivan, AnnMartinez, Luis AntonioChan, Marie-AngeDavidson, Jennifer JaworskiTen, EugeneAlle, VijayanandLim, Michael ABebic, YouriCrews, StaciBlevins, TravisBenavides, ChrisGlazkina, DianaSmith, Holly JCarmichael, Tilissa RaeDe Vries, J.P.Gupta, MansiBarrows, KatharinePiper, MonicaKuon, Nicholas JKrishnamoorthy, KrisGuzi, Courtney M.Kulai, Aditya RaghunathPolitte, NickHerrera, MargaritaKelsay, Misti MCunningham, Erik S.MacGillivray, Bradford TylerPena, FernandoGuderjahn, ClaireDelgado, Francisco IgnacioWhiles, KellyHendrickson, StephanieMarri, RojaramaniEnneking, LeslieDexter, SuziVidal, CinthiaJelinek, ErikJain, AyushiRieb, JeffAvila Calvo, Eduardo AlonsoTolbert, MikeLaird, HeatherGottschalk, AllysonPatel, VivekDorchinez, HollyBriscoe, Aaron MWhite, JanaiHolden, BetsyDamiano, TiffanyPhadtare, SujayCooper, KaizerMendis, RukshanHubley, MaxwellStone, DanielKapellusch, DanielPuttaraju, Tulsi RamPringle, PhilipKirby, Mary IMorales, FernandoSheth, AnishMedina Lopera, LizethHall, SkylerKarri, MalleshwarDorf, JordanRoach, MatthewCowley, MattMalhotra, AnishAhmadi, Mohammad MahdiChennupati, Sai VamsiRemy, SeanJones, SteveTrinidad, LeslyGillespie, BrendaKeishing, MingthinglaPiacente, JaniceBonilla, JesusFlores, TatianaSands, BillAllahverdiyev, MehdiWitten, SophiaGrinacoff, HectorHaseltine, Jeff MGarg, ParveshWeng, CalvinBlinzler, RonDelas Carnevali, FernandoVilums, AleksisMathew, JohnsonKshatriya, MukulMincks, Seth MPatel, VirenIsaacs, Samuel JosephBarraza, JazminLandes, YushuJoshi, SohamRagnone-Biesiada, CharleneMiller, PaulaSinha, Chandan KumarEllis, EdmondWoo, Keum SukLloyd, KellyGleason, DanMaganahalli, RupaDuggar, JoelRajola, SohiniBeck, AlyssaShivashankar, DivyaBourne, JasonEspinosa, JohnnyFlynn, JeannaJeffries, JoelRodo, MariaKorn, RyanS Prathap, NimmiHollen-Forbes, CatNelson, KatieDupree, AmandaStagi, KathleenPlotz, AlexBush, Megan WRamakrishnan, PriyankaCrance, Rebecca A.Desetty, SriramSuresh, ManuAtencio, CarlyLooby, JeffreyWilliams, CindyBeltran, OliviaComan, Jeff AMaurice, Cameron AOad, AdityaEichelberger, AndrewJohn, KiaDarna, RaviArtica, Francisco JavierArce, MichaelJones, Brad S.Fernandez, HeizzelVarone, Gerren KRichards aka JR, JamesBerghoff-Good, LaurieAxelrod, Cherie ZSathasivan, SundareshWithey, MattPlomondon, TylerAzaneckaite, AurelijaHernandez Saenz, FabianLaible, Kristen AshleyKaluva, Vineeth ReddyGeyer, PamelaKolhatkar, Anvay DilipGorton, Christian MichaelParker, Charles LeslieAnnamalai, Sathish KumarChase Owens, ShaDurvasula, SurekhaVahling, Jana L.Chacon-Powell, Stephanie ReneeHavekost, JoePullar, KristinGarcia, RodrigoSapp, DaneshaRichardson, DavidEscobedo, JillianJohnson, Bruce KGaddam, RajeshOQuinn, Jaccob WyattReynolds, Chris NRacine, Jennifer R.Williamson, AmpaLeung, Christine SHorning, TanyaChakraborty, SubhamMcPherson-Wiman, Tyler PLiu, SabrinaMorales, SubonyRawle, PatrickClausen, JodiBerson, DavidLu, RuiMurphy-Mannix, TrevorKollipara, SreeharshaCaldwell, KatieVillafuerte Pryor, Mona BValdez-Tracy, RochelleBlaylock, KyleBurns, William HenryDalmadge, CharlesSalmon, Stacey C.Fraser, MargaritaWillson, Juliette MarieGaikwad, PiyushChan, WendyHagnas, AriGarcia, AnaPaschall, Teresa LynMohammed, Wali AhmedAdams, Benjamin ClarkPia, BrianMeyer, RachelVecchitto, Max KBenson, EricBorinshteyn, DmitriyBrown, AdairPerez, JavierMaguire III, William B.Moore, Tammie RBarr, RebeccaArora, Shreyaan DSimpson, AdamShuler, JulieIglesias, RosaSipres, DestinyBoatman, LisaGutierrez, EduardoMorris, JessicaCasano, TonyDo, JennyZuniga, GlorianaPage, Gabrielle LouisePawloski, GraceMazzenzio, Mauro AlejoLillehoff, TroySigler, Jack EStromer, Steven LeeShah *, BhavinGordon, Mark StewartShynn, PaulMarappan, KarthikThortvedt, Tiffany RCherkaoui, HoudaSassano, Patricio JDraper, Stephanie LBermudez, ErnestIngoglia, Michael HarleyO'Brien, NeilYoung, JohnPipalapalli, AshwiniPerry, RustyGarcia, MauricioRachlin, MichaelRomo, AbrahamLasorsa, TomQuigley, JohnKoe, AdrianaHensley, Maria AntuanetRembold, John M.Thomas, ChristopherPuchala, SrijaAdams, JeremiahDel Barco, Rene FMou, MonaWeiss, AaronAyres, NicoleTowers, Scott MLunstra, ChrisNowell, KaytlinDendukuri, Ramakrishna RajuReynolds, NancyStroud, RachelPrajapati, Harshadkumar KeshavlalAmaral, RicardoQuintanar, AprillePorter, Maggie JoGautam, SadikshyaMurray, ShaunBairy, BalarajuWeatherford, Austin LeeWhalen, Karen LorraineCoria-Madrigal, SilvinaBenson, Linda KAlvarez, JoseCollins, TaiKaddes, JaneRodriguez, Luis RBello, Marco AntonioMeccariello, GarrettMantilla, Jaime HumbertoDuval, MonetDixon, JessMurray, StephanieWrafter, FeidhlimidhMumbleau, TrentonBethencourt, Daniel BriggsHemric, MarshaTaylor, DevonLewis, ShondelleJohnson, HeatherNarayanan, RamyaFerguson, JakeUlmer, LasseSchol, ErinHarding, ElizaYeh, ClarkHuntsman, JanaStone, TiffanyNeafus, KimWolfe, KarenSmith, JuliaMalloy, Nicole LeeCortez, Maira MirandaVegas, Andreina CHill, ToriPrabodhankar, TusharPrem Kumar, Pradeep KumarKanakaveti, SriRodriguez Sedo, JillBermudez, Mary CruzSiegmund, JanBaah, EugeneBridges, VanessaMackintosh, WilliamdaCosta, FlemmingLorenzana, MelissaSmith, Ryan JosephFeener, AlexanderHurd, Alicia TaylorSantizo, EstebanHalliday, JessicaKhan, FarhanOrantes Rivas, JennyVardzik, TetyanaFerguson, JaredPapas, MariaArvizo Estrada, EstefanyGurram, RakeshSchillereff, Kimberly DawnTallman, LaurenThornburg, ShariMadrid, RyanSanagala, NithishBrushe, JesseYoung, Mary PatriciaBoich, MaryVogels, NathanGivens, PragnaPellegrini, Greg W.Sprunt, ElizabethDemarest, Amanda Kate SheridanClark, EddieGraniello, SofiaGadde, UmaMaheswara RaoLittlewood, Lia J.Ejaz, KamranMago, RajeevIossa, AlessandroDoherty, Adam MichaelLi, JennyLopez, AliciaGelman, RachelOakley, AlexRashid, WhitneyLotiya, KunalRobbins, SarahCampbell, Liza KatharineNamala, Bala KrishnaLyall, MackenzieWharton, ZuneTrostle, TessParker, DevinLopez, George P.Deo, HarittaKhalaf, Jim WilliamNakum, PareshObuch, JohnLoza, ValeriaVilla, JoelTran, JohannaGolcher, RobertoKoopman, BruceVorpagel, MarkJohnson, VickiThomas, Lindsay DPoisot, EliseGalligan, MichelleVlasenko, IhorMungia-Cooper, JeanetteNichols, KellieDraggoo, Dmitri DonteSherlock, MollyMiranda, RobertoSmith, Mark AllenSodi, AllegraHollenbaugh, ZackHernandez, MarioKenworthy, BrianO'Gara, AlishaVassallo, AnnieSchumacher, PatrickRoberts, NancyKusek, Amy Kay	5	531	435	9	3	537	406	730	525	428	9	4	613	729	633	512	335	2	5	15	662	751	724	351	17	6	641	670	696	475	289	11	4	615	682	695	497	313	4	1	581	655	532	609	343	4	2	535	677	705	586	214	3	5	540	671	682	529	281	3	3	613	590	693	553	302	2	2	574	687	683	557	276	3	7	526	612	600	487	260	9	12	531	650	688	525	332	7	3	564	650	701	503	267	5	4	575	659	701	530	306	6	4	560	674	706	507	238	3	4	549	639	694	529	292	5	5	528	641	650	511	282	1	4	547	639	644	495	269	5	3	546	654	671	518	285	4	2	536	636	625	443	222	4	1	7	576	656	625	358	5	1	520	590	636	519	266	3	4	527	617	628	509	289	5	2	586	656	655	20	234	4	2	504	613	699	455	257	1	0	533	639	626	348	7	5	5	467	590	646	504	269	4	2	501	634	644	464	260	4	2	467	596	606	471	271	3	6	493	587	636	467	239	3	2	467	615	616	445	235	5	3	484	554	619	468	266	5	3	477	576	608	444	264	0	1	475	586	611	451	210	3	3	5	561	632	617	355	4	1	492	593	631	459	239	2	3	493	593	644	436	235	3	2	466	597	627	470	233	8	7	447	593										98732

We dont need this Strickly remove this Rows 

And make Excel Formatting Align center all rows and Columns ..
alos For 1 add background colour Green 1 for Present 
for 0 add light red colour 0 for Absent 

Currently Date Display like 

01-01-2025	2025-01-02	2025-01-03
Expected is Wed, 1 January, 2025  , Tue ,2025-01-02 , Wed , 2025-01-03  .Like 
Also Highlight Saturday and Sunaday all All Column using light red Background ...

also For Month total and Grand total use light Yellow Colour for background



Update File as per Request and share ,me Updated file carefully and Dont make Unnecessary changes




#Correct Count 

#C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\denverAttendance.py

import os
from datetime import date, datetime, timedelta
from pathlib import Path
import pandas as pd
import logging
import re

ODBC_DRIVER = os.getenv("ODBC_DRIVER", "ODBC Driver 17 for SQL Server")
DB_SERVER = os.getenv("DB_SERVER", "SRVWUDEN0890V")
DB_USER = os.getenv("DB_USER", "GSOC_Test")
DB_PASSWORD = os.getenv("DB_PASSWORD", "Westernuniongsoc@2025")

DB_LIST = [
    "ACVSUJournal_00010021",
    "ACVSUJournal_00010020",
    "ACVSUJournal_00010019",
]

SQL_TEMPLATE = r"""
SELECT
    t1.[ObjectName1] AS EmployeeName,
    t1.[ObjectName2] AS Door,
    CASE WHEN t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR(200)) END AS EmployeeID,
    t3.[Name] AS PersonnelTypeName,
    CAST(t1.ObjectIdentity1 AS NVARCHAR(200)) AS EmployeeIdentity,
    t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t2.Text5 AS PrimaryLocation,
    CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        WHEN t1.[ObjectName2] LIKE '%Austin%' THEN 'Austin'
        WHEN t1.[ObjectName2] LIKE '%Miami%' THEN 'Miami'
        WHEN t1.[ObjectName2] LIKE '%NYC%' THEN 'New York'
        WHEN t1.[ObjectName2] LIKE 'APAC_PI%' THEN 'Taguig City'
        WHEN t1.[ObjectName2] LIKE 'APAC_PH%' THEN 'Quezon City'
        WHEN t1.[ObjectName2] LIKE '%PUN%' THEN 'Pune'
        WHEN t1.[ObjectName2] LIKE '%HYD%' THEN 'Hyderabad'
        ELSE t1.[PartitionName2]
    END AS LogicalLocation
FROM [{db}].dbo.ACVSUJournalLog AS t1
INNER JOIN ACVSCore.Access.Personnel AS t2 ON t1.ObjectIdentity1 = t2.GUID
INNER JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeID = t3.ObjectID
WHERE
    t1.MessageType = 'CardAdmitted'
    AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) BETWEEN '{start}' AND '{end}'
    AND (
        t1.[ObjectName2] LIKE '%HQ%'
        OR (t2.Text5 IS NOT NULL AND LOWER(t2.Text5) LIKE '%denver%' AND LOWER(t2.Text5) LIKE '%hq%')
        OR t1.[PartitionName2] = 'Denver'
    )
    AND LOWER(LTRIM(RTRIM(t3.[Name]))) IN ('employee','terminated personnel')
"""

def _get_engine(database: str) -> 'sqlalchemy.engine.Engine':
    from sqlalchemy import create_engine
    from urllib.parse import quote_plus
    odbc_str = (
        f"DRIVER={{{ODBC_DRIVER}}};"
        f"SERVER={DB_SERVER};"
        f"DATABASE={database};"
        f"UID={DB_USER};"
        f"PWD={DB_PASSWORD};"
        "TrustServerCertificate=Yes;Connection Timeout=30;"
    )
    quoted = quote_plus(odbc_str)
    url = f"mssql+pyodbc:///?odbc_connect={quoted}"
    return create_engine(url, pool_pre_ping=True, fast_executemany=True)

def _fetch_swipes_between(start_date: date, end_date: date) -> pd.DataFrame:
    start_s = start_date.strftime("%Y-%m-%d")
    end_s = end_date.strftime("%Y-%m-%d")
    frames = []
    for db in DB_LIST:
        sql = SQL_TEMPLATE.format(db=db, start=start_s, end=end_s)
        try:
            engine = _get_engine(db)
            with engine.connect() as conn:
                df = pd.read_sql(sql, conn)
            if not df.empty:
                df["SourceDB"] = db
                frames.append(df)
        except Exception as e:
            continue
    if not frames:
        return pd.DataFrame()
    out = pd.concat(frames, ignore_index=True)
    out.columns = [c.strip() for c in out.columns]
    out["LocaleMessageTime"] = pd.to_datetime(out.get("LocaleMessageTime"), errors="coerce")
    return out

def generate_monthly_denver_report(start_date: date = None, end_date: date = None, outdir: str = None) -> str:
    if start_date is None:
        start_date = date(2025, 1, 1)
    if end_date is None:
        end_date = datetime.now().date()
    swipes = _fetch_swipes_between(start_date, end_date)
    # --- Deduplicate logic (exact to SQL) ---
    swipes["DateOnly"] = swipes["LocaleMessageTime"].dt.date.fillna(pd.NaT)
    def _dedupe_key(row):
        for col in ("EmployeeIdentity", "EmployeeID", "EmployeeName"):
            val = str(row.get(col)).strip() if row.get(col) else None
            if val and val.lower() not in ('', 'nan', 'none', 'null'):
                return val
        return None
    swipes["dedupe_key"] = swipes.apply(_dedupe_key, axis=1)
    swipes = swipes[swipes["dedupe_key"].notna()]
    swipes = swipes[swipes["PersonnelTypeName"].str.strip().str.lower().isin(["employee", "terminated personnel"])]
    swipes = swipes[swipes["LogicalLocation"].str.strip().str.lower() == "denver"]
    swipes = swipes.sort_values(["dedupe_key", "DateOnly", "LocaleMessageTime"], ascending=[True, True, False])
    swipes = swipes.drop_duplicates(subset=["dedupe_key", "DateOnly"], keep="first")
    
    # --- Build Excel report: days, monthly totals, formats ---
    ordered_days = []
    cur = start_date
    while cur <= end_date:
        ordered_days.append(cur)
        cur += timedelta(days=1)

    # create presence matrix
    presence = pd.DataFrame(0, index=sorted(swipes["dedupe_key"].unique()), columns=ordered_days)
    for _, r in swipes.iterrows():
        uid = r["dedupe_key"]
        d = r["DateOnly"]
        if pd.isna(d): continue
        try: presence.at[uid, d] = 1
        except: continue

    meta = swipes.groupby("dedupe_key", as_index=True).agg({
        "EmployeeName": "first",
        "EmployeeID": "first",
        "PersonnelTypeName": "first"
    })
    
    # Attendance sheet: per day columns
    rows = []
    for uid in sorted(meta.index):
        empid = meta.loc[uid, "EmployeeID"]
        empname = meta.loc[uid, "EmployeeName"]
        row = {"Emp ID": empid, "Emp Name": empname}
        for d in ordered_days:
            key = d.strftime("%Y-%m-%d")
            value = int(presence.at[uid, d]) if (uid in presence.index and d in presence.columns) else 0
            row[key] = value
        rows.append(row)
    df = pd.DataFrame(rows)
    
    # Insert monthly total row after each month's last day
    months = {}
    for d in ordered_days:
        mon_key = d.strftime("%b-%Y")
        months.setdefault(mon_key, []).append(d.strftime("%Y-%m-%d"))

    # Build attendance_df: after each month's last day, insert a total row
    final_rows = []
    for idx, r in df.iterrows():
        subrow = {k: r[k] for k in df.columns}
        final_rows.append(subrow)
    # Now build foot total: we'll write total rows later for layout

    outdir = Path(outdir or Path.cwd() / "output")
    outdir.mkdir(parents=True, exist_ok=True)
    fname = outdir / f"denver_attendance_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"

    # Styling
    import xlsxwriter
    workbook = xlsxwriter.Workbook(str(fname))
    worksheet = workbook.add_worksheet("Attendance")
    worksheet.hide_gridlines(2)
    
    # Sky blue bold header
    header_fmt = workbook.add_format({
        "bold": True,
        "bg_color": "#87CEEB",
        "border": 2
    })
    cell_fmt = workbook.add_format({"border": 1})
    thick_fmt = workbook.add_format({"border": 2})

    # Write headers
    columns = list(df.columns)
    num_days = len(ordered_days)
    extra_cols = []  # build monthly total, grand total
    for mon, days in months.items():
        col_label = datetime.strptime(days[0], "%Y-%m-%d").strftime("%b") + " Total"
        extra_cols.append(col_label)
    columns.extend(extra_cols)
    columns.append("Grand Total")
    for col_idx, col_name in enumerate(columns):
        worksheet.write(0, col_idx, col_name, header_fmt)
    # Rows
    for row_idx, r in enumerate(final_rows, start=1):
        for col_idx, col_name in enumerate(df.columns):
            worksheet.write(row_idx, col_idx, r[col_name], cell_fmt)
        # monthly totals per row
        for e_idx, month_days in enumerate(months.values()):
            total_col_idx = len(df.columns) + e_idx
            val = sum([r[day] for day in month_days])
            worksheet.write(row_idx, total_col_idx, val, cell_fmt)
        grand_total_col_idx = len(df.columns) + len(months)
        val = sum(r[k] for k in df.columns if re.match(r"\d{4}-\d{2}-\d{2}", k))
        worksheet.write(row_idx, grand_total_col_idx, val, cell_fmt)

    # Monthly totals: new row after each month's last day
    # Prepare row index for monthly total insertion
    row_offset = 1
    dedupe_keys = sorted(meta.index)
    for mn_idx, (mon, days) in enumerate(months.items()):
        last_day = days[-1]
        last_day_idx = columns.index(last_day) if last_day in columns else None
        if last_day_idx is not None:
            # Insert summary row (total for month)
            sum_row_idx = row_offset + len(dedupe_keys)
            worksheet.write(sum_row_idx, 0, f"{mon} Total", header_fmt)
            for col in days:
                col_idx = columns.index(col)
                cell_sum = df[col].sum()
                worksheet.write(sum_row_idx, col_idx, cell_sum, thick_fmt)
            # write month's grand total
            total_col_idx = len(df.columns) + mn_idx
            worksheet.write(sum_row_idx, total_col_idx, df[[d for d in days]].sum(axis=1).sum(), thick_fmt)

    # Final grand total at the end
    final_grand_row_idx = row_offset + len(dedupe_keys) + len(months)
    worksheet.write(final_grand_row_idx, 0, "Grand Total", header_fmt)
    for col_idx, col_name in enumerate(df.columns):
        col_sum = df[col_name].sum()
        worksheet.write(final_grand_row_idx, col_idx, col_sum, thick_fmt)
    # Grand total sum
    gt_col_idx = len(df.columns) + len(months)
    worksheet.write(final_grand_row_idx, gt_col_idx, df[[d for d in df.columns if re.match(r"\d{4}-\d{2}-\d{2}", d)]].sum(axis=1).sum(), thick_fmt)

    workbook.close()
    return str(fname)


Now there is Single issue Which i need to fix i was added 
 // <-- add this block so /api/reports goes to Python (FastAPI)
     '/api/reports': {
       target: BACKEND_PY_HOST,
       changeOrigin: true,
       secure: false,
       timeout: 120000,
       // no rewrite: forward path as-is so Python sees /api/reports/...
       rewrite: (path) => path.replace(/^\/api\/reports/, '/reports')
     },

i have addeed this small endpoint here for Denver attendance report ..
when i add this endpoint my other node backend endpoint is not working ..

means i was run Daily access report then request goes to Python backend ..
but for daily access report request need to send Node backend which i need to fix ...

also in API.js duration endpoint is on python so refer all below file carefully and fix the issue carefully..



// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://localhost:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://localhost:3008';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Do NOT alias @mui/material (let package resolution work normally)
      // Keep emotion aliases to avoid duplicate emotion runtime instances:
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    },
    // Prevent duplicate copies of MUI / emotion being bundled
    dedupe: ['@mui/material', '@mui/system', '@mui/styled-engine', '@emotion/react']
  },
  optimizeDeps: {
    // help vite pre-bundle these so ESM exports resolve correctly
    include: [
      '@mui/material',
      '@mui/material/styles',
      '@mui/icons-material',
      '@emotion/react',
      '@emotion/styled'
    ]
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
        timeout: 120000
      },


       // <-- add this block so /api/reports goes to Python (FastAPI)
     '/api/reports': {
       target: BACKEND_PY_HOST,
       changeOrigin: true,
       secure: false,
       timeout: 120000,
       // no rewrite: forward path as-is so Python sees /api/reports/...
       rewrite: (path) => path.replace(/^\/api\/reports/, '/reports')
     },

      // Python (FastAPI) under a dedicated prefix
      '/api-py': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        timeout: 120000,
        rewrite: (path) => path.replace(/^\/api-py/, '/api') // adjust target path if FastAPI lives at /api or /
      },

      // Node backend (legacy)
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        timeout: 120000
      }
    }
  }

});











//C:\Users\W0024618\Desktop\global-page\frontend\src\api.js

import axios from 'axios';

export const api = axios.create({
  baseURL: '/api',         // Node backend (legacy)
  timeout: 12000000,
  headers: { 'Accept': 'application/json' }
});

export const pyApi = axios.create({
  baseURL: '/api-py',      // NEW: dedicated prefix for Python (FastAPI)
  timeout: 12000000,
  headers: { 'Accept': 'application/json' }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

pyApi.interceptors.response.use(
  (r) => r,
  (err) => {
    console.error('[PY-API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;








// frontend/src/App.jsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { Box } from '@mui/material';

import GlobalPage   from './pages/GlobalPage.jsx';
import VipPage      from './pages/VipPage.jsx';
import ReportsPage  from './pages/ReportsPage.jsx';
import DurationPage from "./pages/DurationPage";
import { AuthProvider, useAuth } from './context/AuthContext';
import LoginPage from './pages/LoginPage';
import ProtectedRoute from './components/ProtectedRoute';
import AccessManager from './pages/AccessManager';

// Optional: small wrapper to redirect authed users from /login
function LoginGuard() {
  const auth = useAuth();
  if (auth.loading) return null;
  if (auth.user) return <Navigate to="/" replace />;
  return <LoginPage />;
}

export default function App() {
  return (
    <AuthProvider>
      <Routes>
        <Route path="/login" element={<LoginGuard />} />

        <Route path="/" element={
          <ProtectedRoute>
            <GlobalPage />
          </ProtectedRoute>
        } />

        <Route path="/vip" element={
          <ProtectedRoute>
            <VipPage />
          </ProtectedRoute>
        } />

        <Route path="/reports" element={
          <ProtectedRoute>
            <ReportsPage />
          </ProtectedRoute>
        } />

        <Route path="/duration" element={
          <ProtectedRoute permission="global_duration">
            <DurationPage />
          </ProtectedRoute>
        } />

        <Route path="/access-manager" element={
          <ProtectedRoute permission="can_grant">
            <AccessManager />
          </ProtectedRoute>
        } />



    <Route path="/denver-attendance" element={
          <ProtectedRoute permission="denver-attendance">
            <AccessManager />
          </ProtectedRoute>
        } />


        {/* fallback */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </AuthProvider>
  );
}













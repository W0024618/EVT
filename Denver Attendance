
Check below File Carefully...
Currently i have added 

     // <-- add this block so /api/reports goes to Python (FastAPI)
     '/api/reports': {
       target: BACKEND_PY_HOST,
       changeOrigin: true,
       secure: false,
       timeout: 120000,
       // no rewrite: forward path as-is so Python sees /api/reports/...
     },


this Code in Vite.config.js then issue is Occur for Node backend my node backend report display error failed to load so Quick fix this issue carefully



// frontend/src/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: '/api',         // frontend calls '/api/...' and vite proxy rewrites it
  timeout: 12000000,
  headers: {
    'Accept': 'application/json',
  }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    // friendly log for dev
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;







// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://localhost:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://localhost:3008';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Do NOT alias @mui/material (let package resolution work normally)
      // Keep emotion aliases to avoid duplicate emotion runtime instances:
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    },
    // Prevent duplicate copies of MUI / emotion being bundled
    dedupe: ['@mui/material', '@mui/system', '@mui/styled-engine', '@emotion/react']
  },
  optimizeDeps: {
    // help vite pre-bundle these so ESM exports resolve correctly
    include: [
      '@mui/material',
      '@mui/material/styles',
      '@mui/icons-material',
      '@emotion/react',
      '@emotion/styled'
    ]
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
        timeout: 120000
      },

     // <-- add this block so /api/reports goes to Python (FastAPI)
     '/api/reports': {
       target: BACKEND_PY_HOST,
       changeOrigin: true,
       secure: false,
       timeout: 120000,
       // no rewrite: forward path as-is so Python sees /api/reports/...
     },


      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        timeout: 120000
      }
    }
  }
});










import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://localhost:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://localhost:3008';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    },
    dedupe: ['@mui/material', '@mui/system', '@mui/styled-engine', '@emotion/react']
  },
  optimizeDeps: {
    include: [
      '@mui/material',
      '@mui/material/styles',
      '@mui/icons-material',
      '@emotion/react',
      '@emotion/styled'
    ]
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // ccure -> Python but rewriting to remove /api prefix
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
        timeout: 120000
      },

      // If frontend still uses /api/reports -> forward that exact prefix to Python (placed BEFORE /api)
      // This will forward /api/reports and /api/reports/<id> to the Python host.
      '^/api/reports': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        timeout: 120000,
        // remove leading /api so Python receives /reports or /reports/<id>
        rewrite: (path) => path.replace(/^\/api/, '')
      },

      // Optional dedicated Python prefix to avoid any collisions: use this for new calls
      '/api-py': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        timeout: 120000,
        // drop /api-py so Python receives /reports when you call /api-py/reports
        rewrite: (path) => path.replace(/^\/api-py/, '')
      },

      // Node backend (legacy) - keep it last so more-specific Python routes are matched first
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        timeout: 120000
      }
    }
  }
});







import axios from 'axios';

export const api = axios.create({
  baseURL: '/api',         // Node backend (legacy)
  timeout: 12000000,
  headers: { 'Accept': 'application/json' }
});

// New client for Python (FastAPI). Use pyApi.get('/reports') -> calls /api-py/reports
export const pyApi = axios.create({
  baseURL: '/api-py',      // dedicated prefix handled by vite proxy
  timeout: 12000000,
  headers: { 'Accept': 'application/json' }
});

function logResponseError(prefix, err) {
  try {
    console.error(prefix, err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
  } catch(e) {
    console.error(prefix, err);
  }
}

api.interceptors.response.use(
  (r) => r,
  (err) => {
    logResponseError('[API ERROR]', err);
    return Promise.reject(err);
  }
);

pyApi.interceptors.response.use(
  (r) => r,
  (err) => {
    logResponseError('[PY-API ERROR]', err);
    return Promise.reject(err);
  }
);

// keep default export for existing code that imports default
export default api;













When i Update this as per above file now Node backend Working correct but Python reports is not Working 
make file like both node and Py is Working easily


// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://localhost:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://localhost:3008';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Do NOT alias @mui/material (let package resolution work normally)
      // Keep emotion aliases to avoid duplicate emotion runtime instances:
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    },
    // Prevent duplicate copies of MUI / emotion being bundled
    dedupe: ['@mui/material', '@mui/system', '@mui/styled-engine', '@emotion/react']
  },
  optimizeDeps: {
    // help vite pre-bundle these so ESM exports resolve correctly
    include: [
      '@mui/material',
      '@mui/material/styles',
      '@mui/icons-material',
      '@emotion/react',
      '@emotion/styled'
    ]
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
        timeout: 120000
      },

      // Python (FastAPI) under a dedicated prefix
      '/api-py': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        timeout: 120000,
        rewrite: (path) => path.replace(/^\/api-py/, '/api') // adjust target path if FastAPI lives at /api or /
      },

      // Node backend (legacy)
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        timeout: 120000
      }
    }
  }

});








//C:\Users\W0024618\Desktop\global-page\frontend\src\api.js

import axios from 'axios';

export const api = axios.create({
  baseURL: '/api',         // Node backend (legacy)
  timeout: 12000000,
  headers: { 'Accept': 'application/json' }
});

export const pyApi = axios.create({
  baseURL: '/api-py',      // NEW: dedicated prefix for Python (FastAPI)
  timeout: 12000000,
  headers: { 'Accept': 'application/json' }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

pyApi.interceptors.response.use(
  (r) => r,
  (err) => {
    console.error('[PY-API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;







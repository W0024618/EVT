<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Trend Analysis â€” Dashboard</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <!-- React + ReactDOM + Babel (quick prototyping) -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Flatpickr (high-quality calendar) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <style>
      /* ---------- Global ---------- */
      :root{
        --wu-yellow: #ffd400;
        --wu-black: #0a0a0a;
        --card-bg: #ffffff;
        --muted: #64748b;
        --accent: #2563eb;
      }

      html,body { height:100%; }
      body { font-family: Inter, Roboto, Arial, sans-serif; margin: 0; padding: 0; background:#f6f7fb; color:#1f2937; -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale; }
      .container { max-width:1250px; margin:12px auto; padding:0; }

      /* ---------- Header (Western Union look) ---------- */
      .topbar {
        display:flex;
        align-items:center;
        justify-content:space-between;
        background: linear-gradient(90deg, #111 0%, #000 30%);
        color:var(--wu-yellow);
        padding: 12px 16px;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 8px 24px rgba(2,6,23,0.18);
        gap:12px;
        flex-wrap:wrap; /* allow wrapping for responsiveness */
      }
      .wu-brand {
        display:flex;
        gap:12px;
        align-items:center;
        min-width:0;
      }
      .wu-logo {
        width:54px; height:34px; background:var(--wu-yellow); color:#000; display:flex; align-items:center; justify-content:center; font-weight:700; border-radius:4px; box-shadow: inset 0 -2px 0 rgba(0,0,0,0.08);
        font-family: "Helvetica Neue", Arial, sans-serif;
        flex-shrink:0;
      }
      .title-block { line-height:1; min-width:0; }
      .title-block h1 { margin:0; font-size:18px; color:var(--wu-yellow); white-space:nowrap; overflow:hidden; text-overflow:ellipsis; max-width:260px; }
      .title-block p { margin:0; color:#e6e6e6; font-size:13px; }

      .header-actions { display:flex; gap:8px; align-items:center; margin-left:auto; flex-wrap:wrap; }
      .header-actions .control { display:flex; align-items:center; gap:6px; }
      .header-actions .control label { color:#e7e7e7; font-size:13px; margin-right:4px; white-space:nowrap; }
      .date-input { padding:8px 10px; border-radius:6px; border:1px solid rgba(255,255,255,0.12); background:transparent; color:#fff; min-width:130px; }
      .header-actions button { padding:8px 12px; border-radius:6px; border:0; font-weight:600; cursor:pointer; }
      .btn-primary { background:var(--wu-yellow); color:var(--wu-black); }
      .btn-ghost { background:transparent; color:#fff; border:1px solid rgba(255,255,255,0.12); }

      /* ---------- Main card area ---------- */
      .card-shell { background:var(--card-bg); padding:10px 14px 14px 14px; border-radius:0 0 8px 8px; box-shadow:0 6px 18px rgba(16,24,40,0.04); margin-top:4px; } /* reduced gap */
      .cards { display:flex; gap:10px; margin:6px 0 10px 0; padding:6px 0; align-items:stretch; }
      .card {
        flex:1;
        background:linear-gradient(180deg,#fff,#fbfdff);
        padding:12px 12px;
        border-radius:8px;
        text-align:center;
        border: 2px solid rgba(255,212,66,0.16);
        box-shadow: 0 6px 18px rgba(16,24,40,0.04);
        min-width:120px;
      }
      .card h3 { margin:4px 0; font-size:20px; color:#0f172a; }
      .card p { margin:0; color:var(--muted); font-weight:600; }

      .main { display:flex; gap:14px; margin-top:6px; padding-bottom:18px; }
      .left { flex:2; background:transparent; padding-right:6px; }
      .right { flex:1; min-width:260px; }

      .controls { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
      .date-input::-webkit-calendar-picker-indicator { display:none; } /* hide native indicator to avoid confusion */

      /* ---------- Chart ---------- */
      .chart-wrap { background:#fff; padding:10px; border-radius:8px; box-shadow: inset 0 0 0 1px #f1f5f9; height:260px; margin-bottom:10px; }

      /* ---------- Table ---------- */
      table { width:100%; border-collapse:collapse; margin-top:8px; background:#fff; border-radius:6px; overflow:hidden; box-shadow:0 4px 20px rgba(2,6,23,0.03); }
      thead th {
        padding:10px 8px; font-weight:700; font-size:13px;
        background: linear-gradient(90deg,#fff,#fbfbfb);
        border-bottom:3px solid #e2e8f0;
        text-align:left;
      }
      tbody td { padding:8px; border-bottom:1px solid #f1f5f9; font-size:13px; color:#0f172a; vertical-align:middle; }
      .small { font-size:12px; color:var(--muted); }
      .row-click { cursor:pointer; color:#0f172a; }
      .flagged-row { background: linear-gradient(90deg,#fff8f0,#fff); }

      /* ---------- Chips & reasons ---------- */
      .pill { display:inline-block; padding:6px 10px; border-radius:999px; background:#f1f9ff; color:#064e76; font-size:12px; cursor:pointer; margin:2px; border:1px solid #e6f2ff; }
      .chip { display:inline-block; padding:6px 10px; border-radius:999px; background:#eef2ff; color:#034f84; font-size:13px; cursor:pointer; margin:3px; border:1px solid transparent; }
      .chip.active { background:#ffd; border-color:#f7c948; box-shadow:0 2px 6px rgba(39,39,56,0.06); }

      /* ---------- Evidence modal ---------- */
      .modal { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; z-index:1000; background: rgba(3,6,23,0.35); }
      .modal-inner { width:960px; max-width:96%; max-height:88%; overflow:auto; background:#fff; border-radius:8px; padding:14px; box-shadow:0 10px 40px rgba(2,6,23,0.3); border: 1px solid #e6edf3; }
      .modal-header { display:flex; align-items:center; justify-content:space-between; padding:12px; border-radius:6px; background: linear-gradient(90deg, var(--wu-yellow), #ffd966); color: #080808; margin:-14px -14px 6px -14px; }
      .modal-header h3 { margin:0; color:#000; font-size:16px; }
      .close-btn { background:#ef4444; color:#fff; border-radius:6px; padding:6px 10px; border:0; cursor:pointer; }

      .explain { background:#f8fafc; padding:10px; border-radius:8px; margin-top:8px; }

      /* ---------- Evidence table styles & highlight classes ---------- */
      .evidence-table { width:100%; border-collapse:collapse; margin-top:8px; }
      .evidence-table th, .evidence-table td { padding:8px 10px; border:1px solid #e6edf3; font-size:13px; text-align:left; vertical-align:middle; }
      .gap-flag { background:#fff5f0; color:#9a3412; padding:4px 6px; border-radius:6px; display:inline-block; margin-left:8px; font-weight:600; }

      /* Highlights requested by user */
      .row-day-start { background: linear-gradient(90deg,#eefbe8,#f7ffef); }       /* light green */
      .row-out-return { background: linear-gradient(90deg,#fff0f0,#fff6f6); }     /* light red */
      .row-out { background: linear-gradient(90deg,#fff7ed,#fffdf8); }            /* warm */
      .highlight-long-duration { outline: 2px solid rgba(239,68,68,0.12); }

      /* Loading overlay */
      .spinner-overlay {
        position: fixed;
        inset: 0;
        background: rgba(255,255,255,0.65);
        z-index: 2000;
        display:flex;
        align-items:center;
        justify-content:center;
        backdrop-filter: blur(2px);
      }
      .spinner-box {
        display:flex;
        gap:12px;
        align-items:center;
        background:#fff;
        padding:14px 18px;
        border-radius:10px;
        box-shadow: 0 10px 30px rgba(2,6,23,0.15);
        border: 1px solid #e6edf3;
      }
      .spinner {
        width:28px; height:28px; border-radius:50%; border:4px solid #e6e6e6; border-top-color:var(--accent); animation: spin 1s linear infinite;
      }
      @keyframes spin { 100% { transform: rotate(360deg); } }

      /* Small UI niceties */
      .muted { color:var(--muted); font-size:13px; }
      .evidence-btn { padding:7px 10px; background:#0ea5a4; color:#fff; border-radius:6px; border:0; cursor:pointer; }
      .small-button { padding:6px 8px; font-size:12px; border-radius:6px; border:1px solid #e2e8f0; background:transparent; cursor:pointer; }

      /* Make table horizontally scrollable on small screens */
      .table-scroll { overflow:auto; max-width:100%; }

      /* ---------- Responsive ---------- */
      @media (max-width: 900px) {
        .main { flex-direction: column; }
        .right { min-width:unset; width:100%; margin-top:12px; }
        .cards { flex-direction:row; gap:8px; }
        .chart-wrap { height:200px; }
        .header-actions { justify-content:flex-end; gap:8px; }
        .title-block h1 { max-width:200px; }
      }
      @media (max-width: 560px) {
        .topbar { padding:10px; }
        .wu-brand { width:100%; justify-content:flex-start; }
        .header-actions { width:100%; justify-content:flex-start; gap:8px; margin-top:8px; }
        .cards { flex-direction:column; }
        .card { width:100%; }
        .header-actions .date-input { width:140px; }
        .header-actions button { padding:8px 10px; }
      }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      (function(){
        const { useState, useEffect, useRef } = React;

        // CHANGE THIS IF YOUR API HOST DIFFERS
        const API_BASE = "http://10.199.45.239:8002";

        // Threshold used to detect "long out then return" pattern (seconds)
        const OUT_RETURN_GAP_SECONDS = 60 * 60; // 1 hour (tweak if you want)

        const SCENARIO_EXPLANATIONS = {
          "long_gap_>=90min": "Long gap between swipes (>= 90 minutes) â€” could indicate long out-of-office break.",
          "short_duration_<4h": "Short total duration in office (< 4 hours).",
          "coffee_badging": "Frequent short badge cycles (>=4) with short duration â€” possible 'coffee badging'.",
          "low_swipe_count_<=2": "Low swipe count (<=2) for the day.",
          "single_door": "All swipes used the same door â€” single-door behavior.",
          "only_in": "Only IN swipe(s) recorded for the day.",
          "only_out": "Only OUT swipe(s) recorded for the day.",
          "overtime_>=10h": "Long duration (>=10 hours) â€” overtime.",
          "very_long_duration_>=16h": "Very long duration (>=16 hours) â€” suspiciously long presence.",
          "zero_swipes": "No swipes recorded.",
          "unusually_high_swipes": "Unusually high number of swipes versus historical median.",
          "repeated_short_breaks": "Multiple short breaks within the day.",
          "multiple_location_same_day": "Swipes recorded at multiple locations same day.",
          "weekend_activity": "Activity recorded on weekend.",
          "repeated_rejection_count": "Several card rejections.",
          "badge_sharing_suspected": "Badge sharing suspected (same card used by multiple persons on same day).",
          "early_arrival_before_06": "First swipe before 06:00.",
          "late_exit_after_22": "Last swipe after 22:00.",
          "shift_inconsistency": "Duration inconsistent with historical shift patterns.",
          "trending_decline": "Historical trending decline flagged.",
          "consecutive_absent_days": "Marked absent for consecutive days historically.",
          "high_variance_duration": "High variance in durations historically.",
          "short_duration_on_high_presence_days": "Short duration even though employee usually attends many days.",
          "swipe_overlap": "Simultaneous swipe(s) near the same time with other uid(s) (possible tailgating or collusion).",
          "shortstay_longout_repeat": "Pattern: short stay, long out-of-office, short return (repeat)."
        };

        function pad(n){ return n.toString().padStart(2,'0'); }
        function formatDateISO(d){
          if(!d) return "";
          const dt = (d instanceof Date) ? d : new Date(d);
          return dt.getFullYear() + "-" + pad(dt.getMonth()+1) + "-" + pad(dt.getDate());
        }
        function datesBetween(start, end){
          var out = [];
          var cur = new Date(start);
          while(cur <= end){
            out.push(new Date(cur));
            cur.setDate(cur.getDate()+1);
          }
          return out;
        }
        function safeDateDisplay(val){
          if(!val && val !== 0) return "";
          try {
            var d = (val instanceof Date) ? val : new Date(val);
            if(isNaN(d.getTime())) return String(val);
            return d.toLocaleString();
          } catch(e) {
            return String(val);
          }
        }
        function sanitizeName(row){
          return row.EmployeeName || row.EmployeeName_x || row.EmployeeName_y || row.person_uid || "";
        }
        function downloadCSV(rows, filename){
          if(!rows || !rows.length) { alert("No rows to export"); return; }
          var cols = Object.keys(rows[0]);
          var lines = [cols.join(",")];
          rows.forEach(function(r){
            var row = cols.map(function(c){
              var v = (r[c] === undefined || r[c] === null) ? "" : String(r[c]).replace(/\n/g,' ');
              return JSON.stringify(v);
            }).join(",");
            lines.push(row);
          });
          var blob = new Blob([lines.join("\n")], {type:'text/csv'});
          var url = URL.createObjectURL(blob);
          var a = document.createElement('a'); a.href = url; a.download = filename || 'export.csv'; a.click(); URL.revokeObjectURL(url);
        }

        // convert seconds -> "HH:mm:ss"
        function formatSecondsToHmsJS(seconds){
          if (seconds === null || seconds === undefined || seconds === '') return "-";
          const n = Number(seconds);
          if (isNaN(n) || !isFinite(n)) return "-";
          const s = Math.max(0, Math.floor(n));
          const hh = Math.floor(s / 3600);
          const mm = Math.floor((s % 3600) / 60);
          const ss = s % 60;
          return pad(hh) + ":" + pad(mm) + ":" + pad(ss);
        }

        function App(){
          var yesterday = new Date();
          yesterday.setDate(yesterday.getDate()-1);

          const [dateFrom, setDateFrom] = useState(formatDateISO(yesterday));
          const [dateTo, setDateTo] = useState(formatDateISO(new Date()));
          const [loading, setLoading] = useState(false);
          const [summary, setSummary] = useState({rows:0, flagged_rows:0, files:[], end_date:null});
          const [rows, setRows] = useState([]);
          const [reasonsCount, setReasonsCount] = useState({});
          const [filterText, setFilterText] = useState("");
          const [page, setPage] = useState(1);
          const [selectedReason, setSelectedReason] = useState("");
          const [reasonFilterText, setReasonFilterText] = useState("");
          const [modalRow, setModalRow] = useState(null);
          const [modalDetails, setModalDetails] = useState(null); // {aggregated_rows, raw_swipes, raw_swipe_files}
          const [modalLoading, setModalLoading] = useState(false);
          const pageSize = 25;
          const chartRef = useRef(null);
          const chartInst = useRef(null);

          // flatpickr refs
          const fromRef = useRef(null);
          const toRef = useRef(null);
          const fromFp = useRef(null);
          const toFp = useRef(null);

          useEffect(function(){
            // initialize flatpickr instances after component mounts
            if(window.flatpickr && fromRef.current && toRef.current){
              // destroy if existing
              try { if(fromFp.current) fromFp.current.destroy(); } catch(e){}
              try { if(toFp.current) toFp.current.destroy(); } catch(e){}

              fromFp.current = window.flatpickr(fromRef.current, {
                dateFormat: "Y-m-d",
                defaultDate: dateFrom,
                allowInput: true,
                onChange: function(selectedDates, str){
                  if(selectedDates && selectedDates.length){
                    const iso = formatDateISO(selectedDates[0]);
                    setDateFrom(iso);
                    // set min on To
                    try { if(toFp.current) toFp.current.set('minDate', iso); } catch(e){}
                    // if From > To, adjust To
                    if(dateTo && new Date(iso) > new Date(dateTo)){
                      setDateTo(iso);
                      try{ if(toFp.current) toFp.current.setDate(iso, true); }catch(e){}
                    }
                  }
                }
              });

              toFp.current = window.flatpickr(toRef.current, {
                dateFormat: "Y-m-d",
                defaultDate: dateTo,
                allowInput: true,
                onChange: function(selectedDates, str){
                  if(selectedDates && selectedDates.length){
                    const iso = formatDateISO(selectedDates[0]);
                    setDateTo(iso);
                    // set max on From
                    try { if(fromFp.current) fromFp.current.set('maxDate', iso); } catch(e){}
                    if(dateFrom && new Date(iso) < new Date(dateFrom)){
                      setDateFrom(iso);
                      try{ if(fromFp.current) fromFp.current.setDate(iso, true); }catch(e){}
                    }
                  }
                }
              });

              // ensure min/max initial sync
              try {
                if(fromFp.current) fromFp.current.set('maxDate', dateTo);
                if(toFp.current) toFp.current.set('minDate', dateFrom);
              } catch(e){}
            }

            // load latest initially
            loadLatest();

            // cleanup on unmount
            return function(){
              try{ if(fromFp.current) fromFp.current.destroy(); } catch(e){}
              try{ if(toFp.current) toFp.current.destroy(); } catch(e){}
            };
            // eslint-disable-next-line
          }, []);

          // keep flatpickr updated when dateFrom/dateTo change externally
          useEffect(function(){
            try { if(fromFp.current && dateFrom) fromFp.current.setDate(dateFrom, false); } catch(e){}
            try { if(toFp.current && dateTo) toFp.current.setDate(dateTo, false); } catch(e){}
            try { if(fromFp.current) fromFp.current.set('maxDate', dateTo); } catch(e){}
            try { if(toFp.current) toFp.current.set('minDate', dateFrom); } catch(e){}
          }, [dateFrom, dateTo]);

          async function runForRange(){
            setLoading(true);
            setRows([]);
            setSummary({rows:0, flagged_rows:0, files:[], end_date:null});
            setReasonsCount({});
            try {
              var start = new Date(dateFrom);
              var end = new Date(dateTo);
              var dateList = datesBetween(start, end).map(d => formatDateISO(d));
              var accRows = [];
              var totalRows = 0, totalFlagged = 0, files = [];
              for(var i=0;i<dateList.length;i++){
                var d = dateList[i];
                var url = API_BASE + "/run?date=" + d;
                var r = await fetch(url, { method:'GET' });
                if(!r.ok){
                  var txt = await r.text();
                  throw new Error("API returned " + r.status + ": " + txt);
                }
                var js = await r.json();
                var sample = js.sample || [];
                if(Array.isArray(sample) && sample.length) accRows = accRows.concat(sample);
                if(typeof js.rows === 'number') totalRows += js.rows; else totalRows += (Array.isArray(sample) ? sample.length : 0);
                totalFlagged += (js.flagged_rows || 0);
                if(js.files) files = files.concat(js.files);
              }
              setRows(accRows);
              setSummary({rows: totalRows, flagged_rows: totalFlagged, files: files, end_date: formatDateISO(new Date(dateTo))});
              computeReasons(accRows);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message);
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          async function loadLatest(){
            setLoading(true);
            try{
              var r = await fetch(API_BASE + "/latest");
              if(!r.ok) throw new Error("latest failed: " + r.status);
              var js = await r.json();
              var sample = js.sample || [];
              if(!Array.isArray(sample)) sample = [];
              setRows(sample);
              setSummary({rows: (js.rows || sample.length || 0), flagged_rows: (sample.filter(function(x){ return !!x.Reasons; }).length || 0), files:[js.file]});
              computeReasons(sample);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message + (err.message === 'latest failed: 0' ? " (check backend/CORS)" : ""));
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          function computeReasons(dataRows){
            var counts = {};
            (dataRows || []).forEach(function(r){
              if(!r.Reasons) return;
              var parts = String(r.Reasons).split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              parts.forEach(function(p){ counts[p] = (counts[p] || 0) + 1; });
            });
            setReasonsCount(counts);
            buildChart(counts);
          }

          function buildChart(counts){
            var labels = Object.keys(counts).sort(function(a,b){ return counts[b] - counts[a]; });
            var values = labels.map(function(l){ return counts[l]; });
            var ctx = chartRef.current && chartRef.current.getContext ? chartRef.current.getContext('2d') : null;
            if(!ctx) return;
            try { if(chartInst.current) chartInst.current.destroy(); } catch(e){}
            chartInst.current = new Chart(ctx, {
              type:'bar',
              data:{ labels: labels, datasets:[{ label:'Events', data: values, backgroundColor: labels.map(()=> 'rgba(37,99,235,0.85)') }] },
              options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } }, scales:{ y:{ beginAtZero:true } } }
            });
          }

          // filtering & pagination
          var filtered = (rows || []).filter(function(r){
            var hay = (sanitizeName(r) + " " + (r.EmployeeID||"") + " " + (r.CardNumber||"") + " " + (r.Reasons||"")).toLowerCase();
            var textOk = !filterText || hay.indexOf(filterText.toLowerCase()) !== -1;
            var reasonOk = !selectedReason || (r.Reasons && ((";" + String(r.Reasons) + ";").indexOf(selectedReason) !== -1));
            return textOk && reasonOk;
          });
          var totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
          var pageRows = filtered.slice((page-1)*pageSize, page*pageSize);

          function exportFiltered(){
            downloadCSV(filtered, "trend_filtered_export.csv");
          }

          function onReasonClick(reason){
            if(!reason) { setSelectedReason(""); return; }
            if(selectedReason === reason) setSelectedReason(""); else setSelectedReason(reason);
            setPage(1);
          }

          // open evidence modal (explicit Evidence button)
          async function openEvidence(row){
            setModalRow(row);
            setModalDetails(null);
            setModalLoading(true);
            try {
              const q = encodeURIComponent(row.EmployeeID || row.person_uid || "");
              const resp = await fetch(API_BASE + "/record?employee_id=" + q);
              if(!resp.ok){
                const txt = await resp.text();
                throw new Error("record failed: " + resp.status + " - " + txt);
              }
              const js = await resp.json();
              const details = { aggregated_rows: js.aggregated_rows || [], raw_swipe_files: js.raw_swipe_files || [], raw_swipes: js.raw_swipes || [] };
              setModalDetails(details);
            } catch(e){
              alert("Failed loading details: " + e.message);
              console.error(e);
            } finally {
              setModalLoading(false);
            }
          }

          function closeModal(){ setModalRow(null); setModalDetails(null); }

          // convenience counts for cards
          var rowsCount = (summary && typeof summary.rows === 'number') ? summary.rows : (rows ? rows.length : 0);
          var flaggedCount = (summary && typeof summary.flagged_rows === 'number') ? summary.flagged_rows : (rows ? rows.filter(function(r){ return !!r.Reasons; }).length : 0);
          var flaggedPct = rowsCount ? Math.round((flaggedCount*100)/(rowsCount||1)) : 0;

          function renderOverlapCell(r){
            var ov = r.OverlapWith || r.swipe_overlap || r.overlap_with || null;
            if(ov && typeof ov === 'string'){
              var parts = ov.split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              if(parts.length === 0) return <span className="muted">â€”</span>;
              return <span className="pill" title={ov}>{parts.length} overlap</span>;
            }
            return <span className="muted">â€”</span>;
          }

          function renderReasonChips(reasonText){
            if(!reasonText) return <span className="muted">â€”</span>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return parts.map((p,idx)=>(<span key={idx} className="pill" title={SCENARIO_EXPLANATIONS[p] || p}>{p}</span>));
          }

          function renderReasonExplanations(reasonText){
            if(!reasonText) return <div className="muted">No flags</div>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return (
              <div>
                {parts.map((p,idx)=>(
                  <div key={idx} style={{marginBottom:6}}>
                    <b>{p}</b> â€” <span className="small">{ SCENARIO_EXPLANATIONS[p] || "No explanation available." }</span>
                  </div>
                ))}
              </div>
            );
          }

          // render timeline with requested highlights:
          function renderSwipeTimeline(details, modalRow){
            if(!details || !details.raw_swipes || details.raw_swipes.length === 0){
              return <div className="muted">No raw swipe evidence available (person not flagged or raw file missing).</div>;
            }
            // copy & parse
            const all = details.raw_swipes.slice().map(r => {
              const obj = Object.assign({}, r);
              try {
                if(obj.Date && obj.Time){
                  obj.__ts = new Date(obj.Date + "T" + obj.Time);
                } else if(obj.Date && obj.Time === undefined && obj.LocaleMessageTime){
                  obj.__ts = new Date(obj.LocaleMessageTime);
                } else if(obj.LocaleMessageTime){
                  obj.__ts = new Date(obj.LocaleMessageTime);
                } else {
                  obj.__ts = null;
                }
              } catch(e){
                obj.__ts = null;
              }
              let gap = null;
              if(obj.SwipeGapSeconds !== undefined && obj.SwipeGapSeconds !== null){
                gap = Number(obj.SwipeGapSeconds);
                if(isNaN(gap)) gap = null;
              } else if(obj.SwipeGap){
                try {
                  const parts = String(obj.SwipeGap).split(':').map(p=>Number(p));
                  if(parts.length===3) gap = parts[0]*3600 + parts[1]*60 + parts[2];
                } catch(e){ gap = null; }
              }
              obj.__gap = gap;
              obj.__zone_l = String((obj.Zone || '')).toLowerCase();
              return obj;
            }).sort((a,b) => {
              if(a.__ts && b.__ts) return a.__ts - b.__ts;
              if(a.__ts) return -1;
              if(b.__ts) return 1;
              return 0;
            });

            const flags = new Array(all.length).fill({}).map(()=>({dayStart:false, outReturn:false}));
            for(let i=0;i<all.length;i++){
              const cur = all[i];
              const prev = all[i-1];
              try {
                const curDate = cur.Date ? cur.Date.slice(0,10) : (cur.__ts ? cur.__ts.toISOString().slice(0,10) : null);
                const prevDate = prev ? (prev.Date ? prev.Date.slice(0,10) : (prev.__ts ? prev.__ts.toISOString().slice(0,10) : null)) : null;
                if(!prev || prevDate !== curDate){
                  flags[i].dayStart = true;
                }
              } catch(e){}
            }
            for(let i=0;i<all.length-1;i++){
              const a = all[i], b = all[i+1];
              const aZone = a.__zone_l || '';
              const bZone = b.__zone_l || '';
              const bGap = b.__gap || 0;
              if(aZone.includes('out of office') || aZone.includes('out_of_office') || aZone.includes('out of') ){
                if(!bZone.includes('out of office') && (bGap >= OUT_RETURN_GAP_SECONDS || bGap === null && aZone.includes('out'))){
                  flags[i].outReturn = true;
                  flags[i+1].outReturn = true;
                }
              }
            }

            return (
              <div className="table-scroll">
                <table className="evidence-table" role="table" aria-label="Swipe timeline">
                  <thead>
                    <tr>
                      <th>Employee Name</th>
                      <th>Employee ID</th>
                      <th>Card</th>
                      <th>Date</th>
                      <th>Time</th>
                      <th>SwipeGap</th>
                      <th>Door</th>
                      <th>Direction</th>
                      <th>Zone</th>
                      <th>Note</th>
                    </tr>
                  </thead>
                  <tbody>
                    { all.map((rObj, idx) => {
                        const r = rObj || {};
                        const g = r.__gap;
                        const gapFormatted = (r.SwipeGap && String(r.SwipeGap).trim()) ? String(r.SwipeGap) :
                                              (g !== null && g !== undefined) ? formatSecondsToHmsJS(g) : "-";
                        const cls = [];
                        if(flags[idx].dayStart) cls.push('row-day-start');
                        if(flags[idx].outReturn) cls.push('row-out-return');
                        if(g && g >= OUT_RETURN_GAP_SECONDS) cls.push('highlight-long-duration');

                        return (
                          <tr key={idx} className={cls.join(' ')}>
                            <td className="small">{ r.EmployeeName || '-' }</td>
                            <td className="small">{ r.EmployeeID || '-' }</td>
                            <td className="small">{ r.CardNumber || r.Card || '-' }</td>
                            <td className="small">{ r.Date || '-' }</td>
                            <td className="small">{ r.Time || (r.__ts ? r.__ts.toTimeString().slice(0,8) : '-') }</td>
                            <td className="small">{ gapFormatted }</td>
                            <td className="small" style={{minWidth:160}}>{ r.Door || '-' }</td>
                            <td className="small">{ r.Direction || '-' }</td>
                            <td className="small">{ r.Zone || '-' }</td>
                            <td className="small">{ r.Note || '-' }{ r._source ? <span className="muted"> ({r._source})</span> : null }</td>
                          </tr>
                        );
                      })
                    }
                  </tbody>
                </table>
              </div>
            );
          }

          return (
            <div className="container" aria-live="polite">
              {/* Loading overlay */}
              { loading && (
                <div className="spinner-overlay" role="status" aria-label="Loading">
                  <div className="spinner-box">
                    <div className="spinner" />
                    <div style={{fontWeight:700}}>Loadingâ€¦</div>
                  </div>
                </div>
              ) }

              <div className="topbar" role="banner">
                <div className="wu-brand" aria-hidden={false}>
                  <div className="wu-logo">WU</div>
                  <div className="title-block">
                    <h1>Western Union â€” Trend Analysis</h1>
                    <p>Pune</p>
                  </div>
                </div>

                <div className="header-actions" role="region" aria-label="controls">
                  <div className="control">
                    <label className="small" htmlFor="fromDate">From</label>
                    <input id="fromDate" ref={fromRef} className="date-input" type="text" placeholder="YYYY-MM-DD" />
                  </div>

                  <div className="control">
                    <label className="small" htmlFor="toDate">To</label>
                    <input id="toDate" ref={toRef} className="date-input" type="text" placeholder="YYYY-MM-DD" />
                  </div>

                  <button className="btn-primary" onClick={runForRange} disabled={loading}>Run</button>
                  <button className="btn-ghost" onClick={loadLatest} disabled={loading}>Load latest</button>
                </div>
              </div>

              <div className="card-shell">
                <div className="cards" aria-hidden={loading}>
                  <div className="card" title="Rows analysed">
                    <h3>{ (rowsCount !== undefined && rowsCount !== null) ? rowsCount : 0 }</h3>
                    <p>Rows analysed</p>
                  </div>
                  <div className="card" title="Flagged rows">
                    <h3>{ (flaggedCount !== undefined && flaggedCount !== null) ? flaggedCount : 0 }</h3>
                    <p>Flagged rows</p>
                  </div>
                  <div className="card" title="Flagged rate">
                    <h3>{ flaggedPct }%</h3>
                    <p>Flagged rate</p>
                  </div>
                </div>

                <div className="main">
                  <div className="left">
                    <div className="chart-wrap">
                      <canvas ref={chartRef}></canvas>
                    </div>

                    <div style={{display:'flex',alignItems:'center',gap:8, marginTop:6}}>
                      <input placeholder="Search name, employee id, card or reason..." value={filterText} onChange={function(e){ setFilterText(e.target.value); setPage(1); }} style={{flex:1,padding:10,borderRadius:6,border:'1px solid #e6edf3'}} />
                      <div className="muted">Showing { filtered.length } / { rows.length } rows</div>
                      <button className="small-button" onClick={exportFiltered}>Export filtered</button>
                    </div>

                    <div style={{marginTop:10}} className="table-scroll" role="region" aria-label="results table">
                      <table>
                        <thead>
                          <tr>
                            <th>Employee</th>
                            <th className="small">ID</th>
                            <th className="small">Card</th>
                            <th className="small">Date</th>
                            <th className="small">Duration</th>
                            <th className="small">Reasons</th>
                            <th className="small">Overlap</th>
                            <th className="small">Evidence</th>
                          </tr>
                        </thead>
                        <tbody>
                          { pageRows.map(function(r, idx){
                              var empName = sanitizeName(r);
                              var displayDate = safeDateDisplay(r.Date || r.FirstSwipe || r.LastSwipe);
                              var durText = r.Duration || (r.DurationMinutes ? Math.round(r.DurationMinutes) + " min" : "");
                              var flagged = r.Reasons && String(r.Reasons).trim();
                              return (
                                <tr key={idx} className={ flagged ? "flagged-row" : "" }>
                                  <td className="row-click" onClick={function(){ openEvidence(r); }}>{ empName || <span className="muted">â€”</span> }</td>
                                  <td className="small">{ r.EmployeeID || "" }</td>
                                  <td className="small">{ r.CardNumber || "" }</td>
                                  <td className="small">{ displayDate }</td>
                                  <td className="small">{ durText }</td>
                                  <td className="small">{ renderReasonChips(r.Reasons) }</td>
                                  <td className="small">{ renderOverlapCell(r) }</td>
                                  <td className="small">
                                    <button className="evidence-btn" onClick={function(){ openEvidence(r); }}>Evidence</button>
                                  </td>
                                </tr>
                            );
                          }) }
                        </tbody>
                      </table>
                    </div>

                    <div style={{display:'flex', gap:8, alignItems:'center', marginTop:10}}>
                      <button onClick={function(){ setPage(function(p){ return Math.max(1,p-1); }); }} disabled={page<=1}>Prev</button>
                      <div className="muted">Page { page } / { totalPages }</div>
                      <button onClick={function(){ setPage(function(p){ return Math.min(totalPages,p+1); }); }} disabled={page>=totalPages}>Next</button>
                    </div>
                  </div>

                  <aside className="right" aria-label="side panel">
                    <div style={{marginBottom:12}}>
                      <strong>Files:</strong>
                      <div className="muted" style={{marginTop:6}}>{ (summary.files || []).join(", ") }</div>
                    </div>

                    <div style={{marginBottom:12}}>
                      <strong>Top reasons summary</strong>
                      <div className="small muted" style={{marginTop:6}}>Click a reason to filter the table by that reason. Click again to clear.</div>

                      <div style={{marginTop:8, display:'flex', gap:8}}>
                        <input placeholder="Filter reason list..." value={reasonFilterText} onChange={function(e){ setReasonFilterText(e.target.value); }} style={{flex:1, padding:'6px 8px', borderRadius:6, border:'1px solid #e2e8f0'}} />
                        <button className="small-button" onClick={function(){ setSelectedReason(''); setReasonFilterText(''); }}>Clear</button>
                      </div>

                      <div style={{marginTop:8, maxHeight:320, overflow:'auto'}}>
                        { Object.keys(reasonsCount).length === 0 && <div className="muted">No flags found</div> }
                        { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).filter(function(kv){
                            var name = kv[0];
                            if(!reasonFilterText) return true;
                            return name.toLowerCase().indexOf(reasonFilterText.toLowerCase()) !== -1;
                          }).slice(0, 50).map(function(kv){
                            var name = kv[0], count = kv[1];
                            var active = selectedReason === name;
                            return (
                              <div key={name} style={{display:'flex', alignItems:'center', justifyContent:'space-between', gap:8, marginBottom:6}}>
                                <button className={ "chip " + (active ? "active" : "") } style={{textAlign:'left', flex:1}} onClick={function(){ onReasonClick(name); }}>
                                  {name}
                                </button>
                                <div style={{minWidth:48, textAlign:'right'}} className="small"><b>{count}</b></div>
                              </div>
                            );
                          }) }
                      </div>
                    </div>
                  </aside>
                </div>
              </div>

              { modalRow &&
                <div className="modal" onClick={closeModal}>
                  <div className="modal-inner" onClick={function(e){ e.stopPropagation(); }}>
                    <div className="modal-header">
                      <h3>Details â€” Evidence</h3>
                      <button className="close-btn" onClick={closeModal}>Close</button>
                    </div>

                    { modalLoading && <div className="muted">Loading evidenceâ€¦</div> }

                    <div style={{marginTop:8, display:'grid', gridTemplateColumns:'1fr 1fr', gap:12}}>
                      <div>
                        <div><strong>Name:</strong> { sanitizeName(modalRow) } </div>
                        <div><strong>EmployeeID:</strong> { modalRow.EmployeeID || "â€”" } </div>
                        <div><strong>Card:</strong> { modalRow.CardNumber || "â€”" } </div>
                      </div>
                      <div>
                        <div><strong>Date:</strong> { safeDateDisplay(modalRow.Date || modalRow.FirstSwipe) } </div>
                        <div><strong>Duration:</strong> { modalRow.Duration || (modalRow.DurationMinutes ? Math.round(modalRow.DurationMinutes) + " min" : "â€”") } </div>
                        <div><strong>Reasons:</strong> { renderReasonChips(modalRow.Reasons) } </div>
                      </div>
                    </div>

                    <div className="explain">
                      <strong>Why highlighted</strong>
                      <div style={{marginTop:6}}>
                        { renderReasonExplanations(modalRow.Reasons) }
                      </div>
                    </div>

                    <hr/>

                    <h4>Available evidence files</h4>
                    <div style={{marginTop:8}}>
                      { modalDetails && modalDetails.raw_swipe_files && modalDetails.raw_swipe_files.length > 0
                        ? <div>
                            <ul>
                              { modalDetails.raw_swipe_files.map((f,i)=>(
                                <li key={i}><b>{f}</b> â€” <button onClick={function(){ window.location = API_BASE + "/swipes/" + encodeURIComponent(f); }}>Download</button></li>
                              )) }
                            </ul>
                          </div>
                        : <div className="muted">No raw swipe files found for this person/date.</div>
                      }
                    </div>

                    <div style={{marginTop:12}}>
                      <strong>Swipe timeline (filtered for this person/date)</strong>
                      <div style={{marginTop:8}}>
                        { modalDetails ? renderSwipeTimeline(modalDetails, modalRow) : <div className="muted">Evidence not loaded yet.</div> }
                      </div>
                    </div>

                    <hr/>
                    <div style={{marginTop:8}}>
                      <label><input type="checkbox" id="showraw" onChange={function(e){
                        const el = document.getElementById('rawpayload');
                        if(el) el.style.display = e.target.checked ? 'block' : 'none';
                      }} /> Show raw aggregated JSON</label>
                      <div id="rawpayload" style={{display:'none', marginTop:8}}><pre>{ JSON.stringify(modalRow, null, 2) }</pre></div>
                    </div>

                  </div>
                </div>
              }
            </div>
          );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
      })();
    </script>
  </body>
</html>





















<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Trend Analysis â€” Dashboard</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <!-- React + ReactDOM + Babel (quick prototyping) -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      /* ---------- Global ---------- */
      :root{
        --wu-yellow: #ffd400;
        --wu-black: #0a0a0a;
        --card-bg: #ffffff;
        --muted: #64748b;
        --accent: #2563eb;
      }

      html,body { height:100%; }
      body { font-family: Inter, Roboto, Arial, sans-serif; margin: 0; padding: 0; background:#f6f7fb; color:#1f2937; -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale; }
      .container { max-width:1250px; margin:12px auto; padding:0; }

      /* ---------- Header (Western Union look) ---------- */
      .topbar {
        display:flex;
        align-items:center;
        justify-content:space-between;
        background: linear-gradient(90deg, #111 0%, #000 30%);
        color:var(--wu-yellow);
        padding: 12px 16px;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 8px 24px rgba(2,6,23,0.18);
        gap:12px;
      }
      .wu-brand {
        display:flex;
        gap:12px;
        align-items:center;
      }
      .wu-logo {
        width:54px; height:34px; background:var(--wu-yellow); color:#000; display:flex; align-items:center; justify-content:center; font-weight:700; border-radius:4px; box-shadow: inset 0 -2px 0 rgba(0,0,0,0.08);
        font-family: "Helvetica Neue", Arial, sans-serif;
      }
      .title-block { line-height:1; }
      .title-block h1 { margin:0; font-size:18px; color:var(--wu-yellow); }
      .title-block p { margin:0; color:#e6e6e6; font-size:13px; }

      .header-actions { display:flex; gap:8px; align-items:center; }
      .header-actions input[type="date"] { padding:8px; border-radius:6px; border:1px solid rgba(255,255,255,0.12); background:transparent; color:#fff; }
      .header-actions label { color:#e7e7e7; font-size:13px; margin-right:4px; }
      .header-actions button { padding:8px 12px; border-radius:6px; border:0; font-weight:600; cursor:pointer; }
      .btn-primary { background:var(--wu-yellow); color:var(--wu-black); }
      .btn-ghost { background:transparent; color:#fff; border:1px solid rgba(255,255,255,0.12); }

      /* ---------- Main card area ---------- */
      .card-shell { background:var(--card-bg); padding:12px 16px 18px 16px; border-radius:0 0 8px 8px; box-shadow:0 6px 18px rgba(16,24,40,0.04); margin-top:6px; }
      .cards { display:flex; gap:10px; margin:8px 0 12px 0; padding:6px 0; align-items:stretch; }
      .card {
        flex:1;
        background:linear-gradient(180deg,#fff,#fbfdff);
        padding:12px 12px;
        border-radius:8px;
        text-align:center;
        border: 2px solid rgba(255,212,66,0.16);
        box-shadow: 0 6px 18px rgba(16,24,40,0.04);
        min-width:120px;
      }
      .card h3 { margin:4px 0; font-size:20px; color:#0f172a; }
      .card p { margin:0; color:var(--muted); font-weight:600; }

      /* compact header-to-cards spacing */
      .topbar + .card-shell { margin-top:6px; }

      .main { display:flex; gap:14px; margin-top:6px; padding-bottom:18px; }
      .left { flex:2; background:transparent; padding-right:6px; }
      .right { flex:1; min-width:260px; }

      .controls { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
      input[type="date"] { padding:8px; border-radius:6px; border:1px solid #e2e8f0; }

      /* ---------- Chart ---------- */
      .chart-wrap { background:#fff; padding:10px; border-radius:8px; box-shadow: inset 0 0 0 1px #f1f5f9; height:260px; margin-bottom:10px; }

      /* ---------- Table ---------- */
      table { width:100%; border-collapse:collapse; margin-top:8px; background:#fff; border-radius:6px; overflow:hidden; box-shadow:0 4px 20px rgba(2,6,23,0.03); }
      thead th {
        padding:10px 8px; font-weight:700; font-size:13px;
        background: linear-gradient(90deg,#fff,#fbfbfb);
        border-bottom:3px solid #e2e8f0;
        text-align:left;
      }
      tbody td { padding:8px; border-bottom:1px solid #f1f5f9; font-size:13px; color:#0f172a; vertical-align:middle; }
      .small { font-size:12px; color:var(--muted); }
      .row-click { cursor:pointer; color:#0f172a; }
      .flagged-row { background: linear-gradient(90deg,#fff8f0,#fff); }

      /* ---------- Chips & reasons ---------- */
      .pill { display:inline-block; padding:6px 10px; border-radius:999px; background:#f1f9ff; color:#064e76; font-size:12px; cursor:pointer; margin:2px; border:1px solid #e6f2ff; }
      .chip { display:inline-block; padding:6px 10px; border-radius:999px; background:#eef2ff; color:#034f84; font-size:13px; cursor:pointer; margin:3px; border:1px solid transparent; }
      .chip.active { background:#ffd; border-color:#f7c948; box-shadow:0 2px 6px rgba(39,39,56,0.06); }

      /* ---------- Evidence modal ---------- */
      .modal { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; z-index:1000; background: rgba(3,6,23,0.35); }
      .modal-inner { width:960px; max-width:96%; max-height:88%; overflow:auto; background:#fff; border-radius:8px; padding:14px; box-shadow:0 10px 40px rgba(2,6,23,0.3); border: 1px solid #e6edf3; }
      .modal-header { display:flex; align-items:center; justify-content:space-between; padding:12px; border-radius:6px; background: linear-gradient(90deg, var(--wu-yellow), #ffd966); color: #080808; margin:-14px -14px 6px -14px; }
      .modal-header h3 { margin:0; color:#000; font-size:16px; }
      .close-btn { background:#ef4444; color:#fff; border-radius:6px; padding:6px 10px; border:0; cursor:pointer; }

      .explain { background:#f8fafc; padding:10px; border-radius:8px; margin-top:8px; }

      /* ---------- Evidence table styles & highlight classes ---------- */
      .evidence-table { width:100%; border-collapse:collapse; margin-top:8px; }
      .evidence-table th, .evidence-table td { padding:8px 10px; border:1px solid #e6edf3; font-size:13px; text-align:left; vertical-align:middle; }
      .gap-flag { background:#fff5f0; color:#9a3412; padding:4px 6px; border-radius:6px; display:inline-block; margin-left:8px; font-weight:600; }

      /* Highlights requested by user */
      .row-day-start { background: linear-gradient(90deg,#eefbe8,#f7ffef); }       /* light green */
      .row-out-return { background: linear-gradient(90deg,#fff0f0,#fff6f6); }     /* light red */
      .row-out { background: linear-gradient(90deg,#fff7ed,#fffdf8); }            /* warm */
      .highlight-long-duration { outline: 2px solid rgba(239,68,68,0.12); }

      /* Loading overlay */
      .spinner-overlay {
        position: fixed;
        inset: 0;
        background: rgba(255,255,255,0.65);
        z-index: 2000;
        display:flex;
        align-items:center;
        justify-content:center;
        backdrop-filter: blur(2px);
      }
      .spinner-box {
        display:flex;
        gap:12px;
        align-items:center;
        background:#fff;
        padding:14px 18px;
        border-radius:10px;
        box-shadow: 0 10px 30px rgba(2,6,23,0.15);
        border: 1px solid #e6edf3;
      }
      .spinner {
        width:28px; height:28px; border-radius:50%; border:4px solid #e6e6e6; border-top-color:var(--accent); animation: spin 1s linear infinite;
      }
      @keyframes spin { 100% { transform: rotate(360deg); } }

      /* Small UI niceties */
      .muted { color:var(--muted); font-size:13px; }
      .evidence-btn { padding:7px 10px; background:#0ea5a4; color:#fff; border-radius:6px; border:0; cursor:pointer; }
      .small-button { padding:6px 8px; font-size:12px; border-radius:6px; border:1px solid #e2e8f0; background:transparent; cursor:pointer; }

      /* Make table horizontally scrollable on small screens */
      .table-scroll { overflow:auto; max-width:100%; }

      /* ---------- Responsive ---------- */
      @media (max-width: 900px) {
        .main { flex-direction: column; }
        .right { min-width:unset; width:100%; margin-top:12px; }
        .cards { flex-direction:row; gap:8px; }
        .chart-wrap { height:200px; }
        .header-actions { flex-wrap:wrap; gap:6px; }
      }
      @media (max-width: 560px) {
        .cards { flex-direction:column; }
        .card { width:100%; }
        .header-actions input[type="date"] { width:140px; }
      }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      (function(){
        const { useState, useEffect, useRef } = React;

        // CHANGE THIS IF YOUR API HOST DIFFERS
        const API_BASE = "http://10.199.45.239:8002";

        // Threshold used to detect "long out then return" pattern (seconds)
        const OUT_RETURN_GAP_SECONDS = 60 * 60; // 1 hour (tweak if you want)

        const SCENARIO_EXPLANATIONS = {
          "long_gap_>=90min": "Long gap between swipes (>= 90 minutes) â€” could indicate long out-of-office break.",
          "short_duration_<4h": "Short total duration in office (< 4 hours).",
          "coffee_badging": "Frequent short badge cycles (>=4) with short duration â€” possible 'coffee badging'.",
          "low_swipe_count_<=2": "Low swipe count (<=2) for the day.",
          "single_door": "All swipes used the same door â€” single-door behavior.",
          "only_in": "Only IN swipe(s) recorded for the day.",
          "only_out": "Only OUT swipe(s) recorded for the day.",
          "overtime_>=10h": "Long duration (>=10 hours) â€” overtime.",
          "very_long_duration_>=16h": "Very long duration (>=16 hours) â€” suspiciously long presence.",
          "zero_swipes": "No swipes recorded.",
          "unusually_high_swipes": "Unusually high number of swipes versus historical median.",
          "repeated_short_breaks": "Multiple short breaks within the day.",
          "multiple_location_same_day": "Swipes recorded at multiple locations same day.",
          "weekend_activity": "Activity recorded on weekend.",
          "repeated_rejection_count": "Several card rejections.",
          "badge_sharing_suspected": "Badge sharing suspected (same card used by multiple persons on same day).",
          "early_arrival_before_06": "First swipe before 06:00.",
          "late_exit_after_22": "Last swipe after 22:00.",
          "shift_inconsistency": "Duration inconsistent with historical shift patterns.",
          "trending_decline": "Historical trending decline flagged.",
          "consecutive_absent_days": "Marked absent for consecutive days historically.",
          "high_variance_duration": "High variance in durations historically.",
          "short_duration_on_high_presence_days": "Short duration even though employee usually attends many days.",
          "swipe_overlap": "Simultaneous swipe(s) near the same time with other uid(s) (possible tailgating or collusion).",
          "shortstay_longout_repeat": "Pattern: short stay, long out-of-office, short return (repeat)."
        };

        function pad(n){ return n.toString().padStart(2,'0'); }
        function formatDateISO(d){
          if(!d) return "";
          const dt = (d instanceof Date) ? d : new Date(d);
          return dt.getFullYear() + "-" + pad(dt.getMonth()+1) + "-" + pad(dt.getDate());
        }
        function datesBetween(start, end){
          var out = [];
          var cur = new Date(start);
          while(cur <= end){
            out.push(new Date(cur));
            cur.setDate(cur.getDate()+1);
          }
          return out;
        }
        function safeDateDisplay(val){
          if(!val && val !== 0) return "";
          try {
            var d = (val instanceof Date) ? val : new Date(val);
            if(isNaN(d.getTime())) return String(val);
            return d.toLocaleString();
          } catch(e) {
            return String(val);
          }
        }
        function sanitizeName(row){
          return row.EmployeeName || row.EmployeeName_x || row.EmployeeName_y || row.person_uid || "";
        }
        function downloadCSV(rows, filename){
          if(!rows || !rows.length) { alert("No rows to export"); return; }
          var cols = Object.keys(rows[0]);
          var lines = [cols.join(",")];
          rows.forEach(function(r){
            var row = cols.map(function(c){
              var v = (r[c] === undefined || r[c] === null) ? "" : String(r[c]).replace(/\n/g,' ');
              return JSON.stringify(v);
            }).join(",");
            lines.push(row);
          });
          var blob = new Blob([lines.join("\n")], {type:'text/csv'});
          var url = URL.createObjectURL(blob);
          var a = document.createElement('a'); a.href = url; a.download = filename || 'export.csv'; a.click(); URL.revokeObjectURL(url);
        }

        // convert seconds -> "HH:mm:ss"
        function formatSecondsToHmsJS(seconds){
          if (seconds === null || seconds === undefined || seconds === '') return "-";
          const n = Number(seconds);
          if (isNaN(n) || !isFinite(n)) return "-";
          const s = Math.max(0, Math.floor(n));
          const hh = Math.floor(s / 3600);
          const mm = Math.floor((s % 3600) / 60);
          const ss = s % 60;
          return pad(hh) + ":" + pad(mm) + ":" + pad(ss);
        }

        function App(){
          var yesterday = new Date();
          yesterday.setDate(yesterday.getDate()-1);

          const [dateFrom, setDateFrom] = useState(formatDateISO(yesterday));
          const [dateTo, setDateTo] = useState(formatDateISO(new Date()));
          const [loading, setLoading] = useState(false);
          const [summary, setSummary] = useState({rows:0, flagged_rows:0, files:[], end_date:null});
          const [rows, setRows] = useState([]);
          const [reasonsCount, setReasonsCount] = useState({});
          const [filterText, setFilterText] = useState("");
          const [page, setPage] = useState(1);
          const [selectedReason, setSelectedReason] = useState("");
          const [reasonFilterText, setReasonFilterText] = useState("");
          const [modalRow, setModalRow] = useState(null);
          const [modalDetails, setModalDetails] = useState(null); // {aggregated_rows, raw_swipes, raw_swipe_files}
          const [modalLoading, setModalLoading] = useState(false);
          const pageSize = 25;
          const chartRef = useRef(null);
          const chartInst = useRef(null);

          useEffect(function(){
            // load latest on mount
            loadLatest();
          }, []);

          async function runForRange(){
            setLoading(true);
            setRows([]);
            setSummary({rows:0, flagged_rows:0, files:[], end_date:null});
            setReasonsCount({});
            try {
              var start = new Date(dateFrom);
              var end = new Date(dateTo);
              var dateList = datesBetween(start, end).map(d => formatDateISO(d));
              var accRows = [];
              var totalRows = 0, totalFlagged = 0, files = [];
              for(var i=0;i<dateList.length;i++){
                var d = dateList[i];
                var url = API_BASE + "/run?date=" + d;
                var r = await fetch(url, { method:'GET' });
                if(!r.ok){
                  var txt = await r.text();
                  throw new Error("API returned " + r.status + ": " + txt);
                }
                var js = await r.json();
                var sample = js.sample || [];
                if(Array.isArray(sample) && sample.length) accRows = accRows.concat(sample);
                if(typeof js.rows === 'number') totalRows += js.rows; else totalRows += (Array.isArray(sample) ? sample.length : 0);
                totalFlagged += (js.flagged_rows || 0);
                if(js.files) files = files.concat(js.files);
              }
              setRows(accRows);
              setSummary({rows: totalRows, flagged_rows: totalFlagged, files: files, end_date: formatDateISO(new Date(dateTo))});
              computeReasons(accRows);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message);
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          async function loadLatest(){
            setLoading(true);
            try{
              var r = await fetch(API_BASE + "/latest");
              if(!r.ok) throw new Error("latest failed: " + r.status);
              var js = await r.json();
              var sample = js.sample || [];
              if(!Array.isArray(sample)) sample = [];
              setRows(sample);
              setSummary({rows: (js.rows || sample.length || 0), flagged_rows: (sample.filter(function(x){ return !!x.Reasons; }).length || 0), files:[js.file]});
              computeReasons(sample);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message + (err.message === 'latest failed: 0' ? " (check backend/CORS)" : ""));
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          function computeReasons(dataRows){
            var counts = {};
            (dataRows || []).forEach(function(r){
              if(!r.Reasons) return;
              var parts = String(r.Reasons).split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              parts.forEach(function(p){ counts[p] = (counts[p] || 0) + 1; });
            });
            setReasonsCount(counts);
            buildChart(counts);
          }

          function buildChart(counts){
            var labels = Object.keys(counts).sort(function(a,b){ return counts[b] - counts[a]; });
            var values = labels.map(function(l){ return counts[l]; });
            var ctx = chartRef.current && chartRef.current.getContext ? chartRef.current.getContext('2d') : null;
            if(!ctx) return;
            try { if(chartInst.current) chartInst.current.destroy(); } catch(e){}
            chartInst.current = new Chart(ctx, {
              type:'bar',
              data:{ labels: labels, datasets:[{ label:'Events', data: values, backgroundColor: labels.map(()=> 'rgba(37,99,235,0.85)') }] },
              options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } }, scales:{ y:{ beginAtZero:true } } }
            });
          }

          // filtering & pagination
          var filtered = (rows || []).filter(function(r){
            var hay = (sanitizeName(r) + " " + (r.EmployeeID||"") + " " + (r.CardNumber||"") + " " + (r.Reasons||"")).toLowerCase();
            var textOk = !filterText || hay.indexOf(filterText.toLowerCase()) !== -1;
            var reasonOk = !selectedReason || (r.Reasons && ((";" + String(r.Reasons) + ";").indexOf(selectedReason) !== -1));
            return textOk && reasonOk;
          });
          var totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
          var pageRows = filtered.slice((page-1)*pageSize, page*pageSize);

          function exportFiltered(){
            downloadCSV(filtered, "trend_filtered_export.csv");
          }

          function onReasonClick(reason){
            if(!reason) { setSelectedReason(""); return; }
            if(selectedReason === reason) setSelectedReason(""); else setSelectedReason(reason);
            setPage(1);
          }

          // open evidence modal (explicit Evidence button)
          async function openEvidence(row){
            setModalRow(row);
            setModalDetails(null);
            setModalLoading(true);
            try {
              const q = encodeURIComponent(row.EmployeeID || row.person_uid || "");
              const resp = await fetch(API_BASE + "/record?employee_id=" + q);
              if(!resp.ok){
                const txt = await resp.text();
                throw new Error("record failed: " + resp.status + " - " + txt);
              }
              const js = await resp.json();
              const details = { aggregated_rows: js.aggregated_rows || [], raw_swipe_files: js.raw_swipe_files || [], raw_swipes: js.raw_swipes || [] };
              setModalDetails(details);
            } catch(e){
              alert("Failed loading details: " + e.message);
              console.error(e);
            } finally {
              setModalLoading(false);
            }
          }

          function closeModal(){ setModalRow(null); setModalDetails(null); }

          // convenience counts for cards
          var rowsCount = (summary && typeof summary.rows === 'number') ? summary.rows : (rows ? rows.length : 0);
          var flaggedCount = (summary && typeof summary.flagged_rows === 'number') ? summary.flagged_rows : (rows ? rows.filter(function(r){ return !!r.Reasons; }).length : 0);
          var flaggedPct = rowsCount ? Math.round((flaggedCount*100)/(rowsCount||1)) : 0;

          function renderOverlapCell(r){
            var ov = r.OverlapWith || r.swipe_overlap || r.overlap_with || null;
            if(ov && typeof ov === 'string'){
              var parts = ov.split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              if(parts.length === 0) return <span className="muted">â€”</span>;
              return <span className="pill" title={ov}>{parts.length} overlap</span>;
            }
            return <span className="muted">â€”</span>;
          }

          function renderReasonChips(reasonText){
            if(!reasonText) return <span className="muted">â€”</span>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return parts.map((p,idx)=>(<span key={idx} className="pill" title={SCENARIO_EXPLANATIONS[p] || p}>{p}</span>));
          }

          function renderReasonExplanations(reasonText){
            if(!reasonText) return <div className="muted">No flags</div>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return (
              <div>
                {parts.map((p,idx)=>(
                  <div key={idx} style={{marginBottom:6}}>
                    <b>{p}</b> â€” <span className="small">{ SCENARIO_EXPLANATIONS[p] || "No explanation available." }</span>
                  </div>
                ))}
              </div>
            );
          }

          // render timeline with requested highlights:
          function renderSwipeTimeline(details, modalRow){
            if(!details || !details.raw_swipes || details.raw_swipes.length === 0){
              return <div className="muted">No raw swipe evidence available (person not flagged or raw file missing).</div>;
            }
            // copy & parse
            const all = details.raw_swipes.slice().map(r => {
              const obj = Object.assign({}, r);
              try {
                if(obj.Date && obj.Time){
                  obj.__ts = new Date(obj.Date + "T" + obj.Time);
                } else if(obj.Date && obj.Time === undefined && obj.LocaleMessageTime){
                  obj.__ts = new Date(obj.LocaleMessageTime);
                } else if(obj.LocaleMessageTime){
                  obj.__ts = new Date(obj.LocaleMessageTime);
                } else {
                  obj.__ts = null;
                }
              } catch(e){
                obj.__ts = null;
              }
              let gap = null;
              if(obj.SwipeGapSeconds !== undefined && obj.SwipeGapSeconds !== null){
                gap = Number(obj.SwipeGapSeconds);
                if(isNaN(gap)) gap = null;
              } else if(obj.SwipeGap){
                try {
                  const parts = String(obj.SwipeGap).split(':').map(p=>Number(p));
                  if(parts.length===3) gap = parts[0]*3600 + parts[1]*60 + parts[2];
                } catch(e){ gap = null; }
              }
              obj.__gap = gap;
              obj.__zone_l = String((obj.Zone || '')).toLowerCase();
              return obj;
            }).sort((a,b) => {
              if(a.__ts && b.__ts) return a.__ts - b.__ts;
              if(a.__ts) return -1;
              if(b.__ts) return 1;
              return 0;
            });

            const flags = new Array(all.length).fill({}).map(()=>({dayStart:false, outReturn:false}));
            for(let i=0;i<all.length;i++){
              const cur = all[i];
              const prev = all[i-1];
              try {
                const curDate = cur.Date ? cur.Date.slice(0,10) : (cur.__ts ? cur.__ts.toISOString().slice(0,10) : null);
                const prevDate = prev ? (prev.Date ? prev.Date.slice(0,10) : (prev.__ts ? prev.__ts.toISOString().slice(0,10) : null)) : null;
                if(!prev || prevDate !== curDate){
                  flags[i].dayStart = true;
                }
              } catch(e){}
            }
            for(let i=0;i<all.length-1;i++){
              const a = all[i], b = all[i+1];
              const aZone = a.__zone_l || '';
              const bZone = b.__zone_l || '';
              const bGap = b.__gap || 0;
              if(aZone.includes('out of office') || aZone.includes('out_of_office') || aZone.includes('out of') ){
                if(!bZone.includes('out of office') && (bGap >= OUT_RETURN_GAP_SECONDS || bGap === null && aZone.includes('out'))){
                  flags[i].outReturn = true;
                  flags[i+1].outReturn = true;
                }
              }
            }

            return (
              <div className="table-scroll">
                <table className="evidence-table" role="table" aria-label="Swipe timeline">
                  <thead>
                    <tr>
                      <th>Employee Name</th>
                      <th>Employee ID</th>
                      <th>Card</th>
                      <th>Date</th>
                      <th>Time</th>
                      <th>SwipeGap</th>
                      <th>Door</th>
                      <th>Direction</th>
                      <th>Zone</th>
                      <th>Note</th>
                    </tr>
                  </thead>
                  <tbody>
                    { all.map((rObj, idx) => {
                        const r = rObj || {};
                        const g = r.__gap;
                        const gapFormatted = (r.SwipeGap && String(r.SwipeGap).trim()) ? String(r.SwipeGap) :
                                              (g !== null && g !== undefined) ? formatSecondsToHmsJS(g) : "-";
                        const cls = [];
                        if(flags[idx].dayStart) cls.push('row-day-start');
                        if(flags[idx].outReturn) cls.push('row-out-return');
                        if(g && g >= OUT_RETURN_GAP_SECONDS) cls.push('highlight-long-duration');

                        return (
                          <tr key={idx} className={cls.join(' ')}>
                            <td className="small">{ r.EmployeeName || '-' }</td>
                            <td className="small">{ r.EmployeeID || '-' }</td>
                            <td className="small">{ r.CardNumber || r.Card || '-' }</td>
                            <td className="small">{ r.Date || '-' }</td>
                            <td className="small">{ r.Time || (r.__ts ? r.__ts.toTimeString().slice(0,8) : '-') }</td>
                            <td className="small">{ gapFormatted }</td>
                            <td className="small" style={{minWidth:160}}>{ r.Door || '-' }</td>
                            <td className="small">{ r.Direction || '-' }</td>
                            <td className="small">{ r.Zone || '-' }</td>
                            <td className="small">{ r.Note || '-' }{ r._source ? <span className="muted"> ({r._source})</span> : null }</td>
                          </tr>
                        );
                      })
                    }
                  </tbody>
                </table>
              </div>
            );
          }

          return (
            <div className="container" aria-live="polite">
              {/* Loading overlay */}
              { loading && (
                <div className="spinner-overlay" role="status" aria-label="Loading">
                  <div className="spinner-box">
                    <div className="spinner" />
                    <div style={{fontWeight:700}}>Loadingâ€¦</div>
                  </div>
                </div>
              ) }

              <div className="topbar" role="banner">
                <div className="wu-brand">
                  <div className="wu-logo">WU</div>
                  <div className="title-block">
                    <h1>Western Union â€” Trend Analysis</h1>
                    <p>Pune</p>
                  </div>
                </div>

                <div className="header-actions" role="region" aria-label="controls">
                  <label className="small">From</label>
                  <input type="date" value={dateFrom} onChange={function(e){ setDateFrom(e.target.value); }} disabled={loading} />
                  <label className="small">To</label>
                  <input type="date" value={dateTo} onChange={function(e){ setDateTo(e.target.value); }} disabled={loading} />
                  <button className="btn-primary" onClick={runForRange} disabled={loading}>Run</button>
                  <button className="btn-ghost" onClick={loadLatest} disabled={loading}>Load latest</button>
                </div>
              </div>

              <div className="card-shell">
                <div className="cards" aria-hidden={loading}>
                  <div className="card" title="Rows analysed">
                    <h3>{ (rowsCount !== undefined && rowsCount !== null) ? rowsCount : 0 }</h3>
                    <p>Rows analysed</p>
                  </div>
                  <div className="card" title="Flagged rows">
                    <h3>{ (flaggedCount !== undefined && flaggedCount !== null) ? flaggedCount : 0 }</h3>
                    <p>Flagged rows</p>
                  </div>
                  <div className="card" title="Flagged rate">
                    <h3>{ flaggedPct }%</h3>
                    <p>Flagged rate</p>
                  </div>
                </div>

                <div className="main">
                  <div className="left">
                    <div className="chart-wrap">
                      <canvas ref={chartRef}></canvas>
                    </div>

                    <div style={{display:'flex',alignItems:'center',gap:8, marginTop:6}}>
                      <input placeholder="Search name, employee id, card or reason..." value={filterText} onChange={function(e){ setFilterText(e.target.value); setPage(1); }} style={{flex:1,padding:10,borderRadius:6,border:'1px solid #e6edf3'}} />
                      <div className="muted">Showing { filtered.length } / { rows.length } rows</div>
                      <button className="small-button" onClick={exportFiltered}>Export filtered</button>
                    </div>

                    <div style={{marginTop:10}} className="table-scroll" role="region" aria-label="results table">
                      <table>
                        <thead>
                          <tr>
                            <th>Employee</th>
                            <th className="small">ID</th>
                            <th className="small">Card</th>
                            <th className="small">Date</th>
                            <th className="small">Duration</th>
                            <th className="small">Reasons</th>
                            <th className="small">Overlap</th>
                            <th className="small">Evidence</th>
                          </tr>
                        </thead>
                        <tbody>
                          { pageRows.map(function(r, idx){
                              var empName = sanitizeName(r);
                              var displayDate = safeDateDisplay(r.Date || r.FirstSwipe || r.LastSwipe);
                              var durText = r.Duration || (r.DurationMinutes ? Math.round(r.DurationMinutes) + " min" : "");
                              var flagged = r.Reasons && String(r.Reasons).trim();
                              return (
                                <tr key={idx} className={ flagged ? "flagged-row" : "" }>
                                  <td className="row-click" onClick={function(){ openEvidence(r); }}>{ empName || <span className="muted">â€”</span> }</td>
                                  <td className="small">{ r.EmployeeID || "" }</td>
                                  <td className="small">{ r.CardNumber || "" }</td>
                                  <td className="small">{ displayDate }</td>
                                  <td className="small">{ durText }</td>
                                  <td className="small">{ renderReasonChips(r.Reasons) }</td>
                                  <td className="small">{ renderOverlapCell(r) }</td>
                                  <td className="small">
                                    <button className="evidence-btn" onClick={function(){ openEvidence(r); }}>Evidence</button>
                                  </td>
                                </tr>
                            );
                          }) }
                        </tbody>
                      </table>
                    </div>

                    <div style={{display:'flex', gap:8, alignItems:'center', marginTop:10}}>
                      <button onClick={function(){ setPage(function(p){ return Math.max(1,p-1); }); }} disabled={page<=1}>Prev</button>
                      <div className="muted">Page { page } / { totalPages }</div>
                      <button onClick={function(){ setPage(function(p){ return Math.min(totalPages,p+1); }); }} disabled={page>=totalPages}>Next</button>
                    </div>
                  </div>

                  <aside className="right" aria-label="side panel">
                    <div style={{marginBottom:12}}>
                      <strong>Files:</strong>
                      <div className="muted" style={{marginTop:6}}>{ (summary.files || []).join(", ") }</div>
                    </div>

                    <div style={{marginBottom:12}}>
                      <strong>Top reasons summary</strong>
                      <div className="small muted" style={{marginTop:6}}>Click a reason to filter the table by that reason. Click again to clear.</div>

                      <div style={{marginTop:8, display:'flex', gap:8}}>
                        <input placeholder="Filter reason list..." value={reasonFilterText} onChange={function(e){ setReasonFilterText(e.target.value); }} style={{flex:1, padding:'6px 8px', borderRadius:6, border:'1px solid #e2e8f0'}} />
                        <button className="small-button" onClick={function(){ setSelectedReason(''); setReasonFilterText(''); }}>Clear</button>
                      </div>

                      <div style={{marginTop:8, maxHeight:320, overflow:'auto'}}>
                        { Object.keys(reasonsCount).length === 0 && <div className="muted">No flags found</div> }
                        { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).filter(function(kv){
                            var name = kv[0];
                            if(!reasonFilterText) return true;
                            return name.toLowerCase().indexOf(reasonFilterText.toLowerCase()) !== -1;
                          }).slice(0, 50).map(function(kv){
                            var name = kv[0], count = kv[1];
                            var active = selectedReason === name;
                            return (
                              <div key={name} style={{display:'flex', alignItems:'center', justifyContent:'space-between', gap:8, marginBottom:6}}>
                                <button className={ "chip " + (active ? "active" : "") } style={{textAlign:'left', flex:1}} onClick={function(){ onReasonClick(name); }}>
                                  {name}
                                </button>
                                <div style={{minWidth:48, textAlign:'right'}} className="small"><b>{count}</b></div>
                              </div>
                            );
                          }) }
                      </div>
                    </div>
                  </aside>
                </div>
              </div>

              { modalRow &&
                <div className="modal" onClick={closeModal}>
                  <div className="modal-inner" onClick={function(e){ e.stopPropagation(); }}>
                    <div className="modal-header">
                      <h3>Details â€” Evidence</h3>
                      <button className="close-btn" onClick={closeModal}>Close</button>
                    </div>

                    { modalLoading && <div className="muted">Loading evidenceâ€¦</div> }

                    <div style={{marginTop:8, display:'grid', gridTemplateColumns:'1fr 1fr', gap:12}}>
                      <div>
                        <div><strong>Name:</strong> { sanitizeName(modalRow) } </div>
                        <div><strong>EmployeeID:</strong> { modalRow.EmployeeID || "â€”" } </div>
                        <div><strong>Card:</strong> { modalRow.CardNumber || "â€”" } </div>
                      </div>
                      <div>
                        <div><strong>Date:</strong> { safeDateDisplay(modalRow.Date || modalRow.FirstSwipe) } </div>
                        <div><strong>Duration:</strong> { modalRow.Duration || (modalRow.DurationMinutes ? Math.round(modalRow.DurationMinutes) + " min" : "â€”") } </div>
                        <div><strong>Reasons:</strong> { renderReasonChips(modalRow.Reasons) } </div>
                      </div>
                    </div>

                    <div className="explain">
                      <strong>Why highlighted</strong>
                      <div style={{marginTop:6}}>
                        { renderReasonExplanations(modalRow.Reasons) }
                      </div>
                    </div>

                    <hr/>

                    <h4>Available evidence files</h4>
                    <div style={{marginTop:8}}>
                      { modalDetails && modalDetails.raw_swipe_files && modalDetails.raw_swipe_files.length > 0
                        ? <div>
                            <ul>
                              { modalDetails.raw_swipe_files.map((f,i)=>(
                                <li key={i}><b>{f}</b> â€” <button onClick={function(){ window.location = API_BASE + "/swipes/" + encodeURIComponent(f); }}>Download</button></li>
                              )) }
                            </ul>
                          </div>
                        : <div className="muted">No raw swipe files found for this person/date.</div>
                      }
                    </div>

                    <div style={{marginTop:12}}>
                      <strong>Swipe timeline (filtered for this person/date)</strong>
                      <div style={{marginTop:8}}>
                        { modalDetails ? renderSwipeTimeline(modalDetails, modalRow) : <div className="muted">Evidence not loaded yet.</div> }
                      </div>
                    </div>

                    <hr/>
                    <div style={{marginTop:8}}>
                      <label><input type="checkbox" id="showraw" onChange={function(e){
                        const el = document.getElementById('rawpayload');
                        if(el) el.style.display = e.target.checked ? 'block' : 'none';
                      }} /> Show raw aggregated JSON</label>
                      <div id="rawpayload" style={{display:'none', marginTop:8}}><pre>{ JSON.stringify(modalRow, null, 2) }</pre></div>
                    </div>

                  </div>
                </div>
              }
            </div>
          );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
      })();
    </script>
  </body>
</html>





















<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Trend Analysis â€” Dashboard</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <!-- React + ReactDOM + Babel (quick prototyping) -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/babel-standalone@6.26.0/babel.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      /* ---------- Global ---------- */
      :root{
        --wu-yellow: #ffd400;
        --wu-black: #0a0a0a;
        --card-bg: #ffffff;
        --muted: #64748b;
        --accent: #2563eb;
      }
      body { font-family: Inter, Roboto, Arial, sans-serif; margin: 0; padding: 0; background:#f6f7fb; color:#1f2937; }
      .container { max-width:1250px; margin:24px auto; padding:0; }

      /* ---------- Header (Western Union look) ---------- */
      .topbar {
        display:flex;
        align-items:center;
        justify-content:space-between;
        background: linear-gradient(90deg, #111 0%, #000 30%);
        color:var(--wu-yellow);
        padding: 14px 20px;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 8px 24px rgba(2,6,23,0.25);
      }
      .wu-brand {
        display:flex;
        gap:12px;
        align-items:center;
      }
      .wu-logo {
        width:56px; height:36px; background:var(--wu-yellow); color:#000; display:flex; align-items:center; justify-content:center; font-weight:700; border-radius:4px; box-shadow: inset 0 -2px 0 rgba(0,0,0,0.08);
        font-family: "Helvetica Neue", Arial, sans-serif;
      }
      .title-block { line-height:1; }
      .title-block h1 { margin:0; font-size:18px; color:var(--wu-yellow); }
      .title-block p { margin:0; color:#e6e6e6; font-size:13px; }

      .header-actions { display:flex; gap:8px; align-items:center; }
      .header-actions button { padding:8px 12px; border-radius:6px; border:0; font-weight:600; cursor:pointer; }
      .btn-primary { background:var(--wu-yellow); color:var(--wu-black); }
      .btn-ghost { background:transparent; color:#fff; border:1px solid rgba(255,255,255,0.12); }

      /* ---------- Main card area ---------- */
      .card-shell { background:var(--card-bg); padding:18px; border-radius:0 0 8px 8px; box-shadow:0 6px 18px rgba(16,24,40,0.06); }
      .cards { display:flex; gap:12px; margin:16px 0; padding:8px 6px; }
      .card {
        flex:1;
        background:linear-gradient(180deg,#fff,#fbfdff);
        padding:12px 14px;
        border-radius:8px;
        text-align:center;
        border: 2px solid #f1f5f9;
      }
      .card h3 { margin:4px 0; font-size:20px; color:#0f172a; }
      .card p { margin:0; color:var(--muted); }

      .main { display:flex; gap:18px; margin-top:8px; padding-bottom:18px; }
      .left { flex:2; background:transparent; padding-right:6px; }
      .right { flex:1; min-width:300px; }

      .controls { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
      input[type="date"] { padding:8px; border-radius:6px; border:1px solid #e2e8f0; }

      /* ---------- Chart ---------- */
      .chart-wrap { background:#fff; padding:12px; border-radius:8px; box-shadow: inset 0 0 0 1px #f1f5f9; height:280px; margin-bottom:12px; }

      /* ---------- Table ---------- */
      table { width:100%; border-collapse:collapse; margin-top:8px; background:#fff; border-radius:6px; overflow:hidden; box-shadow:0 4px 20px rgba(2,6,23,0.03); }
      thead th {
        padding:12px 10px; font-weight:700; font-size:13px;
        background: linear-gradient(90deg,#fff,#fbfbfb);
        border-bottom:3px solid #e2e8f0;
        text-align:left;
      }
      tbody td { padding:10px; border-bottom:1px solid #f1f5f9; font-size:13px; color:#0f172a; vertical-align:middle; }
      .small { font-size:12px; color:var(--muted); }
      .row-click { cursor:pointer; color:#0f172a; }
      .flagged-row { background: linear-gradient(90deg,#fff8f0,#fff); }

      /* ---------- Chips & reasons ---------- */
      .pill { display:inline-block; padding:6px 10px; border-radius:999px; background:#f1f9ff; color:#064e76; font-size:12px; cursor:pointer; margin:2px; border:1px solid #e6f2ff; }
      .chip { display:inline-block; padding:6px 10px; border-radius:999px; background:#eef2ff; color:#034f84; font-size:13px; cursor:pointer; margin:3px; border:1px solid transparent; }
      .chip.active { background:#ffd; border-color:#f7c948; box-shadow:0 2px 6px rgba(39,39,56,0.06); }

      /* ---------- Evidence modal ---------- */
      .modal { position:fixed; left:0; right:0; top:0; bottom:0; display:flex; align-items:center; justify-content:center; z-index:1000; background: rgba(3,6,23,0.35); }
      .modal-inner { width:960px; max-width:96%; max-height:88%; overflow:auto; background:#fff; border-radius:8px; padding:14px; box-shadow:0 10px 40px rgba(2,6,23,0.3); border: 1px solid #e6edf3; }
      .modal-header { display:flex; align-items:center; justify-content:space-between; padding:12px; border-radius:6px; background: linear-gradient(90deg, var(--wu-yellow), #ffd966); color: #080808; margin:-14px -14px 6px -14px; }
      .modal-header h3 { margin:0; color:#000; font-size:16px; }
      .close-btn { background:#ef4444; color:#fff; border-radius:6px; padding:6px 10px; border:0; cursor:pointer; }

      .explain { background:#f8fafc; padding:10px; border-radius:8px; margin-top:8px; }

      /* ---------- Evidence table styles & highlight classes ---------- */
      .evidence-table { width:100%; border-collapse:collapse; margin-top:8px; }
      .evidence-table th, .evidence-table td { padding:8px 10px; border:1px solid #e6edf3; font-size:13px; text-align:left; vertical-align:middle; }
      .gap-flag { background:#fff5f0; color:#9a3412; padding:4px 6px; border-radius:6px; display:inline-block; margin-left:8px; font-weight:600; }

      /* Highlights requested by user */
      .row-day-start { background: linear-gradient(90deg,#eefbe8,#f7ffef); }       /* light green */
      .row-out-return { background: linear-gradient(90deg,#fff0f0,#fff6f6); }     /* light red */
      .row-out { background: linear-gradient(90deg,#fff7ed,#fffdf8); }            /* warm */
      .highlight-long-duration { outline: 2px solid rgba(239,68,68,0.12); }

      /* Small UI niceties */
      .muted { color:var(--muted); font-size:13px; }
      .evidence-btn { padding:7px 10px; background:#0ea5a4; color:#fff; border-radius:6px; border:0; cursor:pointer; }
      .small-button { padding:6px 8px; font-size:12px; border-radius:6px; border:1px solid #e2e8f0; background:transparent; cursor:pointer; }

      /* Make table horizontally scrollable on small screens */
      .table-scroll { overflow:auto; max-width:100%; }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      (function(){
        const { useState, useEffect, useRef } = React;

        // CHANGE THIS IF YOUR API HOST DIFFERS
        const API_BASE = "http://10.199.45.239:8002";

        // Threshold used to detect "long out then return" pattern (seconds)
        const OUT_RETURN_GAP_SECONDS = 60 * 60; // 1 hour (tweak if you want)

        const SCENARIO_EXPLANATIONS = {
          "long_gap_>=90min": "Long gap between swipes (>= 90 minutes) â€” could indicate long out-of-office break.",
          "short_duration_<4h": "Short total duration in office (< 4 hours).",
          "coffee_badging": "Frequent short badge cycles (>=4) with short duration â€” possible 'coffee badging'.",
          "low_swipe_count_<=2": "Low swipe count (<=2) for the day.",
          "single_door": "All swipes used the same door â€” single-door behavior.",
          "only_in": "Only IN swipe(s) recorded for the day.",
          "only_out": "Only OUT swipe(s) recorded for the day.",
          "overtime_>=10h": "Long duration (>=10 hours) â€” overtime.",
          "very_long_duration_>=16h": "Very long duration (>=16 hours) â€” suspiciously long presence.",
          "zero_swipes": "No swipes recorded.",
          "unusually_high_swipes": "Unusually high number of swipes versus historical median.",
          "repeated_short_breaks": "Multiple short breaks within the day.",
          "multiple_location_same_day": "Swipes recorded at multiple locations same day.",
          "weekend_activity": "Activity recorded on weekend.",
          "repeated_rejection_count": "Several card rejections.",
          "badge_sharing_suspected": "Badge sharing suspected (same card used by multiple persons on same day).",
          "early_arrival_before_06": "First swipe before 06:00.",
          "late_exit_after_22": "Last swipe after 22:00.",
          "shift_inconsistency": "Duration inconsistent with historical shift patterns.",
          "trending_decline": "Historical trending decline flagged.",
          "consecutive_absent_days": "Marked absent for consecutive days historically.",
          "high_variance_duration": "High variance in durations historically.",
          "short_duration_on_high_presence_days": "Short duration even though employee usually attends many days.",
          "swipe_overlap": "Simultaneous swipe(s) near the same time with other uid(s) (possible tailgating or collusion).",
          "shortstay_longout_repeat": "Pattern: short stay, long out-of-office, short return (repeat)."
        };

        function pad(n){ return n.toString().padStart(2,'0'); }
        function formatDateISO(d){
          if(!d) return "";
          const dt = (d instanceof Date) ? d : new Date(d);
          return dt.getFullYear() + "-" + pad(dt.getMonth()+1) + "-" + pad(dt.getDate());
        }
        function datesBetween(start, end){
          var out = [];
          var cur = new Date(start);
          while(cur <= end){
            out.push(new Date(cur));
            cur.setDate(cur.getDate()+1);
          }
          return out;
        }
        function safeDateDisplay(val){
          if(!val && val !== 0) return "";
          try {
            var d = (val instanceof Date) ? val : new Date(val);
            if(isNaN(d.getTime())) return String(val);
            return d.toLocaleString();
          } catch(e) {
            return String(val);
          }
        }
        function sanitizeName(row){
          return row.EmployeeName || row.EmployeeName_x || row.EmployeeName_y || row.person_uid || "";
        }
        function downloadCSV(rows, filename){
          if(!rows || !rows.length) { alert("No rows to export"); return; }
          var cols = Object.keys(rows[0]);
          var lines = [cols.join(",")];
          rows.forEach(function(r){
            var row = cols.map(function(c){
              var v = (r[c] === undefined || r[c] === null) ? "" : String(r[c]).replace(/\n/g,' ');
              return JSON.stringify(v);
            }).join(",");
            lines.push(row);
          });
          var blob = new Blob([lines.join("\n")], {type:'text/csv'});
          var url = URL.createObjectURL(blob);
          var a = document.createElement('a'); a.href = url; a.download = filename || 'export.csv'; a.click(); URL.revokeObjectURL(url);
        }

        // convert seconds -> "HH:mm:ss"
        function formatSecondsToHmsJS(seconds){
          if (seconds === null || seconds === undefined || seconds === '') return "-";
          const n = Number(seconds);
          if (isNaN(n) || !isFinite(n)) return "-";
          const s = Math.max(0, Math.floor(n));
          const hh = Math.floor(s / 3600);
          const mm = Math.floor((s % 3600) / 60);
          const ss = s % 60;
          return pad(hh) + ":" + pad(mm) + ":" + pad(ss);
        }

        function App(){
          var yesterday = new Date();
          yesterday.setDate(yesterday.getDate()-1);

          const [dateFrom, setDateFrom] = useState(formatDateISO(yesterday));
          const [dateTo, setDateTo] = useState(formatDateISO(new Date()));
          const [loading, setLoading] = useState(false);
          const [summary, setSummary] = useState({rows:0, flagged_rows:0, files:[], end_date:null});
          const [rows, setRows] = useState([]);
          const [reasonsCount, setReasonsCount] = useState({});
          const [filterText, setFilterText] = useState("");
          const [page, setPage] = useState(1);
          const [selectedReason, setSelectedReason] = useState("");
          const [reasonFilterText, setReasonFilterText] = useState("");
          const [modalRow, setModalRow] = useState(null);
          const [modalDetails, setModalDetails] = useState(null); // {aggregated_rows, raw_swipes, raw_swipe_files}
          const [modalLoading, setModalLoading] = useState(false);
          const pageSize = 25;
          const chartRef = useRef(null);
          const chartInst = useRef(null);

          useEffect(function(){
            // load latest on mount
            loadLatest();
          }, []);

          async function runForRange(){
            setLoading(true);
            setRows([]);
            setSummary({rows:0, flagged_rows:0, files:[], end_date:null});
            setReasonsCount({});
            try {
              var start = new Date(dateFrom);
              var end = new Date(dateTo);
              var dateList = datesBetween(start, end).map(d => formatDateISO(d));
              var accRows = [];
              var totalRows = 0, totalFlagged = 0, files = [];
              for(var i=0;i<dateList.length;i++){
                var d = dateList[i];
                var url = API_BASE + "/run?date=" + d;
                var r = await fetch(url, { method:'GET' });
                if(!r.ok){
                  var txt = await r.text();
                  throw new Error("API returned " + r.status + ": " + txt);
                }
                var js = await r.json();
                var sample = js.sample || [];
                if(Array.isArray(sample) && sample.length) accRows = accRows.concat(sample);
                if(typeof js.rows === 'number') totalRows += js.rows; else totalRows += (Array.isArray(sample) ? sample.length : 0);
                totalFlagged += (js.flagged_rows || 0);
                if(js.files) files = files.concat(js.files);
              }
              setRows(accRows);
              setSummary({rows: totalRows, flagged_rows: totalFlagged, files: files, end_date: formatDateISO(new Date(dateTo))});
              computeReasons(accRows);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message);
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          async function loadLatest(){
            setLoading(true);
            try{
              var r = await fetch(API_BASE + "/latest");
              if(!r.ok) throw new Error("latest failed: " + r.status);
              var js = await r.json();
              var sample = js.sample || [];
              if(!Array.isArray(sample)) sample = [];
              setRows(sample);
              setSummary({rows: (js.rows || sample.length || 0), flagged_rows: (sample.filter(function(x){ return !!x.Reasons; }).length || 0), files:[js.file]});
              computeReasons(sample);
              setPage(1);
            } catch(err){
              alert("Error: " + err.message + (err.message === 'latest failed: 0' ? " (check backend/CORS)" : ""));
              console.error(err);
            } finally {
              setLoading(false);
            }
          }

          function computeReasons(dataRows){
            var counts = {};
            (dataRows || []).forEach(function(r){
              if(!r.Reasons) return;
              var parts = String(r.Reasons).split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              parts.forEach(function(p){ counts[p] = (counts[p] || 0) + 1; });
            });
            setReasonsCount(counts);
            buildChart(counts);
          }

          function buildChart(counts){
            var labels = Object.keys(counts).sort(function(a,b){ return counts[b] - counts[a]; });
            var values = labels.map(function(l){ return counts[l]; });
            var ctx = chartRef.current && chartRef.current.getContext ? chartRef.current.getContext('2d') : null;
            if(!ctx) return;
            try { if(chartInst.current) chartInst.current.destroy(); } catch(e){}
            // use WU yellow for positive highlighting on chart bars
            chartInst.current = new Chart(ctx, {
              type:'bar',
              data:{ labels: labels, datasets:[{ label:'Events', data: values, backgroundColor: labels.map(()=> 'rgba(37,99,235,0.85)') }] },
              options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } }, scales:{ y:{ beginAtZero:true } } }
            });
          }

          // filtering & pagination
          var filtered = (rows || []).filter(function(r){
            var hay = (sanitizeName(r) + " " + (r.EmployeeID||"") + " " + (r.CardNumber||"") + " " + (r.Reasons||"")).toLowerCase();
            var textOk = !filterText || hay.indexOf(filterText.toLowerCase()) !== -1;
            var reasonOk = !selectedReason || (r.Reasons && ((";" + String(r.Reasons) + ";").indexOf(selectedReason) !== -1));
            return textOk && reasonOk;
          });
          var totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
          var pageRows = filtered.slice((page-1)*pageSize, page*pageSize);

          function exportFiltered(){
            downloadCSV(filtered, "trend_filtered_export.csv");
          }

          function onReasonClick(reason){
            if(!reason) { setSelectedReason(""); return; }
            if(selectedReason === reason) setSelectedReason(""); else setSelectedReason(reason);
            setPage(1);
          }

          // open evidence modal (explicit Evidence button)
          async function openEvidence(row){
            setModalRow(row);
            setModalDetails(null);
            setModalLoading(true);
            try {
              const q = encodeURIComponent(row.EmployeeID || row.person_uid || "");
              const resp = await fetch(API_BASE + "/record?employee_id=" + q);
              if(!resp.ok){
                const txt = await resp.text();
                throw new Error("record failed: " + resp.status + " - " + txt);
              }
              const js = await resp.json();
              const details = { aggregated_rows: js.aggregated_rows || [], raw_swipe_files: js.raw_swipe_files || [], raw_swipes: js.raw_swipes || [] };
              setModalDetails(details);
            } catch(e){
              alert("Failed loading details: " + e.message);
              console.error(e);
            } finally {
              setModalLoading(false);
            }
          }

          function closeModal(){ setModalRow(null); setModalDetails(null); }

          // convenience counts for cards
          var rowsCount = (summary && typeof summary.rows === 'number') ? summary.rows : (rows ? rows.length : 0);
          var flaggedCount = (summary && typeof summary.flagged_rows === 'number') ? summary.flagged_rows : (rows ? rows.filter(function(r){ return !!r.Reasons; }).length : 0);
          var flaggedPct = rowsCount ? Math.round((flaggedCount*100)/(rowsCount||1)) : 0;

          function renderOverlapCell(r){
            var ov = r.OverlapWith || r.swipe_overlap || r.overlap_with || null;
            if(ov && typeof ov === 'string'){
              var parts = ov.split(";").map(function(s){ return s.trim(); }).filter(Boolean);
              if(parts.length === 0) return <span className="muted">â€”</span>;
              return <span className="pill" title={ov}>{parts.length} overlap</span>;
            }
            return <span className="muted">â€”</span>;
          }

          function renderReasonChips(reasonText){
            if(!reasonText) return <span className="muted">â€”</span>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return parts.map((p,idx)=>(<span key={idx} className="pill" title={SCENARIO_EXPLANATIONS[p] || p}>{p}</span>));
          }

          function renderReasonExplanations(reasonText){
            if(!reasonText) return <div className="muted">No flags</div>;
            const parts = String(reasonText).split(";").map(s=>s.trim()).filter(Boolean);
            return (
              <div>
                {parts.map((p,idx)=>(
                  <div key={idx} style={{marginBottom:6}}>
                    <b>{p}</b> â€” <span className="small">{ SCENARIO_EXPLANATIONS[p] || "No explanation available." }</span>
                  </div>
                ))}
              </div>
            );
          }

          // render timeline with requested highlights:
          function renderSwipeTimeline(details, modalRow){
            if(!details || !details.raw_swipes || details.raw_swipes.length === 0){
              return <div className="muted">No raw swipe evidence available (person not flagged or raw file missing).</div>;
            }
            // copy & parse
            const all = details.raw_swipes.slice().map(r => {
              const obj = Object.assign({}, r);
              // parse date/time into js date if possible
              try {
                if(obj.Date && obj.Time){
                  obj.__ts = new Date(obj.Date + "T" + obj.Time);
                } else if(obj.Date && obj.Time === undefined && obj.LocaleMessageTime){
                  obj.__ts = new Date(obj.LocaleMessageTime);
                } else if(obj.LocaleMessageTime){
                  obj.__ts = new Date(obj.LocaleMessageTime);
                } else {
                  obj.__ts = null;
                }
              } catch(e){
                obj.__ts = null;
              }
              // get numeric gap seconds if present
              let gap = null;
              if(obj.SwipeGapSeconds !== undefined && obj.SwipeGapSeconds !== null){
                gap = Number(obj.SwipeGapSeconds);
                if(isNaN(gap)) gap = null;
              } else if(obj.SwipeGap){
                // try hh:mm:ss -> seconds
                try {
                  const parts = String(obj.SwipeGap).split(':').map(p=>Number(p));
                  if(parts.length===3) gap = parts[0]*3600 + parts[1]*60 + parts[2];
                } catch(e){ gap = null; }
              }
              obj.__gap = gap;
              // normalize zone lower
              obj.__zone_l = String((obj.Zone || '')).toLowerCase();
              return obj;
            }).sort((a,b) => {
              if(a.__ts && b.__ts) return a.__ts - b.__ts;
              if(a.__ts) return -1;
              if(b.__ts) return 1;
              return 0;
            });

            // compute flags:
            const flags = new Array(all.length).fill({}).map(()=>({dayStart:false, outReturn:false}));
            // dayStart: first record or previous date differs
            for(let i=0;i<all.length;i++){
              const cur = all[i];
              const prev = all[i-1];
              try {
                const curDate = cur.Date ? cur.Date.slice(0,10) : (cur.__ts ? cur.__ts.toISOString().slice(0,10) : null);
                const prevDate = prev ? (prev.Date ? prev.Date.slice(0,10) : (prev.__ts ? prev.__ts.toISOString().slice(0,10) : null)) : null;
                if(!prev || prevDate !== curDate){
                  flags[i].dayStart = true;
                }
              } catch(e){}
            }
            // outReturn: adjacent pattern detection where previous row zone contains 'out of office' and next row zone is NOT out and next row gap >= threshold
            for(let i=0;i<all.length-1;i++){
              const a = all[i], b = all[i+1];
              const aZone = a.__zone_l || '';
              const bZone = b.__zone_l || '';
              const bGap = b.__gap || 0;
              const bDir = (b.Direction || '').toLowerCase();
              if(aZone.includes('out of office') || aZone.includes('out_of_office') || aZone.includes('out of') ){
                // bRow must be an IN-type (or simply not out) and have a long gap (b.__gap)
                if(!bZone.includes('out of office') && (bGap >= OUT_RETURN_GAP_SECONDS || bGap === null && aZone.includes('out'))){
                  flags[i].outReturn = true;
                  flags[i+1].outReturn = true;
                }
              }
            }

            return (
              <div className="table-scroll">
                <table className="evidence-table" role="table" aria-label="Swipe timeline">
                  <thead>
                    <tr>
                      <th>Employee Name</th>
                      <th>Employee ID</th>
                      <th>Card</th>
                      <th>Date</th>
                      <th>Time</th>
                      <th>SwipeGap</th>
                      <th>Door</th>
                      <th>Direction</th>
                      <th>Zone</th>
                      <th>Note</th>
                    </tr>
                  </thead>
                  <tbody>
                    { all.map((rObj, idx) => {
                        const r = rObj || {};
                        const g = r.__gap;
                        const gapFormatted = (r.SwipeGap && String(r.SwipeGap).trim()) ? String(r.SwipeGap) :
                                              (g !== null && g !== undefined) ? formatSecondsToHmsJS(g) : "-";

                        // determine classes
                        const cls = [];
                        if(flags[idx].dayStart) cls.push('row-day-start');
                        if(flags[idx].outReturn) cls.push('row-out-return');
                        // small emphasis if long gap
                        if(g && g >= OUT_RETURN_GAP_SECONDS) cls.push('highlight-long-duration');

                        return (
                          <tr key={idx} className={cls.join(' ')}>
                            <td className="small">{ r.EmployeeName || '-' }</td>
                            <td className="small">{ r.EmployeeID || '-' }</td>
                            <td className="small">{ r.CardNumber || r.Card || '-' }</td>
                            <td className="small">{ r.Date || '-' }</td>
                            <td className="small">{ r.Time || (r.__ts ? r.__ts.toTimeString().slice(0,8) : '-') }</td>
                            <td className="small">{ gapFormatted }</td>
                            <td className="small" style={{minWidth:180}}>{ r.Door || '-' }</td>
                            <td className="small">{ r.Direction || '-' }</td>
                            <td className="small">{ r.Zone || '-' }</td>
                            <td className="small">{ r.Note || '-' }{ r._source ? <span className="muted"> ({r._source})</span> : null }</td>
                          </tr>
                        );
                      })
                    }
                  </tbody>
                </table>
              </div>
            );
          }

          return (
            <div style={{maxWidth:1250, margin:'18px auto'}} aria-live="polite">
              <div className="topbar">
                <div className="wu-brand">
                  <div className="wu-logo">WU</div>
                  <div className="title-block">
                    <h1>Western Union â€” Trend Analysis</h1>
                    <p>Pune</p>
                  </div>
                </div>

                <div className="header-actions">
                  <div style={{color:'#fff', fontSize:13, marginRight:6}} className="muted">From</div>
                  <input type="date" value={dateFrom} onChange={function(e){ setDateFrom(e.target.value); }} style={{padding:8,borderRadius:6}} />
                  <div style={{color:'#fff', fontSize:13}} className="muted">To</div>
                  <input type="date" value={dateTo} onChange={function(e){ setDateTo(e.target.value); }} style={{padding:8,borderRadius:6}} />
                  <button className="btn-primary" onClick={runForRange} disabled={loading}>Run</button>
                  <button className="btn-ghost" onClick={loadLatest} disabled={loading}>Load latest</button>
                </div>
              </div>

              <div className="card-shell">
                <div className="cards" aria-hidden={loading}>
                  <div className="card">
                    <h3>{ (rowsCount !== undefined && rowsCount !== null) ? rowsCount : 0 }</h3>
                    <p>Rows analysed</p>
                  </div>
                  <div className="card">
                    <h3>{ (flaggedCount !== undefined && flaggedCount !== null) ? flaggedCount : 0 }</h3>
                    <p>Flagged rows</p>
                  </div>
                  <div className="card">
                    <h3>{ flaggedPct }%</h3>
                    <p>Flagged rate</p>
                  </div>
                </div>

                <div className="main">
                  <div className="left">
                    <div className="chart-wrap">
                      <canvas ref={chartRef}></canvas>
                    </div>

                    <div style={{display:'flex',alignItems:'center',gap:8, marginTop:6}}>
                      <input placeholder="Search name, employee id, card or reason..." value={filterText} onChange={function(e){ setFilterText(e.target.value); setPage(1); }} style={{flex:1,padding:10,borderRadius:6,border:'1px solid #e6edf3'}} />
                      <div className="muted">Showing { filtered.length } / { rows.length } rows</div>
                      <button className="small-button" onClick={exportFiltered}>Export filtered</button>
                    </div>

                    <div style={{marginTop:10}} className="table-scroll">
                      <table>
                        <thead>
                          <tr>
                            <th>Employee</th>
                            <th className="small">ID</th>
                            <th className="small">Card</th>
                            <th className="small">Date</th>
                            <th className="small">Duration</th>
                            <th className="small">Reasons</th>
                            <th className="small">Overlap</th>
                            <th className="small">Evidence</th>
                          </tr>
                        </thead>
                        <tbody>
                          { pageRows.map(function(r, idx){
                              var empName = sanitizeName(r);
                              var displayDate = safeDateDisplay(r.Date || r.FirstSwipe || r.LastSwipe);
                              var durText = r.Duration || (r.DurationMinutes ? Math.round(r.DurationMinutes) + " min" : "");
                              var flagged = r.Reasons && String(r.Reasons).trim();
                              return (
                                <tr key={idx} className={ flagged ? "flagged-row" : "" }>
                                  <td className="row-click" onClick={function(){ openEvidence(r); }}>{ empName || <span className="muted">â€”</span> }</td>
                                  <td className="small">{ r.EmployeeID || "" }</td>
                                  <td className="small">{ r.CardNumber || "" }</td>
                                  <td className="small">{ displayDate }</td>
                                  <td className="small">{ durText }</td>
                                  <td className="small">{ renderReasonChips(r.Reasons) }</td>
                                  <td className="small">{ renderOverlapCell(r) }</td>
                                  <td className="small">
                                    <button className="evidence-btn" onClick={function(){ openEvidence(r); }}>Evidence</button>
                                  </td>
                                </tr>
                            );
                          }) }
                        </tbody>
                      </table>
                    </div>

                    <div style={{display:'flex', gap:8, alignItems:'center', marginTop:10}}>
                      <button onClick={function(){ setPage(function(p){ return Math.max(1,p-1); }); }} disabled={page<=1}>Prev</button>
                      <div className="muted">Page { page } / { totalPages }</div>
                      <button onClick={function(){ setPage(function(p){ return Math.min(totalPages,p+1); }); }} disabled={page>=totalPages}>Next</button>
                    </div>
                  </div>

                  <aside className="right">
                    <div style={{marginBottom:12}}>
                      <strong>Files:</strong>
                      <div className="muted" style={{marginTop:6}}>{ (summary.files || []).join(", ") }</div>
                    </div>

                    <div style={{marginBottom:12}}>
                      <strong>Top reasons summary</strong>
                      <div className="small muted" style={{marginTop:6}}>Click a reason to filter the table by that reason. Click again to clear.</div>

                      <div style={{marginTop:8, display:'flex', gap:8}}>
                        <input placeholder="Filter reason list..." value={reasonFilterText} onChange={function(e){ setReasonFilterText(e.target.value); }} style={{flex:1, padding:'6px 8px', borderRadius:6, border:'1px solid #e2e8f0'}} />
                        <button className="small-button" onClick={function(){ setSelectedReason(''); setReasonFilterText(''); }}>Clear</button>
                      </div>

                      <div style={{marginTop:8, maxHeight:320, overflow:'auto'}}>
                        { Object.keys(reasonsCount).length === 0 && <div className="muted">No flags found</div> }
                        { Object.entries(reasonsCount).sort(function(a,b){ return b[1]-a[1]; }).filter(function(kv){
                            var name = kv[0];
                            if(!reasonFilterText) return true;
                            return name.toLowerCase().indexOf(reasonFilterText.toLowerCase()) !== -1;
                          }).slice(0, 50).map(function(kv){
                            var name = kv[0], count = kv[1];
                            var active = selectedReason === name;
                            return (
                              <div key={name} style={{display:'flex', alignItems:'center', justifyContent:'space-between', gap:8, marginBottom:6}}>
                                <button className={ "chip " + (active ? "active" : "") } style={{textAlign:'left', flex:1}} onClick={function(){ onReasonClick(name); }}>
                                  {name}
                                </button>
                                <div style={{minWidth:48, textAlign:'right'}} className="small"><b>{count}</b></div>
                              </div>
                            );
                          }) }
                      </div>
                    </div>

                    <div>
                      <strong>Help</strong>
                      <div className="small muted" style={{marginTop:6}}>
                        - Click <b>Run</b> to trigger analysis for chosen date(s).<br/>
                        - Range calls `/run?date=YYYY-MM-DD` for each date in the range sequentially.<br/>
                        - Click the Evidence button to view raw swipe evidence filtered to the selected person/date.<br/>
                        - Use the right-side "Top reasons summary" to filter by reason (search + click).<br/>
                        - If you see CORS errors, enable Flask-Cors on the backend or run the frontend from the same host as API.
                      </div>
                    </div>
                  </aside>
                </div>
              </div>

              { modalRow &&
                <div className="modal" onClick={closeModal}>
                  <div className="modal-inner" onClick={function(e){ e.stopPropagation(); }}>
                    <div className="modal-header">
                      <h3>Details â€” Evidence</h3>
                      <button className="close-btn" onClick={closeModal}>Close</button>
                    </div>

                    { modalLoading && <div className="muted">Loading evidenceâ€¦</div> }

                    <div style={{marginTop:8, display:'grid', gridTemplateColumns:'1fr 1fr', gap:12}}>
                      <div>
                        <div><strong>Name:</strong> { sanitizeName(modalRow) } </div>
                        <div><strong>EmployeeID:</strong> { modalRow.EmployeeID || "â€”" } </div>
                        <div><strong>Card:</strong> { modalRow.CardNumber || "â€”" } </div>
                      </div>
                      <div>
                        <div><strong>Date:</strong> { safeDateDisplay(modalRow.Date || modalRow.FirstSwipe) } </div>
                        <div><strong>Duration:</strong> { modalRow.Duration || (modalRow.DurationMinutes ? Math.round(modalRow.DurationMinutes) + " min" : "â€”") } </div>
                        <div><strong>Reasons:</strong> { renderReasonChips(modalRow.Reasons) } </div>
                      </div>
                    </div>

                    <div className="explain">
                      <strong>Why highlighted</strong>
                      <div style={{marginTop:6}}>
                        { renderReasonExplanations(modalRow.Reasons) }
                      </div>
                    </div>

                    <hr/>

                    <h4>Available evidence files</h4>
                    <div style={{marginTop:8}}>
                      { modalDetails && modalDetails.raw_swipe_files && modalDetails.raw_swipe_files.length > 0
                        ? <div>
                            <ul>
                              { modalDetails.raw_swipe_files.map((f,i)=>(
                                <li key={i}><b>{f}</b> â€” <button onClick={function(){ window.location = API_BASE + "/swipes/" + encodeURIComponent(f); }}>Download</button></li>
                              )) }
                            </ul>
                          </div>
                        : <div className="muted">No raw swipe files found for this person/date.</div>
                      }
                    </div>

                    <div style={{marginTop:12}}>
                      <strong>Swipe timeline (filtered for this person/date)</strong>
                      <div style={{marginTop:8}}>
                        { modalDetails ? renderSwipeTimeline(modalDetails, modalRow) : <div className="muted">Evidence not loaded yet.</div> }
                      </div>
                    </div>

                    <hr/>
                    <div style={{marginTop:8}}>
                      <label><input type="checkbox" id="showraw" onChange={function(e){
                        const el = document.getElementById('rawpayload');
                        if(el) el.style.display = e.target.checked ? 'block' : 'none';
                      }} /> Show raw aggregated JSON</label>
                      <div id="rawpayload" style={{display:'none', marginTop:8}}><pre>{ JSON.stringify(modalRow, null, 2) }</pre></div>
                    </div>

                  </div>
                </div>
              }
            </div>
          );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
      })();
    </script>
  </body>
</html>









        # ----------------- NEW: break/out-of-office sequence analysis -----------------
        # Build a timeline of (time, door, direction, zone)
        timeline = []
        for _, row in g.sort_values('LocaleMessageTime').iterrows():
            t = row.get('LocaleMessageTime')
            dname = None
            if door_col and door_col in row and pd.notna(row.get(door_col)):
                dname = row.get(door_col)
            elif 'Door' in row and pd.notna(row.get('Door')):
                dname = row.get('Door')
            direction = None
            if dir_col and dir_col in row and pd.notna(row.get(dir_col)):
                direction = row.get(dir_col)
            elif 'Direction' in row and pd.notna(row.get('Direction')):
                direction = row.get('Direction')
            zone = map_door_to_zone(dname, direction)
            timeline.append((t, dname, direction, zone))

        # compress timeline into segments with labels: 'work', 'break', 'out_of_office'
        segments = []
        if timeline:
            cur_zone = None
            seg_start = timeline[0][0]
            seg_label = None
            for (t, dname, direction, zone) in timeline:
                # determine label
                if zone in BREAK_ZONES:
                    lbl = 'break'
                elif zone == OUT_OF_OFFICE_ZONE:
                    lbl = 'out_of_office'
                else:
                    lbl = 'work'
                if cur_zone is None:
                    cur_zone = zone
                    seg_label = lbl
                    seg_start = t
                else:
                    # if label changes, close previous segment
                    if lbl != seg_label:
                        segments.append({
                            'label': seg_label,
                            'start': seg_start,
                            'end': t,
                            'start_zone': cur_zone
                        })
                        seg_start = t
                        seg_label = lbl
                        cur_zone = zone
                    else:
                        # keep current segment (extend)
                        cur_zone = cur_zone or zone
            # close last
            if seg_label is not None:
                segments.append({
                    'label': seg_label,
                    'start': seg_start,
                    'end': timeline[-1][0],
                    'start_zone': cur_zone
                })

        # Compute break metrics: only count "real" breaks (and only if long enough)
        break_count = 0
        long_break_count = 0
        total_break_minutes = 0.0

        # thresholds (minutes)
        BREAK_MINUTES_THRESHOLD = 120    # user: only consider break if >= 2 hours
        LONG_BREAK_FLAG_MINUTES = 150    # for special pattern / long-break flag (2.5 hours)

        for i, s in enumerate(segments):
            lbl = s.get('label')
            start = s.get('start')
            end = s.get('end')
            dur_mins = ((end - start).total_seconds() / 60.0) if (start and end) else 0.0

            if lbl == 'break':
                # only count break segments that are actually long enough (> BREAK_MINUTES_THRESHOLD)
                if dur_mins >= BREAK_MINUTES_THRESHOLD:
                    break_count += 1
                    total_break_minutes += dur_mins
                    if dur_mins >= LONG_BREAK_FLAG_MINUTES:
                        long_break_count += 1

            elif lbl == 'out_of_office':
                # for out_of_office: require it's a real long out between work segments
                prev_lbl = segments[i-1]['label'] if i > 0 else None
                next_lbl = segments[i+1]['label'] if i < len(segments)-1 else None
                # Only treat as break if it's between work segments and long enough
                if prev_lbl == 'work' and next_lbl == 'work' and dur_mins >= BREAK_MINUTES_THRESHOLD:
                    break_count += 1
                    total_break_minutes += dur_mins
                    if dur_mins >= LONG_BREAK_FLAG_MINUTES:
                        long_break_count += 1

        # If you want to keep short-break telemetry (for other scenarios) keep the totals here.
        # break_count / long_break_count now represent *long* breaks according to your policy.












def scenario_long_gap(row):
    # treat long gap only when gap >= 5 hours
    return (row.get('MaxSwipeGapSeconds') or 0) >= 5 * 3600





                if a[0] == 'work' and a[1] < 60 and \
                   b[0] in ('out_of_office','break') and b[1] >= 150 and \
                   c[0] == 'work' and c[1] < 60:




"long_gap_>=90min": lambda r: f"Long gap between swipes (~{_fmt_minutes(r.get('MaxSwipeGapSeconds'))}). This may indicate an extended out-of-office absence.",



"short_duration_<4h": lambda r: f"Short total presence ({int(round(r.get('DurationMinutes',0)))} min) — less than 4 hours; may indicate short stay or partial-day attendance.",




def _explain_scenarios_detected(row, detected_list):
    pieces = []
    name = row.get('EmployeeName') or row.get('EmployeeID') or row.get('person_uid') or "Employee"
    prefix = f"{name} - "
    for sc in detected_list:
        sc = sc.strip()
        fn = SCENARIO_EXPLANATIONS.get(sc)
        try:
            if fn:
                # let each lambda produce a sentence
                pieces.append(fn(row))
            else:
                pieces.append(sc.replace("_", " ").replace(">=", "≥"))
        except Exception:
            pieces.append(sc)
    if not pieces:
        return None
    # Join as sentences for clarity.
    explanation = " ".join([p if p.endswith('.') else p + '.' for p in pieces])
    return prefix + " " + explanation


















#C:\Users\W0024618\Desktop\Trend Analysis\backend\config\door_zone.py
from typing import Optional
import re

# canonical map (converted from your JSON). Keep keys exactly as in your raw Door+Direction
DOOR_ZONE_MAP = {
  "APAC_IN_PUN_PODIUM_RED_IDF ROOM-02-RESTRICTED DOOR___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___OutDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___OutDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___OutDirection": "East Outdoor Area",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_MDF RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_IT STORE ROOM-DOOR RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_REPRO STORE-DOOR RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_CONTROL PANEL ROOM-DOOR RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_PREACTION ROOM-DOOR RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_TESTING LAB-DOOR RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___OutDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___OutDirection": "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___OutDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___OutDirection": "East Outdoor Area",
  "APAC_IN_PUN_PODIUM_GREEN-_IDF ROOM 1-RESTRICTED DOOR___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 1-DOOR RESTRICTED DOOR___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 2-DOOR RESTRICTED DOOR___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_LOCKER HR STORE 3-DOOR RESTRICTED DOOR___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___OutDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___OutDirection": "East Outdoor Area",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___OutDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 1 (ORANGE)___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 1 (ORANGE)___OutDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___OutDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___OutDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_ORANGE-IDF ROOM 3-RESTRICTED DOOR___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___OutDirection": "West Outdoor Area",
  "APAC_IN_PUN_PODIUM_GSOC DOOR RESTRICTED DOOR___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___InDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___OutDirection": "Assembly Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___InDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___OutDirection": "Assembly Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-DOOR___InDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2-DOOR___InDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 3-DOOR___InDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4-DOOR___InDirection": "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2 -OUT DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4 -OUT DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-OUT DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_2NDFLR_IDF ROOM_10:05:86 RESTRICTED DOOR___InDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_UPS/ELEC ROOM RESTRICTED DOOR___InDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___InDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___InDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___OutDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_IBMS ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_UPS ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MDF ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_PAC ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_IT STORE ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_GYM ROOM___InDirection": "Tower B GYM",
  "APAC_IN_PUN_TOWER B_GYM ROOM___OutDirection": "Tower B GYM",
  "APAC_IN_PUN_TOWER B_SITE OPS STORE___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_INNOVATION CENTER___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_INNOVATION CENTER___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MOBILE LAB___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MOBILE LAB___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_CEC DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_CEC DOOR___OutDirection": "Tower B",
}

# build a normalized uppercase-keyed map for fast and case-insensitive lookups
# (this fixes many mismatches caused by case/spacing differences in raw Door names)
_NORMALIZED_DOOR_MAP = {k.strip().upper(): v for k, v in DOOR_ZONE_MAP.items()}

# zones considered break areas
BREAK_ZONES = set(["East Outdoor Area", "West Outdoor Area", "Assembly Area", "Reception Area"])

# canonical out-of-office label
OUT_OF_OFFICE_ZONE = "Out of office"


def map_door_to_zone(door: Optional[str], direction: Optional[str] = None) -> Optional[str]:
    """
    Improved, direction-aware door -> zone mapping using a normalized map for exact lookups.

    Behavior:
      1) try exact door + direction (normalized)
      2) prefer keys that start with the normalized door and end with the direction suffix
      3) door-only exact match (normalized)
      4) keys that startwith door_norm (prefer direction-matching)
      5) conservative token overlap
      6) if direction says 'out' -> OUT_OF_OFFICE_ZONE
      7) heuristics for reception/lobby/outdoor
      8) fallback -> "Working Area"
    """
    if door is None:
        return None

    def _normalize_for_key(s: str) -> str:
        return re.sub(r'\s+', ' ', s.strip())

    door_raw = str(door)
    door_norm = _normalize_for_key(door_raw)
    door_norm_upper = door_norm.upper()

    dir_str = (str(direction).strip() if direction is not None else "")
    dir_l = dir_str.lower()

    dir_suffix = None
    if dir_l:
        if 'out' in dir_l:
            dir_suffix = 'OutDirection'
        elif 'in' in dir_l:
            dir_suffix = 'InDirection'
        else:
            if 'exit' in dir_l:
                dir_suffix = 'OutDirection'

    # 1) exact door + direction key (normalized)
    if dir_suffix:
        key_exact_upper = f"{door_norm_upper}___{dir_suffix.upper()}"
        if key_exact_upper in _NORMALIZED_DOOR_MAP:
            return _NORMALIZED_DOOR_MAP[key_exact_upper]

    # 2) prefer keys that start with door and end with the requested direction (normalized)
    if dir_suffix:
        suff = dir_suffix.upper()
        for k_norm, zone in _NORMALIZED_DOOR_MAP.items():
            if k_norm.startswith(door_norm_upper) and k_norm.endswith(suff):
                return zone

    # 3) door-only exact match
    if door_norm_upper in _NORMALIZED_DOOR_MAP:
        return _NORMALIZED_DOOR_MAP[door_norm_upper]

    # 4) keys that startwith door_norm (no exact direction match found) - prefer direction if present
    candidates = []
    for k_norm, zone in _NORMALIZED_DOOR_MAP.items():
        if k_norm.startswith(door_norm_upper):
            candidates.append((k_norm, zone))
    if candidates:
        if dir_suffix:
            suff = dir_suffix.upper()
            for k_norm, zone in candidates:
                if k_norm.endswith(suff):
                    return zone
        return candidates[0][1]

    # 5) conservative token-overlap matching
    door_tokens = set(re.findall(r"[A-Z0-9]+", door_norm_upper))
    token_candidates = []
    for k_norm, zone in _NORMALIZED_DOOR_MAP.items():
        k_tokens = set(re.findall(r"[A-Z0-9]+", k_norm))
        if door_tokens and (door_tokens & k_tokens):
            token_candidates.append((k_norm, zone))
    if token_candidates:
        if dir_suffix:
            suff = dir_suffix.upper()
            for k_norm, zone in token_candidates:
                if k_norm.endswith(suff):
                    return zone
        return token_candidates[0][1]

    # 6) direction-only heuristic
    if dir_str and 'out' in dir_l:
        return OUT_OF_OFFICE_ZONE

    # 7) short heuristics (reception/lobby/outdoor)
    s = door_norm.upper()
    s_lower = s.lower()
    if 'reception' in s_lower or 'lobby' in s_lower:
        return "Reception Area"
    if 'outdoor' in s_lower or 'fire exit' in s_lower or 'exit' in s_lower:
        if 'east' in s_lower:
            return "East Outdoor Area"
        if 'west' in s_lower:
            return "West Outdoor Area"
        return "East Outdoor Area"

    # final fallback
    return "Working Area"

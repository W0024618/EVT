/* Run after STEP 1 (requires #SwipeEnriched) */
SELECT DISTINCT
    EmployeeID,
    CardNumber,
    MessageType,
    Rejection_Type,
    -- classification
    CardLengthCategory = CASE 
        WHEN LEN(CardNumber) = 5 THEN '5-digit'
        WHEN LEN(CardNumber) >= 6 THEN '6plus'
        ELSE 'other'
    END,
    -- separate columns for display
    CardNumber_5digit = CASE WHEN LEN(CardNumber) = 5 THEN CardNumber ELSE NULL END,
    CardNumber_6plus  = CASE WHEN LEN(CardNumber) >= 6 THEN CardNumber ELSE NULL END,
    -- optional: flag whether card is numeric-only (1 = numeric, 0 = not numeric)
    IsNumeric = CASE WHEN CardNumber NOT LIKE '%[^0-9]%' THEN 1 ELSE 0 END
FROM #SwipeEnriched
ORDER BY EmployeeID, CardNumber, MessageType;







-- STEP 1 (no limit): extract normalized swipe rows for Employees into #SwipeEnriched
DECLARE @StartDate DATE = '2025-08-20';
DECLARE @EndDate   DATE = CAST(GETDATE() AS DATE);
DECLARE @PartitionName SYSNAME = NULL;  -- set to 'APAC.Default' or 'Denver - WU HQ' to filter, otherwise leave NULL

;WITH RawSwipes AS (
    SELECT 
        LocaleMessageTime = DATEADD(MINUTE, -1 * j.[MessageLocaleOffset], j.[MessageUTC]),
        j.ObjectIdentity1,
        j.ObjectName1,
        j.ObjectName2,
        j.PartitionName2,
        j.MessageType,
        j.XmlGUID,
        p.Text1,        -- candidate full name
        p.Text2,
        p.Text5 AS Department,
        p.Text12,
        p.Int1,
        pt.Name AS PersonnelType,
        t5_admit.[value] AS AdmitCode,
        t5_dir.[value]   AS Direction,
        t5_rej.[value]   AS Rejection_Type,
        SCard.[value]    AS SCardValue,
        -- 3-stage CardNumber resolution
        CardNumber = COALESCE(
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(100)'),
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(100)'),
            SCard.[value]
        )
    FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLog] j
    LEFT JOIN [ACVSCore].[Access].[Personnel] p ON j.ObjectIdentity1 = p.GUID
    LEFT JOIN [ACVSCore].[Access].[PersonnelType] pt ON p.PersonnelTypeId = pt.ObjectID
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxml] x ON j.XmlGUID = x.GUID
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON j.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON j.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_rej
        ON j.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
    LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
    ) AS SCard ON j.XmlGUID = SCard.GUID
    WHERE
        j.MessageType IN ('CardAdmitted','CardRejected')
        AND COALESCE(
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(100)'),
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(100)'),
            SCard.[value]
        ) IS NOT NULL
        AND CONVERT(date, DATEADD(MINUTE, -1 * j.MessageLocaleOffset, j.MessageUTC)) BETWEEN @StartDate AND @EndDate
        AND (
            @PartitionName IS NULL OR j.PartitionName2 = @PartitionName
        )
)

-- Persist only Employees and normalized columns to temp table
SELECT
    rw.LocaleMessageTime,
    rw.ObjectIdentity1,
    rw.ObjectName1,
    rw.ObjectName2,
    rw.PartitionName2,
    rw.MessageType,
    rw.XmlGUID,
    CardNumber = LTRIM(RTRIM(rw.CardNumber)),
    rw.Rejection_Type,
    rw.AdmitCode,
    rw.Direction,
    rw.PersonnelType,
    -- use rw.PersonnelType for the CASE test (pt is not visible here)
    EmployeeID = CAST(
        CASE 
            WHEN rw.PersonnelType IN ('Contractor','Terminated Contractor') THEN rw.Text12 
            ELSE CAST(rw.Int1 AS NVARCHAR(50)) 
        END AS NVARCHAR(100)
    ),
    EmployeeName = COALESCE(NULLIF(rw.Text1,''), NULLIF(rw.Text2,''), CAST(rw.Int1 AS NVARCHAR(50))),
    rw.Department
INTO #SwipeEnriched
FROM RawSwipes rw
WHERE rw.PersonnelType = 'Employee';  -- persist only Employee rows
GO

-- Sanity-check (no TOP, returns all rows)
SELECT LocaleMessageTime, EmployeeID, EmployeeName, Department, CardNumber, MessageType, Rejection_Type
FROM #SwipeEnriched
ORDER BY LocaleMessageTime DESC;










-- STEP 1 (fixed): extract normalized swipe rows for Employees into #SwipeEnriched
DECLARE @StartDate DATE = '2025-08-20';
DECLARE @EndDate   DATE = CAST(GETDATE() AS DATE);
DECLARE @PartitionName SYSNAME = NULL;  -- set to 'APAC.Default' or 'Denver - WU HQ' to filter, otherwise leave NULL

;WITH RawSwipes AS (
    SELECT 
        LocaleMessageTime = DATEADD(MINUTE, -1 * j.[MessageLocaleOffset], j.[MessageUTC]),
        j.ObjectIdentity1,
        j.ObjectName1,
        j.ObjectName2,
        j.PartitionName2,
        j.MessageType,
        j.XmlGUID,
        p.Text1,        -- candidate full name
        p.Text2,
        p.Text5 AS Department,
        p.Text12,
        p.Int1,
        pt.Name AS PersonnelType,
        t5_admit.[value] AS AdmitCode,
        t5_dir.[value]   AS Direction,
        t5_rej.[value]   AS Rejection_Type,
        SCard.[value]    AS SCardValue,
        -- 3-stage CardNumber resolution
        CardNumber = COALESCE(
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(100)'),
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(100)'),
            SCard.[value]
        )
    FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLog] j
    LEFT JOIN [ACVSCore].[Access].[Personnel] p ON j.ObjectIdentity1 = p.GUID
    LEFT JOIN [ACVSCore].[Access].[PersonnelType] pt ON p.PersonnelTypeId = pt.ObjectID
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxml] x ON j.XmlGUID = x.GUID
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON j.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON j.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_rej
        ON j.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
    LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
    ) AS SCard ON j.XmlGUID = SCard.GUID
    WHERE
        j.MessageType IN ('CardAdmitted','CardRejected')
        AND COALESCE(
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(100)'),
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(100)'),
            SCard.[value]
        ) IS NOT NULL
        AND CONVERT(date, DATEADD(MINUTE, -1 * j.MessageLocaleOffset, j.MessageUTC)) BETWEEN @StartDate AND @EndDate
        AND (
            @PartitionName IS NULL OR j.PartitionName2 = @PartitionName
        )
)

-- Persist only Employees and normalized columns to temp table
SELECT
    rw.LocaleMessageTime,
    rw.ObjectIdentity1,
    rw.ObjectName1,
    rw.ObjectName2,
    rw.PartitionName2,
    rw.MessageType,
    rw.XmlGUID,
    CardNumber = LTRIM(RTRIM(rw.CardNumber)),
    rw.Rejection_Type,
    rw.AdmitCode,
    rw.Direction,
    rw.PersonnelType,
    -- use rw.PersonnelType for the CASE test (pt is not visible here)
    EmployeeID = CAST(
        CASE 
            WHEN rw.PersonnelType IN ('Contractor','Terminated Contractor') THEN rw.Text12 
            ELSE CAST(rw.Int1 AS NVARCHAR(50)) 
        END AS NVARCHAR(100)
    ),
    EmployeeName = COALESCE(NULLIF(rw.Text1,''), NULLIF(rw.Text2,''), CAST(rw.Int1 AS NVARCHAR(50))),
    rw.Department
INTO #SwipeEnriched
FROM RawSwipes rw
WHERE rw.PersonnelType = 'Employee';  -- persist only Employee rows
GO

-- Quick sanity-check (run after STEP 1)
SELECT TOP 50 LocaleMessageTime, EmployeeID, EmployeeName, Department, CardNumber, MessageType, Rejection_Type
FROM #SwipeEnriched
ORDER BY LocaleMessageTime DESC;












For First step we got this error so solve this error carefully

Msg 4104, Level 16, State 1, Line 72
The multi-part identifier "pt.Name" could not be bound.
Msg 4104, Level 16, State 1, Line 72
The multi-part identifier "pt.Name" could not be bound.

Completion time: 2025-08-22T12:56:52.4105884+05:30

-- STEP 1: extract normalized swipe rows for Employees
DECLARE @StartDate DATE = '2025-08-20';
DECLARE @EndDate   DATE = CAST(GETDATE() AS DATE);
DECLARE @PartitionName SYSNAME = NULL;  -- set to 'APAC.Default' or 'Denver - WU HQ' to filter, otherwise leave NULL

;WITH RawSwipes AS (
    SELECT 
        LocaleMessageTime = DATEADD(MINUTE, -1 * j.[MessageLocaleOffset], j.[MessageUTC]),
        j.ObjectIdentity1,
        j.ObjectName1,
        j.ObjectName2,
        j.PartitionName2,
        j.MessageType,
        j.XmlGUID,
        p.Text1,        -- candidate full name
        p.Text2,
        p.Text5 AS Department,
        p.Text12,
        p.Int1,
        pt.Name AS PersonnelType,
        t5_admit.[value] AS AdmitCode,
        t5_dir.[value]   AS Direction,
        t5_rej.[value]   AS Rejection_Type,
        SCard.[value]    AS SCardValue,
        -- 3-stage CardNumber resolution
        CardNumber = COALESCE(
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(100)'),
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(100)'),
            SCard.[value]
        )
    FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLog] j
    LEFT JOIN [ACVSCore].[Access].[Personnel] p ON j.ObjectIdentity1 = p.GUID
    LEFT JOIN [ACVSCore].[Access].[PersonnelType] pt ON p.PersonnelTypeId = pt.ObjectID
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxml] x ON j.XmlGUID = x.GUID
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON j.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON j.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
    LEFT JOIN [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] t5_rej
        ON j.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
    LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
    ) AS SCard ON j.XmlGUID = SCard.GUID
    WHERE
        j.MessageType IN ('CardAdmitted','CardRejected')
        AND COALESCE(
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(100)'),
            TRY_CAST(x.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(100)'),
            SCard.[value]
        ) IS NOT NULL
        AND CONVERT(date, DATEADD(MINUTE, -1 * j.MessageLocaleOffset, j.MessageUTC)) BETWEEN @StartDate AND @EndDate
        AND (
            @PartitionName IS NULL OR j.PartitionName2 = @PartitionName
        )
)
-- Persist only Employees and normalized columns to temp table
SELECT
    LocaleMessageTime,
    ObjectIdentity1,
    ObjectName1,
    ObjectName2,
    PartitionName2,
    MessageType,
    XmlGUID,
    CardNumber = LTRIM(RTRIM(CardNumber)),
    Rejection_Type,
    AdmitCode,
    Direction,
    PersonnelType,
    EmployeeID = CAST(CASE WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN Text12 ELSE CAST(Int1 AS NVARCHAR(50)) END AS NVARCHAR(100)),
    EmployeeName = COALESCE(NULLIF(Text1,''), NULLIF(Text2,''), CAST(Int1 AS NVARCHAR(50))),
    Department
INTO #SwipeEnriched
FROM RawSwipes rw
CROSS APPLY (SELECT rw.PersonnelType AS ptype) ca -- keep usable alias
LEFT JOIN (SELECT 1 AS dummy) d ON 1=1
WHERE rw.PersonnelType = 'Employee';

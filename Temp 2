def _map_detailed_to_resp(detailed: Dict[str, Any]) -> Dict[str, Any]:
    """
    Map the compute_visit_averages 'detailed' payload into the compact response shape
    used by /ccure/averages and /ccure/verify. Preserve headcount (AttendanceSummary)
    if present so callers that expect total_visited_today see the correct value.
    """
    live_h = detailed.get("live_headcount", {}) or {}
    head_h = detailed.get("headcount", {}) or {}
    ccure_active_obj = detailed.get("ccure_active", {}) or {}
    averages_obj = detailed.get("averages", {}) or {}

    # normalize live counts (prefer live_headcount -> headcount fallbacks)
    live_employee = int(live_h.get("employee") or head_h.get("employee") or 0)
    live_contractor = int(live_h.get("contractor") or head_h.get("contractor") or 0)
    total_reported = int(
        live_h.get("currently_present_total")
        or head_h.get("total_visited_today")
        or (live_employee + live_contractor)
        or 0
    )
    total_from_details = int(head_h.get("total_visited_today") or 0)

    # Ensure headcount block is preserved (AttendanceSummary)
    mapped_headcount = {
        "total_visited_today": int(head_h.get("total_visited_today") or 0),
        "employee": int(head_h.get("employee") or 0),
        "contractor": int(head_h.get("contractor") or 0),
        "by_location": head_h.get("by_location") or {}
    }

    resp = {
        "date": detailed.get("date"),
        "notes": detailed.get("notes"),
        "live_today": {
            "employee": live_employee,
            "contractor": live_contractor,
            "total_reported": total_reported,
            "total_from_details": total_from_details
        },
        "headcount": mapped_headcount,
        "live_headcount": live_h,
        "ccure_active": {
            "active_employees": ccure_active_obj.get("ccure_active_employees_reported")
                             or ccure_active_obj.get("active_employees"),
            "active_contractors": ccure_active_obj.get("ccure_active_contractors_reported")
                               or ccure_active_obj.get("active_contractors"),
            "ccure_active_employees_reported": ccure_active_obj.get("ccure_active_employees_reported"),
            "ccure_active_contractors_reported": ccure_active_obj.get("ccure_active_contractors_reported")
        },
        "averages": averages_obj
    }
    return resp
















Read below Error Message carefully and fix` the issue and give me Correct API Responcce carefully think long ..


PS C:\Users\W0024618\Desktop\global-page> & C:/Users/W0024618/Desktop/global-page/backend/attendance-analytics/.venv/Scripts/Activate.ps1
(.venv) PS C:\Users\W0024618\Desktop\global-page> cd backend
(.venv) PS C:\Users\W0024618\Desktop\global-page\backend> cd attendance-analytics
(.venv) PS C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics> python -m uvicorn app:app --host 0.0.0.0 --port 8000
INFO:     Started server process [36824]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     127.0.0.1:59526 - "GET /ccure/stream HTTP/1.1" 200 OK
[compute_daily_attendance] no swipes for 2025-08-27
[compute_daily_attendance] no swipes for 2025-08-27
[compute_daily_attendance] no swipes for 2025-08-27
INFO:     127.0.0.1:62424 - "GET /ccure/stream HTTP/1.1" 200 OK
[compute_daily_attendance] no swipes for 2025-08-27
[compute_daily_attendance] no swipes for 2025-08-27
2025-08-27 10:20:22,705 WARNING attendance_app: compute_visit_averages timed out after 30.0s; returning fallback.
INFO:     127.0.0.1:52141 - "GET /ccure/averages HTTP/1.1" 200 OK
2025-08-27 10:20:24,004 WARNING region_clients: [region_clients] cannot fetch history for namer@http://10.199.22.57:3006/api/occupancy/history: HTTPConnectionPool(host='10.199.22.57', port=3006): Read timed out. (read timeout=6)        
2025-08-27 10:20:27,606 WARNING region_clients: [region_clients] cannot fetch history for apac@http://10.199.22.57:3008/api/occupancy/history: HTTPConnectionPool(host='10.199.22.57', port=3008): Read timed out. (read timeout=6)
2025-08-27 10:20:33,422 WARNING attendance_app: compute_visit_averages timed out after 30.0s; returning fallback.
INFO:     127.0.0.1:57026 - "GET /ccure/averages HTTP/1.1" 200 OK
2025-08-27 10:20:33,635 WARNING region_clients: [region_clients] cannot fetch history for laca@http://10.199.22.57:4000/api/occupancy/history: HTTPConnectionPool(host='10.199.22.57', port=4000): Read timed out. (read timeout=6)
2025-08-27 10:20:35,770 WARNING region_clients: [region_clients] cannot fetch history for apac@http://10.199.22.57:3008/api/occupancy/history: HTTPConnectionPool(host='10.199.22.57', port=3008): Read timed out. (read timeout=6)
INFO:     127.0.0.1:61255 - "GET /ccure/verify HTTP/1.1" 200 OK
2025-08-27 10:20:41,787 WARNING region_clients: [region_clients] cannot fetch history for laca@http://10.199.22.57:4000/api/occupancy/history: HTTPConnectionPool(host='10.199.22.57', port=4000): Read timed out. (read timeout=6)
2025-08-27 10:21:01,511 WARNING region_clients: [region_clients] cannot fetch history for laca@http://10.199.22.57:4000/api/occupancy/history: 500 Server Error: Internal Server Error for url: http://10.199.22.57:4000/api/occupancy/history
INFO:     127.0.0.1:58512 - "GET /ccure/verify?raw=true HTTP/1.1" 200 OK
INFO:     127.0.0.1:55766 - "GET /ccure/verify?raw=true&date=2025-08-19&end_date=2025-08-26 HTTP/1.1" 200 OK




http://localhost:8000/ccure/verify


{
  "date": "2025-08-27",
  "ccure_reported": {
    "employees": 8608,
    "contractors": 658,
    "total_reported": 9266
  },
  "headcount_attendance_summary": {
    "total_visited_today": 0,
    "employee": 340,
    "contractor": 94
  },
  "live_headcount_region_clients": {
    "currently_present_total": 417,
    "employee": 340,
    "contractor": 94
  },
  "percentages_vs_ccure": {
    "head_employee_pct_vs_ccure_today": 3.95,
    "head_contractor_pct_vs_ccure_today": 14.29,
    "head_overall_pct_vs_ccure_today": 0,
    "live_employee_pct_vs_ccure_today": 3.95,
    "live_contractor_pct_vs_ccure_today": 14.29,
    "live_overall_pct_vs_ccure_today": 4.5,
    "history_employee_pct_vs_ccure": 19.71,
    "history_contractor_pct_vs_ccure": 38.41,
    "history_overall_pct_vs_ccure": 21.04
  },
  "averages": {
    "history_avg_employee_last_7_days": 1697,
    "history_avg_contractor_last_7_days": 252.71,
    "history_avg_overall_last_7_days": 1949.71,
    "avg_headcount_last_7_days_db": 1949.71,
    "avg_headcount_per_site_last_7_days": 487.43
  },
  "notes": "Region totals (417) differ from detail rows (434); using region totals for overall and details for breakdown. | avg_headcount_last_range derived from region history endpoints due to missing AttendanceSummary historical data."
}









2) http://localhost:8000/ccure/verify?raw=true

{
  "date": "2025-08-27",
  "ccure_reported": {
    "employees": 8608,
    "contractors": 658,
    "total_reported": 9266
  },
  "headcount_attendance_summary": {
    "total_visited_today": 0,
    "employee": 344,
    "contractor": 94
  },
  "live_headcount_region_clients": {
    "currently_present_total": 417,
    "employee": 344,
    "contractor": 94
  },
  "percentages_vs_ccure": {
    "head_employee_pct_vs_ccure_today": 4,
    "head_contractor_pct_vs_ccure_today": 14.29,
    "head_overall_pct_vs_ccure_today": 0,
    "live_employee_pct_vs_ccure_today": 4,
    "live_contractor_pct_vs_ccure_today": 14.29,
    "live_overall_pct_vs_ccure_today": 4.5,
    "history_employee_pct_vs_ccure": 14.18,
    "history_contractor_pct_vs_ccure": 25.84,
    "history_overall_pct_vs_ccure": 15.01
  },
  "averages": {
    "history_avg_employee_last_7_days": 1220.43,
    "history_avg_contractor_last_7_days": 170,
    "history_avg_overall_last_7_days": 1390.43,
    "avg_headcount_last_7_days_db": 1390.43,
    "avg_headcount_per_site_last_7_days": 347.61
  },
  "notes": "Region totals (417) differ from detail rows (438); using region totals for overall and details for breakdown. | avg_headcount_last_range derived from region history endpoints due to missing AttendanceSummary historical data.",
  "raw": {
    "date": "2025-08-27",
    "notes": "Region totals (417) differ from detail rows (438); using region totals for overall and details for breakdown. | avg_headcount_last_range derived from region history endpoints due to missing AttendanceSummary historical data.",
    "live_today": {
      "employee": 344,
      "contractor": 94,
      "total_reported": 417,
      "total_from_details": 430
    },
    "live_headcount": {
      "currently_present_total": 417,
      "employee": 344,
      "contractor": 94,
      "by_location": {
        "US.CO.OBS": {
          "total": 20,
          "employee": 10,
          "contractor": 10
        },
        "USA/Canada Default": {
          "total": 5,
          "employee": 2,
          "contractor": 3
        },
        "US.FL.Miami": {
          "total": 2,
          "employee": 2,
          "contractor": 0
        },
        "US.NYC": {
          "total": 5,
          "employee": 5,
          "contractor": 0
        },
        "LT.Vilnius": {
          "total": 57,
          "employee": 51,
          "contractor": 6
        },
        "MA.Casablanca": {
          "total": 21,
          "employee": 20,
          "contractor": 1
        },
        "AUT.Vienna": {
          "total": 46,
          "employee": 40,
          "contractor": 6
        },
        "IE.Dublin": {
          "total": 5,
          "employee": 3,
          "contractor": 2
        },
        "DU.Abu Dhab": {
          "total": 8,
          "employee": 8,
          "contractor": 0
        },
        "IT.Rome": {
          "total": 5,
          "employee": 5,
          "contractor": 0
        },
        "ES.Madrid": {
          "total": 2,
          "employee": 2,
          "contractor": 0
        },
        "RU.Moscow": {
          "total": 6,
          "employee": 5,
          "contractor": 1
        },
        "CR.Costa Rica Partition": {
          "total": 33,
          "employee": 21,
          "contractor": 12
        },
        "MX.Mexico City": {
          "total": 18,
          "employee": 15,
          "contractor": 3
        },
        "PA.Panama City": {
          "total": 1,
          "employee": 1,
          "contractor": 0
        },
        "AR.Cordoba": {
          "total": 5,
          "employee": 1,
          "contractor": 4
        },
        "PE.Lima": {
          "total": 1,
          "employee": 1,
          "contractor": 0
        },
        "Quezon City": {
          "total": 140,
          "employee": 126,
          "contractor": 14
        },
        "Pune": {
          "total": 30,
          "employee": 2,
          "contractor": 28
        },
        "JP.Tokyo": {
          "total": 9,
          "employee": 8,
          "contractor": 1
        },
        "MY.Kuala Lumpur": {
          "total": 4,
          "employee": 3,
          "contractor": 1
        },
        "Taguig City": {
          "total": 15,
          "employee": 13,
          "contractor": 2
        }
      }
    },
    "ccure_active": {
      "active_employees": 8608,
      "active_contractors": 658,
      "ccure_active_employees_reported": 8608,
      "ccure_active_contractors_reported": 658
    },
    "averages": {
      "head_emp_pct_vs_ccure_today": 4,
      "head_contractor_pct_vs_ccure_today": 13.07,
      "headcount_overall_pct_vs_ccure_today": 4.64,
      "live_employee_pct_vs_ccure": 4,
      "live_contractor_pct_vs_ccure": 14.29,
      "live_overall_pct_vs_ccure": 4.5,
      "avg_headcount_last_7_days": 1390.43,
      "avg_headcount_per_site_last_7_days": 347.61,
      "avg_live_per_site": 104.25,
      "history_avg_employee_last_7_days": 1220.43,
      "history_avg_contractor_last_7_days": 170,
      "history_avg_overall_last_7_days": 1390.43,
      "history_days_counted": 7,
      "history_employee_pct_vs_ccure": 14.18,
      "history_contractor_pct_vs_ccure": 25.84,
      "history_overall_pct_vs_ccure": 15.01,
      "history_today_employee_count": 411,
      "history_today_contractor_count": 81,
      "history_today_employee_pct_vs_ccure": 4.77,
      "history_today_contractor_pct_vs_ccure": 12.31,
      "avg_by_location_last_7_days": {

      },
      "history_avg_by_location_last_7_days": {
        "US.CO.OBS": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 294.83,
          "avg_contractor_last_7_days": 28.17,
          "avg_overall_last_7_days": 323
        },
        "US.FL.Miami": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 17.75,
          "avg_contractor_last_7_days": 2.75,
          "avg_overall_last_7_days": 20.5
        },
        "USA/Canada Default": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 26.5,
          "avg_contractor_last_7_days": 2,
          "avg_overall_last_7_days": 28.5
        },
        "US.NYC": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 20.8,
          "avg_contractor_last_7_days": 0.8,
          "avg_overall_last_7_days": 21.6
        },
        "LT.Vilnius": {
          "history_days_counted": 7,
          "avg_employee_last_7_days": 240.86,
          "avg_contractor_last_7_days": 15.43,
          "avg_overall_last_7_days": 256.29
        },
        "UK.London": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 11.75,
          "avg_contractor_last_7_days": 1.5,
          "avg_overall_last_7_days": 13.25
        },
        "AUT.Vienna": {
          "history_days_counted": 7,
          "avg_employee_last_7_days": 20,
          "avg_contractor_last_7_days": 2.43,
          "avg_overall_last_7_days": 22.43
        },
        "IE.Dublin": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 17.17,
          "avg_contractor_last_7_days": 1.83,
          "avg_overall_last_7_days": 19
        },
        "ES.Madrid": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 39.25,
          "avg_contractor_last_7_days": 3,
          "avg_overall_last_7_days": 42.25
        },
        "DU.Abu Dhab": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 26.6,
          "avg_contractor_last_7_days": 0.8,
          "avg_overall_last_7_days": 27.4
        },
        "IT.Rome": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 18.5,
          "avg_contractor_last_7_days": 1.5,
          "avg_overall_last_7_days": 20
        },
        "RU.Moscow": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 4,
          "avg_contractor_last_7_days": 1.4,
          "avg_overall_last_7_days": 5.4
        },
        "Quezon City": {
          "history_days_counted": 7,
          "avg_employee_last_7_days": 172.57,
          "avg_contractor_last_7_days": 36.86,
          "avg_overall_last_7_days": 209.43
        },
        "Pune": {
          "history_days_counted": 7,
          "avg_employee_last_7_days": 390.71,
          "avg_contractor_last_7_days": 77.71,
          "avg_overall_last_7_days": 468.43
        },
        "JP.Tokyo": {
          "history_days_counted": 7,
          "avg_employee_last_7_days": 6.14,
          "avg_contractor_last_7_days": 0.71,
          "avg_overall_last_7_days": 6.86
        },
        "MY.Kuala Lumpur": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 3.4,
          "avg_contractor_last_7_days": 1,
          "avg_overall_last_7_days": 4.4
        },
        "MA.Casablanca": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 8.33,
          "avg_contractor_last_7_days": 0.83,
          "avg_overall_last_7_days": 9.17
        },
        "Taguig City": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 6.75,
          "avg_contractor_last_7_days": 1.5,
          "avg_overall_last_7_days": 8.25
        }
      }
    }
  }
}






3) http://localhost:8000/ccure/averages


{
  "date": "2025-08-27",
  "notes": null,
  "live_today": {
    "employee": 0,
    "contractor": 0,
    "total_reported": 0,
    "total_from_details": 0
  },
  "ccure_active": {
    "active_employees": 8608,
    "active_contractors": 658,
    "ccure_active_employees_reported": 8608,
    "ccure_active_contractors_reported": 658
  },
  "averages": {
    "employee_pct": 0,
    "contractor_pct": 0,
    "overall_pct": 0,
    "avg_headcount_last_7_days": 0,
    "head_emp_pct_vs_ccure_today": 0,
    "head_contractor_pct_vs_ccure_today": 0,
    "headcount_overall_pct_vs_ccure_today": 0,
    "history_avg_overall_last_7_days": 0
  }
}






http://localhost:8000/ccure/verify?raw=true&date=2025-08-19&end_date=2025-08-26


{
  "date": "2025-08-27",
  "ccure_reported": {
    "employees": 8608,
    "contractors": 658,
    "total_reported": 9266
  },
  "headcount_attendance_summary": {
    "total_visited_today": 0,
    "employee": 343,
    "contractor": 94
  },
  "live_headcount_region_clients": {
    "currently_present_total": 420,
    "employee": 343,
    "contractor": 94
  },
  "percentages_vs_ccure": {
    "head_employee_pct_vs_ccure_today": 3.98,
    "head_contractor_pct_vs_ccure_today": 14.29,
    "head_overall_pct_vs_ccure_today": 0,
    "live_employee_pct_vs_ccure_today": 3.98,
    "live_contractor_pct_vs_ccure_today": 14.29,
    "live_overall_pct_vs_ccure_today": 4.53,
    "history_employee_pct_vs_ccure": 22.2,
    "history_contractor_pct_vs_ccure": 42.73,
    "history_overall_pct_vs_ccure": 23.66
  },
  "averages": {
    "history_avg_employee_last_7_days": 1911.33,
    "history_avg_contractor_last_7_days": 281.17,
    "history_avg_overall_last_7_days": 2192.5,
    "avg_headcount_last_7_days_db": 2192.5,
    "avg_headcount_per_site_last_7_days": 548.12
  },
  "notes": "Region totals (420) differ from detail rows (437); using region totals for overall and details for breakdown. | avg_headcount_last_range derived from region history endpoints due to missing AttendanceSummary historical data.",
  "raw": {
    "date": "2025-08-27",
    "notes": "Region totals (420) differ from detail rows (437); using region totals for overall and details for breakdown. | avg_headcount_last_range derived from region history endpoints due to missing AttendanceSummary historical data.",
    "live_today": {
      "employee": 343,
      "contractor": 94,
      "total_reported": 420,
      "total_from_details": 429
    },
    "live_headcount": {
      "currently_present_total": 420,
      "employee": 343,
      "contractor": 94,
      "by_location": {
        "US.CO.OBS": {
          "total": 20,
          "employee": 10,
          "contractor": 10
        },
        "USA/Canada Default": {
          "total": 5,
          "employee": 2,
          "contractor": 3
        },
        "US.FL.Miami": {
          "total": 2,
          "employee": 2,
          "contractor": 0
        },
        "US.NYC": {
          "total": 5,
          "employee": 5,
          "contractor": 0
        },
        "LT.Vilnius": {
          "total": 57,
          "employee": 51,
          "contractor": 6
        },
        "MA.Casablanca": {
          "total": 21,
          "employee": 20,
          "contractor": 1
        },
        "AUT.Vienna": {
          "total": 46,
          "employee": 40,
          "contractor": 6
        },
        "IE.Dublin": {
          "total": 5,
          "employee": 3,
          "contractor": 2
        },
        "DU.Abu Dhab": {
          "total": 8,
          "employee": 8,
          "contractor": 0
        },
        "IT.Rome": {
          "total": 5,
          "employee": 5,
          "contractor": 0
        },
        "ES.Madrid": {
          "total": 2,
          "employee": 2,
          "contractor": 0
        },
        "RU.Moscow": {
          "total": 6,
          "employee": 5,
          "contractor": 1
        },
        "CR.Costa Rica Partition": {
          "total": 32,
          "employee": 20,
          "contractor": 12
        },
        "MX.Mexico City": {
          "total": 18,
          "employee": 15,
          "contractor": 3
        },
        "PA.Panama City": {
          "total": 1,
          "employee": 1,
          "contractor": 0
        },
        "AR.Cordoba": {
          "total": 5,
          "employee": 1,
          "contractor": 4
        },
        "PE.Lima": {
          "total": 1,
          "employee": 1,
          "contractor": 0
        },
        "Quezon City": {
          "total": 140,
          "employee": 126,
          "contractor": 14
        },
        "Pune": {
          "total": 30,
          "employee": 2,
          "contractor": 28
        },
        "JP.Tokyo": {
          "total": 9,
          "employee": 8,
          "contractor": 1
        },
        "MY.Kuala Lumpur": {
          "total": 4,
          "employee": 3,
          "contractor": 1
        },
        "Taguig City": {
          "total": 15,
          "employee": 13,
          "contractor": 2
        }
      }
    },
    "ccure_active": {
      "active_employees": 8608,
      "active_contractors": 658,
      "ccure_active_employees_reported": 8608,
      "ccure_active_contractors_reported": 658
    },
    "averages": {
      "head_emp_pct_vs_ccure_today": 3.98,
      "head_contractor_pct_vs_ccure_today": 13.07,
      "headcount_overall_pct_vs_ccure_today": 4.63,
      "live_employee_pct_vs_ccure": 3.98,
      "live_contractor_pct_vs_ccure": 14.29,
      "live_overall_pct_vs_ccure": 4.53,
      "avg_headcount_last_7_days": 2192.5,
      "avg_headcount_per_site_last_7_days": 548.12,
      "avg_live_per_site": 105,
      "history_avg_employee_last_7_days": 1911.33,
      "history_avg_contractor_last_7_days": 281.17,
      "history_avg_overall_last_7_days": 2192.5,
      "history_days_counted": 6,
      "history_employee_pct_vs_ccure": 22.2,
      "history_contractor_pct_vs_ccure": 42.73,
      "history_overall_pct_vs_ccure": 23.66,
      "history_today_employee_count": 412,
      "history_today_contractor_count": 82,
      "history_today_employee_pct_vs_ccure": 4.79,
      "history_today_contractor_pct_vs_ccure": 12.46,
      "avg_by_location_last_7_days": {

      },
      "history_avg_by_location_last_7_days": {
        "US.CO.OBS": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 294.83,
          "avg_contractor_last_7_days": 28.17,
          "avg_overall_last_7_days": 323
        },
        "US.FL.Miami": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 17.75,
          "avg_contractor_last_7_days": 2.75,
          "avg_overall_last_7_days": 20.5
        },
        "USA/Canada Default": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 26.5,
          "avg_contractor_last_7_days": 2,
          "avg_overall_last_7_days": 28.5
        },
        "US.NYC": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 20.8,
          "avg_contractor_last_7_days": 0.8,
          "avg_overall_last_7_days": 21.6
        },
        "LT.Vilnius": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 263.17,
          "avg_contractor_last_7_days": 16.83,
          "avg_overall_last_7_days": 280
        },
        "UK.London": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 11.75,
          "avg_contractor_last_7_days": 1.5,
          "avg_overall_last_7_days": 13.25
        },
        "AUT.Vienna": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 23,
          "avg_contractor_last_7_days": 2.67,
          "avg_overall_last_7_days": 25.67
        },
        "IE.Dublin": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 17.17,
          "avg_contractor_last_7_days": 1.83,
          "avg_overall_last_7_days": 19
        },
        "ES.Madrid": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 39.25,
          "avg_contractor_last_7_days": 3,
          "avg_overall_last_7_days": 42.25
        },
        "DU.Abu Dhab": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 30.75,
          "avg_contractor_last_7_days": 1,
          "avg_overall_last_7_days": 31.75
        },
        "IT.Rome": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 18.5,
          "avg_contractor_last_7_days": 1.5,
          "avg_overall_last_7_days": 20
        },
        "RU.Moscow": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 4,
          "avg_contractor_last_7_days": 1.4,
          "avg_overall_last_7_days": 5.4
        },
        "Quezon City": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 157,
          "avg_contractor_last_7_days": 37.67,
          "avg_overall_last_7_days": 194.67
        },
        "Pune": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 455.5,
          "avg_contractor_last_7_days": 84.67,
          "avg_overall_last_7_days": 540.17
        },
        "JP.Tokyo": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 5.83,
          "avg_contractor_last_7_days": 0.67,
          "avg_overall_last_7_days": 6.5
        },
        "MY.Kuala Lumpur": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 3.5,
          "avg_contractor_last_7_days": 1,
          "avg_overall_last_7_days": 4.5
        },
        "CR.Costa Rica Partition": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 352.5,
          "avg_contractor_last_7_days": 50.5,
          "avg_overall_last_7_days": 403
        },
        "AR.Cordoba": {
          "history_days_counted": 6,
          "avg_employee_last_7_days": 117.33,
          "avg_contractor_last_7_days": 31.67,
          "avg_overall_last_7_days": 149
        },
        "PA.Panama City": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 14,
          "avg_contractor_last_7_days": 2.2,
          "avg_overall_last_7_days": 16.2
        },
        "BR.Sao Paulo": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 38.2,
          "avg_contractor_last_7_days": 7.8,
          "avg_overall_last_7_days": 46
        },
        "MX.Mexico City": {
          "history_days_counted": 4,
          "avg_employee_last_7_days": 30.25,
          "avg_contractor_last_7_days": 4.25,
          "avg_overall_last_7_days": 34.5
        },
        "PE.Lima": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 27,
          "avg_contractor_last_7_days": 3.6,
          "avg_overall_last_7_days": 30.6
        },
        "MA.Casablanca": {
          "history_days_counted": 5,
          "avg_employee_last_7_days": 10,
          "avg_contractor_last_7_days": 0.8,
          "avg_overall_last_7_days": 10.8
        },
        "Taguig City": {
          "history_days_counted": 3,
          "avg_employee_last_7_days": 4.67,
          "avg_contractor_last_7_days": 1.33,
          "avg_overall_last_7_days": 6
        }
      }
    }
  }
}





Read below file carefully and fix the issue 


# app.py (updated)
from fastapi import FastAPI, UploadFile, File, HTTPException, Request, Query
from fastapi.responses import JSONResponse, FileResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
import shutil
import uuid
import json
import logging
from pathlib import Path
from datetime import date, datetime, timedelta
import re
import asyncio
from typing import Optional, Dict, Any

# --- DB / models imports (your existing project modules) ---
from db import SessionLocal
from models import LiveSwipe, AttendanceSummary  # removed ActiveEmployee/ActiveContractor dependence for averages

# --- settings (assumes these exist in your project) ---
try:
    from settings import UPLOAD_DIR, OUTPUT_DIR
except Exception:
    UPLOAD_DIR = "./uploads"
    OUTPUT_DIR = "./output"

app = FastAPI(title="Attendance Analytics")

logger = logging.getLogger("attendance_app")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

_allowed_origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://localhost:3008"
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=_allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

_broadcaster_clients = set()

def broadcast_ccure_update(payload: dict):
    if not _broadcaster_clients:
        return
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = None
    for q in list(_broadcaster_clients):
        try:
            if loop and loop.is_running():
                loop.call_soon_threadsafe(q.put_nowait, payload)
            else:
                q.put_nowait(payload)
        except Exception:
            logger.exception("Failed to push payload to SSE client (will remove client)")
            try:
                _broadcaster_clients.discard(q)
            except Exception:
                pass

async def _sse_event_generator(client_queue: asyncio.Queue):
    try:
        while True:
            payload = await client_queue.get()
            try:
                data = json.dumps(payload, default=str)
            except Exception:
                data = json.dumps({"error": "serialization error", "payload": str(payload)})
            yield f"data: {data}\n\n"
    finally:
        try:
            _broadcaster_clients.discard(client_queue)
        except Exception:
            pass
        return

@app.get("/ccure/stream")
async def ccure_stream():
    q = asyncio.Queue()
    _broadcaster_clients.add(q)
    generator = _sse_event_generator(q)
    headers = {"Cache-Control": "no-cache", "X-Accel-Buffering": "no"}
    return StreamingResponse(generator, media_type="text/event-stream", headers=headers)

def _guess_region_from_text(txt: str) -> str:
    if not txt:
        return "unknown"
    s = str(txt).strip().lower()
    s = re.sub(r"[,\-/()]", " ", s)
    if any(k in s for k in ("pune","quezon city","taguig city","bengaluru","hyderabad","chennai","manila","singapore","hong kong","beijing","shanghai","jakarta","kuala","osaka","tokyo","seoul","bangkok")):
        return "apac"
    if any(k in s for k in ("london","dublin","paris","frankfurt","amsterdam","stockholm","cape town","johannesburg","berlin","brussels","madrid","rome","milan")):
        return "emea"
    if any(k in s for k in ("mexico","bogota","buenos","santiago","sao","salvador","lima","caracas")):
        return "laca"
    if any(k in s for k in ("denver","new york","ny","chicago","toronto","vancouver","los angeles","san francisco","boston","houston","atlanta","miami")):
        return "namer"
    return "unknown"

@app.get("/headcount")
def api_headcount():
    try:
        totals = {"apac": 0, "emea": 0, "laca": 0, "namer": 0, "unknown": 0}
        with SessionLocal() as db:
            # Count based on AttendanceSummary derived location where available OR LiveSwipe partition
            # This endpoint is simplified and uses data that exists in DB; it's not reliant on external sheet uploads.
            try:
                # prefer AttendanceSummary today partitions if present
                today = date.today()
                rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
                if rows:
                    for r in rows:
                        try:
                            partition = None
                            if r.derived and isinstance(r.derived, dict):
                                partition = r.derived.get("partition")
                            loc = partition or "unknown"
                            region = _guess_region_from_text(loc)
                            totals[region] = totals.get(region, 0) + 1
                        except Exception:
                            totals["unknown"] += 1
                else:
                    # fallback: use LiveSwipe partitions for today
                    start = datetime.combine(today, datetime.min.time())
                    end = datetime.combine(today, datetime.max.time())
                    swipes = db.query(LiveSwipe).filter(LiveSwipe.timestamp >= start, LiveSwipe.timestamp <= end).all()
                    for s in swipes:
                        loc = s.partition or "unknown"
                        region = _guess_region_from_text(loc)
                        totals[region] = totals.get(region, 0) + 1
            except Exception:
                logger.exception("Failed to compute headcount regions")
        out = {
            "apac": int(totals.get("apac", 0)),
            "emea": int(totals.get("emea", 0)),
            "laca": int(totals.get("laca", 0)),
            "namer": int(totals.get("namer", 0))
        }
        return JSONResponse(out)
    except Exception as exc:
        logger.exception("api_headcount failed")
        raise HTTPException(status_code=500, detail=f"headcount error: {exc}")

# Keep build_ccure_averages for backward compatibility but remove sheet-dependencies; accept date range
def build_ccure_averages(start_date: Optional[str] = None, end_date: Optional[str] = None):
    """
    Fallback averages computation using AttendanceSummary only.
    Accepts optional start_date and end_date strings (YYYY-MM-DD). If not provided,
    defaults to last 7 days inclusive (today - 6 .. today).
    This function intentionally does not rely on ActiveEmployee/ActiveContractor uploaded sheets.
    """
    try:
        def _parse_date_param(s):
            if not s:
                return None
            try:
                return datetime.strptime(s, "%Y-%m-%d").date()
            except Exception:
                try:
                    return date.fromisoformat(s)
                except Exception:
                    return None

        today = date.today()
        start_obj = _parse_date_param(start_date) if start_date else (today - timedelta(days=6))
        end_obj = _parse_date_param(end_date) if end_date else today
        if start_obj is None or end_obj is None or start_obj > end_obj:
            start_obj = today - timedelta(days=6)
            end_obj = today

        with SessionLocal() as db:
            try:
                att_rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
            except Exception:
                logger.exception("Failed to query AttendanceSummary")
                att_rows = []

            live_emp = 0
            live_contr = 0
            unknown_count = 0
            seen_keys = set()

            def classify_from_derived(derived):
                try:
                    if not derived or not isinstance(derived, dict):
                        return "contractor"
                    # look for PersonnelType/status fields
                    for k in ("PersonnelType","personnelType","personnel_type","Personnel Type","Type","personnel"):
                        v = derived.get(k)
                        if v and "employee" in str(v).strip().lower():
                            return "employee"
                    for k in ("Employee_Status","Employee Status","Status"):
                        v = derived.get(k)
                        if v and "terminated" in str(v).strip().lower():
                            return "employee"
                    return "contractor"
                except Exception:
                    return "contractor"

            for a in att_rows:
                key = _normalize_employee_key(a.employee_id) or None
                if not key:
                    try:
                        key = _normalize_card_like(a.derived.get('card_number') if (a.derived and isinstance(a.derived, dict)) else None)
                    except Exception:
                        key = None
                if not key:
                    unknown_count += 1
                    continue
                if key in seen_keys:
                    continue
                seen_keys.add(key)
                # classify using derived if present
                cls = classify_from_derived(a.derived)
                if cls == "employee":
                    live_emp += 1
                elif cls == "contractor":
                    live_contr += 1
                else:
                    unknown_count += 1

            live_total_reported = live_emp + live_contr + unknown_count
            live_total_details = len(att_rows)

            # compute avg in provided range using AttendanceSummary
            try:
                q = db.query(AttendanceSummary.date, AttendanceSummary.employee_id, AttendanceSummary.presence_count)\
                      .filter(AttendanceSummary.date >= start_obj, AttendanceSummary.date <= end_obj).all()
                by_date = {}
                for row in q:
                    d = row[0]
                    key = (row[1] or "").strip() if row[1] else None
                    if not key:
                        continue
                    if d not in by_date:
                        by_date[d] = set()
                    try:
                        presence_val = getattr(row, 'presence_count', row[2])
                        if int(presence_val) > 0:
                            by_date[d].add(key)
                    except Exception:
                        by_date[d].add(key)
                days_count = (end_obj - start_obj).days + 1
                daily_counts = [len(by_date.get(start_obj + timedelta(days=i), set())) for i in range(days_count)]
                avg_range = int(round(sum(daily_counts) / float(days_count))) if days_count and any(daily_counts) else 0
            except Exception:
                logger.exception("Failed computing range average")
                avg_range = None

        ccure_stats = {}
        try:
            import ccure_client
            if hasattr(ccure_client, "get_global_stats"):
                ccure_stats = ccure_client.get_global_stats() or {}
        except Exception:
            logger.debug("ccure_client.get_global_stats not available", exc_info=True)

        cc_active_emps = None
        cc_active_contractors = None
        try:
            if isinstance(ccure_stats, dict):
                a = ccure_stats.get("ActiveEmployees") or ccure_stats.get("active_employees") or None
                b = ccure_stats.get("ActiveContractors") or ccure_stats.get("active_contractors") or None
                if a is not None and str(a).strip() != "":
                    cc_active_emps = int(a)
                if b is not None and str(b).strip() != "":
                    cc_active_contractors = int(b)
        except Exception:
            cc_active_emps = cc_active_contractors = None

        emp_pct = None
        contr_pct = None
        overall_pct = None
        try:
            if isinstance(cc_active_emps, int) and cc_active_emps > 0:
                emp_pct = round((live_emp / float(cc_active_emps)) * 100.0, 2)
            if isinstance(cc_active_contractors, int) and cc_active_contractors > 0:
                contr_pct = round((live_contr / float(cc_active_contractors)) * 100.0, 2)
            if isinstance(cc_active_emps, int) and isinstance(cc_active_contractors, int) and (cc_active_emps + cc_active_contractors) > 0:
                overall_pct = round(((live_emp + live_contr) / float(cc_active_emps + cc_active_contractors)) * 100.0, 2)
        except Exception:
            emp_pct = contr_pct = overall_pct = None

        resp = {
            "date": today.isoformat(),
            "notes": f"Computed over range {start_obj.isoformat()} -> {end_obj.isoformat()}" if (start_date or end_date) else None,
            "live_today": {
                "employee": live_emp,
                "contractor": live_contr,
                "total_reported": live_total_reported,
                "total_from_details": live_total_details
            },
            "ccure_active": {
                "active_employees": cc_active_emps,
                "active_contractors": cc_active_contractors,
                "ccure_active_employees_reported": cc_active_emps,
                "ccure_active_contractors_reported": cc_active_contractors
            },
            "averages": {
                "employee_pct": emp_pct,
                "contractor_pct": contr_pct,
                "overall_pct": overall_pct,
                "avg_headcount_last_7_days": avg_range,
                "head_emp_pct_vs_ccure_today": emp_pct,
                "head_contractor_pct_vs_ccure_today": contr_pct,
                "headcount_overall_pct_vs_ccure_today": overall_pct,
                "history_avg_overall_last_7_days": avg_range
            }
        }

        return resp
    except Exception:
        logger.exception("build_ccure_averages failed")
        raise

# Map detailed compute -> compact UI response
def _map_detailed_to_resp(detailed: Dict[str, Any]) -> Dict[str, Any]:
    live_h = detailed.get("live_headcount", {}) or {}
    head_h = detailed.get("headcount", {}) or {}
    ccure_active_obj = detailed.get("ccure_active", {}) or {}
    averages_obj = detailed.get("averages", {}) or {}

    live_employee = int(live_h.get("employee") or head_h.get("employee") or 0)
    live_contractor = int(live_h.get("contractor") or head_h.get("contractor") or 0)
    total_reported = int(
        live_h.get("currently_present_total")
        or head_h.get("total_visited_today")
        or (live_employee + live_contractor)
        or 0
    )
    total_from_details = int(head_h.get("total_visited_today") or 0)

    resp = {
        "date": detailed.get("date"),
        "notes": detailed.get("notes"),
        "live_today": {
            "employee": live_employee,
            "contractor": live_contractor,
            "total_reported": total_reported,
            "total_from_details": total_from_details
        },
        "live_headcount": live_h,
        "ccure_active": {
            "active_employees": ccure_active_obj.get("ccure_active_employees_reported")
                             or ccure_active_obj.get("active_employees"),
            "active_contractors": ccure_active_obj.get("ccure_active_contractors_reported")
                               or ccure_active_obj.get("active_contractors"),
            "ccure_active_employees_reported": ccure_active_obj.get("ccure_active_employees_reported"),
            "ccure_active_contractors_reported": ccure_active_obj.get("ccure_active_contractors_reported")
        },
        "averages": averages_obj
    }
    return resp

@app.get("/ccure/averages")
async def ccure_averages(
    start_date: Optional[str] = Query(None, description="YYYY-MM-DD start date for range (inclusive)"),
    end_date: Optional[str] = Query(None, description="YYYY-MM-DD end date for range (inclusive)")
):
    """
    This endpoint prefers compute_visit_averages (detailed), but will fall back to build_ccure_averages()
    if compute fails or times out. We increased the wait_for timeout to reduce accidental fallbacks.
    """
    try:
        try:
            from ccure_compare_service import compute_visit_averages
            have_compute = True
        except Exception:
            have_compute = False

        if have_compute:
            loop = asyncio.get_running_loop()
            # Increased timeout to allow slower region_clients responses (adjust as needed)
            wait_timeout = 30.0
            try:
                detailed = await asyncio.wait_for(
                    loop.run_in_executor(None, compute_visit_averages, start_date, end_date, 6),
                    timeout=wait_timeout
                )
            except asyncio.TimeoutError:
                logger.warning("compute_visit_averages timed out after %.1fs; returning fallback.", wait_timeout)
                # do not schedule background compute (keeps responses deterministic)
                resp = build_ccure_averages(start_date, end_date)
                try:
                    broadcast_ccure_update(resp)
                except Exception:
                    logger.exception("broadcast failed in /ccure/averages (non-fatal)")
                return JSONResponse(resp)
            except Exception:
                logger.exception("compute_visit_averages() raised; falling back to build_ccure_averages()")
                resp = build_ccure_averages(start_date, end_date)
                try:
                    broadcast_ccure_update(resp)
                except Exception:
                    logger.exception("broadcast failed in /ccure/averages (non-fatal)")
                return JSONResponse(resp)

            if isinstance(detailed, dict):
                resp = _map_detailed_to_resp(detailed)
                try:
                    broadcast_ccure_update(resp)
                except Exception:
                    logger.exception("broadcast failed in /ccure/averages (non-fatal)")
                return JSONResponse(resp)

        resp = build_ccure_averages(start_date, end_date)
        try:
            broadcast_ccure_update(resp)
        except Exception:
            logger.exception("broadcast failed in /ccure/averages (non-fatal)")
        return JSONResponse(resp)

    except HTTPException:
        raise
    except Exception as exc:
        logger.exception("ccure_averages failed")
        raise HTTPException(status_code=500, detail=f"ccure averages error: {exc}")

@app.get("/ccure/verify")
def ccure_verify(
    raw: bool = Query(False, description="if true, include the raw compute payload for debugging"),
    start_date: Optional[str] = Query(None, description="YYYY-MM-DD start date (inclusive)"),
    end_date: Optional[str] = Query(None, description="YYYY-MM-DD end date (inclusive)")
):
    """
    Synchronous verification endpoint. Prefer compute_visit_averages() (synchronous call).
    If compute raises or fails, fall back to build_ccure_averages() so output shape matches /ccure/averages.
    """
    try:
        detailed = None
        try:
            from ccure_compare_service import compute_visit_averages
            detailed = compute_visit_averages(start_date, end_date, timeout=100)
        except Exception:
            logger.exception("compute_visit_averages() failed inside /ccure/verify; falling back")
            detailed = None

        if isinstance(detailed, dict):
            mapped = _map_detailed_to_resp(detailed)
            head = mapped.get("headcount", {}) or mapped.get("live_headcount", {})
            live_head = mapped.get("live_headcount", {}) or {}
            cc = mapped.get("ccure_active", {}) or {}
            averages = mapped.get("averages", {}) or {}
        else:
            fallback = build_ccure_averages(start_date, end_date)
            head = {
                "total_visited_today": fallback.get("live_today", {}).get("total_from_details")
                                      or fallback.get("live_today", {}).get("total_reported")
                                      or None,
                "employee": fallback.get("live_today", {}).get("employee"),
                "contractor": fallback.get("live_today", {}).get("contractor"),
                "by_location": {}
            }
            live_head = {
                "currently_present_total": fallback.get("live_today", {}).get("total_reported"),
                "employee": fallback.get("live_today", {}).get("employee"),
                "contractor": fallback.get("live_today", {}).get("contractor"),
                "by_location": {}
            }
            cc = fallback.get("ccure_active", {}) or {}
            averages = fallback.get("averages", {}) or {}

        def to_int(v):
            try:
                return None if v is None else int(v)
            except Exception:
                try:
                    return int(float(v))
                except Exception:
                    return None

        cc_emp = to_int(cc.get("ccure_active_employees_reported") or cc.get("active_employees"))
        cc_con = to_int(cc.get("ccure_active_contractors_reported") or cc.get("active_contractors"))

        head_total = to_int(head.get("total_visited_today") or 0)
        head_emp = to_int(head.get("employee") or 0)
        head_con = to_int(head.get("contractor") or 0)

        live_total = to_int(live_head.get("currently_present_total") or 0)
        live_emp = to_int(live_head.get("employee") or 0)
        live_con = to_int(live_head.get("contractor") or 0)

        history_emp_avg = averages.get("history_avg_employee_last_7_days")
        history_con_avg = averages.get("history_avg_contractor_last_7_days")
        history_overall_avg = averages.get("history_avg_overall_last_7_days")

        def pct(n, d):
            try:
                if n is None or d is None:
                    return None
                if float(d) == 0:
                    return None
                return round((float(n) / float(d)) * 100.0, 2)
            except Exception:
                return None

        summary = {
            "date": (mapped.get("date") if 'mapped' in locals() else fallback.get("date")) if ('mapped' in locals() or 'fallback' in locals()) else None,
            "ccure_reported": {
                "employees": cc_emp,
                "contractors": cc_con,
                "total_reported": (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None
            },
            "headcount_attendance_summary": {
                "total_visited_today": head_total,
                "employee": head_emp,
                "contractor": head_con
            },
            "live_headcount_region_clients": {
                "currently_present_total": live_total,
                "employee": live_emp,
                "contractor": live_con
            },
            "percentages_vs_ccure": {
                "head_employee_pct_vs_ccure_today": pct(head_emp, cc_emp),
                "head_contractor_pct_vs_ccure_today": pct(head_con, cc_con),
                "head_overall_pct_vs_ccure_today": pct(head_total, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None),
                "live_employee_pct_vs_ccure_today": pct(live_emp, cc_emp),
                "live_contractor_pct_vs_ccure_today": pct(live_con, cc_con),
                "live_overall_pct_vs_ccure_today": pct(live_total, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None),
                "history_employee_pct_vs_ccure": pct(history_emp_avg, cc_emp),
                "history_contractor_pct_vs_ccure": pct(history_con_avg, cc_con),
                "history_overall_pct_vs_ccure": pct(history_overall_avg, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None)
            },
            "averages": {
                "history_avg_employee_last_7_days": history_emp_avg,
                "history_avg_contractor_last_7_days": history_con_avg,
                "history_avg_overall_last_7_days": history_overall_avg,
                "avg_headcount_last_7_days_db": averages.get("avg_headcount_last_7_days"),
                "avg_headcount_per_site_last_7_days": averages.get("avg_headcount_per_site_last_7_days"),
            },
            "notes": (mapped.get("notes") if 'mapped' in locals() else fallback.get("notes")) if ('mapped' in locals() or 'fallback' in locals()) else None
        }

        if raw:
            summary["raw"] = (mapped if isinstance(detailed, dict) else fallback)

        return JSONResponse(summary)
    except Exception as e:
        logger.exception("ccure_verify failed")
        raise HTTPException(status_code=500, detail=f"ccure verify error: {e}")

# remaining endpoints (unchanged)...
@app.get("/ccure/compare")
def ccure_compare(
    mode: str = Query("full", description="full or stats"),
    stats_detail: str = Query("ActiveProfiles", description="when mode=stats use this"),
    limit_list: int = Query(200, ge=1, le=5000, description="max rows returned in list samples"),
    export: bool = Query(False, description="if true, writes Excel report to server and returns report_path")
):
    try:
        from ccure_compare_service import compare_ccure_vs_sheets
    except Exception as e:
        logger.exception("ccure_compare_service import failed")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")
    res = compare_ccure_vs_sheets(mode=mode, stats_detail=stats_detail, limit_list=limit_list, export=export)
    if not isinstance(res, dict):
        return JSONResponse({"error": "compare service returned unexpected result"}, status_code=500)
    return JSONResponse(res)

@app.get("/ccure/report/{filename}")
def ccure_report_download(filename: str):
    try:
        safe_name = Path(filename).name
        full = Path(OUTPUT_DIR) / safe_name
        if not full.exists() or not full.is_file():
            raise HTTPException(status_code=404, detail="Report not found")
        return FileResponse(str(full),
                            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            filename=safe_name)
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Failed to serve report")
        raise HTTPException(status_code=500, detail=f"Failed to serve report: {e}")

# Upload / ingest endpoints left unchanged; they call build_ccure_averages which now uses AttendanceSummary only
# Rest of file unchanged (ingest, fetch-all, reports, stats) - unchanged earlier code remains applicable.










"""
ccure_compare_service.py (updated)

Simplified & hardened compute_visit_averages:
 - No ActiveEmployee/ActiveContractor sheet-driven classification for averages/headcounts.
 - Only uses AttendanceSummary, Live details (region_clients.fetch_all_details),
   region history (region_clients.fetch_all_history) and ccure stats.
 - Accepts start_date/end_date (YYYY-MM-DD) inclusive range. Defaults to last 7 days.
 - Ensures per-location history averages include all partitions returned by region history
   (no filtering by ccure profile partitions).
"""

import re
import json
from datetime import date, datetime, timedelta
from typing import List, Dict, Any, Optional, Set

import logging

logger = logging.getLogger("ccure_compare_service")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

from db import SessionLocal
from models import AttendanceSummary, LiveSwipe
from settings import OUTPUT_DIR

# ---------- small helpers ----------------------------------------------------

def _normalize_employee_key(x) -> Optional[str]:
    if x is None:
        return None
    try:
        s = str(x).strip()
        if s == "" or s.lower() in ("nan", "none", "na", "null"):
            return None
        return s
    except Exception:
        return None

def _normalize_card_like(s) -> Optional[str]:
    if s is None:
        return None
    try:
        ss = str(s).strip()
        if ss == "":
            return None
        digits = re.sub(r'\D+', '', ss)
        if digits == "":
            return None
        return digits.lstrip('0') or digits
    except Exception:
        return None

def _safe_int(v):
    try:
        if v is None:
            return None
        return int(v)
    except Exception:
        try:
            return int(float(v))
        except Exception:
            return None

def _sanitize_for_json(value):
    try:
        import numpy as _np
    except Exception:
        _np = None
    if value is None:
        return None
    if isinstance(value, (str, bool, int)):
        return value
    if isinstance(value, float):
        if _np is not None and not _np.isfinite(value):
            return None
        return float(value)
    if _np is not None and isinstance(value, (_np.integer,)):
        return int(value)
    if isinstance(value, dict):
        out = {}
        for k, v in value.items():
            try:
                key = str(k)
            except Exception:
                key = repr(k)
            out[key] = _sanitize_for_json(v)
        return out
    if isinstance(value, (list, tuple, set)):
        return [_sanitize_for_json(v) for v in value]
    try:
        return str(value)
    except Exception:
        return None

# ---------- ccure helpers ---------------------------------------------------

def _fetch_ccure_stats():
    try:
        import ccure_client
        if hasattr(ccure_client, "get_global_stats"):
            return ccure_client.get_global_stats()
    except Exception:
        logger.debug("ccure_client.get_global_stats not available", exc_info=True)
    return None

def _fetch_ccure_profiles():
    try:
        import ccure_client
        for fn in ("fetch_all_employees_full", "fetch_all_employees", "fetch_all_profiles", "fetch_profiles", "fetch_all"):
            if hasattr(ccure_client, fn):
                try:
                    res = getattr(ccure_client, fn)()
                    if isinstance(res, list):
                        return res
                except Exception:
                    continue
    except Exception:
        pass
    return []

def _extract_ccure_locations_from_profiles(profiles: List[dict]) -> Set[str]:
    locs = set()
    for p in profiles:
        if not isinstance(p, dict):
            continue
        for k in ("Partition", "PartitionName", "Location", "Location City", "location_city", "location", "Site", "BaseLocation"):
            v = p.get(k) if isinstance(p, dict) else None
            if v and isinstance(v, str) and v.strip():
                locs.add(v.strip())
    return locs

# ---------- classification & partition helpers ------------------------------

def classify_personnel_from_detail(detail: dict) -> str:
    """
    Classify 'detail' dict as 'employee' or 'contractor'.
    Looks for several PersonnelType/status keys; default is contractor.
    """
    try:
        if not isinstance(detail, dict):
            return "contractor"
        candidate_keys = [
            "PersonnelType", "personnelType", "personnel_type", "Personnel Type",
            "PersonnelTypeName", "Personnel", "Type", "personnel", "PersonType", "personType"
        ]
        val = None
        for k in candidate_keys:
            if k in detail and detail.get(k) is not None:
                val = str(detail.get(k)).strip().lower()
                break
        status_keys = ["Employee_Status", "Employee Status", "Status", "Profile_Disabled"]
        status_val = None
        for k in status_keys:
            if k in detail and detail.get(k) is not None:
                status_val = str(detail.get(k)).strip().lower()
                break

        # terminated/disabled rows treated as employee (they were employees historically)
        if status_val is not None and "terminated" in status_val:
            return "employee"
        if val is None or val == "":
            return "contractor"
        if "employee" in val:
            return "employee"
        contractor_terms = ["contractor", "visitor", "property", "temp", "temp badge", "tempbadge"]
        for t in contractor_terms:
            if t in val:
                return "contractor"
        if "contract" in val or "visitor" in val:
            return "contractor"
        # default to contractor if unclear
        return "contractor"
    except Exception:
        return "contractor"

def pick_partition_from_detail(detail: dict) -> str:
    if not isinstance(detail, dict):
        return "Unknown"
    for k in ("PartitionName2","PartitionName1","Partition","PartitionName","Region","Location","Site","location_city","Location City"):
        if k in detail and detail.get(k):
            try:
                return str(detail.get(k)).strip()
            except Exception:
                continue
    if "__region" in detail and detail.get("__region"):
        return str(detail.get("__region")).strip()
    return "Unknown"

# ---------- utility: fallback headcount builder from LiveSwipe --------------

def build_headcount_from_liveswipes_for_today(session) -> (int, Dict[str, Dict[str, int]]):
    start = datetime.combine(date.today(), datetime.min.time())
    end = datetime.combine(date.today(), datetime.max.time())
    swipes = session.query(LiveSwipe).filter(LiveSwipe.timestamp >= start, LiveSwipe.timestamp <= end).all()
    if not swipes:
        return 0, {}
    seen_keys = {}
    per_loc = {}
    for s in swipes:
        key = _normalize_employee_key(s.employee_id) or _normalize_card_like(s.card_number)
        if not key:
            key = f"nokey_{s.id}"
        rec = seen_keys.get(key)
        ts = s.timestamp
        if rec is None:
            seen_keys[key] = {"first_seen": ts, "last_seen": ts, "partition": (s.partition or "Unknown"), "class": None, "card": s.card_number, "raw": s.raw}
        else:
            if ts and rec.get("first_seen") and ts < rec["first_seen"]:
                rec["first_seen"] = ts
            if ts and rec.get("last_seen") and ts > rec["last_seen"]:
                rec["last_seen"] = ts
    for k, v in seen_keys.items():
        loc = v.get("partition") or "Unknown"
        if not isinstance(loc, str) or not loc.strip():
            loc = "Unknown"
        if loc not in per_loc:
            per_loc[loc] = {"total": 0, "employee": 0, "contractor": 0}
        per_loc[loc]["total"] += 1
        classified = "contractor"
        raw = v.get("raw")
        if isinstance(raw, dict):
            try:
                classified = classify_personnel_from_detail(raw)
            except Exception:
                classified = "contractor"
        per_loc[loc][classified] += 1
    total = sum(p["total"] for p in per_loc.values())
    return int(total), per_loc

# ---------- main compute function -----------------------------------------

def compute_visit_averages(start_date: Optional[str] = None, end_date: Optional[str] = None, timeout: int = 6) -> Dict[str, Any]:
    """
    Compute visit averages for an inclusive date range.
    Uses only AttendanceSummary, region_clients.fetch_all_details, region_clients.fetch_all_history and ccure stats.
    Defaults to last 7 days if no valid range provided.
    """
    notes = []
    today = date.today()

    # parse date strings
    def _parse_date_param(s):
        if not s:
            return None
        try:
            return datetime.strptime(s, "%Y-%m-%d").date()
        except Exception:
            try:
                return date.fromisoformat(s)
            except Exception:
                return None

    start_obj = _parse_date_param(start_date) if start_date else (today - timedelta(days=6))
    end_obj = _parse_date_param(end_date) if end_date else today
    if start_obj is None or end_obj is None or start_obj > end_obj:
        start_obj = today - timedelta(days=6)
        end_obj = today
        notes.append("Invalid or missing date range; defaulted to last 7 calendar days inclusive.")

    # gather CCURE stats & profiles (profiles only used if you want to filter — currently not used to drop partitions)
    ccure_stats = _fetch_ccure_stats()
    reported_active_emps = _safe_int(ccure_stats.get("ActiveEmployees")) if isinstance(ccure_stats, dict) else None
    reported_active_contractors = _safe_int(ccure_stats.get("ActiveContractors")) if isinstance(ccure_stats, dict) else None

    ccure_profiles = _fetch_ccure_profiles()
    ccure_locations = _extract_ccure_locations_from_profiles(ccure_profiles) if isinstance(ccure_profiles, list) else set()

    # ---------- HEADCOUNT (AttendanceSummary fallback logic) ----------
    head_total = 0
    head_per_location: Dict[str, Dict[str, int]] = {}
    key_map_head: Dict[str, Dict[str, Any]] = {}
    key_map_live: Dict[str, Dict[str, Any]] = {}

    try:
        session = SessionLocal()
        att_rows_today = session.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
        if not att_rows_today:
            # try to build from LiveSwipe compute_daily_attendance if available
            try:
                from compare_service import compute_daily_attendance as _compute_daily_attendance
                try:
                    built = _compute_daily_attendance(today)
                    if isinstance(built, list) and len(built) > 0:
                        att_rows_today = session.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
                        notes.append("AttendanceSummary was missing; built from LiveSwipe via compute_daily_attendance().")
                except Exception:
                    logger.exception("compute_daily_attendance execution failed; falling back")
            except Exception:
                logger.debug("compare_service.compute_daily_attendance not importable; falling back", exc_info=True)

            if not att_rows_today:
                built_total, built_per_loc = build_headcount_from_liveswipes_for_today(session)
                head_total = built_total
                head_per_location = built_per_loc
                if head_total > 0:
                    notes.append("AttendanceSummary for today empty; built headcount from LiveSwipe rows (non-persistent fallback).")
        if att_rows_today:
            # classify using AttendanceSummary.derived if possible (don't rely on Active sheets)
            for a in att_rows_today:
                key = _normalize_employee_key(a.employee_id) or _normalize_card_like((a.derived.get('card_number') if (a.derived and isinstance(a.derived, dict)) else None)) or None
                partition = None
                try:
                    if a.derived and isinstance(a.derived, dict):
                        partition = a.derived.get("partition")
                except Exception:
                    partition = None
                loc = partition or "Unknown"
                if not isinstance(loc, str) or not loc.strip():
                    loc = "Unknown"
                if (a.presence_count or 0) > 0:
                    cls = "contractor"
                    try:
                        if a.derived and isinstance(a.derived, dict):
                            cls = classify_personnel_from_detail(a.derived)
                    except Exception:
                        cls = "contractor"
                    if key:
                        key_map_head[key] = {"loc": loc, "cls": cls}
                    if loc not in head_per_location:
                        head_per_location[loc] = {"total": 0, "employee": 0, "contractor": 0}
                    head_per_location[loc][cls] += 1
                    head_per_location[loc]["total"] += 1
                    head_total += 1
        session.expunge_all()
    except Exception:
        logger.exception("Error computing HeadCount")
        notes.append("Failed to compute HeadCount from DB; see server logs.")
    finally:
        try:
            session.close()
        except Exception:
            pass

    # --- LIVE HEADCOUNT via region_clients (realtime) ----------
    live_total = 0
    live_per_location: Dict[str, Dict[str, int]] = {}
    sites_queried = 0
    details = []
    try:
        import region_clients
        regions_info = []
        try:
            if hasattr(region_clients, "fetch_all_regions"):
                regions_info = region_clients.fetch_all_regions(timeout=timeout) or []
        except Exception:
            logger.exception("region_clients.fetch_all_regions failed")
        try:
            if hasattr(region_clients, "fetch_all_details"):
                details = region_clients.fetch_all_details(timeout=timeout) or []
        except Exception:
            logger.exception("region_clients.fetch_all_details failed")
        sites_queried = len(regions_info) if isinstance(regions_info, list) else 0
        if regions_info:
            for r in regions_info:
                try:
                    c = r.get("count") if isinstance(r, dict) else None
                    ci = _safe_int(c)
                    if ci is not None:
                        live_total += int(ci)
                except Exception:
                    continue
        derived_detail_sum = 0
        if details and isinstance(details, list):
            for d in details:
                try:
                    loc = pick_partition_from_detail(d) or "Unknown"
                    if not isinstance(loc, str) or not loc.strip():
                        loc = "Unknown"
                    pclass = classify_personnel_from_detail(d)
                    # dedupe key
                    key = _normalize_employee_key(d.get("EmployeeID")) or _normalize_card_like(d.get("CardNumber")) or (d.get("PersonGUID") if d.get("PersonGUID") else None)
                    if not key:
                        key = _normalize_employee_key(d.get("employee_id")) or _normalize_card_like(d.get("Card")) or None
                    if not key:
                        # synthetic key for anonymous row
                        key = f"detail_{derived_detail_sum}_{str(hash(json.dumps(d, default=str)))}"
                    key = str(key)
                    key_map_live[key] = {"loc": loc, "cls": pclass}
                    if loc not in live_per_location:
                        live_per_location[loc] = {"total": 0, "employee": 0, "contractor": 0}
                    live_per_location[loc]["total"] += 1
                    live_per_location[loc][pclass] += 1
                    derived_detail_sum += 1
                except Exception:
                    continue
            if live_total == 0 and derived_detail_sum > 0:
                live_total = derived_detail_sum
            else:
                if live_total != derived_detail_sum:
                    notes.append(f"Region totals ({live_total}) differ from detail rows ({derived_detail_sum}); using region totals for overall and details for breakdown.")
        else:
            notes.append("No per-person details available from region_clients; live breakdown unavailable.")
    except Exception:
        logger.exception("Error computing Live HeadCount")
        notes.append("Failed to compute Live HeadCount; see logs.")
        live_total = live_total or 0

    # ---------- Ensure headcount is union(head_keys, live_keys) ----------
    try:
        head_keys = set(k for k in key_map_head.keys() if k)
        live_keys = set(k for k in key_map_live.keys() if k)
        union_keys = head_keys.union(live_keys)

        unified_head_per_location: Dict[str, Dict[str, int]] = {}
        for k in union_keys:
            if k in key_map_head:
                loc = key_map_head[k].get("loc") or "Unknown"
                cls = key_map_head[k].get("cls") or "contractor"
            else:
                loc = key_map_live.get(k, {}).get("loc") or "Unknown"
                cls = key_map_live.get(k, {}).get("cls") or "contractor"
            if not isinstance(loc, str) or not loc.strip():
                loc = "Unknown"
            if loc not in unified_head_per_location:
                unified_head_per_location[loc] = {"total": 0, "employee": 0, "contractor": 0}
            unified_head_per_location[loc]["total"] += 1
            unified_head_per_location[loc][cls] += 1

        if union_keys:
            head_per_location = unified_head_per_location
            head_total = len(union_keys)
    except Exception:
        logger.exception("Error reconciling headcount union with live details")

    # --- Averages from AttendanceSummary (DB) - per-location & overall (range-based) ---
    avg_headcount_last_range = None
    avg_headcount_per_site_last_range = None
    avg_by_location_last_range: Dict[str, Dict[str, Any]] = {}

    try:
        session = SessionLocal()
        # build list of days in range
        days = []
        days_count = (end_obj - start_obj).days + 1
        for i in range(0, days_count):
            days.append(start_obj + timedelta(days=i))

        loc_day_vals: Dict[str, Dict[str, List[int]]] = {}
        for d in days:
            rows = session.query(AttendanceSummary).filter(AttendanceSummary.date == d).all()
            per_loc_counts: Dict[str, Dict[str, int]] = {}
            if rows:
                for r in rows:
                    try:
                        if (r.presence_count or 0) <= 0:
                            continue
                        partition = None
                        try:
                            if r.derived and isinstance(r.derived, dict):
                                partition = r.derived.get("partition")
                        except Exception:
                            partition = None
                        loc = partition or "Unknown"
                        if not isinstance(loc, str) or not loc.strip():
                            loc = "Unknown"
                        if loc not in per_loc_counts:
                            per_loc_counts[loc] = {"employee": 0, "contractor": 0, "total": 0}
                        # classify via derived if possible
                        cls = "contractor"
                        try:
                            if r.derived and isinstance(r.derived, dict):
                                cls = classify_personnel_from_detail(r.derived)
                        except Exception:
                            cls = "contractor"
                        per_loc_counts[loc][cls] += 1
                        per_loc_counts[loc]["total"] += 1
                    except Exception:
                        continue
            for loc, counts in per_loc_counts.items():
                if loc not in loc_day_vals:
                    loc_day_vals[loc] = {"employee": [], "contractor": [], "total": []}
                loc_day_vals[loc]["employee"].append(counts.get("employee", 0))
                loc_day_vals[loc]["contractor"].append(counts.get("contractor", 0))
                loc_day_vals[loc]["total"].append(counts.get("total", 0))

        for loc, lists in loc_day_vals.items():
            emp_list = lists.get("employee", [])
            con_list = lists.get("contractor", [])
            tot_list = lists.get("total", [])
            days_counted = len(tot_list)
            if days_counted == 0:
                continue
            avg_emp = round(sum(emp_list) / float(days_counted), 2)
            avg_con = round(sum(con_list) / float(days_counted), 2)
            avg_tot = round(sum(tot_list) / float(days_counted), 2)
            avg_by_location_last_range[loc] = {
                "history_days_counted": int(days_counted),
                "avg_employee_last_7_days": _sanitize_for_json(avg_emp),
                "avg_contractor_last_7_days": _sanitize_for_json(avg_con),
                "avg_overall_last_7_days": _sanitize_for_json(avg_tot)
            }

        days_totals = []
        for d in days:
            rows = session.query(AttendanceSummary).filter(AttendanceSummary.date == d).all()
            day_total = 0
            if rows:
                for r in rows:
                    if (r.presence_count or 0) > 0:
                        day_total += 1
            days_totals.append(day_total)
        if days_totals:
            avg_headcount_last_range = round(sum(days_totals) / float(len(days_totals)), 2)
            if sites_queried and sites_queried > 0:
                avg_headcount_per_site_last_range = round((sum(days_totals) / float(len(days_totals))) / float(sites_queried), 2)
        session.close()
    except Exception:
        logger.exception("Error computing averages from AttendanceSummary")
        notes.append("Failed to compute historical averages from AttendanceSummary; partial results only.")

    # --- HISTORY AVERAGES: use region_clients.fetch_all_history (range-based) ----------
    history_emp_avg = None
    history_contractor_avg = None
    history_overall_avg = None
    history_days = 0
    history_avg_by_location: Dict[str, Dict[str, Any]] = {}
    history_today_emp = None
    history_today_con = None

    try:
        import region_clients
        if hasattr(region_clients, "fetch_all_history"):
            entries = region_clients.fetch_all_history(timeout=timeout) or []
            agg_by_date = {}
            agg_partitions_by_date = {}
            for e in entries:
                try:
                    dstr = e.get("date")
                    if not dstr:
                        continue
                    region_obj = e.get("region") if isinstance(e.get("region"), dict) else None
                    emp = None
                    con = None
                    tot = None
                    if region_obj and isinstance(region_obj, dict):
                        emp = _safe_int(region_obj.get("Employee"))
                        con = _safe_int(region_obj.get("Contractor"))
                        tot = _safe_int(region_obj.get("total")) or ((emp or 0) + (con or 0))
                    else:
                        emp = _safe_int(e.get("Employee") or (e.get("region") and e.get("region").get("Employee") if isinstance(e.get("region"), dict) else None))
                        con = _safe_int(e.get("Contractor") or (e.get("region") and e.get("region").get("Contractor") if isinstance(e.get("region"), dict) else None))
                        tot = _safe_int(e.get("total") or ((emp or 0) + (con or 0)))
                    if emp is None and con is None:
                        try:
                            robj = e.get("region") or {}
                            if isinstance(robj, dict):
                                emp = _safe_int(robj.get("Employee"))
                                con = _safe_int(robj.get("Contractor"))
                                tot = _safe_int(robj.get("total"))
                        except Exception:
                            pass
                    if emp is None and con is None:
                        continue
                    if tot is None:
                        tot = (emp or 0) + (con or 0)
                    if dstr not in agg_by_date:
                        agg_by_date[dstr] = {"employee": 0, "contractor": 0, "total": 0, "counted_regions": 0}
                    agg_by_date[dstr]["employee"] += (emp or 0)
                    agg_by_date[dstr]["contractor"] += (con or 0)
                    agg_by_date[dstr]["total"] += (tot or 0)
                    agg_by_date[dstr]["counted_regions"] += 1

                    parts = e.get("partitions") if isinstance(e.get("partitions"), dict) else {}
                    if dstr not in agg_partitions_by_date:
                        agg_partitions_by_date[dstr] = {}
                    for pname, pstat in parts.items():
                        try:
                            p_emp = _safe_int(pstat.get("Employee"))
                            p_con = _safe_int(pstat.get("Contractor"))
                            p_tot = _safe_int(pstat.get("total")) or ((p_emp or 0) + (p_con or 0))
                            if pname not in agg_partitions_by_date[dstr]:
                                agg_partitions_by_date[dstr][pname] = {"employee": 0, "contractor": 0, "total": 0}
                            agg_partitions_by_date[dstr][pname]["employee"] += (p_emp or 0)
                            agg_partitions_by_date[dstr][pname]["contractor"] += (p_con or 0)
                            agg_partitions_by_date[dstr][pname]["total"] += (p_tot or 0)
                        except Exception:
                            continue
                except Exception:
                    continue

            # history_today (if present)
            today_iso = today.isoformat()
            if today_iso in agg_by_date:
                history_today_emp = agg_by_date[today_iso].get("employee", 0)
                history_today_con = agg_by_date[today_iso].get("contractor", 0)

            # select dates within requested inclusive range
            day_vals_emp = []
            day_vals_con = []
            day_vals_tot = []
            selected_dates = []
            for i in range(0, (end_obj - start_obj).days + 1):
                dcheck = (start_obj + timedelta(days=i)).isoformat()
                entry = agg_by_date.get(dcheck)
                if entry:
                    day_vals_emp.append(entry.get("employee", 0))
                    day_vals_con.append(entry.get("contractor", 0))
                    day_vals_tot.append(entry.get("total", 0))
                    selected_dates.append(dcheck)

            if day_vals_emp:
                history_emp_avg = round(sum(day_vals_emp) / float(len(day_vals_emp)), 2)
            if day_vals_con:
                history_contractor_avg = round(sum(day_vals_con) / float(len(day_vals_con)), 2)
            if day_vals_tot:
                history_overall_avg = round(sum(day_vals_tot) / float(len(day_vals_tot)), 2)
            history_days = len(day_vals_tot)
            if history_days == 0:
                notes.append("History endpoints returned no usable rows in requested range; history averages not available.")

            # per-partition averages across the selected_dates
            partition_day_values = {}
            for d_iso in selected_dates:
                per_parts = agg_partitions_by_date.get(d_iso, {})
                for pname, pvals in per_parts.items():
                    if pname not in partition_day_values:
                        partition_day_values[pname] = {"employee": [], "contractor": [], "total": []}
                    partition_day_values[pname]["employee"].append(pvals.get("employee", 0))
                    partition_day_values[pname]["contractor"].append(pvals.get("contractor", 0))
                    partition_day_values[pname]["total"].append(pvals.get("total", 0))
            for pname, lists in partition_day_values.items():
                emp_list = lists.get("employee", [])
                con_list = lists.get("contractor", [])
                tot_list = lists.get("total", [])
                days_counted = len(tot_list)
                if days_counted == 0:
                    continue
                avg_emp = round(sum(emp_list) / float(days_counted), 2)
                avg_con = round(sum(con_list) / float(days_counted), 2)
                avg_tot = round(sum(tot_list) / float(days_counted), 2)
                history_avg_by_location[pname] = {
                    "history_days_counted": int(days_counted),
                    "avg_employee_last_7_days": _sanitize_for_json(avg_emp),
                    "avg_contractor_last_7_days": _sanitize_for_json(avg_con),
                    "avg_overall_last_7_days": _sanitize_for_json(avg_tot)
                }

            logger.debug("history: dates collected=%d partitions_sample=%d", len(selected_dates), len(history_avg_by_location))
    except Exception:
        logger.exception("Error fetching/processing history endpoints")
        notes.append("Failed to compute history averages from region history endpoints; partial results.")

    # Merge DB-derived per-location (avg_by_location_last_range) with history per-location (history_avg_by_location)
    try:
        merged_history = dict(history_avg_by_location)  # prefer history where present
        for loc, dbvals in (avg_by_location_last_range or {}).items():
            if loc in merged_history:
                continue
            try:
                merged_history[loc] = {
                    "history_days_counted": int(dbvals.get("history_days_counted") or 0),
                    "avg_employee_last_7_days": _sanitize_for_json(dbvals.get("avg_employee_last_7_days")),
                    "avg_contractor_last_7_days": _sanitize_for_json(dbvals.get("avg_contractor_last_7_days")),
                    "avg_overall_last_7_days": _sanitize_for_json(dbvals.get("avg_overall_last_7_days"))
                }
            except Exception:
                merged_history[loc] = {
                    "history_days_counted": int(dbvals.get("history_days_counted") or 0),
                    "avg_employee_last_7_days": _sanitize_for_json(dbvals.get("avg_employee_last_7_days") or None),
                    "avg_contractor_last_7_days": _sanitize_for_json(dbvals.get("avg_contractor_last_7_days") or None),
                    "avg_overall_last_7_days": _sanitize_for_json(dbvals.get("avg_overall_last_7_days") or None)
                }
        history_avg_by_location = merged_history
    except Exception:
        logger.exception("Failed to normalize history_avg_by_location")

    # Fallback: if DB-based avg empty, use history_overall_avg
    if (not avg_headcount_last_range or avg_headcount_last_range == 0) and history_overall_avg:
        try:
            avg_headcount_last_range = history_overall_avg
            avg_headcount_per_site_last_range = round(history_overall_avg / float(sites_queried), 2) if sites_queried and sites_queried > 0 else None
            notes.append("avg_headcount_last_range derived from region history endpoints due to missing AttendanceSummary historical data.")
        except Exception:
            pass

    # --- compute percentages (head/live vs CCURE reported)
    def safe_pct(n, denom):
        try:
            if n is None or denom is None:
                return None
            if float(denom) == 0.0:
                return None
            return round((float(n) / float(denom)) * 100.0, 2)
        except Exception:
            return None

    cc_emp_denom = reported_active_emps
    cc_con_denom = reported_active_contractors
    cc_total_denom = None
    if isinstance(cc_emp_denom, int) and isinstance(cc_con_denom, int):
        cc_total_denom = cc_emp_denom + cc_con_denom

    head_emp_total = sum(v.get("employee", 0) for v in head_per_location.values())
    head_con_total = sum(v.get("contractor", 0) for v in head_per_location.values())
    live_emp_total = sum(v.get("employee", 0) for v in live_per_location.values())
    live_con_total = sum(v.get("contractor", 0) for v in live_per_location.values())

    head_emp_pct_vs_ccure_today = _sanitize_for_json(safe_pct(head_emp_total, cc_emp_denom))
    head_contractor_pct_vs_ccure_today = _sanitize_for_json(safe_pct(head_con_total, cc_con_denom))
    head_overall_pct_vs_ccure_today = _sanitize_for_json(safe_pct(head_total, cc_total_denom))

    live_emp_pct_vs_ccure_today = _sanitize_for_json(safe_pct(live_emp_total, cc_emp_denom))
    live_contractor_pct_vs_ccure_today = _sanitize_for_json(safe_pct(live_con_total, cc_con_denom))
    live_overall_pct_vs_ccure_today = _sanitize_for_json(safe_pct(live_total, cc_total_denom))

    history_emp_pct_vs_ccure = _sanitize_for_json(safe_pct(history_emp_avg, cc_emp_denom))
    history_contractor_pct_vs_ccure = _sanitize_for_json(safe_pct(history_contractor_avg, cc_con_denom))
    history_overall_pct_vs_ccure = _sanitize_for_json(safe_pct(history_overall_avg, cc_total_denom))

    history_today_emp_pct_vs_ccure = _sanitize_for_json(safe_pct(history_today_emp, cc_emp_denom))
    history_today_contractor_pct_vs_ccure = _sanitize_for_json(safe_pct(history_today_con, cc_con_denom))

    # Final result
    result = {
        "date": today.isoformat(),
        "headcount": {
            "total_visited_today": int(head_total),
            "employee": int(head_emp_total),
            "contractor": int(head_con_total),
            "by_location": { loc: {"total": int(stats.get("total", 0)), "employee": int(stats.get("employee", 0)), "contractor": int(stats.get("contractor", 0))} for loc, stats in head_per_location.items() }
        },
        "live_headcount": {
            "currently_present_total": int(live_total),
            "employee": int(live_emp_total),
            "contractor": int(live_con_total),
            "by_location": { loc: {"total": int(stats.get("total", 0)), "employee": int(stats.get("employee", 0)), "contractor": int(stats.get("contractor", 0))} for loc, stats in live_per_location.items() }
        },
        "ccure_active": {
            "ccure_active_employees_reported": _safe_int(reported_active_emps),
            "ccure_active_contractors_reported": _safe_int(reported_active_contractors)
        },
        "averages": {
            "head_emp_pct_vs_ccure_today": head_emp_pct_vs_ccure_today,
            "head_contractor_pct_vs_ccure_today": head_contractor_pct_vs_ccure_today,
            "headcount_overall_pct_vs_ccure_today": head_overall_pct_vs_ccure_today,
            "live_employee_pct_vs_ccure": live_emp_pct_vs_ccure_today,
            "live_contractor_pct_vs_ccure": _sanitize_for_json(safe_pct(live_con_total, cc_con_denom)),
            "live_overall_pct_vs_ccure": live_overall_pct_vs_ccure_today,
            # range-keys (kept for compatibility)
            "avg_headcount_last_7_days": _sanitize_for_json(avg_headcount_last_range),
            "avg_headcount_per_site_last_7_days": _sanitize_for_json(avg_headcount_per_site_last_range),
            "avg_live_per_site": _sanitize_for_json(round(live_total / sites_queried, 2) if sites_queried and sites_queried > 0 else None),

            # history endpoint range averages
            "history_avg_employee_last_7_days": _sanitize_for_json(history_emp_avg),
            "history_avg_contractor_last_7_days": _sanitize_for_json(history_contractor_avg),
            "history_avg_overall_last_7_days": _sanitize_for_json(history_overall_avg),
            "history_days_counted": int(history_days) if history_days is not None else None,
            "history_employee_pct_vs_ccure": history_emp_pct_vs_ccure,
            "history_contractor_pct_vs_ccure": history_contractor_pct_vs_ccure,
            "history_overall_pct_vs_ccure": history_overall_pct_vs_ccure,

            # history-today specific metrics (if present)
            "history_today_employee_count": int(history_today_emp) if history_today_emp is not None else None,
            "history_today_contractor_count": int(history_today_con) if history_today_con is not None else None,
            "history_today_employee_pct_vs_ccure": history_today_emp_pct_vs_ccure,
            "history_today_contractor_pct_vs_ccure": history_today_contractor_pct_vs_ccure,

            "avg_by_location_last_7_days": _sanitize_for_json(avg_by_location_last_range),
            "history_avg_by_location_last_7_days": _sanitize_for_json(history_avg_by_location)
        },
        "sites_queried": int(sites_queried),
        "notes": " | ".join(notes) if notes else f"Computed over range {start_obj.isoformat()} -> {end_obj.isoformat()}"
    }

    return _sanitize_for_json(result)


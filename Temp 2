-- Parameters: change dates as required
DECLARE @StartDate DATE = '2025-05-01';
DECLARE @EndDate   DATE = CAST(GETDATE() AS DATE); -- inclusive

;WITH RawSwipes AS (
    SELECT 
        LocaleMessageTime = DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]),
        t1.ObjectName1,
        t1.PartitionName2 AS Location,
        t1.ObjectName2,
        t1.MessageType,
        t1.XmlGUID,
        t2.*,
        t3.Name AS PersonnelType,
        SCard.[value] AS SCardValue,
        t5_rej.[value] AS Rejection_Type,
        t5_admit.[value] AS AdmitCode,
        t5_dir.[value] AS Direction,
        /* three-stage CardNumber resolution */
        CardNumber = COALESCE(
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
            SCard.[value]
        )
    FROM
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLog] AS t1
    LEFT JOIN
        [ACVSCore].[Access].[Personnel] AS t2
        ON t1.ObjectIdentity1 = t2.GUID
    LEFT JOIN
        [ACVSCore].[Access].[PersonnelType] AS t3
        ON t2.[PersonnelTypeId] = t3.[ObjectID]
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection', 'OutDirection')
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
    LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
    ) AS SCard
    ON t1.XmlGUID = SCard.GUID
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] AS t5_rej
        ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
    WHERE 
        t1.MessageType IN ('CardAdmitted','CardRejected')
        AND t3.Name IN ('Employee','Terminated Personnel')  -- adjust if you want contractors included
        AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) BETWEEN @StartDate AND @EndDate
        AND COALESCE(
                TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
                TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
                SCard.[value]
            ) IS NOT NULL
),

SwipeEnriched AS (
    SELECT
        LocaleMessageTime,
        ObjectName1,
        Location,
        ObjectName2,
        MessageType,
        XmlGUID,
        CardNumber,
        Rejection_Type,
        AdmitCode,
        Direction,
        PersonnelType,
        EmployeeID = CASE 
                        WHEN PersonnelType IN ('Contractor','Terminated Contractor') THEN Text12 
                        ELSE CAST(Int1 AS NVARCHAR(50)) 
                     END,
        EmployeeName = COALESCE(NULLIF(Text2,''), NULLIF(Text1,''), NULLIF(DisplayName,''), CAST(Int1 AS NVARCHAR(50)))
    FROM RawSwipes
),

CardEmployeeAgg AS (
    SELECT
        EmployeeID,
        EmployeeName,
        PersonnelType,
        CardNumber,
        FirstSeen = MIN(LocaleMessageTime),
        LastSeen  = MAX(LocaleMessageTime),
        TotalSwipes = COUNT(*) ,
        AdmitCount = SUM(CASE WHEN MessageType = 'CardAdmitted' THEN 1 ELSE 0 END),
        RejectionCount = SUM(CASE WHEN MessageType = 'CardRejected' OR Rejection_Type IS NOT NULL THEN 1 ELSE 0 END)
    FROM SwipeEnriched
    GROUP BY EmployeeID, EmployeeName, PersonnelType, CardNumber
)

-- Put CTE result into a temp table so we can run multiple result-set queries below
SELECT * 
INTO #CardEmployeeAgg
FROM CardEmployeeAgg;

-- Build card-level summary into a temp table
SELECT
    cae.CardNumber,
    TotalSwipes = SUM(cae.TotalSwipes),
    TotalAdmits  = SUM(cae.AdmitCount),
    TotalRejections = SUM(cae.RejectionCount),
    DistinctEmployeesAssigned = COUNT(DISTINCT cae.EmployeeID)
INTO #CardSummaryBasic
FROM #CardEmployeeAgg cae
GROUP BY cae.CardNumber;

-- Build EmployeesList separately (distinct employee per card) and join back
SELECT
    cs.CardNumber,
    cs.TotalSwipes,
    cs.TotalAdmits,
    cs.TotalRejections,
    cs.DistinctEmployeesAssigned,
    EmployeesList = ISNULL((
        SELECT STRING_AGG(emp, ', ') 
        FROM (
            SELECT DISTINCT CONCAT(ISNULL(ce.EmployeeName,'Unknown'),' (',ISNULL(ce.EmployeeID,'-'),')') as emp
            FROM #CardEmployeeAgg ce
            WHERE ce.CardNumber = cs.CardNumber
        ) d
    ), '') 
INTO #CardSummary
FROM #CardSummaryBasic cs
ORDER BY cs.TotalRejections DESC, cs.TotalSwipes DESC;

-- Cards used by more than one employee
SELECT
    CardNumber,
    DistinctEmployeesAssigned,
    EmployeesList
INTO #DuplicateCardAssignments
FROM #CardSummary
WHERE DistinctEmployeesAssigned > 1;

--------------------------------------------------------------------------------
-- 1) Employee-wise card details (one row per employee + card)
--------------------------------------------------------------------------------
SELECT
    EmployeeID,
    EmployeeName,
    PersonnelType,
    CardNumber,
    FirstSeen,
    LastSeen,
    TotalSwipes,
    AdmitCount,
    RejectionCount
FROM #CardEmployeeAgg
ORDER BY EmployeeName, CardNumber;

--------------------------------------------------------------------------------
-- 2) Card rejection summary (card-level)
--    shows cards with highest rejection counts first
--------------------------------------------------------------------------------
SELECT
    CardNumber,
    TotalSwipes,
    TotalAdmits,
    TotalRejections,
    DistinctEmployeesAssigned,
    EmployeesList
FROM #CardSummary
ORDER BY TotalRejections DESC, TotalSwipes DESC;

--------------------------------------------------------------------------------
-- 3) Duplicate card assignments (same card assigned to multiple employees)
--------------------------------------------------------------------------------
SELECT
    CardNumber,
    DistinctEmployeesAssigned,
    EmployeesList
FROM #DuplicateCardAssignments
ORDER BY DistinctEmployeesAssigned DESC, CardNumber;

-- cleanup (optional)
DROP TABLE IF EXISTS #CardEmployeeAgg;
DROP TABLE IF EXISTS #CardSummaryBasic;
DROP TABLE IF EXISTS #CardSummary;
DROP TABLE IF EXISTS #DuplicateCardAssignments;












When I run this Query We got 

Msg 102, Level 15, State 1, Line 111
Incorrect syntax near ','.

Completion time: 2025-08-22T11:55:44.7915414+05:30


-- Parameters: change dates as required
DECLARE @StartDate DATE = '2025-05-01';
DECLARE @EndDate   DATE = CAST(GETDATE() AS DATE); -- inclusive

;WITH RawSwipes AS (
    -- Based on your CombinedQuery but expanded to include rejects
    SELECT 
        LocaleMessageTime = DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]),
        t1.ObjectName1,
        t1.PartitionName2 AS Location,
        t1.ObjectName2,
        t1.MessageType,
        t1.XmlGUID,
        t2.*,
        t3.Name AS PersonnelType,
        SCard.[value] AS SCardValue,
        t5_rej.[value] AS Rejection_Type,
        t5_admit.[value] AS AdmitCode,
        t5_dir.[value] AS Direction,
        -- three-stage CardNumber resolution from your original query
        CardNumber = COALESCE(
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
            SCard.[value]
        )
    FROM
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLog] AS t1
    LEFT JOIN
        [ACVSCore].[Access].[Personnel] AS t2
        ON t1.ObjectIdentity1 = t2.GUID
    LEFT JOIN
        [ACVSCore].[Access].[PersonnelType] AS t3
        ON t2.[PersonnelTypeId] = t3.[ObjectID]
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection', 'OutDirection')
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
    LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
    ) AS SCard
    ON t1.XmlGUID = SCard.GUID
    LEFT JOIN
        [ACVSUJournal_00010021].[dbo].[ACVSUJournalLogxmlShred] AS t5_rej
        ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
    -- include both admits and rejects
    WHERE 
        t1.MessageType IN ('CardAdmitted','CardRejected')
        AND t3.Name IN ('Employee','Terminated Personnel')  -- keep employee-focused; remove or extend if you want contractors too
        AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) BETWEEN @StartDate AND @EndDate
        AND COALESCE(
                TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
                TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
                SCard.[value]
            ) IS NOT NULL
),

-- Normalize employee display name (adapt as needed if your Personnel table has other name fields)
SwipeEnriched AS (
    SELECT
        LocaleMessageTime,
        ObjectName1,
        Location,
        ObjectName2,
        MessageType,
        XmlGUID,
        CardNumber,
        Rejection_Type,
        AdmitCode,
        Direction,
        PersonnelType,
        EmployeeID = CASE 
                        WHEN PersonnelType IN ('Contractor','Terminated Contractor') THEN Text12 
                        ELSE CAST(Int1 AS NVARCHAR(50)) 
                     END,
        -- try common name columns; adapt to your schema if you have FirstName/LastName/DisplayName
        EmployeeName = COALESCE(NULLIF(Text2,''), NULLIF(Text1,''), NULLIF(DisplayName,''), CAST(Int1 AS NVARCHAR(50)))
    FROM RawSwipes
),

-- Per card per employee aggregates
CardEmployeeAgg AS (
    SELECT
        EmployeeID,
        EmployeeName,
        PersonnelType,
        CardNumber,
        FirstSeen = MIN(LocaleMessageTime),
        LastSeen  = MAX(LocaleMessageTime),
        TotalSwipes = COUNT(*) ,
        AdmitCount = SUM(CASE WHEN MessageType = 'CardAdmitted' THEN 1 ELSE 0 END),
        RejectionCount = SUM(CASE WHEN MessageType = 'CardRejected' OR Rejection_Type IS NOT NULL THEN 1 ELSE 0 END)
    FROM SwipeEnriched
    GROUP BY EmployeeID, EmployeeName, PersonnelType, CardNumber
),

-- Card-level summary across employees
CardSummary AS (
    SELECT
        CardNumber,
        TotalSwipes = SUM(TotalSwipes),
        TotalAdmits  = SUM(AdmitCount),
        TotalRejections = SUM(RejectionCount),
        DistinctEmployeesAssigned = COUNT(DISTINCT EmployeeID),
        EmployeesList = STRING_AGG(DISTINCT CONCAT(ISNULL(EmployeeName, 'Unknown'),' (',ISNULL(EmployeeID,'-'),')'), ', ') WITHIN GROUP (ORDER BY EmployeeName)
    FROM CardEmployeeAgg
    GROUP BY CardNumber
),

-- Cards used by more than one employee (duplicate assignment)
DuplicateCardAssignments AS (
    SELECT
        CardNumber,
        DistinctEmployeesAssigned,
        EmployeesList
    FROM CardSummary
    WHERE DistinctEmployeesAssigned > 1
)

--------------------------------------------------------------------------------
-- 1) Employee-wise card details (one row per employee + card)
--------------------------------------------------------------------------------
SELECT
    EmployeeID,
    EmployeeName,
    PersonnelType,
    CardNumber,
    FirstSeen,
    LastSeen,
    TotalSwipes,
    AdmitCount,
    RejectionCount
FROM CardEmployeeAgg
ORDER BY EmployeeName, CardNumber;

--------------------------------------------------------------------------------
-- 2) Card rejection summary (card-level)
--    shows cards with highest rejection counts first
--------------------------------------------------------------------------------
SELECT
    CardNumber,
    TotalSwipes,
    TotalAdmits,
    TotalRejections,
    DistinctEmployeesAssigned,
    EmployeesList
FROM CardSummary
ORDER BY TotalRejections DESC, TotalSwipes DESC;

--------------------------------------------------------------------------------
-- 3) Duplicate card assignments (same card assigned to multiple employees)
--------------------------------------------------------------------------------
SELECT
    CardNumber,
    DistinctEmployeesAssigned,
    EmployeesList
FROM DuplicateCardAssignments
ORDER BY DistinctEmployeesAssigned DESC, CardNumber;



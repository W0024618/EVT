Currently issue is we got diffrent diffrent count so we need to fix this issue ..
For Pune check logic and and fix issue carefully.

http://10.199.22.57:3008/api/occupancy/live-summary

{
  "success": true,
  "today": {
    "total": 1059,
    "Employee": 948,
    "Contractor": 111
  },
  "realtime": {
    "Pune": {
      "total": 366,
      "Employee": 313,
      "Contractor": 53,
      "floors": {
        "Podium Floor": 281,
        "Tower B": 54,
        "2nd Floor": 31
      },
      "zones": {
        "Reception Area": 19,
        "Tower B GYM": 5,
        "2nd Floor, Pune": 31,
        "Red Zone": 67,
        "Yellow Zone": 86,
        "Yellow Zone - Outer Area": 18,
        "Tower B": 49,
        "Green Zone": 31,
        "Orange Zone - Outer Area": 2,
        "Orange Zone": 43,
        "Assembly Area": 11,
        "Red Zone - Outer Area": 4
      }

Same Time this API give Diffrent data so we need to fix this data...

http://10.199.22.57:3010/api/live-occupancy
id: 1755778943367
data: {"asOf":"2025-08-21T12:22:23.359Z","summary":[{"zone":"Yellow Zone - Outer Area","count":12},{"zone":"Reception Area","count":3},{"zone":"Tower B","count":42},{"zone":"Orange Zone","count":49},{"zone":"Green Zone","count":30},{"zone":"Yellow Zone","count":91},{"zone":"Red Zone","count":72},{"zone":"2nd Floor, Pune","count":31},{"zone":"Tower B GYM","count":5},{"zone":"Red Zone - Outer Area","count":2},{"zone":"Orange Zone - Outer Area","count":2}],"zoneBreakdown":[{"zone":"Yellow Zone - Outer Area","Property Management":1,"Employee":9,"Visitor":1,"Contractor":1,"total":12},{"zone":"Reception Area","Contractor":1,"Employee":1,"Property Management":1,"total":3},{"zone":"Tower B","Employee":40,"Contractor":1,"Property Management":1,"total":42},{"zone":"Orange Zone","Visitor":8,"Employee":40,"Contractor":1,"total":49},{"zone":"Green Zone","Employee":23,"Temp Badge":2,"Visitor":2,"Contractor":3,"total":30},{"zone":"Yellow Zone","Employee":79,"Visitor":3,"Property Management":5,"Temp Badge":1,"Contractor":3,"total":91},{"zone":"Red Zone","Temp Badge":2,"Employee":64,"Property Management":5,"Contractor":1,"total":72},{"zone":"2nd Floor, Pune","Employee":28,"Visitor":1,"Property Management":1,"Temp Badge":1,"total":31},{"zone":"Tower B GYM","Employee":4,"Visitor":1,"total":5},{"zone":"Red Zone - Outer Area","Employee":2,"total":2},{"zone":"Orange Zone - Outer Area","Employee":2,"total":2}],

This APi got Diffrent Count and 


D:\DASHBOARD\swipeData\employee-ai-insights\controllers\liveOccupancyController.js

const { DateTime }   = require('luxon');
// const { poolConnect, pool, sql } = require('../config/db');
const { sql, getPool } = require('../config/db');

const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

const ertMembers = require('../data/puneErtMembers.json');

// track which door‚Üízone keys we've already warned on
const warnedKeys = new Set();

//update
function getTodayString() {
  return DateTime.now()
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');
}




function normalizeZoneKey(rawDoor, rawDir) {
  // 1) Ensure it‚Äôs a string and trim whitespace
  let door = String(rawDoor || '').trim();

  // 2) Strip any "_HH:MM:SS" or "_XX:XX:XX" suffix (hex codes or times at end)
  door = door.replace(/_[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');

  // 3) Collapse multiple spaces into one, then uppercase
  door = door.replace(/\s+/g, ' ').toUpperCase();

  // 4) Pick the direction token exactly as doorZoneMap expects
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';

  return `${door}___${dir}`;
}

/** Normalize "Last, First" or "First Last" ‚Üí lowercase "first last" */
function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

/**
 * Map a swipe‚Äôs door+direction ‚Üí zone using exactly doorZoneMap.
 * If not in doorZoneMap, log once and return "Unknown Zone".
 * If OutDirection but not "Out of office", strip off " Zone" suffix.
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  const zone = doorZoneMap[key];

  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('‚õî Unmapped door‚Äìdirection key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // If it's an OutDirection but not the real "Out of office", remove trailing " Zone"
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    return zone.replace(/\s+Zone$/i, '');
  }

  return zone;
}


async function fetchNewEvents(since) {
  // await the shared pool promise instead of poolConnect
  const pool = await getPool();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

// console.log('üîé [Pune] fetchNewEvents called with since =', since.toISOString());
  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
       


        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >@since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // console.log(`üì• [Pune] fetched ${recordset.length} rows:`,
    // recordset.map(r => r.LocaleMessageTime.toISOString()));

  return recordset;
}



async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw  = mapDoorToZone(Door, Direction);
    const zone     = zoneRaw && zoneRaw.toLowerCase();

 // ‚îÄ‚îÄ‚îÄ 1) If we can‚Äôt map door+direction to a valid zone, skip this event entirely. ‚îÄ‚îÄ‚îÄ
    //     (prevents "Unknown Zone" from ever entering uniquePeople/current)
    if (zoneRaw === 'Unknown Zone') {
      // We warned once in mapDoorToZone already; just ignore.
      continue;
    }

    const zoneLower = zoneRaw.toLowerCase();



    // 1) True "Out of office" ‚Üí full eviction
    if (Direction === 'OutDirection' && zone === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }



    // if (Direction === 'OutDirection') {
    //   // Only ‚ÄúOuter Area‚Äù swipes get to stay in current headcount.
    //   if (zoneRaw.endsWith('Outer Area')) {

    //     uniquePeople.set(dedupKey, PersonnelType);
    //     current[dedupKey] = {
    //       Dateonly, Swipe_Time,
    //       EmployeeID, ObjectName1, CardNumber,
    //       PersonnelType,
    //       zone: zoneRaw,
    //       door: Door,
    //       Direction
    //     };
    //   } else {
    //     // Any other OutDirection (TURNSTILE, lobby exits, etc.) = full eviction
    //     uniquePeople.delete(dedupKey);
    //     delete current[dedupKey];
    //   }
    //   continue;
    // }



    
if (Direction === 'OutDirection') {
  // Compare lowercased zone safely
  const zoneLower = String(zone).toLowerCase();

  // Only full eviction when it's the real "Out of office"
  if (zoneLower === 'out of office') {
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  } else {
    // Keep the person in current headcount for all other OutDirection cases
    // Update their last-seen metadata (zone, door, Direction)
    uniquePeople.set(dedupKey, PersonnelType);
    current[dedupKey] = {
      Dateonly, Swipe_Time,
      EmployeeID, ObjectName1, CardNumber,
      PersonnelType,
      zone: zoneRaw,
      door: Door,
      Direction
    };
  }
  continue;
}



    // 3) InDirection ‚Üí normal check-in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 4) Catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // live headcounts (only from uniquePeople, which has already evicted all true out-of-office)
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build zone‚Üípeople map, but filter out any out-of-office at this final step too
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    const zKey = emp.zone.toLowerCase();
    if (zKey === 'out of office') continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  // zoneDetails
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ zone, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // floorBreakdown
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }


  const ertStatus = Object.fromEntries(
    Object.entries(ertMembers).map(([role, members]) => {
      const list = members.map(m => {
        // pick the correct name field (JSON uses "Name")
        const rawName = m.name || m.Name;
        const expected = normalizePersonName(rawName);


        // find a matching swipe in current[]
        const matchEvt = Object.values(current).find(e => {
          return normalizePersonName(e.ObjectName1) === expected;
        });

        return {
          ...m,
          present: !!matchEvt,
          zone:    matchEvt ? matchEvt.zone : null
        };
     });
      return [ role, list ];
    })
  );



  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
     ertStatus,
  

  personnelBreakdown: (() => {
    const map = new Map();
    // uniquePeople: Map<dedupKey, PersonnelType>
    for (const pt of uniquePeople.values()) {
      map.set(pt, (map.get(pt) || 0) + 1);
    }
    return Array.from(map, ([personnelType, count]) => ({ personnelType, count }));
  })(),



  };
}


/**
 * Build ‚Äúvisited today‚Äù from the same in‚Äêmemory stream
 */
function buildVisitedToday(allEvents) {
  // ‚ÄúToday‚Äù in Asia/Kolkata, formatted as ‚Äúyyyy-MM-dd‚Äù
  const today = DateTime.now()
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // Use evt.Dateonly (already ‚Äúyyyy-MM-dd‚Äù in local zone) to pick out today's InDirection swipes
  const todayIns = allEvents.filter(evt => {
    return (
      evt.Direction === 'InDirection' &&
      evt.Dateonly === today
    );
  });

  // Dedupe by PersonGUID ‚Üí keep the latest swipe
  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());

  // Separate employees vs contractors
  const employees = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}



//update for live pool 

exports.getLiveOccupancy = async (req, res) => {
  try {
    await getPool();

    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date(Date.now() - 24*60*60*1000);
    const events = [];

    const push = async () => {
      try {
        const fresh = await fetchNewEvents(lastSeen);
        if (fresh.length) {
          lastSeen = new Date();
          events.push(...fresh);
        }
        const occupancy  = await buildOccupancy(events);
        const todayStats = buildVisitedToday(events);

        occupancy.totalVisitedToday = todayStats.total;
        occupancy.visitedToday      = {
          employees:   todayStats.employees,
          contractors: todayStats.contractors,
          total:       todayStats.total
        };

        const sid = Date.now();
        res.write(`id: ${sid}\n`);
        res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
        if (typeof res.flush === 'function') res.flush();

      } catch (err) {
        console.error('‚ö†Ô∏è Error in push():', err);
        // If it‚Äôs a timeout, force a pool reset so next push re-connects
        if (err.name === 'TimeoutError') {
          const { poolPromise: resetPool } = require('../config/db');
          resetPool = null;
        }
      }
    };

    await push();
    const timer = setInterval(push, 2000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};





// data/doorZoneMap.js


const doorZoneMap = {


  // Podium / Red
  "APAC_IN_PUN_PODIUM_RED_IDF ROOM-02-RESTRICTED DOOR___InDirection":                 "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___InDirection":                            "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___OutDirection":                           "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___InDirection":                 "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___OutDirection":                "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___InDirection":                                "Red Zone",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___OutDirection":                               "Red Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___InDirection":             "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___OutDirection":            "Reception Area",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___InDirection":         "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___OutDirection":        "Yellow Zone - Outer Area",

  // Podium / Yellow
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___InDirection":                              "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___OutDirection":                             "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MDF RESTRICTED DOOR___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_IT STORE ROOM-DOOR RESTRICTED DOOR___InDirection":        "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_REPRO STORE-DOOR RESTRICTED DOOR___InDirection":           "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_CONTROL PANEL ROOM-DOOR RESTRICTED DOOR___InDirection":   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_PREACTION ROOM-DOOR RESTRICTED DOOR___InDirection":        "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_TESTING LAB-DOOR RESTRICTED DOOR___InDirection":           "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___OutDirection":                      "Reception Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___InDirection":                   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___OutDirection":                  "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___InDirection":                               "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___OutDirection":                              "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___OutDirection":                      "Yellow Zone - Outer Area",

  // Podium / Green
  "APAC_IN_PUN_PODIUM_GREEN-_IDF ROOM 1-RESTRICTED DOOR___InDirection":                "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 1-DOOR RESTRICTED DOOR___InDirection":            "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 2-DOOR RESTRICTED DOOR___InDirection":            "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_LOCKER HR STORE 3-DOOR RESTRICTED DOOR___InDirection":      "Green Zone",

    "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___OutDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___InDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___InDirection":                        "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___OutDirection":                       "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___InDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___OutDirection":                               "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___InDirection":                        "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___OutDirection":                       "Reception Area",

  // Podium / Orange
  "APAC_IN_PUN_PODIUM_ST4 DOOR 1 (ORANGE)___InDirection":                               "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___InDirection":                      "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___OutDirection":                     "Reception Area",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___InDirection":                              "Orange Zone",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___OutDirection":                             "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___InDirection":                       "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___OutDirection":                      "Orange Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ORANGE-IDF ROOM 3-RESTRICTED DOOR___InDirection":                "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___InDirection":            "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___OutDirection":           "Orange Zone - Outer Area",

  // Podium / GSOC door
  "APAC_IN_PUN_PODIUM_GSOC DOOR RESTRICTED DOOR___InDirection":                         "Yellow Zone",

  // Podium / Main Right & Left Entry
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___InDirection":                  "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___OutDirection":                 "Assembly Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___InDirection":                   "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___OutDirection":                  "Assembly Area",

  // Podium / Turnstiles
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 3-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-OUT DOOR___OutDirection":                          "Out of office",

  // 2nd-Floor / IDF + UPS/ELEC + Reception‚ÜíWorkstation + LiftLobby‚ÜíReception
  "APAC_IN_PUN_2NDFLR_IDF ROOM_10:05:86 RESTRICTED DOOR___InDirection":                  "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_UPS/ELEC ROOM RESTRICTED DOOR___InDirection":                      "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___InDirection":                       "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___OutDirection":                      "Out of office",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___InDirection":                   "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___OutDirection":                  "2nd Floor, Pune",

  // Tower B
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___InDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___OutDirection":                              "Out of office",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___InDirection":                                   "Tower B",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection":                                  "Out of office",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___InDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___OutDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___InDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___OutDirection":                              "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___InDirection":                              "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___OutDirection":                             "Tower B",
  "APAC_IN_PUN_TOWER B_IBMS ROOM___InDirection":                                         "Tower B",
  "APAC_IN_PUN_TOWER B_UPS ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_MDF ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_PAC ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_IT STORE ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_GYM ROOM___InDirection": "Tower B GYM",
  "APAC_IN_PUN_TOWER B_GYM ROOM___OutDirection": "Tower B GYM",
  "APAC_IN_PUN_TOWER B_SITE OPS STORE___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_INNOVATION CENTER___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_INNOVATION CENTER___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MOBILE LAB___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MOBILE LAB___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_CEC DOOR___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_CEC DOOR___InDirection": "Tower B",

};

module.exports = doorZoneMap;








D:\DASHBOARD\apac-occupancy-backend\src\controllers\occupancy.controller.js


//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\controllers\occupancy.controller.js

const service = require('../services/occupancy.service');

const {
  doorMap,
  normalizedDoorZoneMap,
  doorZoneMap,
  zoneFloorMap,
  normalizeDoorName
} = require('../utils/doorMap');


function isEmployeeType(pt) {
  return ['Employee','Terminated Employee','Terminated Personnel'].includes(pt);
}

function lookupFloor(partition, rawDoor, direction, unmapped) {
  const norm = normalizeDoorName(rawDoor);
  const key  = `${norm}___${direction}`;

  // 1) Try normalized lookup
  const zone = normalizedDoorZoneMap[key];
  if (zone) {
    const f = zoneFloorMap[zone];
    // if zone has a known floor -> return it
    if (f) return f;
    // zone exists but has no floor (e.g. "Out of office") -> treat as known but Unknown floor
    // return immediately to avoid falling back to per-partition doorMap and marking as unmapped
    return 'Unknown';
  }


  

  // 2) Fallback to per-partition doorMap
  const entry = doorMap.find(d =>
    d.normalizedDoor === norm && d.partition === partition
  );
  if (entry) {
    const fl = direction === 'InDirection'
      ? entry.inDirectionFloor
      : entry.outDirectionFloor;
    if (fl) return fl;
  }

  // 3) Nothing matched ‚Üí record & return Unknown
  unmapped.add(`${partition}|${rawDoor}`);
  return 'Unknown';
}


function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeDoorName(rawDoor) + '___' + (rawDir === 'InDirection' ? 'InDirection' : 'OutDirection');
  const zone = normalizedDoorZoneMap[key];
  if (!zone) return 'Unknown Zone';
  // for OutDirection that aren‚Äôt true ‚ÄúOut of office‚Äù, strip trailing ‚Äú Zone‚Äù
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    return zone.replace(/\s+Zone$/i, '');
  }
  return zone;
}



exports.getLiveOccupancy = async (req,res) => {
  try {
    const data = await service.fetchLiveOccupancy();
    res.json({ success:true, count:data.length, data });
  } catch(e) {
    console.error(e);
    res.status(500).json({ success:false, message:'Live fetch failed' });
  }
};




// exports.getLiveSummary = async (req,res) => {
//   try {
//     const swipes = await service.fetchLiveOccupancy();

//     // first swipe per person = TODAY
//     const first = {};
//     swipes.forEach(r => {
//       const t = new Date(r.LocaleMessageTime).getTime();
//       if (!first[r.PersonGUID] || t < new Date(first[r.PersonGUID].LocaleMessageTime).getTime()) {
//         first[r.PersonGUID] = r;
//       }
//     });
//     const today = { total:0, Employee:0, Contractor:0 };
//     Object.values(first).forEach(r => {
//       today.total++;
//       if (isEmployeeType(r.PersonnelType)) today.Employee++;
//       else today.Contractor++;
//     });

//     // last swipe per person for realtime
//     const last = {};
//     swipes.forEach(r => {
//       const t = new Date(r.LocaleMessageTime).getTime();
//       if (!last[r.PersonGUID] || t > new Date(last[r.PersonGUID].LocaleMessageTime).getTime()) {
//         last[r.PersonGUID] = r;
//       }
//     });

//     const realtime = {};
//     const unmapped = new Set();




//     Object.values(last).forEach(r => {
//       const p = r.PartitionName2;

//       // ‚îÄ‚îÄ Pune gets the more advanced In/Out eviction logic ‚îÄ‚îÄ
//       if (p === 'Pune') {
//         const zoneRaw = mapDoorToZone(r.Door, r.Direction);

//         // 1) Unknown keys ‚Üí drop
//         if (zoneRaw === 'Unknown Zone') return;

//         // 2) True ‚ÄúOut of office‚Äù ‚Üí full drop
//         if (r.Direction === 'OutDirection' && zoneRaw === 'Out of office') {
//           return;
//         }

//         // 3) Any other OutDirection ‚Üí only keep if it‚Äôs ‚Äú‚Ä¶Outer Area‚Äù
//         if (r.Direction === 'OutDirection' && !zoneRaw.endsWith('Outer Area')) {
//           return;
//         }

//         // 4) now safe to count
//         if (!realtime[p]) realtime[p] = { total:0, Employee:0, Contractor:0, floors:{} };
//         realtime[p].total++;
//         if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
//         else                                  realtime[p].Contractor++;

//         // 5) floor‚Äêbucket as usual
//         const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
//        if (fl !== 'Unknown') {
//           realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
//         }
//         return;
//       }

//       // ‚îÄ‚îÄ All other partitions keep your existing logic ‚îÄ‚îÄ
//       // (the original ‚Äúdrop only Out of office‚Äù snippet)
//       const normKey = normalizeDoorName(r.Door) + '___' + r.Direction;
//       let zone = normalizedDoorZoneMap[normKey];
//       if (!zone) {
//         const entry = doorMap.find(d =>
//           d.normalizedDoor === normalizeDoorName(r.Door) &&
//           d.partition === p
//         );
//         zone = entry
//           ? (r.Direction === 'InDirection'
//               ? normalizedDoorZoneMap[`${entry.normalizedDoor}___InDirection`]
//               : normalizedDoorZoneMap[`${entry.normalizedDoor}___OutDirection`])
//           : null;
//       }
//      if (zone === 'Out of office') return;

//       if (!realtime[p]) realtime[p] = { total:0, Employee:0, Contractor:0, floors:{} };
//       realtime[p].total++;
//       if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
//       else                                  realtime[p].Contractor++;

//       const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
//       if (fl !== 'Unknown') {
//         realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
//       }
//     });


//     // Log to server console for quick dev feedback:
//     if (unmapped.size) console.warn('Unmapped doors:', Array.from(unmapped));

//     res.json({
//       success:    true,
//       today,
//       realtime,
//       // expose the raw list of partition|door keys that had no mapping:
//       unmapped:   Array.from(unmapped),
//       details:    Object.values(last)
//     });

//   } catch (e) {
//     console.error(e);
//     res.status(500).json({ success:false, message:'Summary failed' });
//   }
// };



exports.getLiveSummary = async (req,res) => {
  try {
    const swipes = await service.fetchLiveOccupancy();

    // --- KEEP TODAY ONLY (Asia/Kolkata) ---
    const todayKolkata = new Date().toLocaleDateString('en-CA', { timeZone: 'Asia/Kolkata' });
    const swipesToday = swipes.filter(s => {
      if (!s.LocaleMessageTime) return false;
      const d = new Date(s.LocaleMessageTime);
      const dStr = d.toLocaleDateString('en-CA', { timeZone: 'Asia/Kolkata' });
      return dStr === todayKolkata;
    });

    // first swipe per person = TODAY
    const first = {};
    swipesToday.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!first[r.PersonGUID] || t < new Date(first[r.PersonGUID].LocaleMessageTime).getTime()) {
        first[r.PersonGUID] = r;
      }
    });
    const today = { total:0, Employee:0, Contractor:0 };
    Object.values(first).forEach(r => {
      today.total++;
      if (isEmployeeType(r.PersonnelType)) today.Employee++;
      else today.Contractor++;
    });

    // last swipe per person for realtime (ONLY from today's swipes)
    const last = {};
    swipesToday.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!last[r.PersonGUID] || t > new Date(last[r.PersonGUID].LocaleMessageTime).getTime()) {
        last[r.PersonGUID] = r;
      }
    });

    const realtime = {};
    const unmapped = new Set();

    // Build enriched details (add Zone & Floor) for every last-swipe record
    const enriched = Object.values(last).map(r => {
      const zone = mapDoorToZone(r.Door, r.Direction);
      const floor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmapped);
      return {
        ...r,
        Zone: zone === 'Unknown Zone' ? null : zone,
        Floor: floor === 'Unknown' ? null : floor
      };
    });

    // Strictly remove "Out of office" records from details
    const details = enriched.filter(r => r.Zone !== 'Out of office');

    // Counting loop ‚Äî unified logic for all partitions.
    Object.values(last).forEach(r => {
      const p = r.PartitionName2;

      // resolve zone for this record
      const zoneRaw = mapDoorToZone(r.Door, r.Direction);

      // STRICT RULE: if zone resolved to exact "Out of office" -> skip counting
      if (zoneRaw === 'Out of office') return;

      // Unknown keys ‚Üí drop
      if (zoneRaw === 'Unknown Zone') return;

      // ensure bucket exists
      const ensureBucket = (part) => {
        if (!realtime[part]) realtime[part] = { total:0, Employee:0, Contractor:0, floors:{}, zones:{} };
      };

      // SAFE TO COUNT: we only evict on "Out of office"
      ensureBucket(p);
      realtime[p].total++;
      if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
      else                                  realtime[p].Contractor++;

      // floor bucket (uses same lookupFloor helper)
      const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
      if (fl !== 'Unknown') {
        realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
      }

      // zone bucket: for OutDirection keep base names by stripping trailing " Zone" (consistent with mapDoorToZone)
      const z = (r.Direction === 'OutDirection' && zoneRaw !== 'Out of office')
                  ? zoneRaw.replace(/\s+Zone$/i, '')
                  : zoneRaw;
      if (z) realtime[p].zones[z] = (realtime[p].zones[z] || 0) + 1;
    });

    // Log unmapped doors for dev feedback
    if (unmapped.size) console.warn('Unmapped doors:', Array.from(unmapped));

    res.json({
      success: true,
      today,
      realtime,
      unmapped: Array.from(unmapped),
      details
    });

  } catch (e) {
    console.error(e);
    res.status(500).json({ success:false, message:'Summary failed' });
  }
};





exports.getHistoricalOccupancy = async (req, res) => {
  const location = req.params.location || null;
  try {
    // 1) Pull in rows ‚Äî each now has non-null PartitionNameFriendly
    const raw = await service.fetchHistoricalOccupancy(location);

    // 2) Dedupe to first swipe per person per day
    const byDate = raw.reduce((acc, r) => {
           // force into a "YYYY-MM-DD" string
     const date = new Date(r.LocaleMessageTime).toISOString().slice(0, 10);
      acc[date] = acc[date] || {};
      if (
        !acc[date][r.PersonGUID] ||
        new Date(r.LocaleMessageTime) < new Date(acc[date][r.PersonGUID].LocaleMessageTime)
      ) {
        acc[date][r.PersonGUID] = r;
      }
      return acc;
    }, {});

    const summaryByDate = [];
    const details = [];

    // 3) Build summaries
    Object.keys(byDate).sort().forEach(date => {
      const recs = Object.values(byDate[date]);
      details.push(...recs);

      // region totals
      const region = { total: 0, Employee: 0, Contractor: 0 };
      // per-partition buckets
      const partitions = {};

      recs.forEach(r => {
        // increment region
        region.total++;
        if (isEmployeeType(r.PersonnelType)) region.Employee++;
        else region.Contractor++;

        // only build partitions if we're not filtering to a single location
        if (!location) {
          // use the friendly name (guaranteed non-null!), with fallback
          const key = r.PartitionNameFriendly || 'APAC.Default';
          if (!partitions[key]) {
            partitions[key] = { total: 0, Employee: 0, Contractor: 0 };
          }
          partitions[key].total++;
          if (isEmployeeType(r.PersonnelType)) partitions[key].Employee++;
          else partitions[key].Contractor++;
        }
      });

      summaryByDate.push({
        date,
        day: new Date(date).toLocaleDateString('en-US', { weekday: 'long' }),
        region: location
          ? { name: location, ...region }
          : { name: 'APAC', ...region },
        // if location is provided, you can still emit an empty object (`{}`) or skip:
        partitions: location ? {} : partitions
      });
    });

    // 4) Return
    res.json({ success: true, summaryByDate, details });
  } catch (e) {
    console.error(e);
    res.status(500).json({ success: false, message: 'Historical failed' });
  }
};






//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\services\occupancy.service.js

const { poolPromise, sql } = require('../config/db');

const partitionList = [
  'APAC.Default',
  'CN.Beijing',
  'JP.Tokyo',
  'PH.Manila',
  'MY.Kuala Lumpur',
  'IN.Pune'
];

function quoteList(arr) {
  return arr.map(p => `'${p.replace("'", "''")}'`).join(',');
}

/**
 * Live occupancy (today) for APAC
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
    WITH CombinedEmployeeData AS (
      SELECT
        t1.ObjectName1,
        t1.ObjectName2             AS Door,               -- include Door
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                    AS PersonnelType,
        t1.ObjectIdentity1         AS PersonGUID,
        -- extract CardNumber from XML or shred table
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                          AS CardNumber,
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%'   THEN 'Pune'
          WHEN t1.ObjectName2 LIKE 'APAC_JPN%' THEN 'JP.Tokyo'
          WHEN t1.ObjectName2 LIKE 'APAC_MY%'  THEN 'MY.Kuala Lumpur'
          ELSE t1.PartitionName2
        END                        AS PartitionName2,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t5d.value                  AS Direction
      FROM ACVSUJournal_00010029.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${parts})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    ), Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (PARTITION BY PersonGUID ORDER BY LocaleMessageTime DESC) AS rn
      FROM CombinedEmployeeData
    )
    SELECT
      ObjectName1,
      Door,                            -- door
      PersonnelType,
      EmployeeID,
      CardNumber,                      -- now returned
      PartitionName2,
      LocaleMessageTime,
      Direction,
      PersonGUID
    FROM Ranked
    WHERE rn = 1;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};







// src/utils/doorMap.js

// 1) Raw mapping from ‚ÄúDOOR___Direction‚Äù ‚Üí zone name
const doorZoneMap = {
  // Podium / Red
  "APAC_IN_PUN_PODIUM_RED_IDF ROOM-02-RESTRICTED DOOR___InDirection":                 "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___InDirection":                            "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___OutDirection":                           "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___InDirection":                 "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___OutDirection":                "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___InDirection":                                "Red Zone",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___OutDirection":                               "Red Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___InDirection":             "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___OutDirection":            "Reception Area",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___InDirection":         "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___OutDirection":        "Yellow Zone - Outer Area",

  // Podium / Yellow
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___InDirection":                              "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___OutDirection":                             "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MDF RESTRICTED DOOR___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_IT STORE ROOM-DOOR RESTRICTED DOOR___InDirection":        "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_REPRO STORE-DOOR RESTRICTED DOOR___InDirection":           "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_CONTROL PANEL ROOM-DOOR RESTRICTED DOOR___InDirection":   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_PREACTION ROOM-DOOR RESTRICTED DOOR___InDirection":        "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_TESTING LAB-DOOR RESTRICTED DOOR___InDirection":           "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___OutDirection":                      "Reception Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___InDirection":                   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___OutDirection":                  "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___InDirection":                               "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___OutDirection":                              "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___OutDirection":                      "Yellow Zone - Outer Area",

  // Podium / Green
  "APAC_IN_PUN_PODIUM_GREEN-_IDF ROOM 1-RESTRICTED DOOR___InDirection":                "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 1-DOOR RESTRICTED DOOR___InDirection":            "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 2-DOOR RESTRICTED DOOR___InDirection":            "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_LOCKER HR STORE 3-DOOR RESTRICTED DOOR___InDirection":      "Green Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___InDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___InDirection":                        "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___OutDirection":                       "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___InDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___OutDirection":                               "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___InDirection":                        "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___OutDirection":                       "Reception Area",

  // Podium / Orange
  "APAC_IN_PUN_PODIUM_ST4 DOOR 1 (ORANGE)___InDirection":                               "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___InDirection":                      "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___OutDirection":                     "Reception Area",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___InDirection":                              "Orange Zone",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___OutDirection":                             "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___InDirection":                       "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___OutDirection":                      "Orange Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ORANGE-IDF ROOM 3-RESTRICTED DOOR___InDirection":                "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___InDirection":            "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___OutDirection":           "Orange Zone - Outer Area",

  // Podium / GSOC door
  "APAC_IN_PUN_PODIUM_GSOC DOOR RESTRICTED DOOR___InDirection":                         "Yellow Zone",

  // Podium / Main Right & Left Entry
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___InDirection":                  "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___OutDirection":                 "Assembly Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___InDirection":                   "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___OutDirection":                  "Assembly Area",

  // Podium / Turnstiles
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 3-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-OUT DOOR___OutDirection":                          "Out of office",

  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___OutDirection":    "Out of office",
  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___InDirection":    "Reception Area",
  



  // 2nd-Floor / IDF + UPS/ELEC + Reception‚ÜíWorkstation + LiftLobby‚ÜíReception
  "APAC_IN_PUN_2NDFLR_IDF ROOM_10:05:86 RESTRICTED DOOR___InDirection":                  "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_UPS/ELEC ROOM RESTRICTED DOOR___InDirection":                      "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___InDirection":                       "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___OutDirection":                      "Out of office",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___InDirection":                   "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___OutDirection":                  "2nd Floor, Pune",

  // Tower B
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___InDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___OutDirection":                              "Out of office",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___InDirection":                                   "Tower B",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection":                                  "Out of office",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___InDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___OutDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___InDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___OutDirection":                              "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___InDirection":                              "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___OutDirection":                             "Tower B",
  "APAC_IN_PUN_TOWER B_IBMS ROOM___InDirection":                                         "Tower B",
  "APAC_IN_PUN_TOWER B_UPS ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_MDF ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_PAC ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_IT STORE ROOM___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_GYM ROOM___InDirection": "Tower B GYM",
  "APAC_IN_PUN_TOWER B_GYM ROOM___OutDirection": "Tower B GYM",
  "APAC_IN_PUN_TOWER B_SITE OPS STORE___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MOBILE LAB___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_MOBILE LAB___OutDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_CEC DOOR___InDirection": "Tower B",
  "APAC_IN_PUN_TOWER B_CEC DOOR___OutDirection": "Tower B",

 // ----- APAC-wide (from your Excel file) -----
  // Kuala Lumpur
  "APAC_MY_KL_MAIN ENTRANCE DOOR___InDirection":    "Kuala Lumpur",
  "APAC_MY_KL_MAIN ENTRANCE DOOR___OutDirection":  "Out of office",
  "APAC_MY_KL_INTERIOR RECEPTION DOOR___InDirection":"Kuala Lumpur",
  "APAC_MY_KL_INTERIOR RECEPTION DOOR___OutDirection":"Kuala Lumpur",
  "APAC_MY_KL_SIDE ENTRANCE DOOR NEW___InDirection":"Kuala Lumpur",
  "APAC_MY_KL_SIDE ENTRANCE DOOR NEW___OutDirection":"Kuala Lumpur",
  "APAC_MY_KL_PANTRY ENTRANCE DOOR NEW___InDirection":"Kuala Lumpur",
  "APAC_MY_KL_PANTRY ENTRANCE DOOR NEW___OutDirection":"Kuala Lumpur",
  "APAC_MY_KL_SERVER ROOM DOOR___InDirection":     "Kuala Lumpur",
  "APAC_MY_KL_SERVER ROOM DOOR___OutDirection":    "Kuala Lumpur",

  // Tokyo
  "APAC_JPN_Tokyo_7th FLRSide Entrance___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLRSide Entrance___OutDirection":"Out of office",
  "APAC_JPN_Tokyo_7th FLR_IT Room___InDirection":     "Tokyo",
  "APAC_JPN_Tokyo_7th FLR_IT Room___OutDirection":    "Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Main Entrance___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Main Entrance___OutDirection":"Out of office",
  "APAC_JPN_Tokyo_7th FLR_Office Entrance___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Office Entrance___OutDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Side Entrance to Back Office___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Side Entrance to Back Office___OutDirection":"Out of office",

  // Manila (6th & 7th Floor)
  "APAC_PH_Manila_6th Floor Enrty Door 1___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor Enrty Door 1___OutDirection":"Out of office",
  "APAC_PH_Manila_6th Floor Open Office 2___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor Open Office 2___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Entry Door 2___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Entry Door 2___OutDirection":"Out of office",
  "APAC_PH_Manila_6th Floor_Entry Door 3___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Entry Door 3___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Exit Corridor___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Exit Corridor___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_IDF Restricted Door___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_IDF Restricted Door___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Mothers Room___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Mothers Room___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Print Area___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Print Area___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_UPS/Switch Restricted Door___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_UPS/Switch Restricted Door___OutDirection":"6th Floor",

  "APAC_PH_Manila_7th Floor_Directors Office-708___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Directors Office-708___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Exit Corridore-704___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Exit Corridore-704___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_IT Work Room  725___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_IT Work Room  725___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_MDF-726 Restricted Door___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_MDF-726 Restricted Door___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 1-721___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 1-721___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 2-721___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 2-721___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Pantry-720a___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Pantry-720a___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Recption Door 1-701___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Recption Door 1-701___OutDirection":"Out of office",
  "APAC_PH_Manila_7th Floor_Recption Door 2-701___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Recption Door 2-701___OutDirection":"Out of office",
  "APAC_PH_Manila_7th Floor_Security Room-723___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Security Room-723___OutDirection":"7th Floor",

  // PI Manila DR (Taguig)
  "APAC_PI_Manila_DR_MainEntrance___InDirection":"Taguig",
  "APAC_PI_Manila_DR_MainEntrance___OutDirection":"Out of office",
  "APAC_PI_Manila_DR_OfficeLobby___InDirection":"Taguig",
  "APAC_PI_Manila_DR_OfficeLobby___OutDirection":"Out of office",
  "APAC_PI_Manila_DR_Server Restricted Door___InDirection":"Taguig",
  "APAC_PI_Manila_DR_Server Restricted Door___OutDirection":"Taguig",
  "APAC_PI_Manila_DR_StorageRm___InDirection":"Taguig",
  "APAC_PI_Manila_DR_StorageRm___OutDirection":"Taguig",
  "APAC_PI_Manila_Emerg Exit Dr- Lobby___InDirection":"Taguig",
  "APAC_PI_Manila_Emerg Exit Dr- Lobby___OutDirection":"Taguig",
  "APAC_PI_Manila_Emgerg DR_Storage RM___InDirection":"Taguig",
  "APAC_PI_Manila_Emgerg DR_Storage RM___OutDirection":"Taguig",




// --- Manila 7th Floor Reception Doors ---
"APAC_PH_Manila_7th Floor Recption Door 1-701___InDirection":    "7th Floor",
"APAC_PH_Manila_7th Floor Recption Door 1-701___OutDirection":   "Out of office",

"APAC_PH_Manila_7th Floor Recption Door 2-701___InDirection":    "7th Floor",
"APAC_PH_Manila_7th Floor Recption Door 2-701___OutDirection":   "Out of office",

// --- Manila 7th Floor Open Office Door 2-721 ---
"APAC_PH_Manila_7th Floor Open Office Door 2-721___InDirection":  "7th Floor",
"APAC_PH_Manila_7th Floor Open Office Door 2-721___OutDirection": "7th Floor",

// --- Manila 7th Floor IT Work Room  725 & Security Room 723 ---
"APAC_PH_Manila_7th Floor IT Work Room  725___InDirection":      "7th Floor",
"APAC_PH_Manila_7th Floor IT Work Room  725___OutDirection":     "7th Floor",

"APAC_PH_Manila_7th Floor Security Room-723___InDirection":      "7th Floor",
"APAC_PH_Manila_7th Floor Security Room-723___OutDirection":     "7th Floor",

// --- Manila 6th Floor variants ---
"APAC_PH_Manila_6th Floor Enrty Door 1___InDirection":           "6th Floor",
"APAC_PH_Manila_6th Floor Enrty Door 1___OutDirection":          "Out of office",

"APAC_PH_Manila_6th Floor Print Area___InDirection":             "6th Floor",
"APAC_PH_Manila_6th Floor Print Area___OutDirection":            "6th Floor",

"APAC_PH_Manila_6th Floor Entry Door 2___InDirection":           "6th Floor",
"APAC_PH_Manila_6th Floor Entry Door 2___OutDirection":          "Out of office",

"APAC_PH_Manila_6th Floor Entry Door 3___InDirection":           "6th Floor",
"APAC_PH_Manila_6th Floor Entry Door 3___OutDirection":          "6th Floor",

// --- Pune Tower B Lift Lobby Door (OutDirection) ---
"APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection":            "Out of office",

// --- Pune Turnstile 1 Exit Door (normalize the hyphen) ---
"APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1 OUT DOOR___OutDirection":    "Out of office",

// --- Taguig Main Entrance Door (InDirection) ---
"APAC_PI_Manila_DR_MainEntrance___InDirection":                  "Taguig",
"APAC_PI_Manila_DR_MainEntrance___OutDirection":                 "Out of office",

// --- Tokyo 7th Floor Office Entrance (OutDirection) ---
"APAC_JPN_Tokyo_7th FLR Office Entrance___OutDirection":        "Out of office",

};




// 2) zone ‚Üí floor
const zoneFloorMap = {

  "Red Zone":                    "Podium Floor",
  "Yellow Zone":                 "Podium Floor",
  "Reception Area":              "Podium Floor",
  "Green Zone":                  "Podium Floor",
  "Orange Zone":                 "Podium Floor",
  "Gsoc Zone":                   "Podium Floor",
  "Assembly Area":               "Podium Floor",
  "Red":"Podium Floor",

  // 2nd Floor
  "2nd Floor, Pune":             "2nd Floor",

  // Tower B
  "Tower B":                     "Tower B",
  "Reception Area Tower B":      "Tower B",
  "Tower B GYM":                 "Tower B",

  // Outer‚ÄêArea variants (same floors as their base zones)
  "Red Zone - Outer Area":               "Podium Floor",
  "Yellow Zone - Outer Area":            "Podium Floor",
  "Reception Area - Outer Area":         "Podium Floor",
  "Green Zone - Outer Area":             "Podium Floor",
  "Orange Zone - Outer Area":            "Podium Floor",
  "Assembly Area - Outer Area":          "Podium Floor",
  "2nd Floor, Pune - Outer Area":        "2nd Floor",
  "Tower B - Outer Area":                "Tower B",
  "Reception Area Tower B - Outer Area": "Tower B",
  "Tower B GYM - Outer Area":            "Tower B",

  // True ‚ÄúOut of office‚Äù eviction (we filter these out in the controller)
  

  "Kuala Lumpur":             "Kuala Lumpur",
  "6th Floor":                "6th Floor",
  "7th Floor":                "7th Floor",
  "Tokyo":                    "Tokyo",
  "Taguig":                   "Taguig",
  // All true ‚ÄúOut of office‚Äù go to Unknown:
  "Out of office":            null
};


// 3) How to derive partition for PartitionName2
// 3) Partition ‚Üí friendly name
const partitionMap = {
  'APAC_IN_PUN':    'Pune',
  'APAC_PH_Manila': 'Quezon City',
  'APAC_JPN_Tokyo': 'JP.Tokyo',
  'APAC_MY_KL':     'MY.Kuala Lumpur',
  'APAC_PI_Manila': 'Taguig City'
};



function normalizeDoorName(name) {
  return name
    .replace(/[_/]/g, ' ')                      // underscores/slashes ‚Üí spaces
    .replace(/[^\w\s-]/g, '')                   // drop punctuation except hyphens
    .replace(/\bRECPTION\b/gi, 'RECEPTION')     // typo fix
    .replace(/\bENRTY\b|\bENTRTY\b/gi, 'ENTRY') // typo fix
   // strip any trailing 6-digit hex string (e.g. "10054B")
   .replace(/\b[0-9A-F]{6}\b$/, '')
    .replace(/[\s-]+/g, ' ')                    // collapse spaces & hyphens
    .toUpperCase()
    .trim();
}



// 5) Build normalized door‚Üízone lookup
const normalizedDoorZoneMap = Object.entries(doorZoneMap).reduce((acc, [rawKey, zone]) => {
  const [rawDoor, direction] = rawKey.split('___');
  const normKey = `${normalizeDoorName(rawDoor)}___${direction}`;
  acc[normKey] = zone;
  return acc;
}, {});

// 6) Build per-partition doorMap entries
const doorMap = Object.entries(doorZoneMap).reduce((acc, [rawKey, zone]) => {
  const [rawDoor, direction] = rawKey.split('___');
  const prefix    = rawDoor.split('_').slice(0,3).join('_');
  const partition = partitionMap[prefix] || prefix;
  const floor     = zoneFloorMap[zone]  || 'Unknown';

  if (!acc[rawDoor]) {
    acc[rawDoor] = {
      partition,
      door: rawDoor,
      inDirectionFloor:  null,
      outDirectionFloor: null,
      normalizedDoor:    normalizeDoorName(rawDoor)
    };
  }
  if (direction === 'InDirection')  acc[rawDoor].inDirectionFloor  = floor;
  else                              acc[rawDoor].outDirectionFloor = floor;

  return acc;
}, {});

// 7) Export
module.exports = {
  doorZoneMap,
  normalizedDoorZoneMap,
  zoneFloorMap,
  doorMap: Object.values(doorMap),
  normalizeDoorName
};














import React, { useEffect, useState } from 'react';
import { Box, Paper, TextField, Button, Typography, Checkbox, FormControlLabel, Grid, Alert } from '@mui/material';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';

// ... PAGES constant unchanged ...
const PAGES = [
  { key: 'global_access', label: 'Global Access (all pages)' },
  { key: 'device_health', label: 'Device Health Dashboard' },
  { key: 'headcount', label: 'HeadCount (any region)' },
  { key: 'headcount.apac', label: 'HeadCount — APAC' },
  { key: 'headcount.emea', label: 'HeadCount — EMEA' },
  { key: 'headcount.laca', label: 'HeadCount — LACA' },
  { key: 'headcount.namer', label: 'HeadCount — NAMER' },
  { key: 'headcount.partition.pune', label: 'HeadCount — Pune (partition)' },

  { key: 'ert', label: 'ERT Members' },
  { key: 'associate_verify', label: 'Associate Verification Tool' },

  { key: 'gsoc_reports', label: 'GSOC Reports (all)' },
  { key: 'gsoc_reports.daily_access', label: 'GSOC — Daily Access' },
  { key: 'gsoc_reports.raw', label: 'GSOC — Raw' },
  { key: 'gsoc_reports.rejection', label: 'GSOC — Rejection' },
  { key: 'gsoc_reports.euroc', label: 'GSOC — EUROC Admit/Reject' },
  { key: 'gsoc_reports.time_duration', label: 'GSOC — Time Duration' },
  { key: 'gsoc_reports.headcount', label: 'GSOC — HeadCount (external nav)' },

  { key: 'upload_active_employees', label: 'Upload Active Employee Sheet' },
  { key: 'upload_active_contractors', label: 'Upload Active Contractor Sheet' },
  { key: 'export_compare', label: 'Export Comparison (Missing vs CCURE)' },

  { key: 'global_duration', label: 'Duration Page (global)' },
  { key: 'can_grant', label: 'Grant permissions (admin)' },
];

export default function AccessManager() {
  const auth = useAuth();
  const [employeeId, setEmployeeId] = useState('');
  const [employeeName, setEmployeeName] = useState('');
  const [checked, setChecked] = useState({});
  const [status, setStatus] = useState(null);
  const [password, setPassword] = useState(''); // NEW

  useEffect(() => {
    // nothing heavy here
  }, []);

  if (!auth.canGrant) {
    return <Box sx={{ p: 3 }}><Alert severity="error">You don't have grant permissions.</Alert></Box>;
  }

  const handleCheck = (k) => {
    setChecked(prev => ({ ...prev, [k]: !prev[k] }));
  };

  const handleGrant = async () => {
    if (!employeeId && !employeeName) {
      setStatus({ type: 'error', msg: 'Enter Employee ID or name to grant access' });
      return;
    }
    setStatus({ type: 'info', msg: 'Granting...' });
    try {
      const pages = Object.keys(checked).filter(k => checked[k]);
      // include password optionally
      const body = { grantee_employee_id: employeeId, grantee_name: employeeName, pages };
      if (password && password.length > 0) body.password = password;

      await axios.post('/api/auth/grant', body);
      setStatus({ type: 'success', msg: 'Granted successfully' });
      try { if (auth.refresh) await auth.refresh(); } catch (e) { /* ignore */ }
    } catch (err) {
      console.error(err);
      setStatus({ type: 'error', msg: err?.response?.data?.detail || err?.message || 'Grant failed' });
    }
  };

  const handleRevoke = async () => {
    if (!employeeId && !employeeName) {
      setStatus({ type: 'error', msg: 'Enter Employee ID or name to revoke access' });
      return;
    }
    setStatus({ type: 'info', msg: 'Revoking...' });
    try {
      // send pages array (may be empty). Backend: empty pages -> delete user entirely.
      const pages = Object.keys(checked).filter(k => checked[k]);

      const resp = await axios.post('/api/auth/revoke', { grantee_employee_id: employeeId, grantee_name: employeeName, pages });

      if (resp && (resp.status === 200 || resp.status === 204)) {
        setStatus({ type: 'success', msg: 'Revoked successfully' });
      } else {
        setStatus({ type: 'success', msg: 'Revoked (response received)' });
      }

      try { if (auth.refresh) await auth.refresh(); } catch (e) { console.warn('auth.refresh failed', e); }

      setChecked({});
    } catch (err) {
      console.error(err);
      const serverMsg = err?.response?.data?.detail || err?.response?.data?.error || err?.response?.data || null;
      setStatus({ type: 'error', msg: serverMsg || err?.message || 'Revoke failed' });
    }
  };

  // NEW: set/create password (admin or target user)
  const handleSetPassword = async () => {
    if (!employeeId && !employeeName) {
      setStatus({ type: 'error', msg: 'Enter Employee ID or name to set password' });
      return;
    }
    if (!password || password.length < 4) {
      setStatus({ type: 'error', msg: 'Password must be at least 4 characters' });
      return;
    }
    setStatus({ type: 'info', msg: 'Setting password...' });
    try {
      await axios.post('/api/auth/set-password', { grantee_employee_id: employeeId, grantee_name: employeeName, password });
      setStatus({ type: 'success', msg: 'Password set successfully' });
      setPassword('');
    } catch (err) {
      console.error(err);
      const serverMsg = err?.response?.data?.detail || err?.response?.data?.error || err?.response?.data || null;
      setStatus({ type: 'error', msg: serverMsg || err?.message || 'Set password failed' });
    }
  };

  const selectAll = () => {
    const obj = {};
    PAGES.forEach(p => obj[p.key] = true);
    setChecked(obj);
  };
  const clearAll = () => setChecked({});

  return (
    <Box sx={{ p: 3 }}>
      <Paper sx={{ p: 3 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>Access Manager — Grant / Revoke Pages</Typography>

        {status && <Alert severity={status.type} sx={{ mb: 2 }}>{status.msg}</Alert>}

        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <TextField fullWidth label="Employee ID (e.g. W0025562)" value={employeeId} onChange={e => setEmployeeId(e.target.value)} helperText="EmployeeID or login"/>
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField fullWidth label="Employee Name (optional)" value={employeeName} onChange={e => setEmployeeName(e.target.value)} />
          </Grid>

          <Grid item xs={12}>
            <Typography sx={{ mb: 1, fontWeight: 700 }}>Pages to grant / revoke</Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              {PAGES.map(p => (
                <FormControlLabel
                  key={p.key}
                  control={<Checkbox checked={!!checked[p.key]} onChange={() => handleCheck(p.key)} />}
                  label={p.label}
                />
              ))}
            </Box>

            <Box sx={{ display: 'flex', gap: 1, mt: 2 }}>
              <Button variant="outlined" onClick={selectAll}>Select all</Button>
              <Button variant="outlined" onClick={clearAll}>Clear</Button>
              <Button variant="contained" color="primary" onClick={handleGrant}>Grant access</Button>
              <Button variant="contained" color="error" onClick={handleRevoke}>Revoke access</Button>
            </Box>

            <Box sx={{ mt: 2, mb: 1 }}>
              <Typography sx={{ mb: 1, fontWeight: 700 }}>Create / Change Password (optional)</Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <TextField type="password" value={password} onChange={e => setPassword(e.target.value)} placeholder="New password" size="small" />
                <Button variant="contained" onClick={handleSetPassword}>Set/Create Password</Button>
              </Box>
              <Typography variant="caption" sx={{ display: 'block', mt: 1, color: 'text.secondary' }}>
                You can set a password for the grantee here (admins with grant permission). Passwords are stored in this prototype as plain text — use hashing in production.
              </Typography>
            </Box>

            <Typography variant="caption" sx={{ display: 'block', mt: 2, color: 'text.secondary' }}>
              Granting will call backend and store the mapping. Revoking will remove access. If no pages are selected when revoking, the user record will be removed from the database. After changes, this UI refreshes current user's permissions (if affected).
            </Typography>
          </Grid>
        </Grid>
      </Paper>
    </Box>
  );
}


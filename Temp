When i Upadte Above file we got API responce like letd Debug each file line by line and Fix the issue carefully..

Check below each API Respopnce Carefullyv and line by line and Fix the issue carefully..
http://localhost:8000/ccure/averages

  "date": "2025-08-25",
  "headcount": {
    "total_visited_today": 0,
    "employee": 0,
    "contractor": 0,
    "by_location": {

    }
  },
  "live_headcount": {
    "currently_present_total": 1271,
    "employee": 1171,
    "contractor": 125,
    "by_location": {
      "US.CO.OBS": {
        "total": 1,
        "employee": 0,
        "contractor": 1
      },
      "LT.Vilnius": {
        "total": 298,
        "employee": 287,
        "contractor": 11
      },
      "MA.Casablanca": {
        "total": 1,
        "employee": 0,
        "contractor": 1
      },
      "IE.Dublin": {
        "total": 5,
        "employee": 5,
        "contractor": 0
      },
      "AUT.Vienna": {
        "total": 12,
        "employee": 10,
        "contractor": 2
      },
      "IT.Rome": {
        "total": 9,
        "employee": 8,
        "contractor": 1
      },
      "ES.Madrid": {
        "total": 9,
        "employee": 9,
        "contractor": 0
      },
      "DU.Abu Dhab": {
        "total": 30,
        "employee": 29,
        "contractor": 1
      },
      "RU.Moscow": {
        "total": 1,
        "employee": 1,
        "contractor": 0
      },
      "Pune": {
        "total": 853,
        "employee": 763,
        "contractor": 90
      },
      "Quezon City": {
        "total": 62,
        "employee": 46,
        "contractor": 16
      },
      "MY.Kuala Lumpur": {
        "total": 6,
        "employee": 5,
        "contractor": 1
      },
      "JP.Tokyo": {
        "total": 9,
        "employee": 8,
        "contractor": 1
      }
    }
  },
  "ccure_active": {
    "ccure_active_employees_reported": 8619,
    "ccure_active_contractors_reported": 658
  },
  "averages": {
    "head_emp_pct_vs_ccure_today": 0,
    "head_contractor_pct_vs_ccure_today": 0,
    "headcount_overall_pct_vs_ccure_today": 0,
    "live_employee_pct_vs_ccure": 13.59,
    "live_contractor_pct_vs_ccure": 19,
    "live_overall_pct_vs_ccure": 13.7,
    "avg_headcount_last_7_days": 0,
    "avg_headcount_per_site_last_7_days": 0,
    "avg_live_per_site": 317.75,
    "history_avg_employee_last_7_days": 721.43,
    "history_avg_contractor_last_7_days": 58.43,
    "history_avg_overall_last_7_days": 779.86,
    "history_days_counted": 7,
    "history_employee_pct_vs_ccure": 8.37,
    "history_contractor_pct_vs_ccure": 8.88,
    "history_overall_pct_vs_ccure": 8.41
  },
  "compliance": {
    "meets_5days_8h": {
      "count": 0,
      "percent_of_ccure_employees": 0,
      "by_location": {

      }
    },
    "meets_3days_8h": {
      "count": 0,
      "percent_of_ccure_employees": 0,
      "by_location": {

      }
    },
    "defaulters": {
      "count": 8127,
      "percent_of_ccure_employees": 94.29,
      "by_location": {
        "Denver": {
          "count": 848
        },
        "Puteaux": {
          "count": 33
        },
        "Santa Ana": {
          "count": 1083
        },
        "Buenos Aires": {
          "count": 1260
        },
        "Rome": {
          "count": 52
        },
        "Moscow": {
          "count": 16
        },
        "Vilnius": {
          "count": 1025
        },
        "Miami": {
          "count": 35
        },
        "Vienna,Wien": {
          "count": 80
        },
        "Cuauht√©moc": {
          "count": 74
        },
        "Warsaw": {
          "count": 7
        },
        "Istanbul": {
          "count": 8
        },
        "Dubai - Dubai Media City": {
          "count": 45
        },
        "Sydney": {
          "count": 21
        },
        "London": {
          "count": 47
        },
        "Dublin": {
          "count": 54
        },
        "Mar de Plata": {
          "count": 9
        },
        "Madrid": {
          "count": 120
        },
        "Casablanca - 1100 Boulevard Al": {
          "count": 35
        },
        "New York": {
          "count": 56
        },
        "Ranga Reddy District, Hyderabad": {
          "count": 7
        },
        "Abdijan": {
          "count": 5
        },
        "Johannesburg": {
          "count": 17
        },
        "Beijing": {
          "count": 6
        },
        "Panama City": {
          "count": 147
        },
        "Kuala Lumpur": {
          "count": 14
        },
        "Bucharest": {
          "count": 8
        },
        "Singapore": {
          "count": 97
        },
        "Pune": {
          "count": 1146
        },
        "Zahringerstr": {
          "count": 6
        },
        "Balcarce": {
          "count": 4
        },
        "Cordoba": {
          "count": 12
        },
        "Mendoza": {
          "count": 7
        },
        "Neuquen": {
          "count": 7
        },
        "Quezon City": {
          "count": 422
        },
        "Rosario": {
          "count": 7
        },
        "Sao Paulo": {
          "count": 103
        },
        "Riyadh": {
          "count": 6
        },
        "Corrientes": {
          "count": 6
        },
        "Taguig City": {
          "count": 25
        },
        "Austin": {
          "count": 71
        },
        "San Isidro": {
          "count": 68
        },
        "Lima": {
          "count": 270
        },
        "Brussels": {
          "count": 28
        },
        "Itaim Bibi": {
          "count": 231
        },
        "Milan": {
          "count": 325
        },
        "Dhaka": {
          "count": 2
        },
        "Jakarta": {
          "count": 6
        },
        "Santiago": {
          "count": 53
        },
        "San Miguel de Tucuma": {
          "count": 5
        },
        "Victoria Island": {
          "count": 4
        },
        "San Salvador of Jujuy": {
          "count": 1
        },
        "Auckland": {
          "count": 4
        },
        "Berlin": {
          "count": 6
        },
        "Minato": {
          "count": 8
        },
        "Aurora": {
          "count": 6
        },
        "Den Haag": {
          "count": 8
        },
        "Lisbon": {
          "count": 1
        },
        "Basel": {
          "count": 3
        },
        "Bern": {
          "count": 4
        },
        "Biel": {
          "count": 2
        },
        "Luzern": {
          "count": 2
        },
        "Zurich": {
          "count": 12
        },
        "Lugano": {
          "count": 2
        },
        "Winterthur": {
          "count": 2
        },
        "Schlieren": {
          "count": 2
        },
        "Geneve": {
          "count": 9
        },
        "Thonex": {
          "count": 3
        },
        "Renens": {
          "count": 2
        },
        "Lausanne": {
          "count": 1
        },
        "Los Angeles": {
          "count": 7
        },
        "East Los Angeles": {
          "count": 3
        },
        "Benito Juarez": {
          "count": 1
        },
        "Houston": {
          "count": 3
        },
        "Tashkent": {
          "count": 1
        },
        "Bay Point": {
          "count": 2
        },
        "Irving": {
          "count": 5
        },
        "Plano": {
          "count": 2
        },
        "Grand Prairie": {
          "count": 2
        }
      },
      "sample": [
        {
          "employee_id": "072072",
          "full_name": "Galligan, Michelle L",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "072315",
          "full_name": "Mackintosh, William A",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "072526",
          "full_name": "Luft, Mathias",
          "location": "Puteaux",
          "wfh_flag": false
        },
        {
          "employee_id": "072690",
          "full_name": "Ragnone-Biesiada, Charlene",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "073134",
          "full_name": "Lupo, Wendy S",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "073376",
          "full_name": "Sherman, Lisa R",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "073479",
          "full_name": "Morales, John M",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "073674",
          "full_name": "Park, Leslie E",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "073993",
          "full_name": "O'Brien, Neil",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "074229",
          "full_name": "Glaser, Guy Mark",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "074258",
          "full_name": "Gillespie, Brenda M",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "074260",
          "full_name": "Stazick, Jeffrey",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "074387",
          "full_name": "Cavalieri, Kammi M",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "074480",
          "full_name": "Schloeman, William T",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "074908",
          "full_name": "Marostica, Daniel J",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "075066",
          "full_name": "Rojas Gomez, Ana Cristina",
          "location": "Santa Ana",
          "wfh_flag": false
        },
        {
          "employee_id": "075083",
          "full_name": "Adams, Reggie G",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "075085",
          "full_name": "Thompson CAMS, Alexander L",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "075264",
          "full_name": "Thortvedt, Tiffany R",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "075343",
          "full_name": "Calderon Yong, Alonso",
          "location": "Santa Ana",
          "wfh_flag": false
        },
        {
          "employee_id": "075446",
          "full_name": "Ayres, Nicole M",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "075621",
          "full_name": "Latchman, June L",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "076449",
          "full_name": "Rodriguez, Oralia",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "077016",
          "full_name": "Lee, Ruby W",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "077119",
          "full_name": "Carmichael, Sheila S",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "077554",
          "full_name": "Sancho Salas, Rafael Eduardo",
          "location": "Santa Ana",
          "wfh_flag": false
        },
        {
          "employee_id": "077877",
          "full_name": "Rubino, Gary P",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "077953",
          "full_name": "Porter, Mark J",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "078336",
          "full_name": "Coman, Jeffrey A",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "078778",
          "full_name": "Montoya, Catherine S",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "079000",
          "full_name": "Lee, Leticia",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "079734",
          "full_name": "Iglesias, Rosa M",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "131247",
          "full_name": "Chabolla, Martha",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "134153",
          "full_name": "Young, John P",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "139794",
          "full_name": "Kirby, Mary I",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "140217",
          "full_name": "Splatt, Gordon",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "141771",
          "full_name": "Garay, Luis",
          "location": "Buenos Aires",
          "wfh_flag": false
        },
        {
          "employee_id": "141788",
          "full_name": "Suarez, Marcelo",
          "location": "Buenos Aires",
          "wfh_flag": false
        },
        {
          "employee_id": "141795",
          "full_name": "Sorbo, Gabriel",
          "location": "Rome",
          "wfh_flag": false
        },
        {
          "employee_id": "141797",
          "full_name": "Viner, Mayra Yael",
          "location": "Buenos Aires",
          "wfh_flag": false
        },
        {
          "employee_id": "143911",
          "full_name": "Ruleva, Elena",
          "location": "Moscow",
          "wfh_flag": false
        },
        {
          "employee_id": "143912",
          "full_name": "Pavlovskaya, Evgenija",
          "location": "Moscow",
          "wfh_flag": false
        },
        {
          "employee_id": "143940",
          "full_name": "Lizina, Galina",
          "location": "Moscow",
          "wfh_flag": false
        },
        {
          "employee_id": "143979",
          "full_name": "Konwerski, Martin",
          "location": "Vilnius",
          "wfh_flag": false
        },
        {
          "employee_id": "147951",
          "full_name": "Apodaca, Scott M",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "148213",
          "full_name": "Corby, Suzanne L",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "148788",
          "full_name": "Benson, Linda K",
          "location": "Denver",
          "wfh_flag": false
        },
        {
          "employee_id": "152137",
          "full_name": "Sada, Rodrigo",
          "location": "Miami",
          "wfh_flag": false
        },
        {
          "employee_id": "153596",
          "full_name": "Richardson Box, Mario",
          "location": "Santa Ana",
          "wfh_flag": false
        },
        {
          "employee_id": "154046",
          "full_name": "Nguyen, Tien Le",
          "location": "Denver",
          "wfh_flag": false
        }
      ]
    }
  },
  "sites_queried": 4,
  "notes": "Region totals (1271) differ from detail rows (1296); using region totals for overall and details for breakdown."
}




http://localhost:8000/ccure/compare?mode=full&limit_list=500%22

{
  "detail": [
    {
      "type": "int_parsing",
      "loc": [
        "query",
        "limit_list"
      ],
      "msg": "Input should be a valid integer, unable to parse string as an integer",
      "input": "500\""
    }
  ]
}






http://localhost:8000/ccure/report/daily_report_2025-08-25.xlsx%22


{"detail":"Report not found"}



# ccure_compare_service.py
"""
Compare CCURE profiles/stats with local sheets + compute visit averages + compliance.

Key behaviors:
 - If AttendanceSummary for today is empty, attempt to call compute_daily_attendance() to build it from LiveSwipe.
 - Provide headcount (AttendanceSummary) and live_headcount (region_clients) with per-location breakdowns.
 - ccure_active exposes only reported ActiveEmployees and ActiveContractors (no derived fields).
 - Computes averages (last 7 days) and today's percentages vs CCURE reported counts.
 - Compliance (meets_5days_8h, meets_3days_8h, defaulters) computed using AttendanceSummary historical data.
"""

import re
import traceback
from datetime import date, datetime, timedelta
from typing import List, Dict, Any, Optional, Set

import logging

logger = logging.getLogger("ccure_compare_service")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

from db import SessionLocal
from models import ActiveEmployee, ActiveContractor, AttendanceSummary, LiveSwipe
from settings import OUTPUT_DIR

# ---------- small helpers ----------------------------------------------------

def _normalize_employee_key(x) -> Optional[str]:
    if x is None:
        return None
    try:
        s = str(x).strip()
        if s == "" or s.lower() in ("nan", "none", "na", "null"):
            return None
        return s
    except Exception:
        return None

def _normalize_card_like(s) -> Optional[str]:
    if s is None:
        return None
    try:
        ss = str(s).strip()
        if ss == "":
            return None
        digits = re.sub(r'\D+', '', ss)
        if digits == "":
            return None
        return digits.lstrip('0') or digits
    except Exception:
        return None

def _safe_int(v):
    try:
        if v is None:
            return None
        return int(v)
    except Exception:
        try:
            return int(float(v))
        except Exception:
            return None

def _sanitize_for_json(value):
    try:
        import numpy as _np
    except Exception:
        _np = None
    if value is None:
        return None
    if isinstance(value, (str, bool, int)):
        return value
    if isinstance(value, float):
        if _np is not None and not _np.isfinite(value):
            return None
        return float(value)
    if _np is not None and isinstance(value, (_np.integer,)):
        return int(value)
    if isinstance(value, dict):
        out = {}
        for k, v in value.items():
            try:
                key = str(k)
            except Exception:
                key = repr(k)
            out[key] = _sanitize_for_json(v)
        return out
    if isinstance(value, (list, tuple, set)):
        return [_sanitize_for_json(v) for v in value]
    try:
        return str(value)
    except Exception:
        return None

# ---------- ccure helpers ---------------------------------------------------

def _fetch_ccure_stats():
    try:
        import ccure_client
        if hasattr(ccure_client, "get_global_stats"):
            return ccure_client.get_global_stats()
    except Exception:
        logger.debug("ccure_client.get_global_stats not available", exc_info=True)
    return None

def _fetch_ccure_profiles():
    try:
        import ccure_client
        for fn in ("fetch_all_employees_full", "fetch_all_employees", "fetch_all_profiles", "fetch_profiles", "fetch_all"):
            if hasattr(ccure_client, fn):
                try:
                    res = getattr(ccure_client, fn)()
                    if isinstance(res, list):
                        return res
                except Exception:
                    continue
    except Exception:
        pass
    return []

def _extract_ccure_locations_from_profiles(profiles: List[dict]) -> Set[str]:
    locs = set()
    for p in profiles:
        if not isinstance(p, dict):
            continue
        for k in ("Partition", "PartitionName", "Location", "Location City", "location_city", "location", "Site", "BaseLocation"):
            v = p.get(k) if isinstance(p, dict) else None
            if v and isinstance(v, str) and v.strip():
                locs.add(v.strip())
    return locs

# ---------- classification & partition helpers ------------------------------

def classify_personnel_from_detail(detail: dict) -> str:
    """Map many CCURE / live-summary personnel strings to 'employee' or 'contractor'."""
    try:
        if not isinstance(detail, dict):
            return "contractor"
        candidate_keys = [
            "PersonnelType", "personnelType", "personnel_type", "Personnel Type",
            "PersonnelTypeName", "Personnel", "Type", "personnel", "PersonType", "personType"
        ]
        val = None
        for k in candidate_keys:
            if k in detail and detail.get(k) is not None:
                val = str(detail.get(k)).strip().lower()
                break
        status_keys = ["Employee_Status", "Employee Status", "Status", "Profile_Disabled"]
        status_val = None
        for k in status_keys:
            if k in detail and detail.get(k) is not None:
                status_val = str(detail.get(k)).strip().lower()
                break

        if status_val is not None and "terminated" in status_val:
            return "employee"
        if val is None or val == "":
            return "contractor"
        if "employee" in val:
            return "employee"
        if "terminated" in val:
            return "employee"
        contractor_terms = ["contractor", "visitor", "property", "property management", "temp", "temp badge", "tempbadge"]
        for t in contractor_terms:
            if t in val:
                return "contractor"
        if "contract" in val or "visitor" in val:
            return "contractor"
        return "contractor"
    except Exception:
        return "contractor"

def pick_partition_from_detail(detail: dict) -> str:
    if not isinstance(detail, dict):
        return "Unknown"
    for k in ("PartitionName2","PartitionName1","Partition","PartitionName","Region","Location","Site","location_city","Location City"):
        if k in detail and detail.get(k):
            try:
                return str(detail.get(k)).strip()
            except Exception:
                continue
    if "__region" in detail and detail.get("__region"):
        return str(detail.get("__region")).strip()
    return "Unknown"

# ---------- WFH detection helper -------------------------------------------

def is_employee_wfh(active_emp_row: ActiveEmployee) -> bool:
    try:
        wfh_keywords = ("work from home", "wfh", "remote", "workfromhome", "home")
        for attr in ("is_wfh", "work_from_home", "wfh", "remote_flag"):
            if hasattr(active_emp_row, attr):
                try:
                    val = getattr(active_emp_row, attr)
                    if isinstance(val, bool) and val:
                        return True
                    if isinstance(val, str) and any(k in val.strip().lower() for k in wfh_keywords):
                        return True
                except Exception:
                    pass
        for attr in ("location_description", "location_desc", "location_description1", "base_location", "location", "location_city"):
            if hasattr(active_emp_row, attr):
                try:
                    v = getattr(active_emp_row, attr)
                    if v and isinstance(v, str):
                        s = v.strip().lower()
                        if any(k in s for k in wfh_keywords):
                            return True
                except Exception:
                    pass
        try:
            rr = getattr(active_emp_row, "raw_row", None)
            if rr and isinstance(rr, dict):
                for k, v in rr.items():
                    try:
                        if v and isinstance(v, str) and any(word in v.strip().lower() for word in wfh_keywords):
                            return True
                    except Exception:
                        continue
        except Exception:
            pass
    except Exception:
        pass
    return False

# ---------- utility: fallback headcount builder from LiveSwipe --------------

def build_headcount_from_liveswipes_for_today(session) -> (int, Dict[str, Dict[str, int]]):
    """
    When AttendanceSummary for today is empty, build headcount by scanning LiveSwipe rows for today
    Deduplicate by key (employee_id or card) and compute per-location counts.
    Returns (total_count, by_location dict)
    """
    start = datetime.combine(date.today(), datetime.min.time())
    end = datetime.combine(date.today(), datetime.max.time())
    swipes = session.query(LiveSwipe).filter(LiveSwipe.timestamp >= start, LiveSwipe.timestamp <= end).all()
    if not swipes:
        return 0, {}
    seen_keys = {}
    per_loc = {}
    for s in swipes:
        key = _normalize_employee_key(s.employee_id) or _normalize_card_like(s.card_number)
        if not key:
            key = f"nokey_{s.id}"
        rec = seen_keys.get(key)
        ts = s.timestamp
        if rec is None:
            seen_keys[key] = {"first_seen": ts, "last_seen": ts, "partition": (s.partition or "Unknown"), "class": None, "card": s.card_number, "raw": s.raw}
        else:
            if ts and rec.get("first_seen") and ts < rec["first_seen"]:
                rec["first_seen"] = ts
            if ts and rec.get("last_seen") and ts > rec["last_seen"]:
                rec["last_seen"] = ts
    for k, v in seen_keys.items():
        loc = v.get("partition") or "Unknown"
        if not isinstance(loc, str) or not loc.strip():
            loc = "Unknown"
        if loc not in per_loc:
            per_loc[loc] = {"total": 0, "employee": 0, "contractor": 0}
        per_loc[loc]["total"] += 1
        classified = "contractor"
        raw = v.get("raw")
        if isinstance(raw, dict):
            try:
                classified = classify_personnel_from_detail(raw)
            except Exception:
                classified = "contractor"
        per_loc[loc][classified] += 1
    total = sum(p["total"] for p in per_loc.values())
    return int(total), per_loc

# ---------- main compute function -----------------------------------------

def compute_visit_averages(timeout: int = 6) -> Dict[str, Any]:
    notes = []
    today = date.today()
    week_start = today - timedelta(days=6)  # last 7 days inclusive

    # --- try to get CCURE stats/profiles early for filtering & denominators
    ccure_stats = _fetch_ccure_stats()
    reported_active_emps = _safe_int(ccure_stats.get("ActiveEmployees")) if isinstance(ccure_stats, dict) else None
    reported_active_contractors = _safe_int(ccure_stats.get("ActiveContractors")) if isinstance(ccure_stats, dict) else None

    ccure_profiles = _fetch_ccure_profiles()
    ccure_locations = _extract_ccure_locations_from_profiles(ccure_profiles) if isinstance(ccure_profiles, list) else set()

    # --- HEADCOUNT (AttendanceSummary for today) with fallback
    head_total = 0
    head_per_location: Dict[str, Dict[str, int]] = {}
    try:
        session = SessionLocal()
        att_rows_today = session.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
        if not att_rows_today:
            # Attempt to build AttendanceSummary from LiveSwipe using compute_daily_attendance (if available)
            built_ok = False
            try:
                # import local compare_service.compute_daily_attendance if available
                from compare_service import compute_daily_attendance as _compute_daily_attendance
                try:
                    built = _compute_daily_attendance(today)
                    # If compute_daily_attendance returns rows, requery AttendanceSummary
                    if isinstance(built, list) and len(built) > 0:
                        att_rows_today = session.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
                        built_ok = True
                        notes.append("AttendanceSummary was missing; built from LiveSwipe via compute_daily_attendance().")
                except Exception:
                    # fall through to fallback builder
                    logger.exception("compute_daily_attendance execution failed; falling back")
            except Exception:
                # compare_service not importable -> fallback
                logger.debug("compare_service.compute_daily_attendance not importable; falling back", exc_info=True)

            if not att_rows_today:
                # fallback: build headcount from LiveSwipe directly (non-persistent)
                built_total, built_per_loc = build_headcount_from_liveswipes_for_today(session)
                head_total = built_total
                head_per_location = built_per_loc
                if head_total > 0:
                    notes.append("AttendanceSummary for today empty; built headcount from LiveSwipe rows (non-persistent fallback).")
        if att_rows_today:
            # classify using ActiveEmployee / ActiveContractor sets
            act_emps = session.query(ActiveEmployee).all()
            act_contrs = session.query(ActiveContractor).all()
            emp_id_set = set()
            contr_id_set = set()
            card_to_emp = {}
            for e in act_emps:
                v = _normalize_employee_key(getattr(e, "employee_id", None))
                if v:
                    emp_id_set.add(v)
                try:
                    rr = getattr(e, "raw_row", None)
                    if rr and isinstance(rr, dict):
                        for ck in ("CardNumber","card_number","Card","Card No","CardNo","Badge","BadgeNo","IPassID","iPass ID","IPASSID"):
                            if ck in rr and rr.get(ck):
                                cn = _normalize_card_like(rr.get(ck))
                                if cn:
                                    card_to_emp[cn] = v
                except Exception:
                    pass
            for c in act_contrs:
                wid = _normalize_employee_key(getattr(c, "worker_system_id", None))
                ip = _normalize_employee_key(getattr(c, "ipass_id", None))
                primary = wid or ip
                if primary:
                    contr_id_set.add(primary)

            for a in att_rows_today:
                key = _normalize_employee_key(a.employee_id)
                partition = None
                try:
                    if a.derived and isinstance(a.derived, dict):
                        partition = a.derived.get("partition")
                except Exception:
                    partition = None
                loc = partition or "Unknown"
                if not isinstance(loc, str) or not loc.strip():
                    loc = "Unknown"
                if loc not in head_per_location:
                    head_per_location[loc] = {"total": 0, "employee": 0, "contractor": 0}
                if (a.presence_count or 0) > 0:
                    head_total += 1
                    head_per_location[loc]["total"] += 1
                    cls = "contractor"
                    if key and key in emp_id_set:
                        cls = "employee"
                    elif key and key in contr_id_set:
                        cls = "contractor"
                    else:
                        try:
                            card = (a.derived.get("card_number") if (a.derived and isinstance(a.derived, dict)) else None)
                        except Exception:
                            card = None
                        cnorm = _normalize_card_like(card)
                        if cnorm and cnorm in card_to_emp:
                            cls = "employee" if card_to_emp.get(cnorm) in emp_id_set else "contractor"
                        else:
                            cls = "contractor"
                    head_per_location[loc][cls] += 1
        session.expunge_all()
    except Exception:
        logger.exception("Error computing HeadCount")
        notes.append("Failed to compute HeadCount from DB; see server logs.")
    finally:
        try:
            session.close()
        except Exception:
            pass

    # --- LIVE HEADCOUNT via region_clients (as before)
    live_total = 0
    live_per_location: Dict[str, Dict[str, int]] = {}
    sites_queried = 0
    try:
        import region_clients
        regions_info = []
        try:
            if hasattr(region_clients, "fetch_all_regions"):
                regions_info = region_clients.fetch_all_regions(timeout=timeout) or []
        except Exception:
            logger.exception("region_clients.fetch_all_regions failed")
        details = []
        try:
            if hasattr(region_clients, "fetch_all_details"):
                details = region_clients.fetch_all_details(timeout=timeout) or []
        except Exception:
            logger.exception("region_clients.fetch_all_details failed")
        sites_queried = len(regions_info) if isinstance(regions_info, list) else 0
        if regions_info:
            for r in regions_info:
                try:
                    c = r.get("count") if isinstance(r, dict) else None
                    ci = _safe_int(c)
                    if ci is not None:
                        live_total += int(ci)
                except Exception:
                    continue
        derived_detail_sum = 0
        if details and isinstance(details, list):
            for d in details:
                try:
                    loc = pick_partition_from_detail(d) or "Unknown"
                    if not isinstance(loc, str) or not loc.strip():
                        loc = "Unknown"
                    pclass = classify_personnel_from_detail(d)
                    if loc not in live_per_location:
                        live_per_location[loc] = {"total": 0, "employee": 0, "contractor": 0}
                    live_per_location[loc]["total"] += 1
                    live_per_location[loc][pclass] += 1
                    derived_detail_sum += 1
                except Exception:
                    continue
            if live_total == 0 and derived_detail_sum > 0:
                live_total = derived_detail_sum
            else:
                if live_total != derived_detail_sum:
                    notes.append(f"Region totals ({live_total}) differ from detail rows ({derived_detail_sum}); using region totals for overall and details for breakdown.")
        else:
            notes.append("No per-person details available from region_clients; live breakdown unavailable.")
    except Exception:
        logger.exception("Error computing Live HeadCount")
        notes.append("Failed to compute Live HeadCount; see logs.")
        live_total = live_total or 0

    # --- CCURE active: exposed only as reported (not derived)
    # reported_active_emps, reported_active_contractors already from ccure_stats above

    # --- Compliance: compute using AttendanceSummary last 7 days (DB)
    compliance = {
        "meets_5days_8h": {"count": 0, "percent_of_ccure_employees": None, "by_location": {}},
        "meets_3days_8h": {"count": 0, "percent_of_ccure_employees": None, "by_location": {}},
        "defaulters": {"count": 0, "percent_of_ccure_employees": None, "by_location": {}, "sample": []}
    }

    try:
        session = SessionLocal()
        active_emps = session.query(ActiveEmployee).all()
        emp_map = {}
        card_to_emp = {}
        for e in active_emps:
            eid = _normalize_employee_key(getattr(e, "employee_id", None))
            emp_map[eid] = e
            try:
                rr = getattr(e, "raw_row", None)
                if rr and isinstance(rr, dict):
                    for ck in ("CardNumber","card_number","Card","Card No","CardNo","Badge","BadgeNo","IPassID","iPass ID","IPASSID"):
                        if ck in rr and rr.get(ck):
                            cn = _normalize_card_like(rr.get(ck))
                            if cn:
                                card_to_emp[cn] = eid
            except Exception:
                pass

        att_rows_range = session.query(AttendanceSummary).filter(AttendanceSummary.date >= week_start, AttendanceSummary.date <= today).all()
        rows_by_key = {}
        for r in att_rows_range:
            key = _normalize_employee_key(r.employee_id)
            if key not in rows_by_key:
                rows_by_key[key] = []
            rows_by_key[key].append(r)

        meets_5 = []
        meets_3 = []
        defaulters_list = []
        for eid, e in emp_map.items():
            candidate_rows = []
            if eid and eid in rows_by_key:
                candidate_rows.extend(rows_by_key[eid])
            for k in list(rows_by_key.keys()):
                if not k:
                    continue
                k_norm = _normalize_card_like(k)
                if k_norm and k_norm in card_to_emp and card_to_emp[k_norm] == eid:
                    candidate_rows.extend(rows_by_key[k])
            by_date = {}
            for r in candidate_rows:
                try:
                    d = r.date
                    if d not in by_date:
                        by_date[d] = r
                    else:
                        if (r.presence_count or 0) > (by_date[d].presence_count or 0):
                            by_date[d] = r
                except Exception:
                    continue
            days_with_8h = 0
            for d, row in by_date.items():
                if (row.presence_count or 0) > 0:
                    try:
                        if row.first_seen and row.last_seen:
                            dur = (row.last_seen - row.first_seen).total_seconds() / 3600.0
                            if dur >= 8.0:
                                days_with_8h += 1
                    except Exception:
                        pass
            meets5 = (days_with_8h >= 5)
            meets3 = (days_with_8h >= 3)
            wfh_flag = is_employee_wfh(e)
            location = None
            for loc_attr in ("location_city", "location", "base_location", "location_desc", "location_description"):
                if hasattr(e, loc_attr):
                    v = getattr(e, loc_attr)
                    if v and isinstance(v, str) and v.strip():
                        location = v.strip()
                        break
            if not location:
                try:
                    rr = getattr(e, "raw_row", None)
                    if rr and isinstance(rr, dict):
                        for ck in ("Partition","PartitionName","Location","Site","location_city","Location City"):
                            if ck in rr and rr.get(ck):
                                location = str(rr.get(ck)).strip()
                                break
                except Exception:
                    pass
            if not location:
                location = "Unknown"

            if meets5:
                meets_5.append((eid, e, location))
            if meets3:
                meets_3.append((eid, e, location))
            if (not meets5) and (not meets3):
                if not wfh_flag:
                    defaulters_list.append((eid, e, location))

        def _build_location_counts(list_of_tuples):
            loc_map = {}
            for (_id, e_obj, loc) in list_of_tuples:
                if not loc:
                    loc = "Unknown"
                if ccure_locations:
                    if loc not in ccure_locations:
                        continue
                if loc not in loc_map:
                    loc_map[loc] = {"count": 0}
                loc_map[loc]["count"] += 1
            return loc_map

        meets_5_count = len(meets_5)
        meets_3_count = len(meets_3)
        defaulter_count = len(defaulters_list)

        compliance["meets_5days_8h"]["count"] = int(meets_5_count)
        compliance["meets_5days_8h"]["by_location"] = {k: {"count": int(v["count"])} for k, v in _build_location_counts(meets_5).items()}
        compliance["meets_3days_8h"]["count"] = int(meets_3_count)
        compliance["meets_3days_8h"]["by_location"] = {k: {"count": int(v["count"])} for k, v in _build_location_counts(meets_3).items()}
        compliance["defaulters"]["count"] = int(defaulter_count)
        compliance["defaulters"]["by_location"] = {k: {"count": int(v["count"])} for k, v in _build_location_counts(defaulters_list).items()}

        denom_emp = reported_active_emps if reported_active_emps is not None else None
        if isinstance(denom_emp, int) and denom_emp > 0:
            compliance["meets_5days_8h"]["percent_of_ccure_employees"] = round((meets_5_count / denom_emp) * 100.0, 2)
            compliance["meets_3days_8h"]["percent_of_ccure_employees"] = round((meets_3_count / denom_emp) * 100.0, 2)
            compliance["defaulters"]["percent_of_ccure_employees"] = round((defaulter_count / denom_emp) * 100.0, 2)
        else:
            compliance["meets_5days_8h"]["percent_of_ccure_employees"] = None
            compliance["meets_3days_8h"]["percent_of_ccure_employees"] = None
            compliance["defaulters"]["percent_of_ccure_employees"] = None

        sample = []
        for (eid, e_obj, loc) in defaulters_list[:50]:
            try:
                sample.append({
                    "employee_id": _sanitize_for_json(eid),
                    "full_name": _sanitize_for_json(getattr(e_obj, "full_name", None)),
                    "location": _sanitize_for_json(loc),
                    "wfh_flag": bool(is_employee_wfh(e_obj))
                })
            except Exception:
                continue
        compliance["defaulters"]["sample"] = sample

        session.expunge_all()
        session.close()
    except Exception:
        logger.exception("Error computing compliance section")
        notes.append("Failed to compute compliance metrics; check server logs for trace.")
    finally:
        try:
            session.close()
        except Exception:
            pass

    # --- Averages: compute last 7 days headcount averages from AttendanceSummary (DB)
    avg_headcount_last_7_days = None
    avg_headcount_per_site_last_7_days = None
    try:
        session = SessionLocal()
        days = []
        for i in range(0, 7):
            d = today - timedelta(days=i)
            rows = session.query(AttendanceSummary).filter(AttendanceSummary.date == d).all()
            # compute total visited that day (presence_count>0)
            day_total = 0
            if rows:
                for r in rows:
                    if (r.presence_count or 0) > 0:
                        day_total += 1
            days.append(day_total)
        if days:
            avg_headcount_last_7_days = round(sum(days) / float(len(days)), 2)
            if sites_queried and sites_queried > 0:
                avg_headcount_per_site_last_7_days = round((sum(days) / float(len(days))) / float(sites_queried), 2)
        session.close()
    except Exception:
        logger.exception("Error computing averages from AttendanceSummary")
        notes.append("Failed to compute historical averages from AttendanceSummary; partial results only.")

    # --- HISTORY AVERAGES: use region_clients history endpoints (new)
    history_emp_avg = None
    history_contractor_avg = None
    history_overall_avg = None
    history_days = 0
    try:
        import region_clients
        if hasattr(region_clients, "fetch_all_history"):
            entries = region_clients.fetch_all_history(timeout=timeout) or []
            # aggregate by date across regions
            agg_by_date = {}  # date_str -> {"employee": int, "contractor": int, "total": int}
            for e in entries:
                try:
                    dstr = e.get("date")
                    if not dstr:
                        continue
                    # prefer e['region'] dict if present; else try e['region'] as name mapping
                    region_obj = e.get("region") if isinstance(e.get("region"), dict) else None
                    emp = None
                    con = None
                    tot = None
                    if region_obj and isinstance(region_obj, dict):
                        emp = _safe_int(region_obj.get("Employee"))
                        con = _safe_int(region_obj.get("Contractor"))
                        tot = _safe_int(region_obj.get("total")) or ( (emp or 0) + (con or 0) )
                    else:
                        # Some history formats might embed top-level keys; try those
                        emp = _safe_int(e.get("Employee") or (e.get("region") and e.get("region").get("Employee") if isinstance(e.get("region"), dict) else None))
                        con = _safe_int(e.get("Contractor") or (e.get("region") and e.get("region").get("Contractor") if isinstance(e.get("region"), dict) else None))
                        tot = _safe_int(e.get("total") or ( (emp or 0) + (con or 0) ))
                    if emp is None and con is None and tot is None:
                        # try nested 'region' object keys as fallback
                        try:
                            robj = e.get("region") or {}
                            if isinstance(robj, dict):
                                emp = _safe_int(robj.get("Employee"))
                                con = _safe_int(robj.get("Contractor"))
                                tot = _safe_int(robj.get("total"))
                        except Exception:
                            pass
                    if emp is None and con is None:
                        # skip if nothing useful
                        continue
                    if tot is None:
                        tot = (emp or 0) + (con or 0)
                    if dstr not in agg_by_date:
                        agg_by_date[dstr] = {"employee": 0, "contractor": 0, "total": 0, "counted_regions": 0}
                    agg_by_date[dstr]["employee"] += (emp or 0)
                    agg_by_date[dstr]["contractor"] += (con or 0)
                    agg_by_date[dstr]["total"] += (tot or 0)
                    agg_by_date[dstr]["counted_regions"] += 1
                except Exception:
                    continue
            # Now compute per-date totals normalized (we can average across available regions)
            day_vals_emp = []
            day_vals_con = []
            day_vals_tot = []
            # Only consider the last 7 calendar days (if present)
            for i in range(0, 7):
                d = (today - timedelta(days=i)).isoformat()
                entry = agg_by_date.get(d)
                if entry:
                    # use aggregated totals across regions (already summed)
                    day_vals_emp.append(entry.get("employee", 0))
                    day_vals_con.append(entry.get("contractor", 0))
                    day_vals_tot.append(entry.get("total", 0))
            if day_vals_emp:
                history_emp_avg = round(sum(day_vals_emp) / float(len(day_vals_emp)), 2)
            if day_vals_con:
                history_contractor_avg = round(sum(day_vals_con) / float(len(day_vals_con)), 2)
            if day_vals_tot:
                history_overall_avg = round(sum(day_vals_tot) / float(len(day_vals_tot)), 2)
            history_days = len(day_vals_tot)
            if history_days == 0:
                notes.append("History endpoints returned no usable last-7-day rows; history averages not available.")
    except Exception:
        logger.exception("Error fetching/processing history endpoints")
        notes.append("Failed to compute history averages from region history endpoints; partial results.")

    # --- compute percentages (head/live vs CCURE reported)
    def safe_pct(n, denom):
        try:
            if n is None or denom is None:
                return None
            d = float(denom)
            if d == 0.0:
                return None
            return round((float(n) / d) * 100.0, 2)
        except Exception:
            return None

    cc_emp_denom = reported_active_emps
    cc_con_denom = reported_active_contractors
    cc_total_denom = None
    if isinstance(cc_emp_denom, int) and isinstance(cc_con_denom, int):
        cc_total_denom = cc_emp_denom + cc_con_denom

    head_emp_total = sum(v.get("employee", 0) for v in head_per_location.values())
    head_con_total = sum(v.get("contractor", 0) for v in head_per_location.values())
    live_emp_total = sum(v.get("employee", 0) for v in live_per_location.values())
    live_con_total = sum(v.get("contractor", 0) for v in live_per_location.values())

    # percent of CCURE employees/contractors present today (headcount basis)
    head_emp_pct_vs_ccure_today = _sanitize_for_json(safe_pct(head_emp_total, cc_emp_denom))
    head_con_pct_vs_ccure_today = _sanitize_for_json(safe_pct(head_con_total, cc_con_denom))
    head_overall_pct_vs_ccure_today = _sanitize_for_json(safe_pct(head_total, cc_total_denom))

    live_emp_pct_vs_ccure_today = _sanitize_for_json(safe_pct(live_emp_total, cc_emp_denom))
    live_con_pct_vs_ccure_today = _sanitize_for_json(safe_pct(live_con_total, cc_con_denom))
    live_overall_pct_vs_ccure_today = _sanitize_for_json(safe_pct(live_total, cc_total_denom))

    # history percentages vs CCURE (if denominators exist)
    history_emp_pct_vs_ccure = _sanitize_for_json(safe_pct(history_emp_avg, cc_emp_denom))
    history_con_pct_vs_ccure = _sanitize_for_json(safe_pct(history_contractor_avg, cc_con_denom))
    history_overall_pct_vs_ccure = _sanitize_for_json(safe_pct(history_overall_avg, cc_total_denom))

    result = {
        "date": today.isoformat(),
        "headcount": {
            "total_visited_today": int(head_total),
            "employee": int(head_emp_total),
            "contractor": int(head_con_total),
            "by_location": { loc: {"total": int(stats.get("total", 0)), "employee": int(stats.get("employee", 0)), "contractor": int(stats.get("contractor", 0))} for loc, stats in head_per_location.items() }
        },
        "live_headcount": {
            "currently_present_total": int(live_total),
            "employee": int(live_emp_total),
            "contractor": int(live_con_total),
            "by_location": { loc: {"total": int(stats.get("total", 0)), "employee": int(stats.get("employee", 0)), "contractor": int(stats.get("contractor", 0))} for loc, stats in live_per_location.items() }
        },
        "ccure_active": {
            "ccure_active_employees_reported": _safe_int(reported_active_emps),
            "ccure_active_contractors_reported": _safe_int(reported_active_contractors)
        },
        "averages": {
            # existing AttendanceSummary averages
            "head_emp_pct_vs_ccure_today": head_emp_pct_vs_ccure_today,
            "head_contractor_pct_vs_ccure_today": head_con_pct_vs_ccure_today,
            "headcount_overall_pct_vs_ccure_today": head_overall_pct_vs_ccure_today,
            "live_employee_pct_vs_ccure": live_emp_pct_vs_ccure_today,
            "live_contractor_pct_vs_ccure": live_con_pct_vs_ccure_today if False else live_con_pct_vs_ccure_today if 'live_con_pct_vs_ccure_today' in locals() else _sanitize_for_json(safe_pct(live_con_total, cc_con_denom)),
            "live_overall_pct_vs_ccure": live_overall_pct_vs_ccure_today,
            "avg_headcount_last_7_days": _sanitize_for_json(avg_headcount_last_7_days),
            "avg_headcount_per_site_last_7_days": _sanitize_for_json(avg_headcount_per_site_last_7_days),
            "avg_live_per_site": _sanitize_for_json(round(live_total / sites_queried, 2) if sites_queried and sites_queried > 0 else None),

            # NEW: history endpoint averages (region-provided)
            "history_avg_employee_last_7_days": _sanitize_for_json(history_emp_avg),
            "history_avg_contractor_last_7_days": _sanitize_for_json(history_contractor_avg),
            "history_avg_overall_last_7_days": _sanitize_for_json(history_overall_avg),
            "history_days_counted": int(history_days) if history_days is not None else None,
            "history_employee_pct_vs_ccure": history_emp_pct_vs_ccure,
            "history_contractor_pct_vs_ccure": history_con_pct_vs_ccure,
            "history_overall_pct_vs_ccure": history_overall_pct_vs_ccure
        },
        "compliance": _sanitize_for_json(compliance),
        "sites_queried": int(sites_queried),
        "notes": " | ".join(notes) if notes else None
    }

    # sanitize and return
    return _sanitize_for_json(result)










#C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\app.py
from fastapi import FastAPI, UploadFile, File, HTTPException, Request, Query
from fastapi.responses import JSONResponse, FileResponse
import shutil, uuid, json
from settings import UPLOAD_DIR, OUTPUT_DIR
from pathlib import Path
import logging

app = FastAPI(title="Attendance Analytics")

logger = logging.getLogger("attendance_app")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

@app.get("/ccure/compare")
def ccure_compare(
    mode: str = Query("full", description="full or stats"),
    stats_detail: str = Query("ActiveProfiles", description="when mode=stats use this"),
    limit_list: int = Query(200, ge=1, le=5000, description="max rows returned in list samples"),
    export: bool = Query(False, description="if true, writes Excel report to server and returns report_path")
):
    try:
        from ccure_compare_service import compare_ccure_vs_sheets
    except Exception as e:
        logger.exception("ccure_compare_service import failed")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")
    # run compare (the function itself is defensive)
    res = compare_ccure_vs_sheets(mode=mode, stats_detail=stats_detail, limit_list=limit_list, export=export)
    # Ensure result is a dict for JSONResponse
    if not isinstance(res, dict):
        return JSONResponse({"error": "compare service returned unexpected result"}, status_code=500)
    return JSONResponse(res)


# NEW: averages endpoint (calls compute_visit_averages)
@app.get("/ccure/averages")
def ccure_averages(timeout: int = Query(6, description="timeout seconds for live-summary requests")):
    """
    Returns:
    {
      "live_today": { "employee": int, "contractor": int, "total": int },
      "ccure_active": { "active_employees": int|None, "active_contractors": int|None },
      "averages": { "employee_pct": float|None, "contractor_pct": float|None, "overall_pct": float|None },
      "sites_queried": int,
      "notes": null | str
    }
    """
    try:
        from ccure_compare_service import compute_visit_averages
    except Exception as e:
        logger.exception("compute_visit_averages import failed")
        raise HTTPException(status_code=500, detail=f"compute_visit_averages unavailable: {e}")

    try:
        res = compute_visit_averages(timeout=timeout)
    except Exception as e:
        logger.exception("compute_visit_averages execution failed")
        raise HTTPException(status_code=500, detail=f"compute_visit_averages failed: {e}")

    if not isinstance(res, dict):
        return JSONResponse({"error": "compute_visit_averages returned unexpected result"}, status_code=500)
    return JSONResponse(res)


@app.get("/ccure/report/{filename}")
def ccure_report_download(filename: str):
    try:
        safe_name = Path(filename).name
        full = Path(OUTPUT_DIR) / safe_name
        if not full.exists() or not full.is_file():
            raise HTTPException(status_code=404, detail="Report not found")
        return FileResponse(
            str(full),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename=safe_name
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Failed to serve report")
        raise HTTPException(status_code=500, detail=f"Failed to serve report: {e}")


@app.post("/upload/active-employees")
async def upload_active_employees(file: UploadFile = File(...)):
    if not file.filename.endswith(('.xls', '.xlsx')):
        raise HTTPException(400, "Please upload an Excel file")
    dest = Path(UPLOAD_DIR) / f"{uuid.uuid4().hex}_{file.filename}"
    with open(dest, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    try:
        from ingest_excel import ingest_employee_excel
    except Exception as e:
        logger.exception("ingest_excel import failed")
        raise HTTPException(status_code=500, detail=f"ingest_excel import failed: {e}")
    ingest_employee_excel(dest)
    return {"status":"ok", "path": str(dest)}

@app.post("/upload/active-contractors")
async def upload_active_contractors(file: UploadFile = File(...)):
    if not file.filename.endswith(('.xls', '.xlsx')):
        raise HTTPException(400, "Please upload an Excel file")
    dest = Path(UPLOAD_DIR) / f"{uuid.uuid4().hex}_{file.filename}"
    with open(dest, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    try:
        from ingest_excel import ingest_contractor_excel
    except Exception as e:
        logger.exception("ingest_excel import failed")
        raise HTTPException(status_code=500, detail=f"ingest_excel import failed: {e}")
    ingest_contractor_excel(dest)
    return {"status":"ok", "path": str(dest)}

# Keep other endpoints unchanged (ingest/fetch-all, reports/daily)...
# If you want, I can provide the rest verbatim ‚Äî I left them unchanged to minimize merge issues.







Che


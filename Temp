  // NEW: visited-today counts from summary API (poll every minute)
  const [visitedCounts, setVisitedCounts] = useState({ employee: null, contractor: null, total: null });

  useEffect(() => {
    let mounted = true;
    let timer = null;

    const fetchVisitedSummary = async () => {
      try {
        // use existing api axios instance (same base as other api.get calls)
        const res = await api.get('/ccure/verify?raw=true');
        if (!mounted) return;
        const data = res && res.data ? res.data : null;

        // try to read the shape we expect
        const h = (data && (data.headcount_attendance_summary || data.headcount || data.headcount_details)) || {};
        const emp = Number(h.employee || 0);
        const con = Number(h.contractor || 0);
        const tot = h.total_visited_today != null ? Number(h.total_visited_today) : (emp + con);

        setVisitedCounts({ employee: emp, contractor: con, total: tot });
      } catch (e) {
        // network or parse error - don't crash; keep old values
        // optionally you can setVisitedCounts to nulls on repeated failure
        console.warn('[visited summary] fetch failed', e);
      } finally {
        // schedule next fetch in 60s
        timer = setTimeout(fetchVisitedSummary, 60000);
      }
    };

    // immediate first fetch
    fetchVisitedSummary();

    return () => {
      mounted = false;
      if (timer) clearTimeout(timer);
    };
  }, []); // run once










// prefer the minute-polling visitedCounts if present, otherwise fall back to existing values
const displayEmployee = visitedCounts.employee != null ? visitedCounts.employee : (headEmployee ?? liveEmp ?? '—');
const displayContractor = visitedCounts.contractor != null ? visitedCounts.contractor : (headContractor ?? liveContr ?? '—');
const displayHeadTotal = visitedCounts.total != null ? visitedCounts.total : (headTotalVisited ?? ( (displayEmployee === '—' || displayContractor === '—') ? '—' : (Number(displayEmployee || 0) + Number(displayContractor || 0)) ));

// then render:
<Typography variant="h5" sx={{ fontWeight: 800 }}>{displayEmployee}</Typography>
...
<Typography variant="h5" sx={{ fontWeight: 800 }}>{displayContractor}</Typography>
...
<Typography variant="body2" sx={{ fontWeight: 700 }}>{displayHeadTotal}</Typography>
...
<Typography variant="body2" sx={{ fontWeight: 700 }}>{liveCurrentTotal ?? '—'}</Typography>











        if isinstance(detailed, dict):
            mapped = _map_detailed_to_resp(detailed)
            summary = _build_verify_like_summary_from_mapped(mapped, include_raw=False)

            # Honor ?raw=true: return mapped (full summary/mapped payload) for clients that request it.
            if raw:
                try:
                    # save raw-mapped payload to cache (wrapper contains cached_at + payload)
                    _save_ccure_cache(start_date, end_date, {"raw": mapped})
                    # broadcast the mapped payload as-is (SSE clients will get this)
                    broadcast_ccure_update(mapped)
                except Exception:
                    logger.exception("Failed to cache/broadcast raw compute result")
                return JSONResponse(mapped)

            # Default behavior: return the pruned minimal payload used by the UI
            pruned = _prune_summary(summary)
            try:
                _save_ccure_cache(start_date, end_date, pruned)
                broadcast_ccure_update(pruned)
            except Exception:
                logger.exception("Failed to cache/broadcast compute result")
            return JSONResponse(pruned)







            if raw:
                try:
                    _save_ccure_cache(start_date, end_date, {"raw": mapped_fallback})
                    broadcast_ccure_update(mapped_fallback)
                except Exception:
                    logger.exception("Failed to cache/broadcast fallback raw result")
                return JSONResponse(mapped_fallback)

            pruned = _prune_summary(summary)
            ...










Add Above code in below file carefully and share me fully Updated file dont make unnecessary changes









//C:\Users\W0024618\Desktop\global-page\frontend\src\pages\GlobalPage.jsx
  import React, { useState, useEffect, useRef } from 'react';
import {
  Box, Typography, CircularProgress, IconButton, Button, Paper, Divider,
  LinearProgress, Snackbar, Alert, List, ListItem, ListItemText, Tooltip
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import DescriptionIcon from '@mui/icons-material/Description';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import MapChart from '../components/MapChart.jsx';
import api from '../api';
import { useAuth } from '../context/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

import TimerIcon from "@mui/icons-material/AccessTime"; // duration icon
import { Link as RouterLink } from "react-router-dom";
/*
  Important:
  - Do NOT mix /api/headcount and /api/ccure/verify.
  - Region cards (APAC/EMEA/LACA/NAMER) come only from /api/headcount.
  - Live vs CCURE Summary now comes from /api/ccure/verify?raw=true.
  - Initial region totals are zero (keeps previous UI behaviour).
  - We implement polling for headcount and SSE for ccure/stream (realtime via SSE).
*/

export default function GlobalPage() {
  const navigate = useNavigate();
  const auth = useAuth();

  // helper to attempt navigation or show access denied
  // - permCandidates may be a string (single perm) or an array of candidates,
  //   any one of which is sufficient to allow the action.
  // - actionFn is executed only when a permission check passes.
  const attemptNav = (permCandidates = [], actionFn, label) => {
    const candidates = Array.isArray(permCandidates) ? permCandidates : [permCandidates];

    // robust check: call hasPermission for each candidate; allow if any candidate returns true.
    const allowed = candidates.some(p => {
      try {
        return !!auth?.hasPermission?.(p);
      } catch (e) {
        // If auth.hasPermission expects a different shape, we don't want it to blow up the UI.
        console.warn('hasPermission threw error for', p, e);
        return false;
      }
    });

    if (!allowed) {
      setSnack({ open: true, severity: 'warning', message: `Access denied to ${label || 'this resource'}` });
      return false;
    }

    try {
      actionFn && actionFn();
    } catch (e) {
      console.error('Navigation/action failed', e);
      setSnack({ open: true, severity: 'error', message: `Action failed: ${label || ''}` });
    }
    return true;
  };

  // Region totals (headcount) - default to zeros so UI shows 0 immediately (preserve previous behaviour)
  const [counts, setCounts] = useState({ apac: 0, emea: 0, laca: 0, namer: 0 });
  const [selected, setSelected] = useState('global');

  // Averages/ccure state (left panel)
  const [averages, setAverages] = useState(null);
  const [loadingAverages, setLoadingAverages] = useState(true);
  const [averagesError, setAveragesError] = useState(null);

  // upload state
  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  // (kept for backwards-compatibility but upload buttons are always shown now)
  const [uploadedEmployee, setUploadedEmployee] = useState(false);
  const [uploadedContractor, setUploadedContractor] = useState(false);

  const [exportReportPath, setExportReportPath] = useState(null);

  // top-row file inputs
  const fileInputEmpRef = useRef();
  const fileInputContrRef = useRef();
  const [snack, setSnack] = useState({ open: false, severity: 'info', message: '' });

  // date-range state for top-right controls
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  // Polling refs for safe scheduling and backoff
  const headcountRef = useRef({ timerId: null, failureCount: 0, isFetching: false });
  const averagesRef = useRef({ timerId: null, failureCount: 0, isFetching: false });

  const [showCenterUploads, setShowCenterUploads] = useState(false);


// NEW: visited-today counts from summary API (poll every minute)
  const [visitedCounts, setVisitedCounts] = useState({ employee: null, contractor: null, total: null });

  useEffect(() => {
    let mounted = true;
    let timer = null;

    const fetchVisitedSummary = async () => {
      try {
        // use existing api axios instance (same base as other api.get calls)
        const res = await api.get('/ccure/verify?raw=true');
        if (!mounted) return;
        const data = res && res.data ? res.data : null;

        // try to read the shape we expect
        const h = (data && (data.headcount_attendance_summary || data.headcount || data.headcount_details)) || {};
        const emp = Number(h.employee || 0);
        const con = Number(h.contractor || 0);
        const tot = h.total_visited_today != null ? Number(h.total_visited_today) : (emp + con);

        setVisitedCounts({ employee: emp, contractor: con, total: tot });
      } catch (e) {
        // network or parse error - don't crash; keep old values
        // optionally you can setVisitedCounts to nulls on repeated failure
        console.warn('[visited summary] fetch failed', e);
      } finally {
        // schedule next fetch in 60s
        timer = setTimeout(fetchVisitedSummary, 60000);
      }
    };

    // immediate first fetch
    fetchVisitedSummary();

    return () => {
      mounted = false;
      if (timer) clearTimeout(timer);
    };
  }, []); // run once






  // -----------------------
  // HEADCOUNT POLLING ONLY (unchanged)
  // -----------------------
  useEffect(() => {
    let mounted = true;

    const fetchHeadcount = async () => {
      if (!mounted) return;
      if (headcountRef.current.isFetching) return;
      headcountRef.current.isFetching = true;

      try {
        const res = await api.get('/headcount');
        if (!mounted) return;
        const d = res.data;
        if (d && typeof d === 'object') {
          const newCounts = {
            apac: Number(d.apac || 0),
            emea: Number(d.emea || 0),
            laca: Number(d.laca || 0),
            namer: Number(d.namer || 0),
          };
          setCounts(prev => {
            if (
              prev.apac === newCounts.apac &&
              prev.emea === newCounts.emea &&
              prev.laca === newCounts.laca &&
              prev.namer === newCounts.namer
            ) {
              return prev;
            }
            return newCounts;
          });
        } else {
          console.warn('[headcount] unexpected response shape - ignoring', d);
        }
        headcountRef.current.failureCount = 0;
      } catch (err) {
        headcountRef.current.failureCount = (headcountRef.current.failureCount || 0) + 1;
        console.warn('[headcount] fetch failed:', err?.message || err);
      } finally {
        headcountRef.current.isFetching = false;
        const f = headcountRef.current.failureCount || 0;
        const backoffMs = 15000 * Math.pow(2, Math.min(Math.max(f - 1, 0), 4)); // 15s..240s
        headcountRef.current.timerId = setTimeout(fetchHeadcount, backoffMs);
      }
    };

    fetchHeadcount();

    return () => {
      mounted = false;
      if (headcountRef.current.timerId) clearTimeout(headcountRef.current.timerId);
      headcountRef.current.isFetching = false;
    };
  }, []); // run once

  // AVERAGES: use SSE (direct to Python backend) with fallback initial fetch
  useEffect(() => {
    let stopped = false;
    let es = null;
    let backoff = 100000;

    // Allow override via VITE_PY_BACKEND; otherwise assume python at :8000
    const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');

    const connect = () => {
      if (stopped) return;
      try {
        es = new EventSource(`${PY_BACKEND}/ccure/stream`);
      } catch (err) {
        console.warn('SSE creation failed', err);
        es = null;
      }

      if (!es) {
        initialFetch();
        return;
      }

      es.onopen = () => {
        console.info('[SSE] connected to', `${PY_BACKEND}/ccure/stream`);
        backoff = 1000;
        setAveragesError(null);
      };

      es.onmessage = (evt) => {
        try {
          const payload = JSON.parse(evt.data);
          setAverages(payload);
          setLoadingAverages(false);
          setAveragesError(null);
        } catch (e) {
          console.warn('Failed to parse SSE message', e);
        }
      };

      es.onerror = (err) => {
        console.warn('[SSE] error/closed, attempting reconnect', err);
        try { es.close(); } catch (e) { }
        es = null;
        if (stopped) return;
        setTimeout(() => {
          backoff = Math.min(backoff * 2, 30000);
          connect();
        }, backoff);
      };
    };

    const initialFetch = async () => {
      setLoadingAverages(true);
      setAveragesError(null);
      try {
        const res = await api.get('/ccure/verify?raw=true');
        setAverages(res.data);
        setLoadingAverages(false);
        setAveragesError(null);
      } catch (err) {
        console.warn('initial /ccure/verify?raw=true fetch failed', err);
        setLoadingAverages(false);
        setAveragesError(err);
      }
    };

    initialFetch();
    connect();

    return () => {
      stopped = true;
      if (es) {
        try { es.close(); } catch (e) { }
        es = null;
      }
    };
  }, []);

  // -----------------------
  // Upload helper (updated to use fetch, kept robust)
  // -----------------------
  const handleUpload = async (file, type) => {
    if (!file) return;
    const endpoint = type === 'employee' ? '/upload/active-employees' : '/upload/active-contractors';

    const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');
    const url = `${PY_BACKEND}${endpoint}`;

    const fd = new FormData();
    fd.append('file', file, file.name);

    setUploading(true);
    setUploadResult(null);
    setUploadError(null);

    try {
      console.info('Uploading to', url, file.name);
      const resp = await fetch(url, {
        method: 'POST',
        body: fd,
      });

      const rawText = await resp.text();
      let data = null;
      try { data = rawText ? JSON.parse(rawText) : null; } catch (e) { data = { raw: rawText }; }

      console.info('Upload response', resp.status, resp.statusText, data);

      if (!resp.ok) {
        throw new Error(`Upload failed HTTP ${resp.status} ${resp.statusText} - ${JSON.stringify(data)}`);
      }

      setUploadResult(data);
      setSnack({ open: true, severity: 'success', message: `Active Sheet Updated successfully: ${file.name}` });

      // mark canonical presence if backend returned detail.canonical_saved
      const saved = data && data.detail && (data.detail.canonical_saved || data.detail.canonical_saved === "");
      if (type === 'employee') setUploadedEmployee(!!saved);
      if (type === 'contractor') setUploadedContractor(!!saved);

      // best-effort refresh of averages/headcount
      try {
        const r1 = await fetch(`${PY_BACKEND}/ccure/verify?raw=true`);
        if (r1.ok) setAverages(await r1.json());
      } catch (e) { console.warn('refresh verify failed', e); }

      try {
        const r2 = await fetch(`${PY_BACKEND}/headcount`);
        if (r2.ok) {
          const d = await r2.json();
          if (d && typeof d === 'object') {
            setCounts({
              apac: Number(d.apac || 0),
              emea: Number(d.emea || 0),
              laca: Number(d.laca || 0),
              namer: Number(d.namer || 0)
            });
          }
        }
      } catch (e) { console.warn('refresh headcount failed', e); }

    } catch (err) {
      console.error('Upload failed', err);
      setUploadError(err);
      setSnack({ open: true, severity: 'error', message: `Upload failed: ${file.name} — ${err.message}` });
    } finally {
      setUploading(false);
    }
  };

  // --- Helpers: find CCURE arrays in 'averages' and generate CSV ---
  const _escapeCsv = (v) => {
    if (v === null || v === undefined) return '';
    if (typeof v === 'object') {
      try { v = JSON.stringify(v); } catch { v = String(v); }
    }
    const s = String(v).replace(/"/g, '""');
    return `"${s}"`;
  };

  // Find candidate arrays inside the averages object that look like CCURE comparison rows
  const findCcureArrays = (obj) => {
    const found = [];
    if (!obj || typeof obj !== 'object') return found;

    const inspect = (parentKey, val) => {
      if (!val) return;
      if (Array.isArray(val) && val.length > 0 && typeof val[0] === 'object') {
        const sample = val[0];
        // heuristic: many ccure rows have ccure_key or EmployeeID or EmpName fields
        if ('ccure_key' in sample || 'EmployeeID' in sample || 'EmpName' in sample) {
          found.push({ key: parentKey, arr: val });
        }
      } else if (typeof val === 'object') {
        for (const k of Object.keys(val)) {
          inspect(parentKey ? `${parentKey}.${k}` : k, val[k]);
        }
      }
    };

    inspect('', obj);
    return found;
  };

  // Build CSV rows with the requested columns:
  // Employees: ccure_key, EmployeeID, EmpName, PersonnelType, Manager_Name, Profile_Disabled, Employee_Status
  // Contractors: ccure_key, EmployeeID, EmpName, VendorCompany, PersonnelType, Manager_Name, Profile_Disabled, Employee_Status
  const generateCcureCompareCSV = (averagesPayload) => {
    if (!averagesPayload || typeof averagesPayload !== 'object') return null;

    const candidates = findCcureArrays(averagesPayload);
    if (!candidates || candidates.length === 0) return null;

    // choose the first plausible array
    const rows = candidates[0].arr;

    if (!Array.isArray(rows) || rows.length === 0) return null;

    const headers = ['ccure_key', 'EmployeeID', 'EmpName', 'VendorCompany', 'PersonnelType', 'Manager_Name', 'Profile_Disabled', 'Employee_Status'];
    const lines = [headers.map(h => _escapeCsv(h)).join(',')];

    const readField = (r, name) => {
      if (!r) return '';
      if (r[name] !== undefined && r[name] !== null) return r[name];
      if (r.raw && typeof r.raw === 'object' && r.raw[name] !== undefined && r.raw[name] !== null) return r.raw[name];
      // some backends put nested object as string in "raw"
      if (typeof r.raw === 'string') {
        try {
          const parsed = JSON.parse(r.raw);
          if (parsed && parsed[name] !== undefined) return parsed[name];
        } catch { }
      }
      return '';
    };

    for (const r of rows) {
      // derive PersonnelType (sometimes present in row or row.raw)
      const personnelType = readField(r, 'PersonnelType') || readField(r, 'Personnel_Type') || readField(r, 'PersonnelTypeName') || '';

      const ccure_key = readField(r, 'ccure_key') || readField(r, 'CcureKey') || readField(r, 'EmployeeID') || '';
      const employeeId = readField(r, 'EmployeeID') || readField(r, 'Employee_Id') || '';
      const empName = readField(r, 'EmpName') || readField(r, 'EmployeeName') || readField(r, 'Name') || '';
      const vendorCompany = readField(r, 'VendorCompany') || readField(r, 'Vendor_Company') || '';
      const managerName = readField(r, 'Manager_Name') || readField(r, 'ManagerName') || '';
      let profileDisabled = readField(r, 'Profile_Disabled');
      if (profileDisabled === true || profileDisabled === false) profileDisabled = String(profileDisabled);
      const employeeStatus = readField(r, 'Employee_Status') || readField(r, 'Status') || '';

      const rowValues = [
        ccure_key,
        employeeId,
        empName,
        vendorCompany,
        personnelType,
        managerName,
        profileDisabled,
        employeeStatus,
      ];

      lines.push(rowValues.map(v => _escapeCsv(v)).join(','));
    }

    const csvContent = lines.join('\n');
    return csvContent;
  };

  // Export: request server to generate compare report and download the xlsx (binary)
  const exportUploadedSheets = async () => {
    setUploading(true);
    try {
      const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');

      // attempt server-side generation as before
      let genJson = null;
      try {
        const genRes = await fetch(`${PY_BACKEND}/ccure/compare?export=true`, {
          method: 'GET',
        });

        try {
          genJson = await genRes.json();
        } catch (e) {
          const txt = await genRes.text().catch(() => '');
          throw new Error(`Export generation returned non-JSON response: ${txt}`);
        }

        if (!genRes.ok || !genJson || !genJson.report_path) {
          const msg = (genJson && (genJson.detail || genJson.error)) || JSON.stringify(genJson || {});
          console.warn('Server export generation failed or returned unexpected payload:', msg);
          setSnack({ open: true, severity: 'warning', message: 'Server export generation failed; attempting client CSV export' });
        } else {
          // server returned a report_path — attempt to download it
          const reportPath = genJson.report_path;
          setExportReportPath(reportPath);
          setSnack({ open: true, severity: 'success', message: 'Export created — downloading now' });

          try {
            const dlUrl = `${PY_BACKEND}/ccure/report/${encodeURIComponent(reportPath)}`;
            const fileRes = await fetch(dlUrl, { method: 'GET' });

            if (!fileRes.ok) {
              const txt = await fileRes.text().catch(() => '');
              console.warn('Failed to download server report:', txt);
            } else {
              const blob = await fileRes.blob();
              const blobUrl = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = blobUrl;
              a.download = reportPath || 'missing_vs_ccure.xlsx';
              document.body.appendChild(a);
              a.click();
              a.remove();
              window.URL.revokeObjectURL(blobUrl);
            }
          } catch (e) {
            console.warn('Server report download failed:', e);
          }
        }
      } catch (err) {
        // log and fall through to client-side CSV
        console.warn('exportUploadedSheets server call failed:', err);
      }

      // --- Client-side CSV fallback / supplemental export with requested columns ---
      try {
        const csv = generateCcureCompareCSV(averages || {});
        if (csv) {
          const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          // prefer a descriptive filename
          const fname = `missing_vs_ccure_custom_${(new Date()).toISOString().slice(0, 10)}.csv`;
          a.download = fname;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(url);
          setSnack({ open: true, severity: 'success', message: 'Custom CCURE CSV downloaded' });
        } else {
          // nothing to export client-side
          setSnack(prev => ({ ...prev, open: true, severity: 'info', message: 'No CCURE rows found in current averages payload for CSV export' }));
        }
      } catch (e) {
        console.error('Client CSV generation failed', e);
        setSnack(prev => ({ ...prev, open: true, severity: 'error', message: `CSV generation failed: ${e?.message || e}` }));
      }

    } catch (err) {
      console.error('exportUploadedSheets error', err);
      setSnack({ open: true, severity: 'error', message: `Export failed: ${err.message || err}` });
    } finally {
      setUploading(false);
    }
  };

  const onChooseEmployeeFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'employee'); e.target.value = null; };
  const onChooseContractorFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'contractor'); e.target.value = null; };

  // apply date range to re-fetch /ccure/verify
  const applyDateRange = async () => {
    if (!startDate || !endDate) {
      setSnack({ open: true, severity: 'warning', message: 'Please select start and end dates' });
      return;
    }
    setLoadingAverages(true);
    setAveragesError(null);
    try {
      const res = await api.get(`/ccure/verify?raw=true&start_date=${startDate}&end_date=${endDate}`);
      setAverages(res.data);
      setLoadingAverages(false);
      setSnack({ open: true, severity: 'success', message: 'Averages updated' });
    } catch (err) {
      console.warn('applyDateRange failed', err);
      setLoadingAverages(false);
      setAveragesError(err);
      setSnack({ open: true, severity: 'error', message: 'Failed to update averages' });
    }
  };

  // safe helper for nested averages paths
  const safe = (path, fallback = null) => {
    if (!averages) return fallback;
    try {
      return path.split('.').reduce((a, k) => (a && a[k] !== undefined ? a[k] : fallback), averages);
    } catch {
      return fallback;
    }
  };

  // Derived values (unchanged)
  const ccureActiveEmployees = safe('ccure_reported.employees',
    safe('ccure_active.active_employees',
      safe('ccure_active.ccure_active_employees_reported', null)
    )
  );
  const ccureActiveContractors = safe('ccure_reported.contractors',
    safe('ccure_active.active_contractors',
      safe('ccure_active.ccure_active_contractors_reported', null)
    )
  );

  const headTotalVisited = safe('headcount_attendance_summary.total_visited_today',
    safe('headcount_details.total_visited_today', null)
  );
  const headEmployee = safe('headcount_attendance_summary.employee',
    safe('headcount_details.employee', null)
  );
  const headContractor = safe('headcount_attendance_summary.contractor',
    safe('headcount_details.contractor', null)
  );

  const liveCurrentTotal = safe('live_headcount_region_clients.currently_present_total',
    safe('live_headcount_details.currently_present_total',
      null
    )
  );
  const liveEmp = safe('live_headcount_region_clients.employee',
    safe('live_headcount_details.employee', null)
  );
  const liveContr = safe('live_headcount_region_clients.contractor',
    safe('live_headcount_details.contractor', null)
  );

  const empPct = safe('percentages_vs_ccure.head_employee_pct_vs_ccure_today',
    safe('averages.head_emp_pct_vs_ccure_today', null)
  );
  const conPct = safe('percentages_vs_ccure.head_contractor_pct_vs_ccure_today',
    safe('averages.head_contractor_pct_vs_ccure_today', null)
  );
  const overallPct = safe('percentages_vs_ccure.head_overall_pct_vs_ccure_today',
    safe('averages.headcount_overall_pct_vs_ccure_today', null)
  );

  const avg7 = safe('averages.history_avg_overall_last_7_days',
    safe('averages.avg_headcount_last_7_days',
      safe('averages.avg_headcount_last_7_days_db', null)
    )
  );

  const respDate = safe('date', null);

  const locationAvgsObj = safe('averages.history_avg_by_location_last_7_days',
    safe('history_avg_by_location_last_7_days',
      safe('raw.averages.history_avg_by_location_last_7_days', {})
    )
  );

  const locationAvgsList = React.useMemo(() => {
    if (!locationAvgsObj || typeof locationAvgsObj !== 'object') return [];
    const arr = Object.entries(locationAvgsObj).map(([loc, vals]) => {
      return {
        location: loc,
        avg_employee_last_7_days: vals.avg_employee_last_7_days ?? vals.history_avg_employee_last_7_days ?? vals.avg_employee ?? null,
        avg_contractor_last_7_days: vals.avg_contractor_last_7_days ?? vals.history_avg_contractor_last_7_days ?? vals.avg_contractor ?? null,
        avg_overall_last_7_days: vals.avg_overall_last_7_days ?? vals.history_avg_overall_last_7_days ?? vals.avg_overall ?? null,
        history_days_counted: vals.history_days_counted ?? null
      };
    });
    arr.sort((a, b) => (b.avg_overall_last_7_days ?? -Infinity) - (a.avg_overall_last_7_days ?? -Infinity));
    return arr;
  }, [locationAvgsObj]);

  const globalCount = Number((counts.apac || 0)) + Number((counts.emea || 0)) + Number((counts.laca || 0)) + Number((counts.namer || 0));

  const hideScrollbarSx = {
    overflowY: 'auto',
    '&::-webkit-scrollbar': { width: 0, height: 0 },
    scrollbarWidth: 'none',
    msOverflowStyle: 'none',
  };

  // ---- New: derive user name parts for right-side header display
  const userFullName = auth?.user ? (auth.user.EmployeeName || auth.user.username || '') : '';
  const nameParts = (userFullName || '').toString().split(/\s+/).filter(Boolean);
  const firstName = nameParts[0] || '';
  const restName = nameParts.slice(1).join(' ') || '';

  // Render
  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh', overflow: 'hidden', bgcolor: 'background.default' }}>
      {/* Header */}
      <Box px={2} py={1} sx={{ backgroundColor: 'black', color: '#fff', borderBottom: '4px solid #FFD700', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <Box>
          <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}><HomeIcon fontSize="medium" /></IconButton>

          {/* Reports - always displayed; permission gate runs when clicked */}
          <IconButton
            component={Link}
            to="#"
            sx={{ color: '#FFC72C', ml: 1 }}
            onClick={(e) => {
              e.preventDefault();
              attemptNav(['gsoc_reports'], () => navigate('/reports'), 'Reports');
            }}
          >
            <DescriptionIcon fontSize="medium" />
          </IconButton>

          {/* Device camera link (protected by device_health) - if you want always visible, remove the guard here */}
          {auth?.hasPermission('device_health') && (
            <IconButton
              component="a"
              href="http://10.138.161.4:3000/dashboard/index.html"
              rel="noopener noreferrer"
              sx={{ color: '#FFC72C', ml: 1 }}
            >
              <i className="fa-solid fa-camera" style={{ fontSize: 20 }} />
            </IconButton>
          )}

          {/* Associate Verification Tool link */}
          {auth?.hasPermission('associate_verify') && (
            <IconButton
              component="a"
              href="http://10.199.22.57:3004/"
              rel="noopener noreferrer"
              sx={{ color: '#FFF', ml: 1 }}
            >
              <i className="bi bi-patch-check"></i>
            </IconButton>
          )}

{auth?.hasPermission('global_duration') && (
  <Tooltip title="Duration Reports">
    <IconButton
      component={RouterLink}
      to="/duration"
      size="large"
      aria-label="Duration Reports"
      sx={{ color: '#FFF', ml: 1 }}
    >
      <TimerIcon />
    </IconButton>
  </Tooltip>
)}

        </Box>

        <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <Box component="img" src="/wu-head-logo.png" alt="WU Logo" sx={{ height: { xs: 30, md: 55 }, mr: 2 }} />
          <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>Global Headcount Dashboard</Typography>
        </Box>

        {/* --- RIGHT SIDE: moved Login/User / Logout / Access Manager into header (replaces previous separate block) --- */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          {auth?.user ? (
            <>
              {/* Display like "Sonu , Pandey" (first name, comma, rest-of-name) */}
              <Typography variant="body2" sx={{ color: '#fff', fontWeight: 700 }}>
                {firstName}{restName ? ',' : ''} {restName}
              </Typography>

              <Button
                size="small"
                variant="outlined"
                onClick={() => { auth.logout(); window.location.href = '/login'; }}
                sx={{ color: '#fff', borderColor: 'rgba(255,255,255,0.12)', textTransform: 'none' }}
              >
                Logout
              </Button>

              {auth.canGrant && (
                <Button size="small" variant="contained" onClick={() => navigate('/access-manager')} sx={{ ml: 1, textTransform: 'none', fontWeight: 700 }}>
                  Access Manager
                </Button>
              )}
            </>
          ) : (
            <Button size="small" variant="contained" onClick={() => navigate('/login')}>Login</Button>
          )}
        </Box>
      </Box>

      {/* Top row: Uploads | GLOBAL + Region Cards | Date selectors */}
      <Box sx={{ display: 'flex', alignItems: 'center', p: 1, px: 1, gap: 1 }}>
        {/* Left: fixed column with stacked upload/export buttons (aligned left) */}
        <Box sx={{ width: 260, display: 'flex', flexDirection: 'column', gap: 1 }}>
          <input type="file" accept=".xls,.xlsx,.csv" style={{ display: 'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
          {/* Always visible now; action is permission-guarded */}
          <Button
            variant="contained"
            size="small"
            startIcon={<UploadFileIcon />}
            onClick={() => attemptNav(['upload_active_employees'], () => fileInputEmpRef.current && fileInputEmpRef.current.click(), 'Upload Active Employee Sheet')}
            sx={{ width: '100%', height: 25, textTransform: 'none', fontWeight: 700 }}
          >
            Upload Active Employee Sheet
          </Button>

          <input type="file" accept=".xls,.xlsx,.csv" style={{ display: 'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
          <Button
            variant="contained"
            size="small"
            startIcon={<UploadFileIcon />}
            onClick={() => attemptNav(['upload_active_contractors'], () => fileInputContrRef.current && fileInputContrRef.current.click(), 'Upload Active Contractor Sheet')}
            sx={{ width: '100%', height: 25, textTransform: 'none', fontWeight: 700 }}
          >
            Upload Active Contractor Sheet
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<DescriptionIcon />}
            onClick={() => attemptNav(['export_compare'], exportUploadedSheets, 'Export Comparison → Report')}
            sx={{ width: '100%', height: 25, textTransform: 'none', fontWeight: 700 }}
          >
            Export Comparison → Report
          </Button>
        </Box>

        {/* Center: flexible, keeps region cards exactly centered on screen */}
        <Box sx={{ flex: 1, display: 'flex', justifyContent: 'center' }}>
          <Box sx={{ display: 'flex', gap: 3, alignItems: 'center', justifyContent: 'center', flexWrap: 'wrap' }}>
            {[
              { key: 'global', label: 'GLOBAL', count: globalCount, url: null },
              { key: 'apac', label: 'APAC', count: counts.apac, url: 'http://10.199.22.57:3000/' },
              { key: 'emea', label: 'EMEA', count: counts.emea, url: 'http://10.199.22.57:3001/' },
              { key: 'laca', label: 'LACA', count: counts.laca, url: 'http://10.199.22.57:3003/' },
              { key: 'namer', label: 'NAMER', count: counts.namer, url: 'http://10.199.22.57:3002/' },
            ].map(region => (
              <Box
                key={region.key}
                onClick={() => {
                  if (region.key === 'global') {
                    const el = document.querySelector('[data-global-left-panel]');
                    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    setSelected('global');
                    return;
                  }
                  // region-level permission candidates (any one is sufficient)
                  const permCandidates = [`headcount.${region.key}`, 'headcount', 'global_access'];
                  attemptNav(permCandidates, () => {
                    if (region.url) window.location.href = region.url;
                  }, `${region.label} headcount`);
                }}
                sx={{
                  cursor: 'pointer',
                  width: 200,
                  height: 88,
                  display: 'flex',
                  flexDirection: 'column',
                  justifyContent: 'center',
                  alignItems: 'center',
                  border: '4px solid rgba(255, 204, 0, 0.89)',
                  borderRadius: 2,
                  boxShadow: 3,
                  bgcolor: 'transparent',
                  '&:hover': { opacity: 0.95 },
                }}
              >
                <Typography variant="subtitle2" sx={{ fontWeight: 'bold', color: '#FFC72C', fontSize: { xs: '0.95rem', md: '1.2rem' } }}>
                  {region.label}
                </Typography>
                <Typography variant="h4" sx={{ fontWeight: 900, fontSize: { xs: '1.2rem', md: '1.6rem' }, color: '#FFFFFF' }}>
                  {region.count ?? 0}
                </Typography>
              </Box>
            ))}
          </Box>
        </Box>

        {/* Right: fixed column for date selectors (aligned right) */}
        <Box sx={{ width: 360, display: 'flex', flexDirection: 'column', gap: 1, alignItems: 'flex-end' }}>
          <Paper sx={{ p: 1, display: 'flex', gap: 1, alignItems: 'center', boxShadow: 1, width: '100%' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column', width: 160 }}>
              <Typography variant="caption" color="text.secondary">Select Start date</Typography>
              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                style={{ width: '100%', height: 34, borderRadius: 4, border: '1px solid rgba(255,255,255,0.06)', padding: 4, background: '#FFCC00', color: 'Black' }}
              />
            </Box>

            <Box sx={{ display: 'flex', flexDirection: 'column', width: 160 }}>
              <Typography variant="caption" color="text.secondary">Select End date</Typography>
              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                style={{ width: '100%', height: 34, borderRadius: 4, border: '1px solid rgba(255,255,255,0.06)', padding: 4, background: '#FFCC00', color: 'Black' }}
              />
            </Box>
          </Paper>

          <Box sx={{ width: '100%', display: 'flex', justifyContent: 'flex-start' }}>
            <Button size="small" variant="contained" onClick={applyDateRange} sx={{ height: 36, textTransform: 'none', fontWeight: 700 }}>
              Apply
            </Button>
          </Box>
        </Box>
      </Box>


      {/* Main: left summary | center map | right averages */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        {/* Left detail panel */}
        <Box
          data-global-left-panel
          sx={{
            width: { xs: 320, md: 360 },
            minWidth: { md: 320 },
            p: 2,
            bgcolor: 'background.paper',
            borderRight: '1px solid rgba(255,255,255,0.06)',
            display: 'flex',
            flexDirection: 'column',
            ...hideScrollbarSx,
            height: '100%',
          }}
        >
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Live vs CCURE Summary</Typography>

          {loadingAverages ? (
            <Box sx={{ py: 2 }}><LinearProgress /></Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load CCURE averages</Alert>
          ) : averages ? (
            <>
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">CCURE Active (reported)</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1, alignItems: 'center' }}>
                  <Box>
                    <Typography variant="h4" sx={{ fontWeight: 800 }}>{ccureActiveEmployees ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Employees</Typography>
                  </Box>
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{ccureActiveContractors ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Contractors</Typography>
                  </Box>
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="subtitle2" color="text.secondary">Live Today</Typography>
                  <Typography variant="caption" color="text.secondary">{respDate ?? ''}</Typography>
                </Box>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{headEmployee ?? liveEmp ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Employee</Typography>
                  </Box>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{headContractor ?? liveContr ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Contractor</Typography>
                  </Box>
                </Box>

                <Divider sx={{ my: 1 }} />

                <Box>
                  <Typography variant="caption" color="text.secondary">Totals</Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.75 }}>
                    <Typography variant="body2">Attendance total (today)</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{headTotalVisited ?? '—'}</Typography>
                  </Box>

                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                    <Typography variant="body2">Live region total</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveCurrentTotal ?? '—'}</Typography>
                  </Box>

                  {safe('headcount_details.total_visited_today', null) != null && (
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                      <Typography variant="body2">Detail rows total</Typography>
                      <Typography variant="body2" sx={{ fontWeight: 700 }}>{safe('headcount_details.total_visited_today', '—')}</Typography>
                    </Box>
                  )}
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">Percentages vs CCURE</Typography>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">Employees</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{empPct != null ? `${empPct}%` : '—'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="body2">Contractors</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{conPct != null ? `${conPct}%` : '—'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                  <Typography variant="body2">Overall</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{overallPct != null ? `${overallPct}%` : '—'}</Typography>
                </Box>

                <Divider sx={{ my: 1 }} />
                <Typography variant="caption" color="text.secondary">Averages</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">7-day avg headcount</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{avg7 ?? '—'}</Typography>
                </Box>
              </Paper>

              {averages.notes && (
                <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.01)' }}>
                  <Typography variant="body2" sx={{ mt: 1 }}>{averages.notes}</Typography>
                </Paper>
              )}
            </>
          ) : (
            <Typography variant="body2" color="text.secondary">No data</Typography>
          )}
        </Box>

        {/* Center: map (flex) */}
        <Box sx={{ flex: 1, minWidth: 0, position: 'relative', display: 'flex', flexDirection: 'column' }}>
          <Box sx={{ flex: 1, minHeight: 0 }}>
            <MapChart
              selected={selected}
              initialZoom={1.8}
              onClickSite={(marker) => {
                // marker.region is the current selected region from MapChart call
                const regionKey = marker.region || selected || 'global';
                const permCandidates = [`headcount.${regionKey}`, 'headcount', 'global_access'];
                attemptNav(permCandidates, () => {
                  if (marker.url) window.location.href = marker.url;
                }, `${regionKey.toUpperCase()}`);
              }}
            />
          </Box>
        </Box>

        {/* Right side: Location averages panel */}
        <Box
          sx={{
            width: { xs: 320, md: 360 },
            minWidth: { md: 320 },
            borderLeft: '1px solid rgba(255,255,255,0.06)',
            bgcolor: 'background.paper',
            p: 2,
            display: 'flex',
            flexDirection: 'column',
            ...hideScrollbarSx,
            height: '100%',
          }}
        >
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Location Averages</Typography>

          {loadingAverages ? (
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', py: 4 }}>
              <CircularProgress />
            </Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load location averages</Alert>
          ) : locationAvgsList.length === 0 ? (
            <Typography variant="body2" color="text.secondary">No location averages available</Typography>
          ) : (
            <List dense disablePadding sx={{ flex: 1 }}>
              {locationAvgsList.map(item => (
                <ListItem key={item.location} sx={{ alignItems: 'flex-start', py: 1.25, borderBottom: '1px solid rgba(255,255,255,0.03)' }}>
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography sx={{ fontWeight: 800 }}>{item.location}</Typography>
                        <Typography variant="body2" sx={{ fontWeight: 800 }}>
                          {item.avg_overall_last_7_days != null ? Math.round(item.avg_overall_last_7_days) : '—'}
                        </Typography>
                      </Box>
                    }
                    secondary={
                      <Box sx={{ display: 'flex', gap: 2, mt: 0.5, flexWrap: 'wrap' }}>
                        <Typography variant="caption" color="text.secondary">Emp: <strong>{item.avg_employee_last_7_days != null ? Math.round(item.avg_employee_last_7_days) : '—'}</strong></Typography>
                        <Typography variant="caption" color="text.secondary">Contr: <strong>{item.avg_contractor_last_7_days != null ? Math.round(item.avg_contractor_last_7_days) : '—'}</strong></Typography>
                        {item.history_days_counted != null && <Typography variant="caption" color="text.secondary">Days: {item.history_days_counted}</Typography>}
                      </Box>
                    }
                    primaryTypographyProps={{ component: 'div' }}
                    secondaryTypographyProps={{ component: 'div' }}
                  />
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </Box>

      <Snackbar open={snack.open} autoHideDuration={3500} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>
        <Alert severity={snack.severity} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>{snack.message}</Alert>
      </Snackbar>
       
    </Box>
  );
}


































# combined_app_with_duration.py
# (Place this file replacing your previous combined_app_with_duration.py)
from fastapi import FastAPI, UploadFile, File, HTTPException, Query, Body
from fastapi.responses import JSONResponse, FileResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.encoders import jsonable_encoder
import shutil
import uuid
import json
import logging
from pathlib import Path
from datetime import date, datetime, timedelta
import re
import asyncio
from typing import Optional, Dict, Any, List
import hashlib
import time
import os
import sys
import pandas as pd
from zoneinfo import ZoneInfo
import warnings
import functools

# --- DB / models imports (kept for endpoints that still use DB like headcount/attendance fallback) ---
try:
    from db import SessionLocal
    from models import LiveSwipe, AttendanceSummary
except Exception:
    SessionLocal = None
    LiveSwipe = None
    AttendanceSummary = None

# Settings and dirs
try:
    from settings import DATA_DIR as SETTINGS_DATA_DIR, OUTPUT_DIR as SETTINGS_OUTPUT_DIR
    DATA_DIR = Path(SETTINGS_DATA_DIR)
    OUTPUT_DIR = Path(SETTINGS_OUTPUT_DIR)
except Exception:
    DATA_DIR = Path(__file__).resolve().parent / "data"
    OUTPUT_DIR = Path(__file__).resolve().parent / "output"

RAW_UPLOADS_DIR = DATA_DIR / "raw_uploads"
DATA_DIR.mkdir(parents=True, exist_ok=True)
RAW_UPLOADS_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

app = FastAPI(title="Attendance Analytics")

logger = logging.getLogger("attendance_app")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

# Timeouts
REGION_TIMEOUT_SECONDS = 300
COMPUTE_WAIT_TIMEOUT_SECONDS = 300
COMPUTE_SYNC_TIMEOUT_SECONDS = 300

_allowed_origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://localhost:3008"
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=_allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

_broadcaster_clients = set()

def broadcast_ccure_update(payload: dict):
    """
    Broadcast the payload (dict) to SSE clients.
    Accepts wrapper {"cached_at":..., "payload": ...} or direct payload; unwraps automatically.
    """
    try:
        if isinstance(payload, dict) and "payload" in payload and isinstance(payload["payload"], dict):
            payload_to_send = payload["payload"]
        else:
            payload_to_send = payload
    except Exception:
        payload_to_send = payload

    if not _broadcaster_clients:
        return
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = None
    for q in list(_broadcaster_clients):
        try:
            if loop and loop.is_running():
                loop.call_soon_threadsafe(q.put_nowait, payload_to_send)
            else:
                q.put_nowait(payload_to_send)
        except Exception:
            logger.exception("Failed to push payload to SSE client (will remove client)")
            try:
                _broadcaster_clients.discard(q)
            except Exception:
                pass

async def _sse_event_generator(client_queue: asyncio.Queue):
    try:
        while True:
            payload = await client_queue.get()
            try:
                data = json.dumps(payload, default=str)
            except Exception:
                data = json.dumps({"error": "serialization error", "payload": str(payload)})
            yield f"data: {data}\n\n"
    finally:
        try:
            _broadcaster_clients.discard(client_queue)
        except Exception:
            pass
        return

@app.get("/ccure/stream")
async def ccure_stream():
    q = asyncio.Queue()
    _broadcaster_clients.add(q)
    # Immediately push latest cache if present (unwrapped payload)
    try:
        cached = _load_ccure_cache_any()
        if cached:
            try:
                payload = cached.get("payload") if (isinstance(cached, dict) and "payload" in cached) else cached
                q.put_nowait(payload)
            except Exception:
                pass
    except Exception:
        pass
    generator = _sse_event_generator(q)
    headers = {"Cache-Control": "no-cache", "X-Accel-Buffering": "no"}
    return StreamingResponse(generator, media_type="text/event-stream", headers=headers)

@app.get("/api/ccure/stream")
async def api_ccure_stream():
    return await ccure_stream()

def _guess_region_from_text(txt: str) -> str:
    if not txt:
        return "unknown"
    s = str(txt).strip().lower()
    s = re.sub(r"[,\-/()]", " ", s)
    if any(k in s for k in ("pune","quezon city","taguig city","bengaluru","hyderabad","chennai","manila","singapore","hong kong","beijing","shanghai","jakarta","kuala","osaka","tokyo","seoul","bangkok")):
        return "apac"
    if any(k in s for k in ("london","dublin","paris","frankfurt","amsterdam","stockholm","cape town","johannesburg","berlin","brussels","madrid","rome","milan")):
        return "emea"
    if any(k in s for k in ("mexico","bogota","buenos","santiago","sao","salvador","lima","caracas")):
        return "laca"
    if any(k in s for k in ("denver","new york","ny","chicago","toronto","vancouver","los angeles","san francisco","boston","houston","atlanta","miami")):
        return "namer"
    return "unknown"

@app.get("/headcount")
def api_headcount():
    """
    Return simple region totals (apac/emea/laca/namer).
    Prefer deriving totals from cached ccure payload (so frontend cards match CCURE / Live).
    Fallback to DB counting if needed.
    """
    try:
        # Try cached ccure payload first - it's the source of truth for UI counts
        try:
            cached = _load_ccure_cache_any()
            if cached and isinstance(cached, dict):
                payload = cached.get("payload") if "payload" in cached else cached
                # Prefer live_headcount_details.by_location -> sum totals by mapped region
                by_location = {}
                # prefer live details then headcount details
                if isinstance(payload.get("live_headcount_details", {}).get("by_location"), dict) and payload.get("live_headcount_details", {}).get("by_location"):
                    by_location = payload["live_headcount_details"].get("by_location", {})
                elif isinstance(payload.get("headcount_details", {}).get("by_location"), dict) and payload.get("headcount_details", {}).get("by_location"):
                    by_location = payload["headcount_details"].get("by_location", {})
                elif isinstance(payload.get("live_headcount_details", {}).get("by_location"), list):
                    # some shapes might put a list
                    for entry in payload["live_headcount_details"].get("by_location", []):
                        if isinstance(entry, dict) and entry.get("total") is not None:
                            by_location[entry.get("location") or entry.get("name") or str(len(by_location))] = entry
                if by_location:
                    totals = {"apac": 0, "emea": 0, "laca": 0, "namer": 0, "unknown": 0}
                    for loc, obj in by_location.items():
                        try:
                            total = int(obj.get("total") or obj.get("count") or 0)
                        except Exception:
                            total = 0
                        region = _guess_region_from_text(loc)
                        if region not in totals:
                            totals["unknown"] += total
                        else:
                            totals[region] += total
                    return JSONResponse({
                        "apac": int(totals.get("apac", 0)),
                        "emea": int(totals.get("emea", 0)),
                        "laca": int(totals.get("laca", 0)),
                        "namer": int(totals.get("namer", 0))
                    })
        except Exception:
            logger.exception("headcount: cache-derived totals failed (continuing to DB fallback)")

        # DB fallback: previous logic (if SessionLocal available)
        if SessionLocal is None:
            return JSONResponse({"apac": 0, "emea": 0, "laca": 0, "namer": 0})
        totals = {"apac": 0, "emea": 0, "laca": 0, "namer": 0, "unknown": 0}
        with SessionLocal() as db:
            try:
                today = date.today()
                rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
                if rows:
                    seen_keys = set()
                    for r in rows:
                        try:
                            key = None
                            if getattr(r, "employee_id", None):
                                key = str(r.employee_id).strip()
                            if not key:
                                if r.derived and isinstance(r.derived, dict):
                                    key = str(r.derived.get("card_number") or r.derived.get("CardNumber") or "").strip() or None
                            if not key:
                                totals["unknown"] += 1
                                continue
                            if key in seen_keys:
                                continue
                            seen_keys.add(key)
                            cls = None
                            if r.derived and isinstance(r.derived, dict):
                                partition = r.derived.get("partition") or r.derived.get("PartitionName2") or None
                            else:
                                partition = None
                            loc = partition or "unknown"
                            region = _guess_region_from_text(loc)
                            totals[region] = totals.get(region, 0) + 1
                        except Exception:
                            totals["unknown"] += 1
                else:
                    start = datetime.combine(today, datetime.min.time())
                    end = datetime.combine(today, datetime.max.time())
                    swipes = db.query(LiveSwipe).filter(LiveSwipe.timestamp >= start, LiveSwipe.timestamp <= end).all()
                    for s in swipes:
                        loc = getattr(s, "partition", None) or getattr(s, "PartitionName2", None) or "unknown"
                        region = _guess_region_from_text(loc)
                        totals[region] = totals.get(region, 0) + 1
            except Exception:
                logger.exception("Failed to compute headcount regions (DB fallback)")
        return JSONResponse({
            "apac": int(totals.get("apac", 0)),
            "emea": int(totals.get("emea", 0)),
            "laca": int(totals.get("laca", 0)),
            "namer": int(totals.get("namer", 0))
        })
    except Exception as exc:
        logger.exception("api_headcount failed")
        raise HTTPException(status_code=500, detail=f"headcount error: {exc}")

# ---------- helpers ----------
def _normalize_employee_key(x) -> Optional[str]:
    if x is None:
        return None
    try:
        s = str(x).strip()
        if s == "" or s.lower() in ("nan", "none", "na", "null"):
            return None
        return s
    except Exception:
        return None

def _normalize_card_like(s) -> Optional[str]:
    if s is None:
        return None
    try:
        ss = str(s).strip()
        if ss == "":
            return None
        digits = re.sub(r'\D+', '', ss)
        if digits == "":
            return None
        return digits.lstrip('0') or digits
    except Exception:
        return None

def _safe_int(v):
    try:
        if v is None:
            return None
        return int(v)
    except Exception:
        try:
            return int(float(v))
        except Exception:
            return None

# ---------- simplified fallback compute (already present in your code) ----------
def build_ccure_averages(start_date: Optional[str] = None, end_date: Optional[str] = None):
    """
    Fallback averages computation using AttendanceSummary only.
    Returns a compact shape (live_today, ccure_active, averages, notes).
    (Kept mostly as in original with minor defensive guards.)
    """
    try:
        def _parse_date_param(s):
            if not s:
                return None
            try:
                return datetime.strptime(s, "%Y-%m-%d").date()
            except Exception:
                try:
                    return date.fromisoformat(s)
                except Exception:
                    return None

        today = date.today()
        start_obj = _parse_date_param(start_date) if start_date else (today - timedelta(days=6))
        end_obj = _parse_date_param(end_date) if end_date else today
        if start_obj is None or end_obj is None or start_obj > end_obj:
            start_obj = today - timedelta(days=6)
            end_obj = today

        if SessionLocal is None:
            return {
                "date": today.isoformat(),
                "notes": None,
                "live_today": {"employee": 0, "contractor": 0, "total_reported": 0, "total_from_details": 0},
                "ccure_active": {},
                "averages": {}
            }

        with SessionLocal() as db:
            try:
                att_rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
            except Exception:
                logger.exception("Failed to query AttendanceSummary")
                att_rows = []

            live_emp = 0
            live_contr = 0
            unknown_count = 0
            seen_keys = set()

            def classify_from_derived(derived):
                try:
                    if not derived or not isinstance(derived, dict):
                        return "contractor"
                    for k in ("PersonnelType","personnelType","personnel_type","Personnel Type","Type","personnel"):
                        v = derived.get(k)
                        if v and "employee" in str(v).strip().lower():
                            return "employee"
                    for k in ("Employee_Status","Employee Status","Status"):
                        v = derived.get(k)
                        if v and "terminated" in str(v).strip().lower():
                            return "employee"
                    return "contractor"
                except Exception:
                    return "contractor"

            if att_rows:
                for a in att_rows:
                    key = None
                    try:
                        key = _normalize_employee_key(a.employee_id)
                    except Exception:
                        key = None
                    if not key:
                        try:
                            key = _normalize_card_like(a.derived.get('card_number') if (a.derived and isinstance(a.derived, dict)) else None)
                        except Exception:
                            key = None
                    if not key:
                        unknown_count += 1
                        continue
                    if key in seen_keys:
                        continue
                    seen_keys.add(key)
                    cls = classify_from_derived(a.derived)
                    if cls == "employee":
                        live_emp += 1
                    elif cls == "contractor":
                        live_contr += 1
                    else:
                        unknown_count += 1

                live_total_reported = live_emp + live_contr + unknown_count
                live_total_details = len(att_rows)
            else:
                live_total_reported = 0
                live_total_details = 0
                try:
                    import region_clients
                    details = []
                    try:
                        details = region_clients.fetch_all_details(timeout=REGION_TIMEOUT_SECONDS) or []
                    except Exception:
                        logger.exception("region_clients.fetch_all_details failed in build_ccure_averages()")
                        details = []
                    if details:
                        for d in details:
                            try:
                                cls = "contractor"
                                for k in ("PersonnelType","personnelType","personnel_type","Personnel Type","Type","personnel"):
                                    v = d.get(k)
                                    if v and "employee" in str(v).strip().lower():
                                        cls = "employee"
                                        break
                                if cls == "employee":
                                    live_emp += 1
                                else:
                                    live_contr += 1
                                live_total_details += 1
                            except Exception:
                                continue
                        live_total_reported = live_emp + live_contr
                    else:
                        try:
                            regions = region_clients.fetch_all_regions(timeout=REGION_TIMEOUT_SECONDS) or []
                            for r in regions:
                                try:
                                    c = r.get("count")
                                    if isinstance(c, (int, float)):
                                        live_total_reported += int(c)
                                except Exception:
                                    continue
                        except Exception:
                            logger.exception("region_clients.fetch_all_regions failed in build_ccure_averages()")
                except Exception:
                    logger.exception("region_clients not importable in build_ccure_averages()")

            # compute avg range using AttendanceSummary if possible
            avg_range = None
            try:
                q = db.query(AttendanceSummary.date, AttendanceSummary.employee_id, AttendanceSummary.presence_count)\
                      .filter(AttendanceSummary.date >= start_obj, AttendanceSummary.date <= end_obj).all()
                by_date = {}
                for row in q:
                    d = row[0]
                    key = (row[1] or "").strip() if row[1] else None
                    if not key:
                        continue
                    if d not in by_date:
                        by_date[d] = set()
                    try:
                        presence_val = getattr(row, 'presence_count', row[2])
                        if int(presence_val) > 0:
                            by_date[d].add(key)
                    except Exception:
                        by_date[d].add(key)
                days_count = (end_obj - start_obj).days + 1
                daily_counts = [len(by_date.get(start_obj + timedelta(days=i), set())) for i in range(days_count)]
                if days_count and any(daily_counts):
                    avg_range = int(round(sum(daily_counts) / float(days_count)))
                else:
                    avg_range = None
            except Exception:
                logger.exception("Failed computing range average from AttendanceSummary")
                avg_range = None

        # fallback region history attempt (kept)
        if avg_range is None:
            try:
                import region_clients
                entries = region_clients.fetch_all_history(timeout=REGION_TIMEOUT_SECONDS) or []
                agg = {}
                for e in entries:
                    try:
                        dstr = e.get("date")
                        if not dstr:
                            continue
                        region_obj = e.get("region") if isinstance(e.get("region"), dict) else None
                        emp = None
                        con = None
                        tot = None
                        if region_obj:
                            emp = _safe_int(region_obj.get("Employee"))
                            con = _safe_int(region_obj.get("Contractor"))
                            tot = _safe_int(region_obj.get("total")) or ((emp or 0) + (con or 0))
                        else:
                            emp = _safe_int(e.get("Employee"))
                            con = _safe_int(e.get("Contractor"))
                            tot = _safe_int(e.get("total"))
                        if emp is None and con is None:
                            continue
                        if tot is None:
                            tot = (emp or 0) + (con or 0)
                        if dstr not in agg:
                            agg[dstr] = {"total": 0, "count": 0}
                        agg[dstr]["total"] += tot or 0
                        agg[dstr]["count"] += 1
                    except Exception:
                        continue
                per_date_totals = []
                days_count = (end_obj - start_obj).days + 1
                for i in range(days_count):
                    dcheck = (start_obj + timedelta(days=i)).isoformat()
                    if dcheck in agg and agg[dcheck]["count"] > 0:
                        per_day_avg = float(agg[dcheck]["total"]) / float(agg[dcheck]["count"])
                        per_date_totals.append(per_day_avg)
                if per_date_totals:
                    avg_range = int(round(sum(per_date_totals) / float(len(per_date_totals))))
            except Exception:
                logger.exception("Failed computing avg_range from region history in fallback")

        # attempt ccure client stats
        ccure_stats = {}
        try:
            import ccure_client
            if hasattr(ccure_client, "get_global_stats"):
                ccure_stats = ccure_client.get_global_stats() or {}
        except Exception:
            logger.debug("ccure_client.get_global_stats not available", exc_info=True)

        cc_active_emps = None
        cc_active_contractors = None
        try:
            if isinstance(ccure_stats, dict):
                a = ccure_stats.get("ActiveEmployees") or ccure_stats.get("active_employees") or None
                b = ccure_stats.get("ActiveContractors") or ccure_stats.get("active_contractors") or None
                if a is not None and str(a).strip() != "":
                    cc_active_emps = int(a)
                if b is not None and str(b).strip() != "":
                    cc_active_contractors = int(b)
        except Exception:
            cc_active_emps = cc_active_contractors = None

        emp_pct = None
        contr_pct = None
        overall_pct = None
        try:
            if isinstance(cc_active_emps, int) and cc_active_emps > 0:
                emp_pct = round((live_emp / float(cc_active_emps)) * 100.0, 2)
            if isinstance(cc_active_contractors, int) and cc_active_contractors > 0:
                contr_pct = round((live_contr / float(cc_active_contractors)) * 100.0, 2)
            if isinstance(cc_active_emps, int) and isinstance(cc_active_contractors, int) and (cc_active_emps + cc_active_contractors) > 0:
                overall_pct = round(((live_emp + live_contr) / float(cc_active_emps + cc_active_contractors)) * 100.0, 2)
        except Exception:
            emp_pct = contr_pct = overall_pct = None

        resp = {
            "date": today.isoformat(),
            "notes": f"Computed over range {start_obj.isoformat()} -> {end_obj.isoformat()}" if (start_date or end_date) else None,
            "live_today": {
                "employee": live_emp,
                "contractor": live_contr,
                "total_reported": live_total_reported,
                "total_from_details": live_total_details
            },
            "ccure_active": {
                "active_employees": cc_active_emps,
                "active_contractors": cc_active_contractors,
                "ccure_active_employees_reported": cc_active_emps,
                "ccure_active_contractors_reported": cc_active_contractors
            },
            "averages": {
                "employee_pct": emp_pct,
                "contractor_pct": contr_pct,
                "overall_pct": overall_pct,
                "avg_headcount_last_7_days": avg_range,
                "head_emp_pct_vs_ccure_today": emp_pct,
                "head_contractor_pct_vs_ccure_today": contr_pct,
                "headcount_overall_pct_vs_ccure_today": overall_pct,
                "history_avg_overall_last_7_days": avg_range
            }
        }

        return resp
    except Exception:
        logger.exception("build_ccure_averages failed")
        raise

# ---------- upload endpoints (unchanged except path mapping) ----------
ALLOWED_EXT = (".xls", ".xlsx", ".csv")

def _remove_old_files_for_kind(kind: str):
    try:
        for p in DATA_DIR.iterdir():
            if p.is_file() and f"active_{kind}" in p.name.lower():
                try:
                    p.unlink()
                except Exception:
                    logger.warning("Could not remove old canonical file %s", p)
        for p in RAW_UPLOADS_DIR.iterdir():
            if p.is_file() and kind in p.name.lower():
                try:
                    p.unlink()
                except Exception:
                    logger.warning("Could not remove old raw file %s", p)
    except Exception:
        logger.exception("error while removing old files for kind=%s", kind)

def _save_upload_and_rotate(upload_file: UploadFile, kind: str) -> dict:
    fname = Path(upload_file.filename).name
    ext = Path(fname).suffix.lower()
    if ext not in ALLOWED_EXT:
        raise HTTPException(status_code=400, detail="Only .xls .xlsx .csv allowed")

    _remove_old_files_for_kind(kind)

    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    raw_name = f"{ts}_{kind}_{fname}"
    raw_path = RAW_UPLOADS_DIR / raw_name

    try:
        with raw_path.open("wb") as out_f:
            shutil.copyfileobj(upload_file.file, out_f)
    finally:
        try:
            upload_file.file.close()
        except Exception:
            pass

    canonical_path = DATA_DIR / f"active_{kind}{ext}"
    try:
        shutil.copy(raw_path, canonical_path)
    except Exception:
        logger.exception("Failed to write canonical copy for %s", canonical_path)

    info = {
        "raw_saved": str(raw_path),
        "canonical_saved": str(canonical_path),
        "original_filename": fname,
        "size_bytes": raw_path.stat().st_size if raw_path.exists() else None
    }
    logger.info("Uploaded %s: %s", kind, info)
    return info

@app.post("/api/upload/active-employees")
async def upload_active_employees_api(file: UploadFile = File(...)):
    return await upload_active_employees(file)

@app.post("/api/upload/active-contractors")
async def upload_active_contractors_api(file: UploadFile = File(...)):
    return await upload_active_contractors(file)

@app.post("/upload/active-employees")
async def upload_active_employees(file: UploadFile = File(...)):
    if not file:
        raise HTTPException(status_code=400, detail="no file provided")
    try:
        info = _save_upload_and_rotate(file, kind="employee")
        try:
            cached = _load_ccure_cache_any()
            if cached:
                payload = cached.get("payload") if (isinstance(cached, dict) and "payload" in cached) else cached
                broadcast_ccure_update(payload)
        except Exception:
            pass
        return JSONResponse({"status": "ok", "detail": info})
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("employee upload failed")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/upload/active-contractors")
async def upload_active_contractors(file: UploadFile = File(...)):
    if not file:
        raise HTTPException(status_code=400, detail="no file provided")
    try:
        info = _save_upload_and_rotate(file, kind="contractor")
        try:
            cached = _load_ccure_cache_any()
            if cached:
                payload = cached.get("payload") if (isinstance(cached, dict) and "payload" in cached) else cached
                broadcast_ccure_update(payload)
        except Exception:
            pass
        return JSONResponse({"status": "ok", "detail": info})
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("contractor upload failed")
        raise HTTPException(status_code=500, detail=str(e))

# ---------- mapping helpers (unchanged) ----------
def _map_detailed_to_resp(detailed: Dict[str, Any]) -> Dict[str, Any]:
    live_h = detailed.get("live_headcount", {}) or {}
    head_h = detailed.get("headcount", {}) or {}
    ccure_active_obj = detailed.get("ccure_active", {}) or {}
    averages_obj = detailed.get("averages", {}) or {}

    def to_int(v):
        try:
            return None if v is None else int(v)
        except Exception:
            try:
                return int(float(v))
            except Exception:
                return None

    live_employee = int(live_h.get("employee") or head_h.get("employee") or 0)
    live_contractor = int(live_h.get("contractor") or head_h.get("contractor") or 0)
    total_reported = int(
        live_h.get("currently_present_total")
        or head_h.get("total_visited_today")
        or (live_employee + live_contractor)
        or 0
    )
    total_from_details = int(head_h.get("total_visited_today") or 0)

    mapped_headcount = {
        "total_visited_today": int(head_h.get("total_visited_today") or 0),
        "employee": int(head_h.get("employee") or 0),
        "contractor": int(head_h.get("contractor") or 0),
        "by_location": head_h.get("by_location") or {}
    }

    resp = {
        "date": detailed.get("date"),
        "notes": detailed.get("notes"),
        "live_today": {
            "employee": live_employee,
            "contractor": live_contractor,
            "total_reported": total_reported,
            "total_from_details": total_from_details
        },
        "headcount": mapped_headcount,
        "live_headcount": live_h,
        "ccure_active": {
            "active_employees": ccure_active_obj.get("ccure_active_employees_reported")
                             or ccure_active_obj.get("active_employees"),
            "active_contractors": ccure_active_obj.get("ccure_active_contractors_reported")
                               or ccure_active_obj.get("active_contractors"),
            "ccure_active_employees_reported": ccure_active_obj.get("ccure_active_employees_reported"),
            "ccure_active_contractors_reported": ccure_active_obj.get("ccure_active_contractors_reported")
        },
        "averages": averages_obj
    }
    return resp

def _build_verify_like_summary_from_mapped(mapped: Dict[str, Any], include_raw: bool = False) -> Dict[str, Any]:
    def to_int(v):
        try:
            return None if v is None else int(v)
        except Exception:
            try:
                return int(float(v))
            except Exception:
                return None

    cc = mapped.get("ccure_active", {}) or {}
    head = mapped.get("headcount", {}) or {}
    live_head = mapped.get("live_headcount", {}) or {}
    averages = mapped.get("averages", {}) or {}

    cc_emp = to_int(cc.get("ccure_active_employees_reported") or cc.get("active_employees"))
    cc_con = to_int(cc.get("ccure_active_contractors_reported") or cc.get("active_contractors"))

    head_total = to_int(head.get("total_visited_today") or mapped.get("live_today", {}).get("total_from_details"))
    head_emp = to_int(head.get("employee") or mapped.get("live_today", {}).get("employee"))
    head_con = to_int(head.get("contractor") or mapped.get("live_today", {}).get("contractor"))

    live_total = to_int(live_head.get("currently_present_total") or mapped.get("live_today", {}).get("total_reported"))
    live_emp = to_int(live_head.get("employee") or mapped.get("live_today", {}).get("employee"))
    live_con = to_int(live_head.get("contractor") or mapped.get("live_today", {}).get("contractor"))

    history_emp_avg = averages.get("history_avg_employee_last_7_days")
    history_con_avg = averages.get("history_avg_contractor_last_7_days")
    history_overall_avg = averages.get("history_avg_overall_last_7_days")

    def pct(n, d):
        try:
            if n is None or d is None:
                return None
            if float(d) == 0:
                return None
            return round((float(n) / float(d)) * 100.0, 2)
        except Exception:
            return None

    summary = {
        "date": mapped.get("date"),
        "ccure_reported": {
            "employees": cc_emp,
            "contractors": cc_con,
            "total_reported": (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None
        },
        "headcount_attendance_summary": {
            "total_visited_today": head_total,
            "employee": head_emp,
            "contractor": head_con,
        },
        "live_headcount_region_clients": {
            "currently_present_total": live_total,
            "employee": live_emp,
            "contractor": live_con,
        },
        "percentages_vs_ccure": {
            "head_employee_pct_vs_ccure_today": pct(head_emp, cc_emp),
            "head_contractor_pct_vs_ccure_today": pct(head_con, cc_con),
            "head_overall_pct_vs_ccure_today": pct(head_total, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None),
        
        },
        "averages": {
            "history_avg_employee_last_7_days": history_emp_avg,
            "history_avg_contractor_last_7_days": history_con_avg,
            "history_avg_overall_last_7_days": history_overall_avg,
            "avg_headcount_last_7_days_db": averages.get("avg_headcount_last_7_days") or averages.get("avg_headcount_last_7_days_db"),
            "avg_headcount_per_site_last_7_days": averages.get("avg_headcount_per_site_last_7_days"),
            "employee_pct": averages.get("employee_pct"),
            "contractor_pct": averages.get("contractor_pct"),
            "overall_pct": averages.get("overall_pct"),
            **({k: v for k, v in averages.items() if k not in (
                "history_avg_employee_last_7_days",
                "history_avg_contractor_last_7_days",
                "history_avg_overall_last_7_days",
                "avg_headcount_last_7_days",
                "avg_headcount_last_7_days_db",
                "avg_headcount_per_site_last_7_days",
                "employee_pct","contractor_pct","overall_pct"
            )})
        },
        "notes": mapped.get("notes")
    }

    summary["headcount_details"] = {
        "total_visited_today": head_total,
        "employee": head_emp,
        "contractor": head_con,
        "by_location": head.get("by_location") if isinstance(head.get("by_location"), dict) else {}
    }
    summary["live_headcount_details"] = {
        "currently_present_total": live_total,
        "employee": live_emp,
        "contractor": live_con,
        "by_location": live_head.get("by_location") if isinstance(live_head.get("by_location"), dict) else {}
    }

    summary["ccure_active"] = {
        "active_employees": cc.get("active_employees") or cc.get("ccure_active_employees_reported"),
        "active_contractors": cc.get("active_contractors") or cc.get("ccure_active_contractors_reported"),
        "ccure_active_employees_reported": cc.get("ccure_active_employees_reported"),
        "ccure_active_contractors_reported": cc.get("ccure_active_contractors_reported")
    }

    return summary

# ---------- caching helpers ----------
def _sha_for_parts(*parts: str):
    s = "|".join([str(p or "") for p in parts])
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

_CCURE_CACHE_DIR = OUTPUT_DIR / "ccure_cache"
_CCURE_CACHE_DIR.mkdir(parents=True, exist_ok=True)
_DURATION_CACHE_DIR = OUTPUT_DIR / "duration_cache"
_DURATION_CACHE_DIR.mkdir(parents=True, exist_ok=True)

def _ccure_cache_path(start_date: Optional[str], end_date: Optional[str]):
    key = _sha_for_parts(start_date or "", end_date or "")
    return _CCURE_CACHE_DIR / f"ccure_verify_cache_{key}.json"

def _duration_cache_path(key: str):
    safe = hashlib.sha256(key.encode("utf-8")).hexdigest()
    return _DURATION_CACHE_DIR / f"duration_cache_{safe}.json"

def _load_ccure_cache(start_date: Optional[str], end_date: Optional[str], max_age_seconds: int):
    p = _ccure_cache_path(start_date, end_date)
    if not p.exists():
        return None
    try:
        st = p.stat()
        age = time.time() - st.st_mtime
        if age > max_age_seconds:
            return None
        with p.open("r", encoding="utf-8") as fh:
            return json.load(fh)
    except Exception:
        logger.exception("Failed reading ccure cache at %s", p)
        return None

def _load_ccure_cache_any():
    try:
        files = sorted(_CCURE_CACHE_DIR.glob("ccure_verify_cache_*.json"), key=lambda p: p.stat().st_mtime, reverse=True)
        if not files:
            return None
        with files[0].open("r", encoding="utf-8") as fh:
            return json.load(fh)
    except Exception:
        return None

def _save_ccure_cache(start_date: Optional[str], end_date: Optional[str], payload: dict):
    p = _ccure_cache_path(start_date, end_date)
    try:
        enc = jsonable_encoder(payload)
        with p.open("w", encoding="utf-8") as fh:
            json.dump({"cached_at": datetime.utcnow().isoformat(), "payload": enc}, fh)
    except Exception:
        logger.exception("Failed writing ccure cache to %s", p)

def _load_duration_cache_for_key(cache_path: Path, max_age_seconds: int):
    if not cache_path.exists():
        return None
    try:
        age = time.time() - cache_path.stat().st_mtime
        if age > max_age_seconds:
            return None
        with cache_path.open("r", encoding="utf-8") as fh:
            return json.load(fh)
    except Exception:
        logger.exception("Failed reading duration cache at %s", cache_path)
        return None

def _save_duration_cache(cache_path: Path, payload: dict):
    try:
        enc = jsonable_encoder(payload)
        with cache_path.open("w", encoding="utf-8") as fh:
            json.dump({"cached_at": datetime.utcnow().isoformat(), "payload": enc}, fh)
    except Exception:
        logger.exception("Failed writing duration cache to %s", cache_path)

# ---------- ccure/verify (pruned response now) ----------
@app.get("/ccure/verify")
async def ccure_verify(
    raw: bool = Query(False, description="if true, include the raw compute payload for debugging"),
    start_date: Optional[str] = Query(None, description="YYYY-MM-DD start date (inclusive)"),
    end_date: Optional[str] = Query(None, description="End date (YYYY-MM-DD)"),
    refresh: bool = Query(False, description="If true, force recompute and update cache")
):
    """
    Compute /ccure/verify (with fallback). Returns a compact payload (only fields used by UI).
    Caching: stores wrapper {"cached_at":..., "payload": <pruned_payload>}
    NOTE: This endpoint now strictly returns only the minimal response keys requested by the user.
    """
    try:
        CCURE_CACHE_TTL = 86400  # 24 hours
        if not refresh:
            cached = _load_ccure_cache(start_date, end_date, CCURE_CACHE_TTL)
            if cached and isinstance(cached, dict) and "payload" in cached:
                payload = cached["payload"]
                return JSONResponse(payload)

        detailed = None
        try:
            from ccure_compare_service import compute_visit_averages
            loop = asyncio.get_running_loop()
            compute_fn = functools.partial(compute_visit_averages, start_date, end_date, timeout=REGION_TIMEOUT_SECONDS)
            try:
                timeout_seconds = max(5, REGION_TIMEOUT_SECONDS + 5)
                detailed = await asyncio.wait_for(loop.run_in_executor(None, compute_fn), timeout=timeout_seconds)
            except asyncio.TimeoutError:
                logger.warning("compute_visit_averages timed out after %s seconds; falling back", timeout_seconds)
                detailed = None
            except Exception:
                logger.exception("compute_visit_averages raised; falling back to build_ccure_averages()")
                detailed = None
        except Exception:
            logger.exception("compute_visit_averages import or invocation failed; falling back")
            detailed = None

        def _prune_summary(full_summary: Dict[str, Any]) -> Dict[str, Any]:
            """
            Return a compact payload containing ONLY the fields required by the frontend,
            per the user's request. Strictly includes:
              - date
              - ccure_reported: employees, contractors, total_reported
              - headcount_attendance_summary: total_visited_today, employee, contractor
              - live_headcount_region_clients: currently_present_total, employee, contractor
              - percentages_vs_ccure: head_employee_pct_vs_ccure_today, head_contractor_pct_vs_ccure_today, head_overall_pct_vs_ccure_today
              - averages: history_avg_employee_last_7_days, history_avg_contractor_last_7_days, history_avg_overall_last_7_days,
                          avg_by_location_last_7_days, history_avg_by_location_last_7_days
            No other top-level keys will be returned.
            """
            try:
                out: Dict[str, Any] = {}

                # date (fallback to today)
                out["date"] = full_summary.get("date") or datetime.utcnow().date().isoformat()

                # --- ccure_reported ---
                ccure_reported = None
                # try explicit ccure_reported first
                if isinstance(full_summary.get("ccure_reported"), dict):
                    cc_obj = full_summary.get("ccure_reported", {})
                    try:
                        e = cc_obj.get("employees")
                        c = cc_obj.get("contractors")
                        # coerce to numeric when possible
                        e_val = int(e) if (e is not None and str(e) != "") else None
                        c_val = int(c) if (c is not None and str(c) != "") else None
                    except Exception:
                        e_val = cc_obj.get("employees")
                        c_val = cc_obj.get("contractors")
                    total = None
                    try:
                        if e_val is not None and c_val is not None:
                            total = int(e_val) + int(c_val)
                    except Exception:
                        total = None
                    ccure_reported = {"employees": e_val, "contractors": c_val, "total_reported": total}
                else:
                    # fallback to ccure_active style
                    cc = full_summary.get("ccure_active") or {}
                    try:
                        e = cc.get("active_employees") or cc.get("ccure_active_employees_reported")
                        c = cc.get("active_contractors") or cc.get("ccure_active_contractors_reported")
                        e_val = int(e) if (e is not None and str(e) != "") else None
                        c_val = int(c) if (c is not None and str(c) != "") else None
                    except Exception:
                        e_val = cc.get("active_employees") or cc.get("ccure_active_employees_reported")
                        c_val = cc.get("active_contractors") or cc.get("ccure_active_contractors_reported")
                    total = None
                    try:
                        if e_val is not None and c_val is not None:
                            total = int(e_val) + int(c_val)
                    except Exception:
                        total = None
                    if e_val is not None or c_val is not None:
                        ccure_reported = {"employees": e_val, "contractors": c_val, "total_reported": total}

                out["ccure_reported"] = ccure_reported if ccure_reported is not None else {"employees": None, "contractors": None, "total_reported": None}

                # --- headcount_attendance_summary (visited today) ---
                h = full_summary.get("headcount_attendance_summary") or full_summary.get("headcount") or {}
                if isinstance(h, dict):
                    total_visited = h.get("total_visited_today") if h.get("total_visited_today") is not None else h.get("total") or None
                    out["headcount_attendance_summary"] = {
                        "total_visited_today": total_visited,
                        "employee": h.get("employee"),
                        "contractor": h.get("contractor")
                    }
                else:
                    out["headcount_attendance_summary"] = {"total_visited_today": None, "employee": None, "contractor": None}

                # --- live_headcount_region_clients (currently present) ---
                lh = full_summary.get("live_headcount_region_clients") or full_summary.get("live_headcount") or {}
                if isinstance(lh, dict):
                    cur_present = lh.get("currently_present_total") or lh.get("total") or None
                    out["live_headcount_region_clients"] = {
                        "currently_present_total": cur_present,
                        "employee": lh.get("employee"),
                        "contractor": lh.get("contractor")
                    }
                else:
                    out["live_headcount_region_clients"] = {"currently_present_total": None, "employee": None, "contractor": None}

                # --- percentages_vs_ccure: only the three head_* keys ---
                pv = full_summary.get("percentages_vs_ccure") or {}
                avgs = full_summary.get("averages") or {}
                p_out: Dict[str, Any] = {}
                p_out["head_employee_pct_vs_ccure_today"] = pv.get("head_employee_pct_vs_ccure_today") if pv.get("head_employee_pct_vs_ccure_today") is not None else avgs.get("head_emp_pct_vs_ccure_today") if avgs.get("head_emp_pct_vs_ccure_today") is not None else None
                p_out["head_contractor_pct_vs_ccure_today"] = pv.get("head_contractor_pct_vs_ccure_today") if pv.get("head_contractor_pct_vs_ccure_today") is not None else avgs.get("head_contractor_pct_vs_ccure_today") if avgs.get("head_contractor_pct_vs_ccure_today") is not None else None
                # overall: try several fallbacks
                p_out["head_overall_pct_vs_ccure_today"] = pv.get("head_overall_pct_vs_ccure_today") if pv.get("head_overall_pct_vs_ccure_today") is not None else (avgs.get("headcount_overall_pct_vs_ccure_today") if avgs.get("headcount_overall_pct_vs_ccure_today") is not None else None)
                out["percentages_vs_ccure"] = p_out

                # --- AVERAGES: keep only the three history_avg_* and both avg_by_location_last_7_days and history_avg_by_location_last_7_days ---
                averages_out: Dict[str, Any] = {}

                # history avg overall fields
                history_emp = (full_summary.get("averages") or {}).get("history_avg_employee_last_7_days")
                history_con = (full_summary.get("averages") or {}).get("history_avg_contractor_last_7_days")
                history_overall = (full_summary.get("averages") or {}).get("history_avg_overall_last_7_days") \
                                  or (full_summary.get("averages") or {}).get("avg_headcount_last_7_days") \
                                  or full_summary.get("avg_headcount_last_7_days_db")

                averages_out["history_avg_employee_last_7_days"] = history_emp
                averages_out["history_avg_contractor_last_7_days"] = history_con
                averages_out["history_avg_overall_last_7_days"] = history_overall

                # avg_by_location_last_7_days: try several common places it might appear
                avg_by_loc = None
                if isinstance(full_summary.get("avg_by_location_last_7_days"), dict):
                    avg_by_loc = full_summary.get("avg_by_location_last_7_days")
                else:
                    avg_by_loc = (full_summary.get("averages") or {}).get("avg_by_location_last_7_days") or {}
                averages_out["avg_by_location_last_7_days"] = avg_by_loc or {}

                # history_avg_by_location_last_7_days: prefer explicit key, else nested averages.history_avg_by_location_last_7_days
                hist_loc = None
                if isinstance(full_summary.get("history_avg_by_location_last_7_days"), dict):
                    hist_loc = full_summary.get("history_avg_by_location_last_7_days")
                else:
                    hist_loc = (full_summary.get("averages") or {}).get("history_avg_by_location_last_7_days") or (full_summary.get("raw", {}) or {}).get("averages", {}).get("history_avg_by_location_last_7_days") or {}
                averages_out["history_avg_by_location_last_7_days"] = hist_loc or {}

                out["averages"] = averages_out

                # Strict: we return only these keys; nothing else.
                return out
            except Exception:
                logger.exception("Pruning summary failed; returning minimal fallback")
                return {
                    "date": datetime.utcnow().date().isoformat(),
                    "ccure_reported": {"employees": None, "contractors": None, "total_reported": None},
                    "headcount_attendance_summary": {"total_visited_today": None, "employee": None, "contractor": None},
                    "live_headcount_region_clients": {"currently_present_total": None, "employee": None, "contractor": None},
                    "percentages_vs_ccure": {"head_employee_pct_vs_ccure_today": None, "head_contractor_pct_vs_ccure_today": None, "head_overall_pct_vs_ccure_today": None},
                    "averages": {"history_avg_employee_last_7_days": None, "history_avg_contractor_last_7_days": None, "history_avg_overall_last_7_days": None, "avg_by_location_last_7_days": {}, "history_avg_by_location_last_7_days": {}}
                }
        # end _prune_summary

        if isinstance(detailed, dict):
            mapped = _map_detailed_to_resp(detailed)
            summary = _build_verify_like_summary_from_mapped(mapped, include_raw=False)
            # intentionally do NOT include `raw` payload — user requested strict minimal response
            pruned = _prune_summary(summary)
            try:
                _save_ccure_cache(start_date, end_date, pruned)
                broadcast_ccure_update(pruned)
            except Exception:
                logger.exception("Failed to cache/broadcast compute result")
            return JSONResponse(pruned)
        else:
            # fallback
            fallback = build_ccure_averages(start_date, end_date)
            mapped_fallback = {
                "date": fallback.get("date"),
                "notes": fallback.get("notes"),
                "live_today": fallback.get("live_today", {}),
                "headcount": {
                    "total_visited_today": fallback.get("live_today", {}).get("total_from_details") or fallback.get("live_today", {}).get("total_reported"),
                    "employee": fallback.get("live_today", {}).get("employee"),
                    "contractor": fallback.get("live_today", {}).get("contractor"),
                    "by_location": fallback.get("by_location") or {}
                },
                "live_headcount": {
                    "currently_present_total": fallback.get("live_today", {}).get("total_reported"),
                    "employee": fallback.get("live_today", {}).get("employee"),
                    "contractor": fallback.get("live_today", {}).get("contractor"),
                    "by_location": fallback.get("by_location") or {}
                },
                "ccure_active": fallback.get("ccure_active", {}),
                "averages": fallback.get("averages", {})
            }

            summary = _build_verify_like_summary_from_mapped(mapped_fallback, include_raw=False)
            # intentionally do NOT include `raw` payload — strict minimal response
            pruned = _prune_summary(summary)
            try:
                _save_ccure_cache(start_date, end_date, pruned)
                broadcast_ccure_update(pruned)
            except Exception:
                logger.exception("Failed to cache/broadcast fallback result")

            return JSONResponse(pruned)
    except Exception as e:
        logger.exception("ccure_verify top-level failure")
        return JSONResponse({"detail": f"ccure verify error: {e}"}, status_code=500)

@app.get("/api/ccure/verify")
async def api_ccure_verify(
    raw: bool = Query(False),
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    refresh: bool = Query(False)
):
    return await ccure_verify(raw=raw, start_date=start_date, end_date=end_date, refresh=refresh)

# ---------- other endpoints (compare/compare_v2/export/report) kept as before ----------
# Note: I kept the rest of your original compare/compare_v2/export/report endpoints intact
# with the same behaviour (calls out to data_compare_service / data_compare_service_v2)
# to avoid altering logic elsewhere in your system. If you want these changed too,
# say the word and I will update them.

# (Remaining previously included duration endpoints and duration_report code unchanged)
# For brevity in this reply I will not re-embed the entire duration_report inlined content
# because earlier file already contained it and we didn't change it conceptually.
# If you need the full single-file with the duration_report content inlined (as your previous),
# tell me and I'll paste the full inlined version (I kept your original in my edits).

# End of backend file

# ---------- /ccure/compare -> uses data_compare_service.compare_ccure_vs_sheets ----------
@app.get("/ccure/compare")
def ccure_compare(
    mode: str = Query("full", description="full or stats"),
    stats_detail: str = Query("ActiveProfiles", description="when mode=stats use this"),
    limit_list: int = Query(200, ge=1, le=5000, description="max rows returned in list samples"),
    export: bool = Query(False, description="if true, writes Excel report to server and returns report_path")
):
    try:
        from data_compare_service import compare_ccure_vs_sheets
    except Exception as e:
        logger.exception("data_compare_service import failed")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")

    res = compare_ccure_vs_sheets(mode=mode, stats_detail=stats_detail, limit_list=limit_list, export=export)
    if not isinstance(res, dict):
        return JSONResponse({"error": "compare service returned unexpected result"}, status_code=500)
    return JSONResponse(res)

@app.get("/ccure/export_uploaded")
def ccure_export_uploaded():
    """
    Export the currently uploaded canonical sheets into one workbook.
    Returns JSON: { status: "ok", report_path: "<filename>" }
    Downloadable at /ccure/report/{filename}
    """
    try:
        from data_compare_service import export_uploaded_sheets
    except Exception as e:
        logger.exception("data_compare_service import failed for export_uploaded")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")

    fname = export_uploaded_sheets()
    if not fname:
        raise HTTPException(status_code=500, detail="failed to export uploaded sheets")
    return JSONResponse({"status": "ok", "report_path": fname})

@app.get("/ccure/compare_v2")
def ccure_compare_v2(
    mode: str = Query("full"),
    stats_detail: str = Query("ActiveProfiles"),
    limit_list: int = Query(200, ge=1, le=5000),
    export: bool = Query(False),
    region_filter: Optional[str] = Query(None, description="Region code e.g. APAC"),
    location_city: Optional[str] = Query(None, description="Location city e.g. Pune"),
    location_state: Optional[str] = Query(None, description="Location state/province"),
    location_description: Optional[str] = Query(None, description="Location Description"),
    week_ref_date: Optional[str] = Query(None, description="YYYY-MM-DD for week (Mon-Fri)")
):
    try:
        from data_compare_service_v2 import compare_ccure_vs_sheets
    except Exception as e:
        logger.exception("data_compare_service_v2 import failed")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")

    res = compare_ccure_vs_sheets(
        mode=mode,
        stats_detail=stats_detail,
        limit_list=limit_list,
        export=export,
        region_filter=region_filter,
        location_city=location_city,
        location_state=location_state,
        location_description=location_description,
        week_ref_date=week_ref_date
    )
    if not isinstance(res, dict):
        return JSONResponse({"error": "compare service returned unexpected result"}, status_code=500)
    return JSONResponse(res)

@app.get("/ccure/report/{filename}")
def ccure_report_download(filename: str):
    try:
        safe_name = Path(filename).name
        full = OUTPUT_DIR / safe_name
        if not full.exists() or not full.is_file():
            raise HTTPException(status_code=404, detail="Report not found")
        return FileResponse(str(full),
                            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            filename=safe_name)
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Failed to serve report")
        raise HTTPException(status_code=500, detail=f"Failed to serve report: {e}")

# -------------------------------------------------------------------------------
# DURATION endpoint (with updated, stricter shift/sessionization rules + overrides)
# -------------------------------------------------------------------------------

# Overrides storage (simple JSON file)
_OVERRIDES_PATH = OUTPUT_DIR / "duration_overrides.json"
def _load_overrides() -> Dict[str, Any]:
    try:
        if not _OVERRIDES_PATH.exists():
            return {}
        with _OVERRIDES_PATH.open("r", encoding="utf-8") as fh:
            return json.load(fh)
    except Exception:
        logger.exception("Failed to load overrides file; returning empty")
        return {}

def _save_overrides(overrides: Dict[str, Any]) -> None:
    try:
        with _OVERRIDES_PATH.open("w", encoding="utf-8") as fh:
            json.dump(overrides, fh, indent=2, default=str)
    except Exception:
        logger.exception("Failed to persist overrides")

def _override_key(region: str, person_uid: str, date_iso: str) -> str:
    return f"{(region or '').lower()}|{(person_uid or '').strip()}|{date_iso}"

@app.post("/duration/override")
def duration_override(payload: Dict[str, Any] = Body(...)):
    """
    Payload:
      {
        "region": "apac",
        "person_uid": "<person_uid>",
        "date": "YYYY-MM-DD",
        "start_ts": "<ISO or epoch ms>",
        "end_ts": "<ISO or epoch ms>",
        "reason": "user note",
        "user": "operator name (optional)"
      }
    Server computes seconds and stores override. Overrides are applied when /duration is called later.
    """
    try:
        region = (payload.get("region") or "").lower()
        person_uid = payload.get("person_uid")
        date_iso = payload.get("date")
        start_ts = payload.get("start_ts")
        end_ts = payload.get("end_ts")
        reason = payload.get("reason") or ""
        user = payload.get("user") or "unknown"

        if not region or not person_uid or not date_iso or not start_ts or not end_ts:
            raise HTTPException(status_code=400, detail="region, person_uid, date, start_ts and end_ts are required")

        def _parse_ts(x):
            # accept ISO-like or numeric epoch (ms or s)
            try:
                if isinstance(x, (int, float)):
                    # assume epoch seconds if small, ms if large
                    v = float(x)
                    if v > 1e12:
                        return datetime.fromtimestamp(v / 1000.0)
                    if v > 1e9:
                        return datetime.fromtimestamp(v)
                    return datetime.fromtimestamp(v)
                if isinstance(x, str):
                    x = x.strip()
                    # numeric string?
                    if re.match(r"^\d+$", x):
                        v = int(x)
                        if v > 1e12:
                            return datetime.fromtimestamp(v / 1000.0)
                        return datetime.fromtimestamp(v)
                    # ISO
                    try:
                        return datetime.fromisoformat(x.replace("Z", "+00:00"))
                    except Exception:
                        # try pandas
                        try:
                            return pd.to_datetime(x).to_pydatetime()
                        except Exception:
                            return None
                return None
            except Exception:
                return None

        sdt = _parse_ts(start_ts)
        edt = _parse_ts(end_ts)
        if sdt is None or edt is None:
            raise HTTPException(status_code=400, detail="Could not parse start_ts or end_ts")

        if edt < sdt:
            # swap or reject; we will swap for user-friendliness
            sdt, edt = edt, sdt

        seconds = max(0, int((edt - sdt).total_seconds()))
        key = _override_key(region, person_uid, date_iso)

        overrides = _load_overrides()
        overrides[key] = {
            "region": region,
            "person_uid": person_uid,
            "date": date_iso,
            "start_ts": sdt.isoformat(),
            "end_ts": edt.isoformat(),
            "seconds": seconds,
            "reason": reason,
            "user": user,
            "updated_at": datetime.utcnow().isoformat(),
        }
        _save_overrides(overrides)
        return JSONResponse({"status": "ok", "key": key, "seconds": seconds})
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("duration_override failed")
    raise HTTPException(status_code=500, detail=str(e))

# ... remainder of duration endpoints and duration_report kept unchanged ...
# (For brevity I did not modify duration endpoints here; they remain as in your original file.)
# If you want me to produce an even smaller file that removes unused endpoints/modules,
# I can do that — but I left them intact to avoid breaking other parts of your system.



@app.get("/duration/cities")
def api_duration_cities(region: Optional[str] = Query(None, description="region code (apac, emea, laca, namer)")):
    """
    Returns a list of available partitions / cities for the given region (based on duration_report.REGION_CONFIG).
    If region is None or unknown, returns aggregated list for all regions.
    """
    try:
        try:
            import duration_report
        except Exception:
            return JSONResponse({"cities": []})

        cfg = getattr(duration_report, "REGION_CONFIG", {}) or {}
        out = []
        if region:
            rc = cfg.get(region.lower())
            if rc:
                parts = rc.get("partitions") or []
                # include partitions and primary locations if defined
                for p in parts:
                    if p and p not in out:
                        out.append(p)
                # for NAMER style configs include logical_like entries as hints
                likes = rc.get("logical_like") or []
                for l in likes:
                    if l and l not in out:
                        out.append(l)
        else:
            # aggregate unique partitions across all regions
            for k, rc in cfg.items():
                parts = rc.get("partitions") or []
                for p in parts:
                    if p and p not in out:
                        out.append(p)
                likes = rc.get("logical_like") or []
                for l in likes:
                    if l and l not in out:
                        out.append(l)

        return JSONResponse({"region": region, "cities": out})
    except Exception:
        logger.exception("api_duration_cities failed")
        return JSONResponse({"region": region, "cities": []})


@app.get("/duration")
async def api_duration(

    date_param: Optional[str] = Query(None, alias="date", description="Target date YYYY-MM-DD. Defaults to today in Asia/Kolkata"),
    start_date: Optional[str] = Query(None, description="Start date for a range (YYYY-MM-DD)"),
    end_date: Optional[str] = Query(None, description="End date for a range (YYYY-MM-DD)"),
    regions: Optional[str] = Query(None, description="Comma-separated list: apac,emea,laca,namer. Default: all"),
    city: Optional[str] = Query(None, description="Optional city/location filter (e.g. Pune). Case-insensitive, matches PartitionName2/PrimaryLocation/Door/EmployeeName"),
    employee_id: Optional[str] = Query(None, description="Optional filter: Employee ID (server-side)"),
    employee_name: Optional[str] = Query(None, description="Optional filter: Employee Name (server-side)"),
    card_number: Optional[str] = Query(None, description="Optional filter: Card Number (server-side)"),
    outdir: Optional[str] = Query(None, description="Output directory for CSVs. Defaults to OUTPUT_DIR/duration_reports"),
    sample_rows: int = Query(10, ge=0, le=200, description="How many sample rows to include per region in response"),
    compliance_target: int = Query(3, ge=1, le=7, description="Compliance target days (e.g. 3 or 5). Default 3"),
    refresh: bool = Query(False, description="If true, force recompute and update cache")
):
    """
    Returns per-region duration aggregates and swipe-level details with weekly compliance & duration category splits.
    Uses a file-cache to return fast results when possible. Pass refresh=true to force recompute.
    """
    try:
        # region parsing + outdir same as before
        if regions:
            regions_list = [r.strip().lower() for r in regions.split(",") if r.strip()]
        else:
            regions_list = ["apac", "emea", "laca", "namer"]

        if outdir:
            outdir_path = Path(outdir)
        else:
            outdir_path = OUTPUT_DIR / "duration_reports"
        outdir_path.mkdir(parents=True, exist_ok=True)

        def _parse_date(s: str) -> date:
            try:
                return datetime.strptime(s, "%Y-%m-%d").date()
            except Exception:
                return date.fromisoformat(s)

        if start_date and end_date:
            start_obj = _parse_date(start_date)
            end_obj = _parse_date(end_date)
            if start_obj > end_obj:
                raise HTTPException(status_code=400, detail="start_date must be <= end_date")
            max_days = 92
            days_count = (end_obj - start_obj).days + 1
            if days_count > max_days:
                raise HTTPException(status_code=400, detail=f"Date range too large (> {max_days} days). Please request a smaller range.")
            date_list = [start_obj + timedelta(days=i) for i in range(days_count)]
            range_mode = True
        else:
            if date_param:
                target_date = _parse_date(date_param)
            else:
                tz = ZoneInfo("Asia/Kolkata")
                target_date = datetime.now(tz).date()
            date_list = [target_date]
            start_obj = end_obj = date_list[0]
            range_mode = False

        # Prepare cache key
        cache_key_parts = {
            "start": start_obj.isoformat(),
            "end": end_obj.isoformat(),
            "regions": ",".join(sorted(regions_list)),
            "city": city or "",
            "emp": employee_id or "",
            "ename": employee_name or "",
            "card": card_number or ""
        }
        cache_key_str = json.dumps(cache_key_parts, sort_keys=True)
        cache_path = _duration_cache_path(cache_key_str)

        # Duration cache TTL (shorter than ccure): 1 hour by default
        DURATION_CACHE_TTL = 3600

        if not refresh:
            cached = _load_duration_cache_for_key(cache_path, DURATION_CACHE_TTL)
            if cached and isinstance(cached, dict) and "payload" in cached:
                return JSONResponse(cached["payload"])

        try:
            import duration_report
        except Exception as e:
            logger.exception("Failed importing duration_report module")
            raise HTTPException(status_code=500, detail=f"duration module import failed: {e}")

        loop = asyncio.get_running_loop()

        def _to_json_safe(v):
            try:
                if pd.isna(v):
                    return None
            except Exception:
                pass
            if isinstance(v, (datetime, date)):
                return v.isoformat()
            if hasattr(v, "isoformat") and not isinstance(v, str):
                try:
                    return v.isoformat()
                except Exception:
                    pass
            try:
                if isinstance(v, (int, float, bool)):
                    return v
            except Exception:
                pass
            try:
                return str(v)
            except Exception:
                return None

        # original requested date strings (these are the dates we will present & count durations for)
        dates_iso = [d.isoformat() for d in date_list]
        date_objs = [d for d in date_list]
        week_starts = sorted({(d - timedelta(days=d.weekday())) for d in date_objs})

        # --- IMPORTANT: Expand fetch to include previous day(s) for sessionization across midnight ---
        ext_dates_set = set(date_list)
        for d in date_list:
            ext_dates_set.add(d - timedelta(days=1))  # include previous day
        ext_date_list = sorted(ext_dates_set)

        # Run duration_report.run_for_date concurrently (bounded concurrency) instead of serial.
        per_date_results = {}
        SEM_MAX = 4  # concurrency: tune as needed for your environment
        sem = asyncio.Semaphore(SEM_MAX)

        async def _run_for_single_date(d: date):
            async with sem:
                try:
                    # run in executor with a per-task timeout
                    task = loop.run_in_executor(None, functools.partial(duration_report.run_for_date, d, regions_list, str(outdir_path), city))
                    res = await asyncio.wait_for(task, timeout=COMPUTE_WAIT_TIMEOUT_SECONDS)
                    return (d.isoformat(), res)
                except asyncio.TimeoutError:
                    logger.exception("Duration computation timed out for date %s", d.isoformat())
                    return (d.isoformat(), {"error": "timeout"})
                except Exception as e:
                    logger.exception("duration run_for_date failed for date %s: %s", d, e)
                    return (d.isoformat(), {"error": str(e)})

        # schedule all tasks concurrently but bounded by semaphore
        try:
            tasks = [asyncio.create_task(_run_for_single_date(d)) for d in ext_date_list]
            completed = await asyncio.gather(*tasks, return_exceptions=True)
            for res in completed:
                try:
                    if isinstance(res, Exception):
                        logger.exception("Exception during concurrent run_for_date gather: %s", res)
                        continue
                    iso_d, day_res = res
                    # only set if day_res is a dict; otherwise skip
                    if isinstance(day_res, dict):
                        per_date_results[iso_d] = day_res
                except Exception:
                    logger.exception("Error processing gather result: %s", res)
                    continue
        except Exception as e:
            logger.exception("Concurrent duration computation failed")
            # don't fail entire request; provide partial results if any
            if not per_date_results:
                raise HTTPException(status_code=500, detail=f"duration compute error: {e}")

        resp: Dict[str, Any] = {
            "start_date": start_obj.isoformat(),
            "end_date": end_obj.isoformat(),
            "regions": {}
        }

        # constants for shift/session logic (updated per request)
        SHIFT_GAP_HOURS = 8
        SHIFT_GAP_SECONDS = SHIFT_GAP_HOURS * 3600

        # New: short-session merge threshold (30 minutes).
        MERGE_SHORT_SESSION_SECONDS = 30 * 60  # 30 minutes

        # Anomaly thresholds
        ANOMALY_MIN_SECONDS = 5 * 3600      # 5 hours
        ANOMALY_MAX_SECONDS = 16 * 3600     # 16 hours

        NAMER_LACA_SESSION_TYPES = [
            "contractor", "property management", "temp badge", "tempbadge", "temp_badge",
            "terminated contractor", "terminated property management", "visitor"
        ]

        # load overrides once and apply later
        overrides = _load_overrides()

        for r in regions_list:
            try:
                employees_map: Dict[str, Dict[str, Any]] = {}
                swipes_by_date: Dict[str, list] = {}
                date_rows = {}

                # --- build employees_map & swipes_by_date from per_date_results (adjusted) ---
                for iso_d, day_res in per_date_results.items():
                    region_obj = day_res.get(r) if isinstance(day_res, dict) else None
                    durations_df = None
                    swipes_df = None
                    if isinstance(region_obj, dict):
                        swipes_df = region_obj.get("swipes")
                        durations_df = region_obj.get("durations")
                    elif isinstance(region_obj, pd.DataFrame):
                        durations_df = region_obj

                    rows_count = int(len(durations_df)) if isinstance(durations_df, pd.DataFrame) else 0
                    swipe_count = int(len(swipes_df)) if isinstance(swipes_df, pd.DataFrame) else 0
                    date_rows[iso_d] = {"rows": rows_count, "swipe_rows": swipe_count}

                    # normalize swipes into serializable records
                    if isinstance(swipes_df, pd.DataFrame) and not swipes_df.empty:
                        for c in ["LocaleMessageTime", "EmployeeName", "Door", "EmployeeID", "CardNumber", "PartitionName2", "PersonnelTypeName", "CompanyName", "PrimaryLocation", "Direction", "EmployeeIdentity", "MessageType", "Text5", "AdmitCode"]:
                            if c not in swipes_df.columns:
                                swipes_df[c] = None
                        swipe_records = []
                        for _, srow in swipes_df.iterrows():
                            dt = srow.get("LocaleMessageTime")
                            iso_ts = None
                            if pd.notna(dt):
                                try:
                                    iso_ts = pd.to_datetime(dt).isoformat()
                                except Exception:
                                    try:
                                        iso_ts = datetime.fromtimestamp(float(dt)).isoformat()
                                    except Exception:
                                        iso_ts = str(dt)
                            swipe_records.append({
                                "LocaleMessageTime": iso_ts,
                                "Dateonly": iso_d,
                                "Swipe_Time": (pd.to_datetime(srow.get("LocaleMessageTime")).time().isoformat() if pd.notna(srow.get("LocaleMessageTime")) else None),
                                "EmployeeID": _to_json_safe(srow.get("EmployeeID")),
                                "PersonGUID": _to_json_safe(srow.get("EmployeeIdentity") or srow.get("EmployeeIdentity")),
                                "ObjectName1": _to_json_safe(srow.get("EmployeeName")),
                                "Door": _to_json_safe(srow.get("Door")),
                                "PersonnelType": _to_json_safe(srow.get("PersonnelTypeName") or srow.get("PersonnelType")),
                                "CardNumber": _to_json_safe(srow.get("CardNumber")),
                                "Text5": _to_json_safe(srow.get("PrimaryLocation") or srow.get("Text5")),
                                "PartitionName2": _to_json_safe(srow.get("PartitionName2")),
                                "AdmitCode": _to_json_safe(srow.get("AdmitCode") or srow.get("MessageType")),
                                "Direction": _to_json_safe(srow.get("Direction")),
                                "CompanyName": _to_json_safe(srow.get("CompanyName")),
                                "PrimaryLocation": _to_json_safe(srow.get("PrimaryLocation") or srow.get("Text5")),
                            })
                        swipes_by_date[iso_d] = swipe_records
                    else:
                        swipes_by_date.setdefault(iso_d, [])

                    # durations dataframe -> employees_map (adjusted: only count totals for requested dates)
                    if isinstance(durations_df, pd.DataFrame) and not durations_df.empty:
                        for col in ["person_uid", "EmployeeID", "EmployeeName", "CardNumber", "Date",
                                    "FirstSwipe", "LastSwipe", "FirstDoor", "LastDoor",
                                    "Duration", "DurationSeconds", "PersonnelTypeName", "PartitionName2",
                                    "CompanyName", "PrimaryLocation", "FirstDirection", "LastDirection"]:
                            if col not in durations_df.columns:
                                durations_df[col] = None

                        for _, drow in durations_df.iterrows():
                            person_uid = drow.get("person_uid")
                            if pd.isna(person_uid) or person_uid is None or str(person_uid).strip() == "":
                                person_uid = f"{_to_json_safe(drow.get('EmployeeID'))}|{_to_json_safe(drow.get('EmployeeName'))}"

                            if person_uid not in employees_map:
                                employees_map[person_uid] = {
                                    "person_uid": person_uid,
                                    "EmployeeID": _to_json_safe(drow.get("EmployeeID")),
                                    "EmployeeName": _to_json_safe(drow.get("EmployeeName")),
                                    "CardNumber": _to_json_safe(drow.get("CardNumber")),
                                    # initialize durations only for the dates the user requested
                                    "durations": {d: None for d in dates_iso},
                                    "durations_seconds": {d: None for d in dates_iso},
                                    "total_seconds_present_in_range": 0,
                                    # keep internal First/Last but we'll remove them before returning
                                    "FirstSwipe": None,
                                    "LastSwipe": None,
                                    "FirstDoor": _to_json_safe(drow.get("FirstDoor")),
                                    "LastDoor": _to_json_safe(drow.get("LastDoor")),
                                    "PersonnelType": _to_json_safe(drow.get("PersonnelTypeName") or drow.get("PersonnelType")),
                                    "PartitionName2": _to_json_safe(drow.get("PartitionName2")),
                                    "CompanyName": _to_json_safe(drow.get("CompanyName")),
                                    "PrimaryLocation": _to_json_safe(drow.get("PrimaryLocation")),
                                    "FirstDirection": _to_json_safe(drow.get("FirstDirection")),
                                    "LastDirection": _to_json_safe(drow.get("LastDirection")),
                                }

                            dur_str = None if pd.isna(drow.get("Duration")) else str(drow.get("Duration"))
                            dur_secs = None
                            try:
                                v = drow.get("DurationSeconds")
                                if pd.notna(v):
                                    dur_secs = int(float(v))
                            except Exception:
                                dur_secs = None

                            # Only store durations / add to total for the dates the user requested.
                            if iso_d in employees_map[person_uid]["durations"]:
                                employees_map[person_uid]["durations"][iso_d] = dur_str
                                employees_map[person_uid]["durations_seconds"][iso_d] = dur_secs
                                if dur_secs is not None:
                                    employees_map[person_uid]["total_seconds_present_in_range"] += dur_secs
                            else:
                                employees_map[person_uid].setdefault("other_dates", {})[iso_d] = {
                                    "Duration": dur_str,
                                    "DurationSeconds": dur_secs
                                }

                            try:
                                fs = drow.get("FirstSwipe")
                                ls = drow.get("LastSwipe")
                                if pd.notna(fs):
                                    fs_dt = pd.to_datetime(fs)
                                    cur_fs = employees_map[person_uid].get("FirstSwipe")
                                    if cur_fs is None:
                                        employees_map[person_uid]["FirstSwipe"] = _to_json_safe(fs_dt)
                                    else:
                                        try:
                                            if pd.to_datetime(cur_fs) > fs_dt:
                                                employees_map[person_uid]["FirstSwipe"] = _to_json_safe(fs_dt)
                                        except Exception:
                                            employees_map[person_uid]["FirstSwipe"] = _to_json_safe(fs_dt)
                                if pd.notna(ls):
                                    ls_dt = pd.to_datetime(ls)
                                    cur_ls = employees_map[person_uid].get("LastSwipe")
                                    if cur_ls is None:
                                        employees_map[person_uid]["LastSwipe"] = _to_json_safe(ls_dt)
                                    else:
                                        try:
                                            if pd.to_datetime(cur_ls) < ls_dt:
                                                employees_map[person_uid]["LastSwipe"] = _to_json_safe(ls_dt)
                                        except Exception:
                                            employees_map[person_uid]["LastSwipe"] = _to_json_safe(ls_dt)
                            except Exception:
                                pass

                # --- SHIFT/SESSION ADJUSTMENT ---
                try:
                    # build quick match index for employees (EmployeeID, CardNumber, person_uid)
                    emp_index = {}
                    for uid, emp in employees_map.items():
                        emp_index[uid] = {
                            "EmployeeID": str(emp.get("EmployeeID")) if emp.get("EmployeeID") is not None else None,
                            "CardNumber": str(emp.get("CardNumber")) if emp.get("CardNumber") is not None else None,
                            "person_uid": uid
                        }

                    # collect swipes per person across the requested date range AND the previous-day fetches (ext_date_list)
                    swipes_per_person = {uid: [] for uid in employees_map.keys()}
                    for d_iso, arr in swipes_by_date.items():
                        for s in arr:
                            # parse timestamp
                            ts = None
                            try:
                                if s.get("LocaleMessageTime"):
                                    ts = pd.to_datetime(s.get("LocaleMessageTime"), errors="coerce")
                            except Exception:
                                ts = None
                            if ts is pd.NaT or ts is None:
                                continue

                            # try matching to a person_uid by EmployeeID, CardNumber, PersonGUID
                            matched_uid = None
                            sid = s.get("EmployeeID")
                            scard = s.get("CardNumber")
                            spg = s.get("PersonGUID")
                            # first exact EmployeeID match
                            for uid, keys in emp_index.items():
                                try:
                                    if keys["EmployeeID"] and sid and str(keys["EmployeeID"]) == str(sid):
                                        matched_uid = uid
                                        break
                                except Exception:
                                    pass
                            if matched_uid is None:
                                # try card match
                                for uid, keys in emp_index.items():
                                    try:
                                        if keys["CardNumber"] and scard and str(keys["CardNumber"]) == str(scard):
                                            matched_uid = uid
                                            break
                                    except Exception:
                                        pass
                            if matched_uid is None:
                                # try person guid equals person_uid
                                if spg:
                                    spg_s = str(spg)
                                    if spg_s in employees_map:
                                        matched_uid = spg_s

                            if matched_uid:
                                swipes_per_person.setdefault(matched_uid, []).append(ts)

                    # For each person perform region-specific decision and sessionize if required
                    for uid, emp in employees_map.items():
                        # if no swipes, skip (cannot sessionize without timestamps)
                        person_swipes = swipes_per_person.get(uid) or []
                        if not person_swipes or len(person_swipes) < 2:
                            # nothing to sessionize if only zero/one swipe
                            continue

                        # normalize personnel type to lower for checks
                        personnel_raw = emp.get("PersonnelType") or ""
                        personnel_low = str(personnel_raw).strip().lower()

                        # decide sessionization rule by region & personnel type
                        apply_session = False
                        if r in ("apac", "emea"):
                            # always sessionize using strict 6h gap
                            apply_session = True
                        elif r in ("namer", "laca"):
                            # sessionize only for selected types
                            for t in NAMER_LACA_SESSION_TYPES:
                                if t in personnel_low:
                                    apply_session = True
                                    break
                            # if personnel type indicates employee or terminated personnel -> do not sessionize
                            if "employee" in personnel_low or "terminated personnel" in personnel_low or "terminated" == personnel_low:
                                apply_session = False

                        # Debug log to help trace decisions
                        logger.debug("Session decision for uid=%s region=%s PersonnelType=%s apply_session=%s", uid, r, emp.get("PersonnelType"), apply_session)

                        if not apply_session:
                            # skip sessionization for this person (keep durations from durations_df)
                            continue

                        # sessionize: split when gap > SHIFT_GAP_SECONDS
                        person_swipes_sorted = sorted(person_swipes)
                        sessions = []
                        cur_start = person_swipes_sorted[0]
                        cur_last = person_swipes_sorted[0]
                        for ts in person_swipes_sorted[1:]:
                            gap = (ts - cur_last).total_seconds() if ts is not None and cur_last is not None else None
                            if gap is None:
                                gap = SHIFT_GAP_SECONDS + 1
                            if gap > SHIFT_GAP_SECONDS:
                                # finish current session
                                sessions.append((cur_start, cur_last))
                                cur_start = ts
                                cur_last = ts
                            else:
                                cur_last = ts
                        # append final
                        sessions.append((cur_start, cur_last))

                        # NEW: Merge short subsequent sessions back into previous session when appropriate.
                        if sessions and len(sessions) > 1:
                            merged_sessions = []
                            for s_start, s_end in sessions:
                                if not merged_sessions:
                                    merged_sessions.append([s_start, s_end])
                                    continue
                                prev_start, prev_end = merged_sessions[-1]
                                cur_start, cur_end = s_start, s_end
                                cur_dur = (cur_end - cur_start).total_seconds() if cur_end and cur_start else 0
                                # If the subsequent session is very short AND starts the same calendar day as the previous
                                # session's start date, merge it into the previous session.
                                if prev_start.date() == cur_start.date() and cur_dur <= MERGE_SHORT_SESSION_SECONDS:
                                    # extend previous end to include this short session (if it's later)
                                    if cur_end and cur_end > prev_end:
                                        merged_sessions[-1][1] = cur_end
                                else:
                                    merged_sessions.append([cur_start, cur_end])
                            # convert back to tuple list
                            sessions = [(s[0], s[1]) for s in merged_sessions]

                        # NEW ADDITIONAL RULE (handles EMEA pattern described by user):
                        if sessions and len(sessions) > 1:
                            try:
                                first_day = sessions[0][0].date()
                                all_same_day = all((s[0].date() == first_day and s[1].date() == first_day) for s in sessions)
                                last_start, last_end = sessions[-1]
                                final_dur = (last_end - last_start).total_seconds() if last_start and last_end else 0
                                if all_same_day and final_dur <= MERGE_SHORT_SESSION_SECONDS:
                                    combined_start = sessions[0][0]
                                    combined_end = sessions[-1][1]
                                    combined_dur = (combined_end - combined_start).total_seconds() if combined_start and combined_end else 0
                                    if combined_dur > 0 and combined_dur <= ANOMALY_MAX_SECONDS:
                                        sessions = [(combined_start, combined_end)]
                            except Exception:
                                logger.exception("Final-day-combine heuristic failed for uid=%s region=%s", uid, r)

                        # build new per-date accumulators (only for dates in requested range)
                        new_durations_seconds = {d: 0 for d in dates_iso}
                        for s_start, s_end in sessions:
                            try:
                                dur_secs = max(0, int((s_end - s_start).total_seconds()))
                            except Exception:
                                dur_secs = 0
                            session_start_date = s_start.date().isoformat()
                            if session_start_date in new_durations_seconds:
                                new_durations_seconds[session_start_date] += dur_secs

                        any_session_nonzero = any(v > 0 for v in new_durations_seconds.values())
                        if any_session_nonzero:
                            emp_total = 0
                            for d_iso in dates_iso:
                                v = new_durations_seconds.get(d_iso)
                                if v is None or v == 0:
                                    emp["durations_seconds"][d_iso] = None
                                    emp["durations"][d_iso] = None
                                else:
                                    emp["durations_seconds"][d_iso] = int(v)
                                    try:
                                        emp["durations"][d_iso] = str(timedelta(seconds=int(v)))
                                    except Exception:
                                        emp["durations"][d_iso] = None
                                    emp_total += int(v)
                            emp["total_seconds_present_in_range"] = emp_total
                        # else, leave original durations if nothing computed
                except Exception:
                    logger.exception("Shift/session adjustment failed for region %s (non-fatal)", r)

                # Apply overrides (overrides persisted to JSON). Overrides keyed by region|person_uid|date
                try:
                    for key, ov in overrides.items():
                        try:
                            ov_region = (ov.get("region") or "").lower()
                            ov_uid = ov.get("person_uid")
                            ov_date = ov.get("date")
                            if ov_region != r:
                                continue
                            if ov_uid not in employees_map:
                                continue
                            if ov_date in employees_map[ov_uid]["durations_seconds"]:
                                sec = _safe_int(ov.get("seconds"))
                                if sec is None:
                                    continue
                                employees_map[ov_uid]["durations_seconds"][ov_date] = int(sec)
                                try:
                                    employees_map[ov_uid]["durations"][ov_date] = str(timedelta(seconds=int(sec)))
                                except Exception:
                                    employees_map[ov_uid]["durations"][ov_date] = None
                                total = 0
                                for d_iso in dates_iso:
                                    v = employees_map[ov_uid]["durations_seconds"].get(d_iso)
                                    if v is not None:
                                        total += int(v)
                                employees_map[ov_uid]["total_seconds_present_in_range"] = total
                                employees_map[ov_uid].setdefault("overrides", {})[ov_date] = {
                                    "start_ts": ov.get("start_ts"),
                                    "end_ts": ov.get("end_ts"),
                                    "seconds": int(sec),
                                    "reason": ov.get("reason"),
                                    "user": ov.get("user"),
                                    "updated_at": ov.get("updated_at")
                                }
                        except Exception:
                            continue
                except Exception:
                    logger.exception("Failed to apply overrides for region %s", r)

                # --- end SHIFT adjustment & overrides ---

                # convert map -> list and continue rest of logic (sorting + weekly compliance)
                emp_list = list(employees_map.values())
                emp_list.sort(key=lambda x: ((x.get("EmployeeName") or "") or "").lower())

                # compute per-employee weekly compliance and categories
                for emp in emp_list:
                    weeks_info = {}
                    weeks_met = 0
                    weeks_total = 0

                    cat_counts = {"0-30m": 0, "30m-2h": 0, "2h-6h": 0, "6h-8h": 0, "8h+": 0}
                    cat_dates = {k: [] for k in cat_counts.keys()}

                    for ws in week_starts:
                        week_start_iso = ws.isoformat()
                        week_dates = [(ws + timedelta(days=i)).isoformat() for i in range(7)]
                        relevant_dates = [d for d in week_dates if d in dates_iso]
                        if not relevant_dates:
                            continue

                        days_present = 0
                        days_ge8 = 0
                        per_date_durations = {}
                        per_date_compliance = {}

                        for d in relevant_dates:
                            secs = emp["durations_seconds"].get(d)
                            per_date_durations[d] = secs
                            if secs is not None and secs > 0:
                                days_present += 1
                            is_ge8 = (secs is not None and secs >= 28800)
                            if is_ge8:
                                days_ge8 += 1
                            per_date_compliance[d] = True if is_ge8 else False

                            if secs is not None and secs > 0:
                                cat = duration_report.categorize_seconds(secs) if hasattr(duration_report, 'categorize_seconds') else "0-30m"
                                if cat in cat_counts:
                                    cat_counts[cat] += 1
                                    cat_dates[cat].append(d)

                        ct = int(compliance_target or 3)
                        compliant = (days_ge8 >= ct)

                        weeks_info[week_start_iso] = {
                            "week_start": week_start_iso,
                            "dates": per_date_durations,
                            "dates_compliance": per_date_compliance,
                            "days_present": days_present,
                            "days_ge8": days_ge8,
                            "compliant": compliant
                        }

                        weeks_total += 1
                        if compliant:
                            weeks_met += 1

                    # dominant category: choose category with highest count (ties resolved by first encountered)
                    dominant_category = None
                    max_count = -1
                    for k, v in cat_counts.items():
                        if v > max_count:
                            max_count = v
                            dominant_category = k

                    # Remove internal swipe fields from returned object (you requested not to return them)
                    for _k in ("FirstSwipe", "LastSwipe", "FirstDoor", "LastDoor"):
                        if _k in emp:
                            try:
                                del emp[_k]
                            except Exception:
                                pass

                    emp["compliance"] = {
                        "weeks": weeks_info,
                        "weeks_met": weeks_met,
                        "weeks_total": weeks_total,
                        "month_summary": f"{weeks_met}/{weeks_total}" if weeks_total > 0 else "0/0",
                        "compliance_target": int(compliance_target or 3)
                    }
                    emp["duration_categories"] = {
                        "counts": cat_counts,
                        "dominant_category": dominant_category,
                        "category_dates": cat_dates,
                        "red_flag": cat_counts.get("2h-6h", 0)
                    }

                durations_sample = emp_list[:sample_rows] if sample_rows and sample_rows > 0 else []

                # --- apply optional server-side employee filters (to reduce payload if requested) ---
                try:
                    if employee_id or employee_name or card_number:
                        filtered = []
                        emp_id_q = employee_id.strip().lower() if employee_id else None
                        emp_name_q = employee_name.strip().lower() if employee_name else None
                        card_q = card_number.strip().lower() if card_number else None

                        for e in emp_list:
                            match = True
                            if emp_id_q:
                                match = match and (e.get("EmployeeID") and emp_id_q in str(e.get("EmployeeID")).lower())
                            if emp_name_q:
                                match = match and (e.get("EmployeeName") and emp_name_q in str(e.get("EmployeeName")).lower())
                            if card_q:
                                match = match and (e.get("CardNumber") and card_q in str(e.get("CardNumber")).lower())
                            if match:
                                filtered.append(e)
                        emp_list = filtered
                except Exception:
                    logger.exception("Error applying server-side employee filters")


                resp["regions"][r] = {
                    "dates": dates_iso,
                    "employees": emp_list,
                    "durations_sample": durations_sample,
                    "date_rows": date_rows,
                    "swipes_by_date": swipes_by_date
                }
            except Exception:
                logger.exception("Failed to aggregate range results for region %s", r)
                resp["regions"][r] = {"dates": [d.isoformat() for d in date_list], "employees": [], "durations_sample": [], "date_rows": {}, "swipes_by_date": {}}

        # cache duration result (best-effort)
        try:
            _save_duration_cache(cache_path, resp)
        except Exception:
            logger.exception("Failed to save duration cache for %s", cache_path)

        return JSONResponse(resp)
    except HTTPException:
        raise
    except Exception as exc:
        logger.exception("api_duration (range) failed")
        raise HTTPException(status_code=500, detail=f"duration api error: {exc}")

# API-prefixed alias for duration (helps proxy)
@app.get("/api/duration")
async def api_prefix_duration(**params):
    # forward query parameters to main handler
    return await api_duration(**params)


# -------------------------------------------------------------------------------
# duration_report module (inlined) - unchanged except helper boundaries already present
# -------------------------------------------------------------------------------
# (I included your original duration_report implementation below unchanged,
#  because the sessionization is now handled in the API layer above.)
#
# Keep the file content of duration_report.py (your earlier version) in the same directory
# as an importable module. If you prefer everything truly single-file, you can leave this
# inlined - but the real DB access code expects pyodbc etc.; I left it as you provided.
#
# For completeness include duration_report content (with two targeted changes:
#  - suppress pandas read_sql "SQLAlchemy" warning
#  - replace groupby.apply with groupby.agg to avoid FutureWarning)
#

# ---- BEGIN duration_report.py content (kept same as your previous copy but with fixes) ----
import argparse
import logging
import os
import re
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo
from pathlib import Path
from typing import Optional, List, Dict, Any

# pandas already imported at top
# Optional: import pyodbc only when connecting (allows importing this module even without driver)
try:
    import pyodbc
except Exception:
    pyodbc = None

ODBC_DRIVER = os.getenv("ODBC_DRIVER", "ODBC Driver 17 for SQL Server")

REGION_CONFIG = {
    "apac": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUPNQ0986V",
        "database": "ACVSUJournal_00010029",
        "last_n_databases": 2,
        "partitions": [
            "APAC.Default", "JP.Tokyo", "PH.Manila", "MY.Kuala Lumpur"
        ]
    },
    "emea": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUFRA0986V",
        "database": "ACVSUJournal_00011028",
        "last_n_databases": 2,
        "partitions": [
            "LT.Vilnius", "AUT.Vienna", "IE.DUblin", "DU.Abu Dhab", "ES.Madrid",
            "IT.Rome", "MA.Casablanca", "RU.Moscow", "UK.London"
        ]
    },
    "laca": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUSJO0986V",
        "database": "ACVSUJournal_00010029",
        "last_n_databases": 2,
        "partitions": [
            "AR.Cordoba", "BR.Sao Paulo", "CR.Costa Rica Partition", "MX.Mexico City",
            "PA.Panama City", "PE.Lima"
        ]
    },
    "namer": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUDEN0891V",
        "database": "ACVSUJournal_00010029",
        "last_n_databases": 2,
        "logical_like": ["%HQ%", "%Austin%", "%Miami%", "%NYC%"]
    }
}

GENERIC_SQL_TEMPLATE = r"""
SELECT
    t1.[ObjectName1] AS EmployeeName,
    t1.[ObjectName2] AS Door,
    CASE WHEN t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR) END AS EmployeeID,
    COALESCE(
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
      sc.value,
      t2.[Text12]
    ) AS CardNumber,
    t3.[Name] AS PersonnelTypeName,
    t1.ObjectIdentity1 AS EmployeeIdentity,
    t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t1.MessageType,
    t5d.value AS Direction,
    t2.Text4 AS CompanyName,
    t2.Text5 AS PrimaryLocation
FROM [{db}].dbo.ACVSUJournalLog AS t1
INNER JOIN ACVSCore.Access.Personnel AS t2 ON t1.ObjectIdentity1 = t2.GUID
INNER JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeID = t3.ObjectID
LEFT JOIN [{db}].dbo.ACVSUJournalLogxmlShred t5d
  ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
LEFT JOIN [{db}].dbo.ACVSUJournalLogxml t_xml
  ON t1.XmlGUID = t_xml.GUID
LEFT JOIN (
  SELECT GUID, value
  FROM [{db}].dbo.ACVSUJournalLogxmlShred
  WHERE Name IN ('Card','CHUID')
) AS sc
  ON t1.XmlGUID = sc.GUID
WHERE t1.MessageType = 'CardAdmitted'
  AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) = '{date}'
  {region_filter}
"""

def _split_db_name(dbname: str):
    m = re.match(r"^(.*?)(\d+)$", dbname)
    if not m:
        return dbname, None
    return m.group(1), m.group(2)

def _expand_databases_from_base(db_base: str, last_n: int) -> List[str]:
    prefix, digits = _split_db_name(db_base)
    if digits is None:
        return [db_base]
    width = len(digits)
    try:
        cur = int(digits)
    except Exception:
        return [db_base]
    out = []
    for i in range(last_n):
        num = cur - i
        if num < 0:
            break
        out.append(f"{prefix}{str(num).zfill(width)}")
    return out

def _get_candidate_databases(rc: Dict[str, Any]) -> List[str]:
    if "databases" in rc and isinstance(rc["databases"], list) and rc["databases"]:
        return rc["databases"]
    base_db = rc.get("database")
    if not base_db:
        return []
    last_n = int(rc.get("last_n_databases", 1) or 1)
    if last_n <= 1:
        return [base_db]
    return _expand_databases_from_base(base_db, last_n)

def _connect_master(rc: Dict[str, Any]):
    if pyodbc is None:
        logging.debug("pyodbc not available; cannot connect to master for DB discovery.")
        return None
    try:
        conn_str = (
            f"DRIVER={{{ODBC_DRIVER}}};"
            f"SERVER={rc['server']};DATABASE=master;UID={rc['user']};PWD={rc['password']};"
            "TrustServerCertificate=Yes;"
        )
        return pyodbc.connect(conn_str, autocommit=True)
    except Exception:
        logging.exception("Failed to connect to master DB for server %s", rc.get("server"))
        return None

def _filter_existing_databases(rc: Dict[str, Any], candidates: List[str]) -> List[str]:
    if not candidates:
        return []
    master_conn = _connect_master(rc)
    if master_conn is None:
        logging.warning("Unable to validate DB existence (no master connection). Proceeding with candidate list: %s", candidates)
        return candidates
    try:
        exists = []
        cursor = master_conn.cursor()
        for db in candidates:
            try:
                cursor.execute("SELECT COUNT(1) FROM sys.databases WHERE name = ?", (db,))
                row = cursor.fetchone()
                if row and row[0] and int(row[0]) > 0:
                    exists.append(db)
            except Exception:
                logging.exception("Error checking existence for database %s", db)
        cursor.close()
        logging.info("Databases present for server %s: %s", rc.get("server"), exists)
        return exists if exists else candidates
    finally:
        try:
            master_conn.close()
        except Exception:
            pass

def build_region_query(region_key: str, target_date: date) -> str:
    rc = REGION_CONFIG[region_key]
    date_str = target_date.strftime("%Y-%m-%d")
    region_filter = ""

    if region_key in ("apac", "emea", "laca"):
        partitions = rc.get("partitions", [])
        parts_sql = ", ".join(f"'{p}'" for p in partitions)
        region_filter = f"AND t1.PartitionName2 IN ({parts_sql})"
    elif region_key == "namer":
        likes = rc.get("logical_like", [])
        like_sql = " OR ".join(f"t1.[ObjectName2] LIKE '{p}'" for p in likes)
        region_filter = f"AND ({like_sql})"
    else:
        region_filter = ""

    candidates = _get_candidate_databases(rc)
    if not candidates:
        candidates = [rc.get("database")]

    valid_dbs = _filter_existing_databases(rc, candidates)

    union_parts = []
    for dbname in valid_dbs:
        union_parts.append(GENERIC_SQL_TEMPLATE.format(db=dbname, date=date_str, region_filter=region_filter))

    if not union_parts:
        dbname = rc.get("database")
        return GENERIC_SQL_TEMPLATE.format(db=dbname, date=date_str, region_filter=region_filter)

    sql = "\nUNION ALL\n".join(union_parts)
    return sql

def get_connection(region_key: str):
    if pyodbc is None:
        raise RuntimeError("pyodbc is not available. Install it with 'pip install pyodbc'.")

    rc = REGION_CONFIG[region_key]
    conn_str = (
        f"DRIVER={{{ODBC_DRIVER}}};"
        f"SERVER={rc['server']};DATABASE={rc['database']};UID={rc['user']};PWD={rc['password']};"
        "TrustServerCertificate=Yes;"
    )
    return pyodbc.connect(conn_str, autocommit=True)

def fetch_swipes_for_region(region_key: str, target_date: date) -> pd.DataFrame:
    sql = build_region_query(region_key, target_date)
    logging.info("Built SQL for region %s, date %s", region_key, target_date)
    cols = [
        "EmployeeName", "Door", "EmployeeID", "CardNumber", "PersonnelTypeName", "EmployeeIdentity",
        "PartitionName2", "LocaleMessageTime", "MessageType", "Direction", "CompanyName", "PrimaryLocation"
    ]
    if pyodbc is None:
        logging.warning("pyodbc not available - returning empty DataFrame skeleton for region %s", region_key)
        return pd.DataFrame(columns=cols)

    conn = get_connection(region_key)
    try:
        # suppress the pandas UserWarning about DBAPI2 objects vs SQLAlchemy connectables to reduce log spam
        with warnings.catch_warnings():
            warnings.filterwarnings("ignore", message="pandas only supports SQLAlchemy connectable")
            df = pd.read_sql(sql, conn)
    finally:
        try:
            conn.close()
        except Exception:
            pass

    for c in cols:
        if c not in df.columns:
            df[c] = None

    try:
        df["LocaleMessageTime"] = pd.to_datetime(df["LocaleMessageTime"], errors="coerce")
    except Exception:
        df["LocaleMessageTime"] = pd.to_datetime(df["LocaleMessageTime"].astype(str), errors="coerce")

    return df[cols]

def compute_daily_durations(swipes_df: pd.DataFrame) -> pd.DataFrame:
    out_cols = [
        "person_uid", "EmployeeIdentity", "EmployeeID", "EmployeeName", "CardNumber",
        "Date", "FirstSwipe", "LastSwipe", "FirstDoor", "LastDoor", "CountSwipes",
        "DurationSeconds", "Duration", "PersonnelTypeName", "PartitionName2",
        "CompanyName", "PrimaryLocation", "FirstDirection", "LastDirection"
    ]

    if swipes_df is None or swipes_df.empty:
        return pd.DataFrame(columns=out_cols)

    df = swipes_df.copy()
    expected = ["EmployeeIdentity", "EmployeeID", "CardNumber", "EmployeeName", "LocaleMessageTime", "Door",
                "PersonnelTypeName", "PartitionName2", "CompanyName", "PrimaryLocation", "Direction"]
    for col in expected:
        if col not in df.columns:
            df[col] = None

    if df["LocaleMessageTime"].dtype == object:
        df["LocaleMessageTime"] = pd.to_datetime(df["LocaleMessageTime"], errors="coerce")

    dedupe_cols = ["EmployeeIdentity", "LocaleMessageTime", "EmployeeID", "CardNumber", "Door"]
    df = df.drop_duplicates(subset=dedupe_cols, keep="first")

    df["Date"] = df["LocaleMessageTime"].dt.date

    def make_person_uid(row):
        eid = row.get("EmployeeIdentity")
        if pd.notna(eid) and str(eid).strip() != "":
            return str(eid).strip()
        pieces = [
            (str(row.get("EmployeeID")) if row.get("EmployeeID") is not None else "").strip(),
            (str(row.get("CardNumber")) if row.get("CardNumber") is not None else "").strip(),
            (str(row.get("EmployeeName")) if row.get("EmployeeName") is not None else "").strip()
        ]
        joined = "|".join([p for p in pieces if p])
        return joined or None

    df["person_uid"] = df.apply(make_person_uid, axis=1)
    df = df[df["person_uid"].notna()].copy()

    # Rewritten aggregation to avoid groupby.apply (FutureWarning) and be faster.
    try:
        df = df.sort_values("LocaleMessageTime")
        grouped = df.groupby(["person_uid", "Date"], sort=False).agg(
            FirstSwipe=("LocaleMessageTime", "first"),
            LastSwipe=("LocaleMessageTime", "last"),
            FirstDoor=("Door", "first"),
            LastDoor=("Door", "last"),
            CountSwipes=("LocaleMessageTime", "count"),
            EmployeeIdentity=("EmployeeIdentity", "first"),
            EmployeeID=("EmployeeID", "first"),
            EmployeeName=("EmployeeName", "first"),
            CardNumber=("CardNumber", "first"),
            PersonnelTypeName=("PersonnelTypeName", "first"),
            PartitionName2=("PartitionName2", "first"),
            CompanyName=("CompanyName", "first"),
            PrimaryLocation=("PrimaryLocation", "first"),
            FirstDirection=("Direction", "first"),
            LastDirection=("Direction", "last")
        ).reset_index()
    except Exception:
        # fallback: best-effort using apply (should be rare)
        def agg_for_group(g):
            g_sorted = g.sort_values("LocaleMessageTime")
            first = g_sorted.iloc[0]
            last = g_sorted.iloc[-1]
            first_dir = first.get("Direction")
            last_dir = last.get("Direction")
            return pd.Series({
                "person_uid": first["person_uid"],
                "EmployeeIdentity": first.get("EmployeeIdentity"),
                "EmployeeID": first.get("EmployeeID"),
                "EmployeeName": first.get("EmployeeName"),
                "CardNumber": first.get("CardNumber"),
                "Date": first["Date"],
                "FirstSwipe": first["LocaleMessageTime"],
                "LastSwipe": last["LocaleMessageTime"],
                "FirstDoor": first.get("Door"),
                "LastDoor": last.get("Door"),
                "CountSwipes": int(len(g_sorted)),
                "PersonnelTypeName": first.get("PersonnelTypeName"),
                "PartitionName2": first.get("PartitionName2"),
                "CompanyName": first.get("CompanyName"),
                "PrimaryLocation": first.get("PrimaryLocation"),
                "FirstDirection": first_dir,
                "LastDirection": last_dir
            })
        grouped = df.groupby(["person_uid", "Date"], sort=False).apply(agg_for_group).reset_index(drop=True)

    grouped["DurationSeconds"] = (grouped["LastSwipe"] - grouped["FirstSwipe"]).dt.total_seconds().clip(lower=0)
    grouped["Duration"] = grouped["DurationSeconds"].apply(lambda s: str(timedelta(seconds=int(s))) if pd.notna(s) else None)

    # ensure columns exist and order
    for c in out_cols:
        if c not in grouped.columns:
            grouped[c] = None

    return grouped[out_cols]

def categorize_seconds(s: Optional[int]) -> str:
    """
    Category labels (used when secs present > 0):
      - "0-30m"      -> 0 .. 1800 (inclusive)
      - "30m-2h"     -> 1801 .. 7200
      - "2h-6h"      -> 7201 .. 21600
      - "6h-8h"      -> 21601 .. 28800
      - "8h+"        -> >= 28800
    Note: this helper alone will still return "0-30m" for s None/0, but in counting code we
    only increment when s is present and >0.
    """
    try:
        if s is None or s <= 0:
            return "0-30m"
        s = int(s)
        if s <= 1800:
            return "0-30m"
        if s <= 7200:
            return "30m-2h"
        if s <= 21600:
            return "2h-6h"
        if s < 28800:
            return "6h-8h"
        return "8h+"
    except Exception:
        return "0-30m"


def run_for_date(target_date: date, regions: List[str], outdir: str, city: Optional[str] = None) -> Dict[str, Any]:
    outdir_path = Path(outdir)
    outdir_path.mkdir(parents=True, exist_ok=True)

    results: Dict[str, Any] = {}
    for r in regions:
        r = r.lower()
        if r not in REGION_CONFIG:
            logging.warning("Unknown region '%s' - skipping", r)
            continue
        logging.info("Fetching swipes for region %s on %s", r, target_date)
        try:
            swipes = fetch_swipes_for_region(r, target_date)
        except Exception:
            logging.exception("Failed fetching swipes for region %s", r)
            swipes = pd.DataFrame()

        if city and not swipes.empty:
            city_l = str(city).strip().lower()
            mask_parts = []
            for col in ("PartitionName2", "PrimaryLocation", "Door", "EmployeeName"):
                if col in swipes.columns:
                    mask_parts.append(swipes[col].fillna("").astype(str).str.lower().str.contains(city_l, na=False))
            if mask_parts:
                combined_mask = mask_parts[0]
                for m in mask_parts[1:]:
                    combined_mask = combined_mask | m
                swipes = swipes[combined_mask].copy()
            else:
                logging.debug("City filter provided but no matching columns to filter on for region %s", r)

        try:
            durations = compute_daily_durations(swipes)
        except Exception:
            logging.exception("Failed computing durations for region %s", r)
            durations = pd.DataFrame()

        csv_path = outdir_path / f"{r}_duration_{target_date.strftime('%Y%m%d')}.csv"
        swipes_csv_path = outdir_path / f"{r}_swipes_{target_date.strftime('%Y%m%d')}.csv"
        try:
            durations.to_csv(csv_path, index=False)
        except Exception:
            logging.exception("Failed writing durations CSV for %s", r)
        try:
            swipes.to_csv(swipes_csv_path, index=False)
        except Exception:
            logging.exception("Failed writing swipes CSV for %s", r)

        logging.info("Wrote duration CSV for %s to %s (rows=%d)", r, csv_path, len(durations))
        logging.info("Wrote swipes CSV for %s to %s (rows=%d)", r, swipes_csv_path, len(swipes))
        results[r] = {"swipes": swipes, "durations": durations}

    return results

def parse_args():
    p = argparse.ArgumentParser(description="Generate daily duration reports from ACVSUJournal swipe logs.")
    p.add_argument("--date", "-d", help="Target date (YYYY-MM-DD). Defaults to today in Asia/Kolkata", default=None)
    p.add_argument("--regions", "-r", help="Comma-separated regions (apac,emea,laca,namer). Default: all",
                   default="apac,emea,laca,namer")
    p.add_argument("--outdir", "-o", help="Output directory for CSVs", default="./duration_reports")
    p.add_argument("--city", help="Optional city/location filter (e.g. Pune)", default=None)
    return p.parse_args()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
    args = parse_args()

    if args.date:
        target_date = datetime.strptime(args.date, "%Y-%m-%d").date()
    else:
        tz = ZoneInfo("Asia/Kolkata")
        target_date = datetime.now(tz).date()

    regions = [x.strip().lower() for x in args.regions.split(",") if x.strip()]
    outdir = args.outdir

    logging.info("Generating duration reports for date %s and regions: %s", target_date, regions)
    results = run_for_date(target_date, regions, outdir, city=args.city)

    for r, obj in results.items():
        dur = obj.get("durations")
        logging.info("Region %s: %d persons with computed durations", r, len(dur) if dur is not None else 0)
    logging.info("Completed. CSVs are in %s", Path(outdir).absolute())
# ---- END duration_report.py content ----








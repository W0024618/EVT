Dont Mix Both API so app.py is diffrent and 
also and global headcount is diffrent so dont mix any API 
so fix this 


Compare Both file for and Dont change behaviour for live region Headcount 
add only average details usion seprate API endpoint so keep remenaning as it is and fix issue carefully..

// //C:\Users\W0024618\Desktop\global-page\frontend\src\pages\GlobalPage.jsx
// import React, { useState, useEffect } from 'react';
// import {
//   Box,
//   Typography,
//   CircularProgress,
//   IconButton,
//   Button
// } from '@mui/material';
// import HomeIcon from '@mui/icons-material/Home';
// import DescriptionIcon from '@mui/icons-material/Description';
// import MapChart from '../components/MapChart.jsx';
// import axios from 'axios';
// import { useNavigate, Link } from 'react-router-dom';

// export default function GlobalPage() {
//   const navigate = useNavigate();
//   const [counts, setCounts] = useState(null);
//   const [selected, setSelected] = useState('global');

//   useEffect(() => {
//     let isMounted = true;
//     const fetchCounts = () => {
//       axios.get('/api/headcount')
//         .then(res => {
//           if (isMounted) setCounts(res.data);
//         })
//         .catch(err => {
//           console.error('Failed to fetch headcounts', err);
//           if (isMounted) setCounts({ apac: 0, emea: 0, laca: 0, namer: 0 });
//         });
//     };
//     fetchCounts();
//     const intervalId = setInterval(fetchCounts, 15000);
//     return () => {
//       isMounted = false;
//       clearInterval(intervalId);
//     };
//   }, []);

//   if (!counts) {
//     return (
//       <Box display="flex" justifyContent="center" mt={6}>
//         <CircularProgress />
//       </Box>
//     );
//   }

//   const REGION_CARDS = [
//     { key: 'apac', label: 'APAC', url: 'http://10.199.22.57:3000/', textColor: '#f5650c' },
//     { key: 'emea', label: 'EMEA', url: 'http://10.199.22.57:3001/', textColor: '#11e6ed' },
//     { key: 'laca', label: 'LACA', url: 'http://10.199.22.57:3003/', textColor: '#FF2DD1' },
//     { key: 'namer', label: 'NAMER', url: 'http://10.199.22.57:3002/', textColor: '#a6e61c' },
//   ];

//   return (
//     <Box sx={{ display: 'grid', gridTemplateRows: 'auto auto 1fr auto', height: '100vh' }}>
      
      
//          {/* Header */}
//      <Box
//        px={2}
//         py={1}
//         sx={{
//           backgroundColor: 'black',
//           color: '#fff',
//          borderBottom: '4px solid #FFD700',
//           display: 'flex',
//           alignItems: 'center',
//           justifyContent: 'space-between',
//         }}
//      >
//         {/* Left: Home & Reports */}
//         <Box>
//           <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}>
//             <HomeIcon fontSize="medium" />
//           </IconButton>
//           <IconButton component={Link} to="/reports" sx={{ color: '#FFC72C', ml: 1 }}>
//             <DescriptionIcon fontSize="medium" />
//           </IconButton>
//         </Box>

//         {/* Center: WU Logo & Title */}
//         <Box
//           sx={{
//             flexGrow: 1,
//             display: 'flex',
//             alignItems: 'center',
//             justifyContent: 'center',
//           }}
//         >
//           <Box
//             component="img"
//             src="/wu-head-logo.png"
//             alt="WU Logo"
//             sx={{ height: { xs: 30, md: 55 }, mr: 2 }}
//           />
//           <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
//             Global Headcount Dashboard
//           </Typography>
//         </Box>
//       </Box>

 


//       {/* Region Cards */}
//       <Box
//         sx={{
//           position: 'sticky',
//           top: 0,
//           zIndex: 5,
//           display: 'flex',
//           justifyContent: 'center',
//           flexWrap: 'wrap',
//           p: 2,
//           gap: 2,
//           backgroundColor: 'transparent',
//         }}
//       >
//         {REGION_CARDS.map(region => (
//           <Box
//             key={region.key}
//             onClick={() => { window.location.href = region.url; }}
//             sx={{
//               cursor: 'pointer',
//               width: 200,
//               height: 80,
//               display: 'flex',
//               flexDirection: 'column',
//               justifyContent: 'center',
//               alignItems: 'center',
//               border: '4px solid rgba(255, 204, 0, 0.89)',
//               borderRadius: 2,
//               boxShadow: 3,
//               color: region.textColor,
//               '&:hover': { opacity: 0.9 },
//             }}
//           >
//             <Typography
//               variant="subtitle1"
//               sx={{
//                 fontWeight: 'bold',
//                 color: region.textColor,
//                 fontSize: { xs: '1.3rem' }
//               }}
//             >
//               {region.label}
//             </Typography>
//             <Typography
//               variant="h3"
//               sx={{
//                 fontWeight: 700,
//                 fontSize: { xs: '1.5rem', sm: '1.8rem' },
//                 color: region.textColor
//               }}
//             >
//               {typeof counts[region.key] === 'number' ? counts[region.key] : 0}
//             </Typography>
//           </Box>
//         ))}
//       </Box>

//       {/* Map */}
//       <Box sx={{ gridRow: 3, width: '100%', height: '100%', overflow: 'hidden' }}>
//         <MapChart selected={selected} onClickSite={r => setSelected(r)} initialZoom={1.8} />
//       </Box>
//     </Box>
//   );
// }
















//************************************************************** */
// frontend/src/pages/GlobalPage.jsx
import React, { useState, useEffect, useRef } from 'react';
import {
  Box, Typography, CircularProgress, IconButton, Button, Paper, Divider,
  LinearProgress, Snackbar, Alert
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import DescriptionIcon from '@mui/icons-material/Description';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import MapChart from '../components/MapChart.jsx';
import api from '../api';
import { useNavigate, Link } from 'react-router-dom';

const REGION_PARTITIONS = {
  apac: ['Pune','Quezon','Taguig','Tokyo','Kuala'],
  emea: ['Vilnius','Casablanca','Dublin','Moscow','London','Vienna'],
  laca: ['Costa','Mexico','Sao Paulo','Lima','Cordoba','Buenos'],
  namer: ['Denver','NYC','Miami','Austin','New York']
};
function regionFromPartition(partition){
  if(!partition) return null;
  const p = String(partition).toLowerCase();
  if(!p) return null;
  for(const [region, parts] of Object.entries(REGION_PARTITIONS)){
    for(const candidate of parts){
      if(p.includes(candidate.toLowerCase())) return region;
    }
  }
  return null;
}

export default function GlobalPage(){
  const navigate = useNavigate();

  const [counts, setCounts] = useState({ apac:0, emea:0, laca:0, namer:0 });
  const [selected, setSelected] = useState('global');

  const [averages, setAverages] = useState(null);
  const [loadingAverages, setLoadingAverages] = useState(true);
  const [averagesError, setAveragesError] = useState(null);

  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  const fileInputEmpRef = useRef();
  const fileInputContrRef = useRef();
  const [snack, setSnack] = useState({ open:false, severity:'info', message:'' });

  // polling controls
  const pollingRef = useRef({ running:false, failureCount:0, timerId:null });

  // map averages->region totals (heuristic)
  const mapFromAverages = (averagesObj) => {
    const byLocation = averagesObj?.headcount?.by_location || averagesObj?.live_headcount?.by_location || {};
    const perRegion = { apac:0, emea:0, laca:0, namer:0 };
    for(const [part, stats] of Object.entries(byLocation)){
      const total = Number(stats?.total || 0);
      const region = regionFromPartition(part) || regionFromPartition(part.split('.')[0]);
      if(region) perRegion[region] += total;
      else {
        const pLower = String(part || '').toLowerCase();
        if(pLower.includes('pune')||pLower.includes('philipp')||pLower.includes('taguig')||pLower.includes('tokyo')) perRegion.apac += total;
        else if(pLower.includes('vilnius')||pLower.includes('dublin')||pLower.includes('madrid')||pLower.includes('rome')||pLower.includes('casablanca')) perRegion.emea += total;
        else if(pLower.includes('mexico')||pLower.includes('costa')||pLower.includes('lima')||pLower.includes('buenos')) perRegion.laca += total;
        else perRegion.namer += total;
      }
    }
    return perRegion;
  };

  // single-shot fetchCounts with fallback; uses mounted guard
  const fetchCountsOnce = async (mounted=true) => {
    try {
      const res = await api.get('/headcount');
      if(!mounted) return {success:false, from:'headcount', data:null};
      const d = res.data;
      if(d && typeof d === 'object' && ('apac' in d || 'emea' in d || 'laca' in d || 'namer' in d)){
        return { success:true, from:'headcount', data: {
          apac: Number(d.apac||0), emea: Number(d.emea||0), laca: Number(d.laca||0), namer: Number(d.namer||0)
        }};
      }
      if(d && d.totals && typeof d.totals === 'object'){
        return { success:true, from:'headcount.totals', data: {
          apac: Number(d.totals.apac||0), emea: Number(d.totals.emea||0), laca: Number(d.totals.laca||0), namer: Number(d.totals.namer||0)
        }};
      }
      // unexpected shape -> fallback to averages
      throw new Error('unexpected headcount shape');
    } catch(errHead){
      // fallback to ccure/averages
      try {
        const res2 = await api.get('/ccure/averages');
        if(!mounted) return {success:false, from:'averages', data:null};
        const r = res2.data;
        // set averages state for left panel when this call succeeds
        setAverages(r);
        // derive per-region totals heuristically
        const mapped = mapFromAverages(r);
        return { success:true, from:'averages', data: mapped };
      } catch(errAvg){
        // both failed
        return { success:false, from:'both', data:null, error: errAvg || errHead };
      }
    }
  };

  // controlled polling with backoff
  useEffect(() => {
    let mounted = true;
    pollingRef.current.running = true;
    pollingRef.current.failureCount = 0;

    const doPoll = async () => {
      if(!mounted) return;
      // prevent overlapping runs
      if(pollingRef.current.running === false) return;
      const result = await fetchCountsOnce(mounted);
      if(!mounted) return;
      if(result.success && result.data){
        setCounts(prev => {
          // only update if changed to avoid unnecessary re-renders
          if(prev.apac === result.data.apac && prev.emea === result.data.emea && prev.laca === result.data.laca && prev.namer === result.data.namer) {
            return prev;
          }
          return result.data;
        });
        pollingRef.current.failureCount = 0; // reset on success
        // on success schedule next poll after normal interval
        pollingRef.current.timerId = setTimeout(doPoll, 15000);
      } else {
        // failure -> increment failure count and backoff
        pollingRef.current.failureCount = (pollingRef.current.failureCount || 0) + 1;
        const f = pollingRef.current.failureCount;
        // exponential backoff: 15s * 2^(min(f-1, 4))  => max ~240s
        const wait = 15000 * Math.pow(2, Math.min(Math.max(f-1,0), 4));
        console.warn('[fetchCounts] failure, will retry after backoff (s):', Math.round(wait/1000), result.error || result);
        pollingRef.current.timerId = setTimeout(doPoll, wait);
      }
    };

    // start immediately
    doPoll();

    return () => {
      mounted = false;
      pollingRef.current.running = false;
      if(pollingRef.current.timerId) clearTimeout(pollingRef.current.timerId);
    };
  }, []); // run once when mounted

  // Averages polling (separate, less frequent)
  useEffect(() => {
    let mounted = true;
    let timer = null;
    const pollAverages = async () => {
      try {
        setLoadingAverages(true);
        const res = await api.get('/ccure/averages');
        if(!mounted) return;
        setAverages(res.data);
        setAveragesError(null);
      } catch(err){
        if(!mounted) return;
        setAveragesError(err);
      } finally {
        if(!mounted) return;
        setLoadingAverages(false);
        timer = setTimeout(pollAverages, 30000);
      }
    };
    pollAverages();
    return () => { mounted = false; if(timer) clearTimeout(timer); };
  }, []);

  // upload helper (unchanged)
  const handleUpload = async (file, type) => {
    if(!file) return;
    const endpoint = type === 'employee' ? '/upload/active-employees' : '/upload/active-contractors';
    const fd = new FormData();
    fd.append('file', file, file.name);
    setUploading(true); setUploadResult(null); setUploadError(null);
    try {
      const res = await api.post(endpoint, fd, { headers: {'Content-Type':'multipart/form-data'}, timeout: 120000 });
      setUploadResult(res.data);
      setSnack({ open:true, severity:'success', message:`Upload successful: ${file.name}` });
      // refresh headcount+averages after upload
      try { const r = await api.get('/ccure/averages'); setAverages(r.data); } catch(_) {}
      try { const r2 = await api.get('/headcount'); if(r2?.data) setCounts(prev => ({...prev, ...r2.data})); } catch(_) {}
    } catch(err){
      setUploadError(err);
      setSnack({ open:true, severity:'error', message:`Upload failed: ${file.name}` });
    } finally {
      setUploading(false);
    }
  };

  const onChooseEmployeeFile = (e) => { const f = e.target.files && e.target.files[0]; if(f) handleUpload(f,'employee'); e.target.value=null; };
  const onChooseContractorFile = (e) => { const f = e.target.files && e.target.files[0]; if(f) handleUpload(f,'contractor'); e.target.value=null; };

  const safe = (path, fallback=null) => {
    if(!averages) return fallback;
    try { return path.split('.').reduce((a,k)=> (a && a[k] !== undefined) ? a[k] : fallback, averages); } catch { return fallback; }
  };

  const liveEmployee = safe('live_today.employee', safe('live_headcount.employee', null));
  const liveContractor = safe('live_today.contractor', safe('live_headcount.contractor', null));
  const liveTotalReported = safe('live_today.total_reported', safe('live_headcount.currently_present_total', null));
  const liveTotalDetails = safe('live_today.total_from_details', null);

  const ccureActiveEmployees = safe('ccure_active.active_employees', safe('ccure_active.ccure_active_employees_reported', null));
  const ccureActiveContractors = safe('ccure_active.active_contractors', safe('ccure_active.ccure_active_contractors_reported', null));

  const empPct = safe('averages.employee_pct', safe('averages.head_emp_pct_vs_ccure_today', null));
  const conPct = safe('averages.contractor_pct', safe('averages.head_contractor_pct_vs_ccure_today', null));
  const overallPct = safe('averages.overall_pct', safe('averages.headcount_overall_pct_vs_ccure_today', null));
  const avg7 = safe('averages.avg_headcount_last_7_days', safe('averages.history_avg_overall_last_7_days', null));

  // Render
  if(!counts) {
    // should not happen because we initialize counts; but keep fallback
    return <Box display="flex" justifyContent="center" mt={6}><CircularProgress/></Box>;
  }

  return (
    <Box sx={{ display:'flex', flexDirection:'column', height:'100vh', overflow:'hidden' }}>
      {/* Header */}
      <Box px={2} py={1} sx={{ backgroundColor:'black', color:'#fff', borderBottom:'4px solid #FFD700', display:'flex', alignItems:'center', justifyContent:'space-between' }}>
        <Box>
          <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}><HomeIcon/></IconButton>
          <IconButton component={Link} to="/reports" sx={{ color: '#FFC72C', ml:1 }}><DescriptionIcon/></IconButton>
        </Box>
        <Box sx={{ flexGrow:1, display:'flex', alignItems:'center', justifyContent:'center' }}>
          <Box component="img" src="/wu-head-logo.png" alt="WU" sx={{ height:{xs:30,md:55}, mr:2 }} />
          <Typography variant="h5" sx={{ fontWeight:'bold', color:'primary.main' }}>Global Headcount Dashboard</Typography>
        </Box>
        <Box sx={{ width:120 }} />
      </Box>

      {/* Region Cards */}
      <Box sx={{ display:'flex', gap:2, p:2, flexWrap:'wrap', justifyContent:'center' }}>
        {[
          { key:'apac', label:'APAC', url:'http://10.199.22.57:3000/', textColor:'#f5650c' },
          { key:'emea', label:'EMEA', url:'http://10.199.22.57:3001/', textColor:'#11e6ed' },
          { key:'laca', label:'LACA', url:'http://10.199.22.57:3003/', textColor:'#FF2DD1' },
          { key:'namer', label:'NAMER', url:'http://10.199.22.57:3002/', textColor:'#a6e61c' },
        ].map(region => (
          <Box key={region.key} onClick={() => { window.location.href = region.url; }} sx={{ cursor:'pointer', width:200, height:80, display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center', border:'4px solid rgba(255,204,0,0.89)', borderRadius:2, boxShadow:3, color:region.textColor, '&:hover':{opacity:0.9} }}>
            <Typography variant="subtitle1" sx={{ fontWeight:'bold', color:region.textColor, fontSize:{xs:'1.3rem'} }}>{region.label}</Typography>
            <Typography variant="h3" sx={{ fontWeight:700, fontSize:{xs:'1.5rem', sm:'1.8rem'}, color:region.textColor }}>
              { typeof counts[region.key] === 'number' ? counts[region.key] : 0 }
            </Typography>
          </Box>
        ))}
      </Box>

      {/* Main */}
      <Box sx={{ display:'flex', flex:1, overflow:'hidden' }}>
        <Box sx={{ width:360, p:2, bgcolor:'background.paper', borderRight:'1px solid rgba(255,255,255,0.06)', overflowY:'auto' }}>
          <Typography variant="h6" sx={{ mb:1, color:'primary.main' }}>Live vs CCURE Summary</Typography>

          { loadingAverages ? (<Box sx={{ py:2 }}><LinearProgress/></Box>) : averagesError ? (<Alert severity="error">Failed to load CCURE averages</Alert>) : averages ? (
            <>
              <Paper sx={{ p:2, mb:2, bgcolor:'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">CCURE Active (reported)</Typography>
                <Box sx={{ display:'flex', justifyContent:'space-between', mt:1 }}>
                  <Box><Typography variant="h5" sx={{ fontWeight:700 }}>{ccureActiveEmployees ?? '—'}</Typography><Typography variant="caption" color="text.secondary">Active Employees</Typography></Box>
                  <Box sx={{ textAlign:'right' }}><Typography variant="h5" sx={{ fontWeight:700 }}>{ccureActiveContractors ?? '—'}</Typography><Typography variant="caption" color="text.secondary">Active Contractors</Typography></Box>
                </Box>
              </Paper>

              <Paper sx={{ p:2, mb:2, bgcolor:'rgba(255,255,255,0.03)' }} elevation={0}>
                <Box sx={{ display:'flex', justifyContent:'space-between' }}>
                  <Typography variant="subtitle2" color="text.secondary">Live Today</Typography>
                  <Typography variant="caption" color="text.secondary">{averages.date ?? ''}</Typography>
                </Box>
                <Box sx={{ display:'flex', justifyContent:'space-between', mt:1 }}>
                  <Box><Typography variant="h6" sx={{ fontWeight:700 }}>{liveEmployee ?? '—'}</Typography><Typography variant="caption" color="text.secondary">Employee</Typography></Box>
                  <Box><Typography variant="h6" sx={{ fontWeight:700 }}>{liveContractor ?? '—'}</Typography><Typography variant="caption" color="text.secondary">Contractor</Typography></Box>
                </Box>
                <Divider sx={{ my:1 }} />
                <Box>
                  <Typography variant="caption" color="text.secondary">Totals</Typography>
                  <Box sx={{ display:'flex', justifyContent:'space-between', mt:0.5 }}>
                    <Typography variant="body2">Reported total</Typography>
                    <Typography variant="body2" sx={{ fontWeight:700 }}>{liveTotalReported ?? '—'}</Typography>
                  </Box>
                  { liveTotalDetails != null && (<Box sx={{ display:'flex', justifyContent:'space-between', mt:0.5 }}><Typography variant="body2">Detail rows total</Typography><Typography variant="body2" sx={{ fontWeight:700 }}>{liveTotalDetails}</Typography></Box>) }
                </Box>
              </Paper>

              <Paper sx={{ p:2, mb:2, bgcolor:'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">Percentages vs CCURE</Typography>
                <Box sx={{ display:'flex', justifyContent:'space-between', mt:1 }}><Typography variant="body2">Employees</Typography><Typography variant="body2" sx={{ fontWeight:700 }}>{empPct != null ? `${empPct}%` : '—'}</Typography></Box>
                <Box sx={{ display:'flex', justifyContent:'space-between' }}><Typography variant="body2">Contractors</Typography><Typography variant="body2" sx={{ fontWeight:700 }}>{conPct != null ? `${conPct}%` : '—'}</Typography></Box>
                <Box sx={{ display:'flex', justifyContent:'space-between', mt:0.5 }}><Typography variant="body2">Overall</Typography><Typography variant="body2" sx={{ fontWeight:700 }}>{overallPct != null ? `${overallPct}%` : '—'}</Typography></Box>
                <Divider sx={{ my:1 }} />
                <Typography variant="caption" color="text.secondary">Averages</Typography>
                <Box sx={{ display:'flex', justifyContent:'space-between', mt:1 }}><Typography variant="body2">7-day avg headcount</Typography><Typography variant="body2" sx={{ fontWeight:700 }}>{avg7 ?? '—'}</Typography></Box>
              </Paper>

              <Paper sx={{ p:2, mb:2, bgcolor:'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary" sx={{ mb:1 }}>Upload Active Sheets</Typography>
                <input type="file" accept=".xls,.xlsx" style={{ display:'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
                <Button variant="contained" startIcon={<UploadFileIcon />} sx={{ mr:1 }} onClick={() => fileInputEmpRef.current && fileInputEmpRef.current.click()} disabled={uploading}>Upload Employees</Button>
                <input type="file" accept=".xls,.xlsx" style={{ display:'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
                <Button variant="outlined" startIcon={<UploadFileIcon />} onClick={() => fileInputContrRef.current && fileInputContrRef.current.click()} disabled={uploading}>Upload Contractors</Button>
                {uploading && <Box sx={{ mt:1 }}><LinearProgress/></Box>}
                {uploadResult && <Typography variant="caption" color="success.main" sx={{ mt:1, display:'block' }}>Upload OK</Typography>}
                {uploadError && <Typography variant="caption" color="error.main" sx={{ mt:1, display:'block' }}>Upload error</Typography>}
              </Paper>

              {averages.notes && <Paper sx={{ p:2, mb:2, bgcolor:'rgba(255,255,255,0.02)' }}><Typography variant="caption" color="text.secondary">Notes</Typography><Typography variant="body2" sx={{ mt:1 }}>{averages.notes}</Typography></Paper>}
            </>
          ) : (<Typography variant="body2" color="text.secondary">No data</Typography>)}
        </Box>

        <Box sx={{ flex:1, height:'100%', position:'relative' }}>
          <MapChart selected={selected} onClickSite={r => setSelected(r)} initialZoom={1.8} />
        </Box>
      </Box>

      <Snackbar open={snack.open} autoHideDuration={3500} onClose={() => setSnack(prev=>({...prev, open:false}))}>
        <Alert severity={snack.severity} onClose={() => setSnack(prev=>({...prev, open:false}))}>{snack.message}</Alert>
      </Snackbar>
    </Box>
  );
}





//C:\Users\W0024618\Desktop\global-page\frontend\src\components\MapChart.jsx
import React, { useState, useEffect } from 'react';
import {
  ComposableMap,
  Geographies,
  Geography,
  Marker,
  ZoomableGroup,
} from 'react-simple-maps';
import { useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import IconButton from '@mui/material/IconButton';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import theme, { brandColors } from '../theme.js';

const geoUrl = '/world-110m.json';

const apacList = [
  { name: 'Pune, India', coords: [73.8567, 18.5204], url: 'http://10.199.22.57:3011' },
  { name: 'Quezon City, Philippines', coords: [121.0509, 14.6760], url: 'http://10.199.22.57:3000/partition/Quezon%20City' },
  { name: 'Tokyo, Japan', coords: [139.6917, 35.6895], url: 'http://10.199.22.57:3000/partition/JP.Tokyo' },
  { name: 'Taguig City, Philippines', coords: [121.0437, 14.5547], url: 'http://10.199.22.57:3000/partition/Taguig%20City' },
  { name: 'Kuala Lumpur, Malaysia', coords: [101.6869, 3.1390], url: 'http://10.199.22.57:3000/partition/MY.Kuala%20Lumpur' },
];

const lacaList = [
  { name: 'San José, Costa Rica', coords: [-84.0907, 9.9281], url: 'http://10.199.22.57:3003/partition/CR.Costa%20Rica%20Partition' },
  { name: 'Mexico City, Mexico', coords: [-99.1332, 19.4326], url: 'http://10.199.22.57:3003/partition/MX.Mexico%20City' },
  { name: 'Buenos Aires, Argentina', coords: [-58.3816, -34.6037], url: 'http://10.199.22.57:3003/partition/AR.Cordoba' },
  { name: 'Panama City, Panama', coords: [-79.5167, 8.9833], url: 'http://10.199.22.57:3003/partition/PA.Panama%20City' },
  { name: 'Lima, Peru', coords: [-77.0428, -12.0464], url: 'http://10.199.22.57:3003/partition/PE.Lima' },
  { name: 'Brasília, Brazil', coords: [-47.8825, -15.7942], url: 'http://10.199.22.57:3003/partition/BR.Sao%20Paulo' },
];

const emeaList = [
  { name: 'Dubai, UAE', coords: [55.2708, 25.2048], url: 'http://10.199.22.57:3001/partition/DU.Abu%20Dhab' },
  { name: 'London, UK', coords: [-0.1278, 51.5074], url: 'http://10.199.22.57:3001/partition/UK.London' },
  { name: 'Dublin, Ireland', coords: [-6.2603, 53.3498], url: 'http://10.199.22.57:3001/partition/IE.Dublin' },
  { name: 'Moscow, Russia', coords: [37.6173, 55.7558], url: 'http://10.199.22.57:3001/partition/RU.Moscow' },
  { name: 'Casablanca, Morocco', coords: [-7.5898, 33.5731], url: 'http://10.199.22.57:3001/partition/MA.Casablanca' },
  { name: 'Vilnius, Lithuania', coords: [25.2797, 54.6872], url: 'http://10.199.22.57:3001/partition/LT.Vilnius' },
];

const namerList = [
  { name: 'Denver, USA', coords: [-104.9903, 39.7392], url: 'http://10.199.22.57:3012'},
  { name: 'New York, USA', coords: [-74.0060, 40.7128], url: 'http://10.199.22.57:3002/partition/US.NYC' },
  { name: 'Miami, USA', coords: [-80.1918, 25.7617], url: 'http://10.199.22.57:3002/partition/US.FL.Miami' },
  { name: 'Austin, USA', coords: [-97.7431, 30.2672], url: 'http://10.199.22.57:3002/partition/USA%2FCanada%20Default' },
];

const REGION_COUNTRIES = {
  global: [...apacList, ...emeaList, ...lacaList, ...namerList],
  apac: apacList,
  emea: emeaList,
  laca: lacaList,
  namer: namerList,
};

const regionOrder = ['global', 'apac', 'emea', 'laca', 'namer'];
function getColor(region, palette) {
  return palette[regionOrder.indexOf(region) % palette.length];
}



// Instead of hiding label, we'll only offset their positions
const CITY_OFFSETS = {
  'Taguig City, Philippines': [5.5, -8], // slightly to the right & down
  'Panama City, Panama': [5.5, -8],
  'Dublin, Ireland': [9.9, -10],
  'Moscow, Russia': [7.5, -0.5],
};



// export default function MapChart({ selected = 'global', onClickSite, initialZoom = 5, }) {
//   const theme = useTheme();
//   const brands = theme.palette.brand.colors;

export default function MapChart({ selected = 'global', onClickSite, initialZoom = 5, }) {
  const theme = useTheme();
  // pull colors array directly instead of theme.palette.brand
  const brands = brandColors;



  // Zoom & center
  // const [zoom, setZoom] = useState();

  // Zoom & center
  // Use a ref to know if we’re mounting for the first time
  const firstMount = React.useRef(true);
  const [zoom, setZoom] = useState(initialZoom);


  const [center, setCenter] = useState([0, 20]);
  useEffect(() => {


    // recenter every time region changes
    if (selected === 'global') {
      setCenter([0, 13]);
      // only reset zoom on first mount if you want; otherwise keep whatever zoom is
      if (firstMount.current) {
        setZoom(initialZoom);
        firstMount.current = false;
      }
    } else {

      const list = REGION_COUNTRIES[selected] || [];
      if (list.length) {
        setCenter(list[0].coords);
        setZoom(selected === 'apac' || selected === 'emea' ? 2 : 3);
      }
    }
  }, [selected]);

  const handleZoomIn = () => setZoom(z => Math.min(z * 1.9, 10));
  const handleZoomOut = () => setZoom(z => Math.max(z / 1.5, 1));

  // Build markers with label / tooltip behavior
  const markers = REGION_COUNTRIES[selected].map((m, idx) => {
    const [city] = m.name.split(',');




const offset = CITY_OFFSETS[m.name] || [0, 0];
const coords = [m.coords[0] + offset[0], m.coords[1] + offset[1]];

return {
  name: city.trim(),
  coords,
  color: brands[idx % brands.length],
  showLabel: true, // ✅ Show label for all cities
  tooltip: null,    // Optional: keep tooltip if needed
  url: m.url,
};


  });




  return (
    <Box sx={{ position: 'relative', width: '100%', height: '100%' }}>
      {/* Zoom Controls */}
      <Box
        sx={{
          position: 'absolute',
          top: 8,
          right: 8,
          display: 'flex',
          flexDirection: 'column',
          zIndex: 10,
        }}
      >
        <IconButton size="small" onClick={handleZoomIn}>
          <AddIcon fontSize="small" />
        </IconButton>
        <IconButton size="small" onClick={handleZoomOut}>
          <RemoveIcon fontSize="small" />
        </IconButton>
      </Box>

      <ComposableMap
        projectionConfig={{ rotate: [-10, 0, 0], scale: 150 }}
        style={{
          width: '100%',
          height: '100%',

          // border: '1px solid #d0d0d0', // professional border
          borderRadius: '12px',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
        }}
      >
        <ZoomableGroup center={center} zoom={zoom}>
          {/* Countries */}
          <Geographies geography={geoUrl}>
            {({ geographies }) =>
              geographies.map(geo => {
                const name = geo.properties.NAME;
                const inRegion = REGION_COUNTRIES[selected].some(
                  c => c.name.split(',').pop().trim() === name
                );
                return (
                  <Geography
                    key={geo.rsmKey}
                    geography={geo}
                    fill={
                      inRegion
                        ? getColor(selected, brands)
                        : theme.palette.grey[900]
                    }
                    stroke={theme.palette.grey[700]}
                    strokeWidth={0.5}
                    style={{ default: { outline: 'none' } }}
                  />
                );
              })
            }
          </Geographies>

         

          {markers.map((m, i) => {
            const r = 1 * zoom;
            return (
              <Marker
                key={i}
                coordinates={m.coords}
                onClick={() => {
                  if (m.url) {
                    window.location.href=m.url; // ✅ Use URL from data
                  }
                }}
                style={{ cursor: 'pointer' }}
              >
                <svg
                  width={5 * zoom}
                  height={5 * zoom}
                  viewBox="0 0 16 16"
                  fill={m.color}
                  xmlns="http://www.w3.org/2000/svg"
                  style={{ transform: 'translate(-8px, -16px)', cursor: 'pointer' }}
                >
                  <path d="M8 0a5 5 0 0 0-5 5c0 4.25 5 11 5 11s5-6.75 5-11a5 5 0 0 0-5-5zm0 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" />
                  {m.tooltip && <title>{m.tooltip}</title>}
                </svg>

                {m.showLabel && (
                  <text
                    textAnchor="middle"
                    y={-12 * zoom}
                    fill={m.color}
                    fontSize={5 * zoom}
                    fontWeight="bold"
                    style={{
                      paintOrder: 'stroke',
                      strokeWidth: 1,
                      strokeLinejoin: 'round',
                      cursor: 'pointer', // Ensure text also shows pointer
                    }}
                  >
                    {m.name}
                  </text>
                )}
              </Marker>
            );
          })}


        </ZoomableGroup>
      </ComposableMap>
    </Box>
  );
}









// frontend/src/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: '/api',         // frontend calls '/api/...' and vite proxy rewrites it
  timeout: 120000,
  headers: {
    'Accept': 'application/json',
  }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    // friendly log for dev
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;






//

// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_HOST = `http://localhost:${BACKEND_PORT}`;

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Keep single copies of MUI/emotion to avoid runtime errors such as
      // "createTheme_default is not a function" caused by duplicate copies.
      '@mui/material': path.resolve(__dirname, 'node_modules/@mui/material'),
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    }
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // Proxy '/api/*' to backend, removing the '/api' prefix
      '/api': {
        target: BACKEND_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (p) => p.replace(/^\/api/, ''),
        timeout: 120000
      }
    }
  }
});






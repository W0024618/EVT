//C:\Users\W0024618\Desktop\global-page\frontend\src\context\AuthContext.jsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import axios from 'axios';

const AuthContext = createContext(null);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null); // { EmployeeName, EmployeeID, username, ...}
  const [permissions, setPermissions] = useState({}); // { device_health: true, headcount.apac: true, ... }
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(() => localStorage.getItem('auth_token') || null);

  // Set axios default header when token changed
  useEffect(() => {
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      localStorage.setItem('auth_token', token);
    } else {
      delete axios.defaults.headers.common['Authorization'];
      localStorage.removeItem('auth_token');
    }
  }, [token]);

  // Try to load user/permissions on start if token exists
  useEffect(() => {
    let cancelled = false;
    async function fetchMe() {
      if (!token) {
        setLoading(false);
        return;
      }
      try {
        const res = await axios.get('/api/auth/me'); // expects { user, permissions }
        if (cancelled) return;
        setUser(res.data.user || null);
        setPermissions(res.data.permissions || {});
      } catch (err) {
        console.warn('fetch /api/auth/me failed', err?.message || err);
        // if token invalid -> clear
        setToken(null);
        setUser(null);
        setPermissions({});
      } finally {
        if (!cancelled) setLoading(false);
      }
    }
    fetchMe();
    return () => { cancelled = true; };
  }, [token]);

  const login = async (username, password) => {
    try {
      const res = await axios.post('/api/auth/login', { username, password });
      const { token: t, user: u, permissions: p } = res.data;
      if (!t) throw new Error('missing token in login response');
      setToken(t);
      setUser(u || null);
      setPermissions(p || {});
      return { ok: true };
    } catch (err) {
      console.error('login failed', err?.response?.data || err?.message || err);
      const msg = err?.response?.data?.detail || err?.response?.data?.error || err?.message || 'Login failed';
      return { ok: false, error: msg };
    }
  };

  const logout = () => {
    setToken(null);
    setUser(null);
    setPermissions({});
  };

  // New: hasPermission supports:
  // - single permission string (e.g. 'device_health' or 'headcount.apac')
  // - returns true if user has 'global_access' (super-permission)
  // - returns true if exact key exists or if asked for 'headcount' and user has any 'headcount.*'
  // - accepts null/undefined -> false
  const hasPermission = (perm) => {
    if (!perm) return false;
    // super-permission
    if (permissions && permissions.global_access) return true;

    // if permission is array - require any match
    if (Array.isArray(perm)) {
      return perm.some(p => hasPermission(p));
    }

    // exact
    if (permissions && permissions[perm]) return true;

    // parent lookup: if asked 'headcount' and user has any headcount.* key - treat as allowed
    const parts = perm.split('.');
    if (parts.length === 1) {
      const prefix = `${perm}.`;
      for (const k of Object.keys(permissions || {})) {
        if (k.startsWith(prefix) && permissions[k]) return true;
      }
    }

    return false;
  };

  // canGrant (kept)
  const canGrant = !!permissions?.can_grant;

  // helper to refresh permissions (call when granting/revoking or token change)
  const refresh = async () => {
    if (!token) return;
    try {
      const res = await axios.get('/api/auth/me');
      setUser(res.data.user || null);
      setPermissions(res.data.permissions || {});
    } catch (err) {
      console.warn('refresh failed', err);
    }
  };

  return (
    <AuthContext.Provider value={{
      user,
      token,
      loading,
      login,
      logout,
      hasPermission,
      canGrant,
      permissions,
      refresh,
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}

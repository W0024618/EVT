// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://10.199.22.57:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://10.199.22.57:3009';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Keep @mui/material un-aliased (let package resolution work normally)
      // Force emotion and MUI styled engine to use the top-level copies to avoid duplicates:
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
      // This makes every `@mui/styled-engine` import resolve to whatever is installed at top-level
      '@mui/styled-engine': path.resolve(__dirname, 'node_modules/@mui/styled-engine'),
    },
    // Prevent duplicate copies of these libs being bundled
    dedupe: ['@mui/material', '@mui/system', '@mui/styled-engine', '@emotion/react', '@emotion/styled']
  },
  optimizeDeps: {
    // help vite pre-bundle these so ESM exports resolve correctly
    include: [
      '@mui/material',
      '@mui/material/styles',
      '@mui/icons-material',
      '@emotion/react',
      '@emotion/styled',
      '@mui/system',
      '@mui/styled-engine'
    ]
  },
  server: {
    port: 3005,
    hmr: { overlay: false },
    proxy: {
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
        timeout: 120000
      },
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        timeout: 120000
      }
    }
  }
});






# from frontend/ (or project root if packages are installed there)
npm ls @mui/material @mui/system @mui/styled-engine @emotion/react @emotion/styled







"overrides": {
  "@mui/styled-engine": "^5.0.0",
  "@mui/system": "^5.0.0"
}










PS D:\DASHBOARD\global-page\frontend> npm run dev

> global-page-frontend@1.0.0 dev
> vite


  VITE v4.5.14  ready in 1233 ms

  ➜  Local:   http://localhost:3005/
  ➜  Network: use --host to expose
  ➜  press h to show help
X [ERROR] No matching export in "node_modules/@mui/styled-engine/esm/index.js" for import "internal_processStyles"

    node_modules/@mui/material/node_modules/@mui/system/esm/createStyled.js:7:29:
      7 │ import styledEngineStyled, { internal_processStyles as processStyles, internal_serializeStyles as serializeStyles } from '@mui/styled-engine';
        ╵                              ~~~~~~~~~~~~~~~~~~~~~~

1:09:55 PM [vite] vite.config.js changed, restarting server...
1:09:56 PM [vite] server restarted.
X [ERROR] No matching export in "node_modules/@mui/styled-engine/esm/index.js" for import "internal_processStyles"

    node_modules/@mui/material/node_modules/@mui/system/esm/createStyled.js:7:29:
      7 │ import styledEngineStyled, { internal_processStyles as processStyles, internal_serializeStyles as serializeStyles } from '@mui/styled-engine';
        ╵                              ~~~~~~~~~~~~~~~~~~~~~~




Check below each file line by line and fix the issue carefully 






// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://10.199.22.57:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://10.199.22.57:3009';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Do NOT alias @mui/material (let package resolution work normally)
      // Keep emotion aliases to avoid duplicate emotion runtime instances:
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    },
    // Prevent duplicate copies of MUI / emotion being bundled
    dedupe: ['@mui/material', '@mui/system', '@mui/styled-engine', '@emotion/react']
  },
  optimizeDeps: {
    // help vite pre-bundle these so ESM exports resolve correctly
    include: [
      '@mui/material',
      '@mui/material/styles',
      '@mui/icons-material',
      '@emotion/react',
      '@emotion/styled'
    ]
  },
  server: {
    port: 3005,
    hmr: { overlay: false },
    proxy: {
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
        timeout: 120000
      },
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        timeout: 120000
      }
    }
  }
});









// frontend/src/App.jsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { Box } from '@mui/material';

import GlobalPage   from './pages/GlobalPage.jsx';
import VipPage      from './pages/VipPage.jsx';
import ReportsPage  from './pages/ReportsPage.jsx';
import DurationPage from "./pages/DurationPage";
import { AuthProvider, useAuth } from './context/AuthContext';
import LoginPage from './pages/LoginPage';
import ProtectedRoute from './components/ProtectedRoute';
import AccessManager from './pages/AccessManager';

// Optional: small wrapper to redirect authed users from /login
function LoginGuard() {
  const auth = useAuth();
  if (auth.loading) return null;
  if (auth.user) return <Navigate to="/" replace />;
  return <LoginPage />;
}

export default function App() {
  return (
    <AuthProvider>
      <Routes>
        <Route path="/login" element={<LoginGuard />} />

        <Route path="/" element={
          <ProtectedRoute>
            <GlobalPage />
          </ProtectedRoute>
        } />

        <Route path="/vip" element={
          <ProtectedRoute>
            <VipPage />
          </ProtectedRoute>
        } />

        <Route path="/reports" element={
          <ProtectedRoute>
            <ReportsPage />
          </ProtectedRoute>
        } />

        <Route path="/duration" element={
          <ProtectedRoute permission="global_duration">
            <DurationPage />
          </ProtectedRoute>
        } />

        <Route path="/access-manager" element={
          <ProtectedRoute permission="can_grant">
            <AccessManager />
          </ProtectedRoute>
        } />

        {/* fallback */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </AuthProvider>
  );
}

Check below each file carefully keep Previous logic as it is and solve the issue carefully..

Download the React DevTools for a better development experience: https://reactjs.org/link/react-devtools
chunk-DLP5HLVQ.js?v=384081b6:35 Uncaught TypeError: createTheme_default is not a function
    at chunk-DLP5HLVQ.js?v=384081b6:35:20
(anonymous) @ chunk-DLP5HLVQ.js?v=384081b6:35Understand this error


Check each file carefully

// frontend/src/pages/GlobalPage.jsx

import React, { useState, useEffect, useRef } from 'react';
import {
  Box, Typography, CircularProgress, IconButton, Button, Paper, Divider,
  LinearProgress, Snackbar, Alert, List, ListItem, ListItemText,Tooltip
} from '@mui/material';

import HomeIcon from '@mui/icons-material/Home';
import DescriptionIcon from '@mui/icons-material/Description';
import UploadFileIcon from '@mui/icons-material/UploadFile';

import MapChart from '../components/MapChart.jsx';
import api from '../api';
import { useNavigate, Link } from 'react-router-dom';



import TimerIcon from "@mui/icons-material/AccessTime"; // duration icon
import { Link as RouterLink } from "react-router-dom";

/*
  Important:
  - Do NOT mix /api/headcount and /api/ccure/verify.
  - Region cards (APAC/EMEA/LACA/NAMER) come only from /api/headcount.
  - Live vs CCURE Summary now comes from /api/ccure/verify?raw=true.
  - Initial region totals are zero (keeps previous UI behaviour).
  - We implement polling for headcount and SSE for ccure/stream (realtime via SSE).
*/

export default function GlobalPage() {
  const navigate = useNavigate();

  // Region totals (headcount) - default to zeros so UI shows 0 immediately (preserve previous behaviour)
  const [counts, setCounts] = useState({ apac: 0, emea: 0, laca: 0, namer: 0 });
  const [selected, setSelected] = useState('global');

  // Averages/ccure state (left panel)
  const [averages, setAverages] = useState(null);
  const [loadingAverages, setLoadingAverages] = useState(true);
  const [averagesError, setAveragesError] = useState(null);

  // upload state
  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  // (kept for backwards-compatibility but upload buttons are always shown now)
  const [uploadedEmployee, setUploadedEmployee] = useState(false);
  const [uploadedContractor, setUploadedContractor] = useState(false);

  const [exportReportPath, setExportReportPath] = useState(null);

  // top-row file inputs
  const fileInputEmpRef = useRef();
  const fileInputContrRef = useRef();
  const [snack, setSnack] = useState({ open: false, severity: 'info', message: '' });

  // date-range state for top-right controls
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  // Polling refs for safe scheduling and backoff
  const headcountRef = useRef({ timerId: null, failureCount: 0, isFetching: false });
  const averagesRef = useRef({ timerId: null, failureCount: 0, isFetching: false });


  const [showCenterUploads, setShowCenterUploads] = useState(false);


  // -----------------------
  // HEADCOUNT POLLING ONLY (unchanged)
  // -----------------------
  useEffect(() => {
    let mounted = true;

    const fetchHeadcount = async () => {
      if (!mounted) return;
      if (headcountRef.current.isFetching) return;
      headcountRef.current.isFetching = true;

      try {
        const res = await api.get('/headcount');
        if (!mounted) return;
        const d = res.data;
        if (d && typeof d === 'object') {
          const newCounts = {
            apac: Number(d.apac || 0),
            emea: Number(d.emea || 0),
            laca: Number(d.laca || 0),
            namer: Number(d.namer || 0),
          };
          setCounts(prev => {
            if (
              prev.apac === newCounts.apac &&
              prev.emea === newCounts.emea &&
              prev.laca === newCounts.laca &&
              prev.namer === newCounts.namer
            ) {
              return prev;
            }
            return newCounts;
          });
        } else {
          console.warn('[headcount] unexpected response shape - ignoring', d);
        }
        headcountRef.current.failureCount = 0;
      } catch (err) {
        headcountRef.current.failureCount = (headcountRef.current.failureCount || 0) + 1;
        console.warn('[headcount] fetch failed:', err?.message || err);
      } finally {
        headcountRef.current.isFetching = false;
        const f = headcountRef.current.failureCount || 0;
        const backoffMs = 15000 * Math.pow(2, Math.min(Math.max(f - 1, 0), 4)); // 15s..240s
        headcountRef.current.timerId = setTimeout(fetchHeadcount, backoffMs);
      }
    };

    fetchHeadcount();

    return () => {
      mounted = false;
      if (headcountRef.current.timerId) clearTimeout(headcountRef.current.timerId);
      headcountRef.current.isFetching = false;
    };
  }, []); // run once

  // AVERAGES: use SSE (direct to Python backend) with fallback initial fetch
  useEffect(() => {
    let stopped = false;
    let es = null;
    let backoff = 1000;

    // Allow override via VITE_PY_BACKEND; otherwise assume python at :8000
    const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');

    const connect = () => {
      if (stopped) return;
      try {
        es = new EventSource(`${PY_BACKEND}/ccure/stream`);
      } catch (err) {
        console.warn('SSE creation failed', err);
        es = null;
      }

      if (!es) {
        initialFetch();
        return;
      }

      es.onopen = () => {
        console.info('[SSE] connected to', `${PY_BACKEND}/ccure/stream`);
        backoff = 1000;
        setAveragesError(null);
      };

      es.onmessage = (evt) => {
        try {
          const payload = JSON.parse(evt.data);
          setAverages(payload);
          setLoadingAverages(false);
          setAveragesError(null);
        } catch (e) {
          console.warn('Failed to parse SSE message', e);
        }
      };

      es.onerror = (err) => {
        console.warn('[SSE] error/closed, attempting reconnect', err);
        try { es.close(); } catch (e) { }
        es = null;
        if (stopped) return;
        setTimeout(() => {
          backoff = Math.min(backoff * 2, 30000);
          connect();
        }, backoff);
      };
    };

    const initialFetch = async () => {
      setLoadingAverages(true);
      setAveragesError(null);
      try {
        const res = await api.get('/ccure/verify?raw=true');
        setAverages(res.data);
        setLoadingAverages(false);
        setAveragesError(null);
      } catch (err) {
        console.warn('initial /ccure/verify?raw=true fetch failed', err);
        setLoadingAverages(false);
        setAveragesError(err);
      }
    };

    initialFetch();
    connect();

    return () => {
      stopped = true;
      if (es) {
        try { es.close(); } catch (e) { }
        es = null;
      }
    };
  }, []);

  // -----------------------
  // Upload helper (updated to use fetch, kept robust)
  // -----------------------
  const handleUpload = async (file, type) => {
    if (!file) return;
    const endpoint = type === 'employee' ? '/upload/active-employees' : '/upload/active-contractors';

    const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');
    const url = `${PY_BACKEND}${endpoint}`;

    const fd = new FormData();
    fd.append('file', file, file.name);

    setUploading(true);
    setUploadResult(null);
    setUploadError(null);

    try {
      console.info('Uploading to', url, file.name);
      const resp = await fetch(url, {
        method: 'POST',
        body: fd,
      });

      const rawText = await resp.text();
      let data = null;
      try { data = rawText ? JSON.parse(rawText) : null; } catch (e) { data = { raw: rawText }; }

      console.info('Upload response', resp.status, resp.statusText, data);

      if (!resp.ok) {
        throw new Error(`Upload failed HTTP ${resp.status} ${resp.statusText} - ${JSON.stringify(data)}`);
      }

      setUploadResult(data);
      setSnack({ open: true, severity: 'success', message: `Active Sheet Updated successfully: ${file.name}` });

      // mark canonical presence if backend returned detail.canonical_saved
      const saved = data && data.detail && (data.detail.canonical_saved || data.detail.canonical_saved === "");
      if (type === 'employee') setUploadedEmployee(!!saved);
      if (type === 'contractor') setUploadedContractor(!!saved);

      // best-effort refresh of averages/headcount
      try {
        const r1 = await fetch(`${PY_BACKEND}/ccure/verify?raw=true`);
        if (r1.ok) setAverages(await r1.json());
      } catch (e) { console.warn('refresh verify failed', e); }

      try {
        const r2 = await fetch(`${PY_BACKEND}/headcount`);
        if (r2.ok) {
          const d = await r2.json();
          if (d && typeof d === 'object') {
            setCounts({
              apac: Number(d.apac || 0),
              emea: Number(d.emea || 0),
              laca: Number(d.laca || 0),
              namer: Number(d.namer || 0)
            });
          }
        }
      } catch (e) { console.warn('refresh headcount failed', e); }

    } catch (err) {
      console.error('Upload failed', err);
      setUploadError(err);
      setSnack({ open: true, severity: 'error', message: `Upload failed: ${file.name} â€” ${err.message}` });
    } finally {
      setUploading(false);
    }
  };

  // --- Helpers: find CCURE arrays in 'averages' and generate CSV ---
  const _escapeCsv = (v) => {
    if (v === null || v === undefined) return '';
    if (typeof v === 'object') {
      try { v = JSON.stringify(v); } catch { v = String(v); }
    }
    const s = String(v).replace(/"/g, '""');
    return `"${s}"`;
  };

  // Find candidate arrays inside the averages object that look like CCURE comparison rows
  const findCcureArrays = (obj) => {
    const found = [];
    if (!obj || typeof obj !== 'object') return found;

    const inspect = (parentKey, val) => {
      if (!val) return;
      if (Array.isArray(val) && val.length > 0 && typeof val[0] === 'object') {
        const sample = val[0];
        // heuristic: many ccure rows have ccure_key or EmployeeID or EmpName fields
        if ('ccure_key' in sample || 'EmployeeID' in sample || 'EmpName' in sample) {
          found.push({ key: parentKey, arr: val });
        }
      } else if (typeof val === 'object') {
        for (const k of Object.keys(val)) {
          inspect(parentKey ? `${parentKey}.${k}` : k, val[k]);
        }
      }
    };

    inspect('', obj);
    return found;
  };

  // Build CSV rows with the requested columns:
  // Employees: ccure_key, EmployeeID, EmpName, PersonnelType, Manager_Name, Profile_Disabled, Employee_Status
  // Contractors: ccure_key, EmployeeID, EmpName, VendorCompany, PersonnelType, Manager_Name, Profile_Disabled, Employee_Status
  const generateCcureCompareCSV = (averagesPayload) => {
    if (!averagesPayload || typeof averagesPayload !== 'object') return null;

    const candidates = findCcureArrays(averagesPayload);
    if (!candidates || candidates.length === 0) return null;

    // choose the first plausible array
    const rows = candidates[0].arr;

    if (!Array.isArray(rows) || rows.length === 0) return null;

    const headers = ['ccure_key', 'EmployeeID', 'EmpName', 'VendorCompany', 'PersonnelType', 'Manager_Name', 'Profile_Disabled', 'Employee_Status'];
    const lines = [headers.map(h => _escapeCsv(h)).join(',')];

    const readField = (r, name) => {
      if (!r) return '';
      if (r[name] !== undefined && r[name] !== null) return r[name];
      if (r.raw && typeof r.raw === 'object' && r.raw[name] !== undefined && r.raw[name] !== null) return r.raw[name];
      // some backends put nested object as string in "raw"
      if (typeof r.raw === 'string') {
        try {
          const parsed = JSON.parse(r.raw);
          if (parsed && parsed[name] !== undefined) return parsed[name];
        } catch { }
      }
      return '';
    };

    for (const r of rows) {
      // derive PersonnelType (sometimes present in row or row.raw)
      const personnelType = readField(r, 'PersonnelType') || readField(r, 'Personnel_Type') || readField(r, 'PersonnelTypeName') || '';

      const ccure_key = readField(r, 'ccure_key') || readField(r, 'CcureKey') || readField(r, 'EmployeeID') || '';
      const employeeId = readField(r, 'EmployeeID') || readField(r, 'Employee_Id') || '';
      const empName = readField(r, 'EmpName') || readField(r, 'EmployeeName') || readField(r, 'Name') || '';
      const vendorCompany = readField(r, 'VendorCompany') || readField(r, 'Vendor_Company') || '';
      const managerName = readField(r, 'Manager_Name') || readField(r, 'ManagerName') || '';
      let profileDisabled = readField(r, 'Profile_Disabled');
      if (profileDisabled === true || profileDisabled === false) profileDisabled = String(profileDisabled);
      const employeeStatus = readField(r, 'Employee_Status') || readField(r, 'Status') || '';

      const rowValues = [
        ccure_key,
        employeeId,
        empName,
        vendorCompany,
        personnelType,
        managerName,
        profileDisabled,
        employeeStatus,
      ];

      lines.push(rowValues.map(v => _escapeCsv(v)).join(','));
    }

    const csvContent = lines.join('\n');
    return csvContent;
  };

  // Export: request server to generate compare report and download the xlsx (binary)
  const exportUploadedSheets = async () => {
    setUploading(true);
    try {
      const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');

      // attempt server-side generation as before
      let genJson = null;
      try {
        const genRes = await fetch(`${PY_BACKEND}/ccure/compare?export=true`, {
          method: 'GET',
        });

        try {
          genJson = await genRes.json();
        } catch (e) {
          const txt = await genRes.text().catch(() => '');
          throw new Error(`Export generation returned non-JSON response: ${txt}`);
        }

        if (!genRes.ok || !genJson || !genJson.report_path) {
          const msg = (genJson && (genJson.detail || genJson.error)) || JSON.stringify(genJson || {});
          console.warn('Server export generation failed or returned unexpected payload:', msg);
          setSnack({ open: true, severity: 'warning', message: 'Server export generation failed; attempting client CSV export' });
        } else {
          // server returned a report_path â€” attempt to download it
          const reportPath = genJson.report_path;
          setExportReportPath(reportPath);
          setSnack({ open: true, severity: 'success', message: 'Export created â€” downloading now' });

          try {
            const dlUrl = `${PY_BACKEND}/ccure/report/${encodeURIComponent(reportPath)}`;
            const fileRes = await fetch(dlUrl, { method: 'GET' });

            if (!fileRes.ok) {
              const txt = await fileRes.text().catch(() => '');
              console.warn('Failed to download server report:', txt);
            } else {
              const blob = await fileRes.blob();
              const blobUrl = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = blobUrl;
              a.download = reportPath || 'missing_vs_ccure.xlsx';
              document.body.appendChild(a);
              a.click();
              a.remove();
              window.URL.revokeObjectURL(blobUrl);
            }
          } catch (e) {
            console.warn('Server report download failed:', e);
          }
        }
      } catch (err) {
        // log and fall through to client-side CSV
        console.warn('exportUploadedSheets server call failed:', err);
      }

      // --- Client-side CSV fallback / supplemental export with requested columns ---
      try {
        const csv = generateCcureCompareCSV(averages || {});
        if (csv) {
          const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          // prefer a descriptive filename
          const fname = `missing_vs_ccure_custom_${(new Date()).toISOString().slice(0, 10)}.csv`;
          a.download = fname;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(url);
          setSnack({ open: true, severity: 'success', message: 'Custom CCURE CSV downloaded' });
        } else {
          // nothing to export client-side
          setSnack(prev => ({ ...prev, open: true, severity: 'info', message: 'No CCURE rows found in current averages payload for CSV export' }));
        }
      } catch (e) {
        console.error('Client CSV generation failed', e);
        setSnack(prev => ({ ...prev, open: true, severity: 'error', message: `CSV generation failed: ${e?.message || e}` }));
      }

    } catch (err) {
      console.error('exportUploadedSheets error', err);
      setSnack({ open: true, severity: 'error', message: `Export failed: ${err.message || err}` });
    } finally {
      setUploading(false);
    }
  };

  const onChooseEmployeeFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'employee'); e.target.value = null; };
  const onChooseContractorFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'contractor'); e.target.value = null; };

  // apply date range to re-fetch /ccure/verify
  const applyDateRange = async () => {
    if (!startDate || !endDate) {
      setSnack({ open: true, severity: 'warning', message: 'Please select start and end dates' });
      return;
    }
    setLoadingAverages(true);
    setAveragesError(null);
    try {
      const res = await api.get(`/ccure/verify?raw=true&start_date=${startDate}&end_date=${endDate}`);
      setAverages(res.data);
      setLoadingAverages(false);
      setSnack({ open: true, severity: 'success', message: 'Averages updated' });
    } catch (err) {
      console.warn('applyDateRange failed', err);
      setLoadingAverages(false);
      setAveragesError(err);
      setSnack({ open: true, severity: 'error', message: 'Failed to update averages' });
    }
  };

  // safe helper for nested averages paths
  const safe = (path, fallback = null) => {
    if (!averages) return fallback;
    try {
      return path.split('.').reduce((a, k) => (a && a[k] !== undefined ? a[k] : fallback), averages);
    } catch {
      return fallback;
    }
  };

  // Derived values (unchanged)
  const ccureActiveEmployees = safe('ccure_reported.employees',
    safe('ccure_active.active_employees',
      safe('ccure_active.ccure_active_employees_reported', null)
    )
  );
  const ccureActiveContractors = safe('ccure_reported.contractors',
    safe('ccure_active.active_contractors',
      safe('ccure_active.ccure_active_contractors_reported', null)
    )
  );

  const headTotalVisited = safe('headcount_attendance_summary.total_visited_today',
    safe('headcount_details.total_visited_today', null)
  );
  const headEmployee = safe('headcount_attendance_summary.employee',
    safe('headcount_details.employee', null)
  );
  const headContractor = safe('headcount_attendance_summary.contractor',
    safe('headcount_details.contractor', null)
  );

  const liveCurrentTotal = safe('live_headcount_region_clients.currently_present_total',
    safe('live_headcount_details.currently_present_total',
      null
    )
  );
  const liveEmp = safe('live_headcount_region_clients.employee',
    safe('live_headcount_details.employee', null)
  );
  const liveContr = safe('live_headcount_region_clients.contractor',
    safe('live_headcount_details.contractor', null)
  );

  const empPct = safe('percentages_vs_ccure.head_employee_pct_vs_ccure_today',
    safe('averages.head_emp_pct_vs_ccure_today', null)
  );
  const conPct = safe('percentages_vs_ccure.head_contractor_pct_vs_ccure_today',
    safe('averages.head_contractor_pct_vs_ccure_today', null)
  );
  const overallPct = safe('percentages_vs_ccure.head_overall_pct_vs_ccure_today',
    safe('averages.headcount_overall_pct_vs_ccure_today', null)
  );

  const avg7 = safe('averages.history_avg_overall_last_7_days',
    safe('averages.avg_headcount_last_7_days',
      safe('averages.avg_headcount_last_7_days_db', null)
    )
  );

  const respDate = safe('date', null);

  const locationAvgsObj = safe('averages.history_avg_by_location_last_7_days',
    safe('history_avg_by_location_last_7_days',
      safe('raw.averages.history_avg_by_location_last_7_days', {})
    )
  );

  const locationAvgsList = React.useMemo(() => {
    if (!locationAvgsObj || typeof locationAvgsObj !== 'object') return [];
    const arr = Object.entries(locationAvgsObj).map(([loc, vals]) => {
      return {
        location: loc,
        avg_employee_last_7_days: vals.avg_employee_last_7_days ?? vals.history_avg_employee_last_7_days ?? vals.avg_employee ?? null,
        avg_contractor_last_7_days: vals.avg_contractor_last_7_days ?? vals.history_avg_contractor_last_7_days ?? vals.avg_contractor ?? null,
        avg_overall_last_7_days: vals.avg_overall_last_7_days ?? vals.history_avg_overall_last_7_days ?? vals.avg_overall ?? null,
        history_days_counted: vals.history_days_counted ?? null
      };
    });
    arr.sort((a, b) => (b.avg_overall_last_7_days ?? -Infinity) - (a.avg_overall_last_7_days ?? -Infinity));
    return arr;
  }, [locationAvgsObj]);

  const globalCount = Number((counts.apac || 0)) + Number((counts.emea || 0)) + Number((counts.laca || 0)) + Number((counts.namer || 0));

  const hideScrollbarSx = {
    overflowY: 'auto',
    '&::-webkit-scrollbar': { width: 0, height: 0 },
    scrollbarWidth: 'none',
    msOverflowStyle: 'none',
  };

  // Render
  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh', overflow: 'hidden', bgcolor: 'background.default' }}>
      {/* Header */}
      <Box px={2} py={1} sx={{ backgroundColor: 'black', color: '#fff', borderBottom: '4px solid #FFD700', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <Box>
          <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}><HomeIcon fontSize="medium" /></IconButton>
          <IconButton component={Link} to="/reports" sx={{ color: '#FFC72C', ml: 1 }}><DescriptionIcon fontSize="medium" /></IconButton>
          <IconButton
            component="a"
            href="http://10.138.161.4:3000/dashboard/index.html"

            rel="noopener noreferrer"
            sx={{ color: '#FFC72C', ml: 1 }}
          >
            <i className="fa-solid fa-camera" style={{ fontSize: 20 }} />
          </IconButton>

          <IconButton
            component="a"
            href="http://10.199.22.57:3004/"
            rel="noopener noreferrer"
            sx={{ color: '#FFF', ml: 1 }}
          >
            <i className="bi bi-patch-check"></i>
          </IconButton>



{/* place this after the Associate Verification Tool link */}
<Tooltip title="Duration Reports">
  <IconButton
              component={RouterLink}
              to="/duration"
              size="large"
              aria-label="Duration Reports"
              sx={{ color: '#FFF', ml: 1 }}
            >
              <TimerIcon />
            </IconButton>
          </Tooltip>


        </Box>

        <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <Box component="img" src="/wu-head-logo.png" alt="WU Logo" sx={{ height: { xs: 30, md: 55 }, mr: 2 }} />
          <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>Global Headcount Dashboard</Typography>
        </Box>

        <Box sx={{ width: 120 }} />
      </Box>

      {/* Top row: Uploads | GLOBAL + Region Cards | Date selectors */}
      <Box sx={{ display: 'flex', alignItems: 'center', p: 1, px: 1, gap: 1 }}>
        {/* Left: fixed column with stacked upload/export buttons (aligned left) */}
        <Box sx={{ width: 260, display: 'flex', flexDirection: 'column', gap: 1 }}>
          <input type="file" accept=".xls,.xlsx,.csv" style={{ display: 'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
          <Button
            variant="contained"
            size="small"
            startIcon={<UploadFileIcon />}
            onClick={() => fileInputEmpRef.current && fileInputEmpRef.current.click()}
            sx={{ width: '100%', height: 25, textTransform: 'none', fontWeight: 700 }}
          >
            Upload Active Employee Sheet
          </Button>

          <input type="file" accept=".xls,.xlsx,.csv" style={{ display: 'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
          <Button
            variant="contained"
            size="small"
            startIcon={<UploadFileIcon />}
            onClick={() => fileInputContrRef.current && fileInputContrRef.current.click()}
            sx={{ width: '100%', height: 25, textTransform: 'none', fontWeight: 700 }}
          >
            Upload Active Contractor Sheet
          </Button>

          <Button
            variant="contained"
            size="small"
            startIcon={<DescriptionIcon />}
            onClick={exportUploadedSheets}
            sx={{ width: '100%', height: 25, textTransform: 'none', fontWeight: 700 }}
          >
            Export Comparison â†’ Report
          </Button>
        </Box>

        {/* Center: flexible, keeps region cards exactly centered on screen */}
        <Box sx={{ flex: 1, display: 'flex', justifyContent: 'center' }}>
          <Box sx={{ display: 'flex', gap: 3, alignItems: 'center', justifyContent: 'center', flexWrap: 'wrap' }}>
            {[
              { key: 'global', label: 'GLOBAL', count: globalCount, url: null },
              { key: 'apac', label: 'APAC', count: counts.apac, url: 'http://10.199.22.57:3000/' },
              { key: 'emea', label: 'EMEA', count: counts.emea, url: 'http://10.199.22.57:3001/' },
              { key: 'laca', label: 'LACA', count: counts.laca, url: 'http://10.199.22.57:3003/' },
              { key: 'namer', label: 'NAMER', count: counts.namer, url: 'http://10.199.22.57:3002/' },
            ].map(region => (
              <Box
                key={region.key}
                onClick={() => {
                  if (region.key === 'global') {
                    const el = document.querySelector('[data-global-left-panel]');
                    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    setSelected('global');
                    return;
                  }
                  if (region.url) window.location.href = region.url;
                }}
                sx={{
                  cursor: 'pointer',
                  width: 200,
                  height: 88,
                  display: 'flex',
                  flexDirection: 'column',
                  justifyContent: 'center',
                  alignItems: 'center',
                  border: '4px solid rgba(255, 204, 0, 0.89)',
                  borderRadius: 2,
                  boxShadow: 3,
                  bgcolor: 'transparent',
                  '&:hover': { opacity: 0.95 },
                }}
              >
                <Typography variant="subtitle2" sx={{ fontWeight: 'bold', color: '#FFC72C', fontSize: { xs: '0.95rem', md: '1.2rem' } }}>
                  {region.label}
                </Typography>
                <Typography variant="h4" sx={{ fontWeight: 900, fontSize: { xs: '1.2rem', md: '1.6rem' }, color: '#FFFFFF' }}>
                  {region.count ?? 0}
                </Typography>
              </Box>
            ))}
          </Box>
        </Box>

        {/* Right: fixed column for date selectors (aligned right) */}
        <Box sx={{ width: 360, display: 'flex', flexDirection: 'column', gap: 1, alignItems: 'flex-end' }}>
          <Paper sx={{ p: 1, display: 'flex', gap: 1, alignItems: 'center', boxShadow: 1, width: '100%' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column', width: 160 }}>
              <Typography variant="caption" color="text.secondary">Select Start date</Typography>
              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                style={{ width: '100%', height: 34, borderRadius: 4, border: '1px solid rgba(255,255,255,0.06)', padding: 4, background: 'transparent', color: 'inherit' }}
              />
            </Box>

            <Box sx={{ display: 'flex', flexDirection: 'column', width: 160 }}>
              <Typography variant="caption" color="text.secondary">Select End date</Typography>
              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                style={{ width: '100%', height: 34, borderRadius: 4, border: '1px solid rgba(255,255,255,0.06)', padding: 4, background: 'transparent', color: 'inherit' }}
              />
            </Box>
          </Paper>

          <Box sx={{ width: '100%', display: 'flex', justifyContent: 'flex-start' }}>
            <Button size="small" variant="contained" onClick={applyDateRange} sx={{ height: 36, textTransform: 'none', fontWeight: 700 }}>
              Apply
            </Button>
          </Box>
        </Box>
      </Box>

      {/* Main: left summary | center map | right averages */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        {/* Left detail panel */}
        <Box
          data-global-left-panel
          sx={{
            width: { xs: 320, md: 360 },
            minWidth: { md: 320 },
            p: 2,
            bgcolor: 'background.paper',
            borderRight: '1px solid rgba(255,255,255,0.06)',
            display: 'flex',
            flexDirection: 'column',
            ...hideScrollbarSx,
            height: '100%',
          }}
        >
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Live vs CCURE Summary</Typography>

          {loadingAverages ? (
            <Box sx={{ py: 2 }}><LinearProgress /></Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load CCURE averages</Alert>
          ) : averages ? (
            <>
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">CCURE Active (reported)</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1, alignItems: 'center' }}>
                  <Box>
                    <Typography variant="h4" sx={{ fontWeight: 800 }}>{ccureActiveEmployees ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Employees</Typography>
                  </Box>
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{ccureActiveContractors ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Contractors</Typography>
                  </Box>
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="subtitle2" color="text.secondary">Live Today</Typography>
                  <Typography variant="caption" color="text.secondary">{respDate ?? ''}</Typography>
                </Box>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{headEmployee ?? liveEmp ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Employee</Typography>
                  </Box>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{headContractor ?? liveContr ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Contractor</Typography>
                  </Box>
                </Box>

                <Divider sx={{ my: 1 }} />

                <Box>
                  <Typography variant="caption" color="text.secondary">Totals</Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.75 }}>
                    <Typography variant="body2">Attendance total (today)</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{headTotalVisited ?? 'â€”'}</Typography>
                  </Box>

                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                    <Typography variant="body2">Live region total</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveCurrentTotal ?? 'â€”'}</Typography>
                  </Box>

                  {safe('headcount_details.total_visited_today', null) != null && (
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                      <Typography variant="body2">Detail rows total</Typography>
                      <Typography variant="body2" sx={{ fontWeight: 700 }}>{safe('headcount_details.total_visited_today', 'â€”')}</Typography>
                    </Box>
                  )}
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">Percentages vs CCURE</Typography>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">Employees</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{empPct != null ? `${empPct}%` : 'â€”'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="body2">Contractors</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{conPct != null ? `${conPct}%` : 'â€”'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                  <Typography variant="body2">Overall</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{overallPct != null ? `${overallPct}%` : 'â€”'}</Typography>
                </Box>

                <Divider sx={{ my: 1 }} />
                <Typography variant="caption" color="text.secondary">Averages</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">7-day avg headcount</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{avg7 ?? 'â€”'}</Typography>
                </Box>
              </Paper>

              {averages.notes && (
                <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.01)' }}>
                  <Typography variant="body2" sx={{ mt: 1 }}>{averages.notes}</Typography>
                </Paper>
              )}
            </>
          ) : (
            <Typography variant="body2" color="text.secondary">No data</Typography>
          )}
        </Box>

        {/* Center: map (flex) */}
        <Box sx={{ flex: 1, minWidth: 0, position: 'relative', display: 'flex', flexDirection: 'column' }}>
          <Box sx={{ flex: 1, minHeight: 0 }}>
            <MapChart selected={selected} onClickSite={r => setSelected(r)} initialZoom={1.8} />
          </Box>
        </Box>

        {/* Right side: Location averages panel */}
        <Box
          sx={{
            width: { xs: 320, md: 360 },
            minWidth: { md: 320 },
            borderLeft: '1px solid rgba(255,255,255,0.06)',
            bgcolor: 'background.paper',
            p: 2,
            display: 'flex',
            flexDirection: 'column',
            ...hideScrollbarSx,
            height: '100%',
          }}
        >
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Location Averages</Typography>

          {loadingAverages ? (
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', py: 4 }}>
              <CircularProgress />
            </Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load location averages</Alert>
          ) : locationAvgsList.length === 0 ? (
            <Typography variant="body2" color="text.secondary">No location averages available</Typography>
          ) : (
            <List dense disablePadding sx={{ flex: 1 }}>
              {locationAvgsList.map(item => (
                <ListItem key={item.location} sx={{ alignItems: 'flex-start', py: 1.25, borderBottom: '1px solid rgba(255,255,255,0.03)' }}>
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography sx={{ fontWeight: 800 }}>{item.location}</Typography>
                        <Typography variant="body2" sx={{ fontWeight: 800 }}>
                          {item.avg_overall_last_7_days != null ? Math.round(item.avg_overall_last_7_days) : 'â€”'}
                        </Typography>
                      </Box>
                    }
                    secondary={
                      <Box sx={{ display: 'flex', gap: 2, mt: 0.5, flexWrap: 'wrap' }}>
                        <Typography variant="caption" color="text.secondary">Emp: <strong>{item.avg_employee_last_7_days != null ? Math.round(item.avg_employee_last_7_days) : 'â€”'}</strong></Typography>
                        <Typography variant="caption" color="text.secondary">Contr: <strong>{item.avg_contractor_last_7_days != null ? Math.round(item.avg_contractor_last_7_days) : 'â€”'}</strong></Typography>
                        {item.history_days_counted != null && <Typography variant="caption" color="text.secondary">Days: {item.history_days_counted}</Typography>}
                      </Box>
                    }
                    primaryTypographyProps={{ component: 'div' }}
                    secondaryTypographyProps={{ component: 'div' }}
                  />
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </Box>

      <Snackbar open={snack.open} autoHideDuration={3500} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>
        <Alert severity={snack.severity} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>{snack.message}</Alert>
      </Snackbar>
       
    </Box>
  );
}










// src/pages/DurationPage.jsx
import React, { useState, useMemo } from "react";
import axios from "axios";
import {
  Box,
  Grid,
  Paper,
  Typography,
  TextField,
  Button,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableContainer,
  CircularProgress,
  IconButton,
  Tooltip,
  Card,
  CardContent,
} from "@mui/material";
import DateRangeIcon from "@mui/icons-material/DateRange";
import SearchIcon from "@mui/icons-material/Search";
import DownloadIcon from "@mui/icons-material/CloudDownload";
import ClearIcon from "@mui/icons-material/Clear";

// Base API (change if your app uses different base)
const API_BASE = process.env.REACT_APP_API_BASE || "http://localhost:8000";

const REGIONS = [
  { value: "apac", label: "APAC" },
  { value: "emea", label: "EMEA" },
  { value: "laca", label: "LACA" },
  { value: "namer", label: "NAMER" },
];

function secondsToHMS(s) {
  if (s == null) return "";
  const sec = Number(s);
  if (!Number.isFinite(sec)) return "";
  const h = Math.floor(sec / 3600);
  const m = Math.floor((sec % 3600) / 60);
  const r = Math.floor(sec % 60);
  return `${h}:${String(m).padStart(2, "0")}:${String(r).padStart(2, "0")}`;
}

export default function DurationPage() {
  const [region, setRegion] = useState("apac");
  const [city, setCity] = useState("");
  const [startDate, setStartDate] = useState(""); // YYYY-MM-DD
  const [endDate, setEndDate] = useState("");
  const [singleDate, setSingleDate] = useState("");
  const [useRange, setUseRange] = useState(true);

  const [data, setData] = useState(null); // full API response
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // Build query params & fetch
  const fetchDurations = async () => {
    setError("");
    setLoading(true);
    setData(null);

    try {
      const params = {};
      // if range selected and both dates provided -> range mode
      if (useRange && startDate && endDate) {
        params.start_date = startDate;
        params.end_date = endDate;
      } else if (!useRange && singleDate) {
        params.date = singleDate;
      } else {
        // incomplete selection: prefer singleDate if present otherwise use today's date
        if (singleDate) params.date = singleDate;
      }

      if (region) params.regions = region;
      if (city) params.city = city;

      const res = await axios.get(`${API_BASE}/duration`, { params, timeout: 120000 });
      setData(res.data);
    } catch (err) {
      console.error(err);
      setError(err?.response?.data?.detail || err.message || "Failed to fetch duration data");
    } finally {
      setLoading(false);
    }
  };

  // Dynamic columns and rows for selected region
  const regionObj = useMemo(() => {
    if (!data || !region) return null;
    return data.regions?.[region] || null;
  }, [data, region]);

  // CSV export (simple)
  const exportCsv = () => {
    if (!regionObj) return;
    const dates = regionObj.dates || [];
    const rows = regionObj.employees || [];

    // header
    const header = ["EmployeeID", "EmployeeName", "TotalSecondsPresentInRange", ...dates];
    const csvRows = [header.join(",")];

    rows.forEach((r) => {
      const row = [
        `"${(r.EmployeeID || "").replace(/"/g, '""')}"`,
        `"${(r.EmployeeName || "").replace(/"/g, '""')}"`,
        r.total_seconds_present_in_range ?? "",
        ...dates.map((d) => `"${(r.durations?.[d] ?? "")}"`),
      ];
      csvRows.push(row.join(","));
    });

    const blob = new Blob([csvRows.join("\n")], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    const filename = `duration_${region}_${data?.start_date || ""}_to_${data?.end_date || ""}.csv`;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  };

  // Render helpers
  const renderTable = () => {
    if (!regionObj) return <Typography>No data for selected region.</Typography>;

    const dates = regionObj.dates || [];
    const rows = regionObj.employees || [];

    return (
      <TableContainer component={Paper} sx={{ mt: 2 }}>
        <Table size="small">
          <TableHead>
            <TableRow>
              <TableCell><b>EmployeeID</b></TableCell>
              <TableCell><b>EmployeeName</b></TableCell>
              <TableCell align="right"><b>Total (hh:mm:ss)</b></TableCell>
              {dates.map((d) => (
                <TableCell key={d} align="center"><b>{d}</b></TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.length === 0 ? (
              <TableRow>
                <TableCell colSpan={3 + dates.length} align="center">No employees in the response.</TableCell>
              </TableRow>
            ) : (
              rows.map((r) => (
                <TableRow key={r.person_uid || `${r.EmployeeID}-${r.EmployeeName}`}>
                  <TableCell>{r.EmployeeID || "-"}</TableCell>
                  <TableCell>{r.EmployeeName || "-"}</TableCell>
                  <TableCell align="right">{secondsToHMS(r.total_seconds_present_in_range)}</TableCell>
                  {dates.map((d) => (
                    <TableCell key={d} align="center">{r.durations?.[d] ?? "-"}</TableCell>
                  ))}
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>
    );
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" gutterBottom>
        Duration Reports
      </Typography>

      <Grid container spacing={2}>
        <Grid item xs={12} md={8}>
          <Card>
            <CardContent>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth>
                    <InputLabel id="region-label">Region</InputLabel>
                    <Select
                      labelId="region-label"
                      value={region}
                      label="Region"
                      onChange={(e) => setRegion(e.target.value)}
                    >
                      {REGIONS.map((r) => (
                        <MenuItem key={r.value} value={r.value}>{r.label}</MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="City / Partition (optional)"
                    placeholder="e.g. CR.Costa Rica Partition"
                    value={city}
                    onChange={(e) => setCity(e.target.value)}
                  />
                </Grid>

                <Grid item xs={12} md={4} sx={{ display: "flex", gap: 1 }}>
                  <Button
                    startIcon={<DateRangeIcon />}
                    variant={useRange ? "contained" : "outlined"}
                    onClick={() => setUseRange(true)}
                  >
                    Range
                  </Button>
                  <Button
                    startIcon={<DateRangeIcon />}
                    variant={!useRange ? "contained" : "outlined"}
                    onClick={() => setUseRange(false)}
                  >
                    Single Day
                  </Button>
                </Grid>

                {useRange ? (
                  <>
                    <Grid item xs={12} md={4}>
                      <TextField
                        label="Start date"
                        type="date"
                        fullWidth
                        InputLabelProps={{ shrink: true }}
                        value={startDate}
                        onChange={(e) => setStartDate(e.target.value)}
                      />
                    </Grid>
                    <Grid item xs={12} md={4}>
                      <TextField
                        label="End date"
                        type="date"
                        fullWidth
                        InputLabelProps={{ shrink: true }}
                        value={endDate}
                        onChange={(e) => setEndDate(e.target.value)}
                      />
                    </Grid>
                  </>
                ) : (
                  <Grid item xs={12} md={4}>
                    <TextField
                      label="Date"
                      type="date"
                      fullWidth
                      InputLabelProps={{ shrink: true }}
                      value={singleDate}
                      onChange={(e) => setSingleDate(e.target.value)}
                    />
                  </Grid>
                )}

                <Grid item xs={12} md={4} sx={{ display: "flex", gap: 1 }}>
                  <Button
                    variant="contained"
                    startIcon={<SearchIcon />}
                    onClick={fetchDurations}
                    disabled={loading}
                  >
                    {loading ? "Loading..." : "Run"}
                  </Button>

                  <Button
                    variant="outlined"
                    startIcon={<ClearIcon />}
                    onClick={() => {
                      setStartDate("");
                      setEndDate("");
                      setSingleDate("");
                      setCity("");
                      setData(null);
                      setError("");
                    }}
                  >
                    Clear
                  </Button>

                  <Tooltip title="Export CSV (current region)">
                    <span>
                      <IconButton onClick={exportCsv} disabled={!regionObj || (regionObj.employees || []).length === 0}>
                        <DownloadIcon />
                      </IconButton>
                    </span>
                  </Tooltip>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

          <Box sx={{ mt: 2 }}>
            <Paper sx={{ p: 2 }}>
              <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                <Typography variant="subtitle1">
                  {data ? `Showing ${region.toUpperCase()} â€” ${data.start_date} â†’ ${data.end_date}` : "No results yet"}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Tip: use the CSV export for offline analysis
                </Typography>
              </Box>

              {loading && (
                <Box sx={{ display: "flex", justifyContent: "center", py: 4 }}>
                  <CircularProgress />
                </Box>
              )}

              {error && (
                <Typography color="error" sx={{ mt: 2 }}>
                  {error}
                </Typography>
              )}

              {!loading && !error && (
                <Box sx={{ mt: 2 }}>
                  {renderTable()}
                </Box>
              )}
            </Paper>
          </Box>
        </Grid>

        <Grid item xs={12} md={4}>
          <Card sx={{ position: "sticky", top: 16 }}>
            <CardContent>
              <Typography variant="h6">How it works</Typography>
              <Typography variant="body2" sx={{ mt: 1 }}>
                - Use Range for multiple days (start + end).<br/>
                - Use Single Day for a calendar date.<br/>
                - Region selects which region to query (APAC/EMEA/LACA/NAMER).<br/>
                - City filters by PartitionName2 / PrimaryLocation / Door / EmployeeName.<br/>
                - The table shows per-person durations per day and a total seconds value.
              </Typography>

              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle2">Example endpoints</Typography>
                <Typography variant="caption" display="block">
                  Single day: <code>/duration?date=2025-09-04&regions=apac</code>
                </Typography>
                <Typography variant="caption" display="block">
                  Range: <code>/duration?start_date=2025-09-01&end_date=2025-09-05&regions=apac&city=CR.Costa%20Rica%20Partition</code>
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
}













//Swapnil  include Euroc 

// src/pages/ReportsPage.jsx
import React, { useState } from 'react';
import {
  Box, FormControl, InputLabel, Select, OutlinedInput,
  Checkbox, ListItemText, MenuItem, Button,
  CircularProgress, Typography, TextField, Tabs, Tab, Grid, Paper, Drawer, IconButton, Divider, List, ListItem, ListItemIcon, Avatar, Collapse
} from '@mui/material';

import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import axios from 'axios';
import ExcelJS from 'exceljs';
import * as XLSX from 'xlsx';


import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import PlaceIcon from '@mui/icons-material/Place';
import PeopleIcon from '@mui/icons-material/People';
import DownloadIcon from '@mui/icons-material/CloudDownload';
import FilterListIcon from '@mui/icons-material/FilterList';
// Static lists
const EMPLOYEE_OPTIONS = [
  'Vainilaitis, Valdas',
  'Tomasevic, Kazimez',
  'Sesickis, Janas',
  'Valiunas, Sigitas'
];


const REGION_OPTIONS = ['global', 'apac', 'emea', 'laca', 'namer'];
const LOCATION_MAP = {
  apac: ['APAC.Default', 'JP.Tokyo', 'PH.Manila', 'MY.Kuala Lumpur'],
  emea: ['AUT.Vienna', 'DU.Abu Dhab', 'IE.Dublin', 'IT.Rome', 'LT.Vilnius', 'MA.Casablanca', 'RU.Moscow', 'UK.London', 'ES.Madrid'],
  laca: ['AR.Cordoba', 'CR.Costa Rica Partition', 'MX.Mexico City', 'PE.Lima', 'BR.Sao Paulo', 'PA.Panama City'],
  namer: ['US.NYC', 'US.FL.Miami', 'USA/Canada Default', 'US.CO.OBS'],
  global: [] // optional â€” location select will be disabled when global is chosen
};



function formatDisplayDate(date) {
  const d = new Date(date);
  const day = d.getDate();
  const suf = day % 10 === 1 && day !== 11 ? 'st'
    : day % 10 === 2 && day !== 12 ? 'nd'
      : day % 10 === 3 && day !== 13 ? 'rd' : 'th';
  const mon = d.toLocaleString('default', { month: 'long' });
  return `${day}${suf} ${mon} ${d.getFullYear()}`;
}



// helpers: format server-provided ISO as display strings (use UTC getters so Z times are treated as server wall-clock)
const MONTH_ABBR = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
const pad2 = n => String(n).padStart(2, '0');

function formatDateFromServerISO(iso) {
  if (!iso) return '';
  const dt = new Date(iso);
  const y = dt.getUTCFullYear();
  const m = dt.getUTCMonth(); // 0..11
  const d = dt.getUTCDate();
  const yrShort = String(y).slice(-2);
  return `${pad2(d)}-${MONTH_ABBR[m]}-${yrShort}`;         // e.g. "12-Aug-25"
}

function formatTimeFromServerISO(iso) {
  if (!iso) return '';
  const dt = new Date(iso);
  let hh = dt.getUTCHours();   // use UTC parts so we trust server wall-clock
  const mm = dt.getUTCMinutes();
  const ss = dt.getUTCSeconds();
  const ampm = hh >= 12 ? 'PM' : 'AM';
  const hh12 = ((hh + 11) % 12) + 1; // convert 0->12, 13->1 etc.
  return `${hh12}:${pad2(mm)}:${pad2(ss)} ${ampm}`;        // e.g. "12:01:24 AM"
}

// for DateOnly + Swipe_Time situation: build ISO string where date comes from DateOnly and time from Swipe_Time UTC
function buildISOFromDateOnlyAndSwipe(dateOnlyIso, swipeIso) {
  // dateOnlyIso = "2025-08-12T00:00:00.000Z"
  // swipeIso = "1970-01-01T00:01:24.000Z" (time)
  if (!dateOnlyIso) return '';
  const datePart = dateOnlyIso.toString().slice(0,10); // "YYYY-MM-DD"
  if (!swipeIso) {
    return `${datePart}T00:00:00.000Z`;
  }
  const t = new Date(swipeIso);
  if (!isNaN(t.getTime())) {
    const hh = pad2(t.getUTCHours());
    const mm = pad2(t.getUTCMinutes());
    const ss = pad2(t.getUTCSeconds());
    return `${datePart}T${hh}:${mm}:${ss}.000Z`;
  }
  // fallback if swipeIso is "HH:mm:ss"
  const parts = ('' + swipeIso).split(':').map(p => pad2(parseInt(p||0,10)||0));
  const hh = parts[0] || '00';
  const mm = parts[1] || '00';
  const ss = parts[2] || '00';
  return `${datePart}T${hh}:${mm}:${ss}.000Z`;
}




function formatShortRange(fromDate, toDate) {
  if (!fromDate || !toDate) return '';
  const f = formatDisplayDate(fromDate); // e.g. "1st August 2025"
  const t = formatDisplayDate(toDate);   // e.g. "13th August 2025"
  const [fDay, fMon, fYear] = f.split(' ');
  const [tDay, tMon, tYear] = t.split(' ');

  if (fMon === tMon && fYear === tYear) {
    return `${fDay} to ${tDay} ${fMon}`; // "1st to 13th August"
  }
  // different month or year -> show both months
  return `${fDay} ${fMon} to ${tDay} ${tMon}`;
}

// --- helper: build raw report filename per your rules ---

function buildRawFileName({ region, location, rawSearch, from, to }) {
  const shortRange = formatShortRange(from, to);
  const regionPart = (region || '').toUpperCase();
  const locPart = location ? `-${location.split('.').pop()}` : '';
  const prefix = rawSearch && rawSearch.toString().trim() ? `${rawSearch.toString().trim()} ` : '';
  // Keep "Raw report" text exactly as requested
  const base = `${regionPart}${locPart} Raw report ${shortRange}`;
  // sanitize for filesystem (remove problematic chars)
  const safeBase = base.replace(/[\/\\:\*\?"<>\|]+/g, '').replace(/\s+/g, ' ').trim();
  return `${prefix}${safeBase}.xlsx`;
}



export default function ReportsPage() {
  // --- state ---
  const [tab, setTab] = useState(0);

  const [region, setRegion] = useState('emea');
  const [location, setLocation] = useState('');
  const [from, setFrom] = useState(null);
  const [to, setTo] = useState(null);
  const [showFromCal, setShowFromCal] = useState(false);
  const [showToCal, setShowToCal] = useState(false);
  const [selectedEmps, setSelectedEmps] = useState([]);
  const [loading, setLoading] = useState(false);


    // helper â€” convert "YYYY-MM-DD..." (ISO) into a local midnight Date (avoids UTC shift)
  const isoDateOnlyToLocalDate = (iso) => {
    if (!iso) return null;
    const s = iso.toString().slice(0, 10);
    const [y, m, d] = s.split('-').map(n => parseInt(n, 10));
    return new Date(y, m - 1, d);
  };


// Build a Date that preserves the server-provided wall-clock values.
// If swipeTime is an ISO (with Z), read UTC components and use them as local values.
const buildLocalDateFromDateOnlyAndSwipe = (dateOnly, swipeTime) => {
  if (!dateOnly) return null;

  // parse YYYY-MM-DD (first 10 chars)
  const dateStr = dateOnly.toString().slice(0, 10);
  const [yy, mm, dd] = dateStr.split('-').map(n => parseInt(n, 10));

  let hh = 0, min = 0, ss = 0;
  if (swipeTime) {
    const parsed = new Date(swipeTime);
    if (!isNaN(parsed.getTime())) {
      // Use UTC getters so we interpret the ISO(Z) as server wall-clock values
      hh = parsed.getUTCHours();
      min = parsed.getUTCMinutes();
      ss = parsed.getUTCSeconds();
    } else {
      // fallback to "HH:mm[:ss]" format parsing
      const parts = swipeTime.split(':').map(p => parseInt(p, 10));
      if (parts.length >= 2) {
        hh = parts[0] || 0;
        min = parts[1] || 0;
        ss = parts[2] || 0;
      }
    }
  }

  // Construct a local Date that has the same displayed Y/M/D HH:MM:SS as the server's values.
  return new Date(yy, mm - 1, dd, hh, min, ss);
};



// returns a server-wall-clock ISO for a row: prefer LocaleMessageTime, else DateOnly+Swipe_Time
const getServerISO = (r) => {
  if (!r) return '';
  if (r.LocaleMessageTime) return r.LocaleMessageTime;
  if (r.DateOnly) return buildISOFromDateOnlyAndSwipe(r.DateOnly, r.Swipe_Time);
  return '';
};

// returns YYYY-MM-DD for server wall-clock (used for filtering)
const getServerYMD = (r) => {
  const iso = getServerISO(r);
  if (!iso) return '';
  return iso.slice(0, 10); // "YYYY-MM-DD"
};



  // Handle tab switch (Daily / Raw / Rejection)
  const handleTabChange = (_, v) => {
    setTab(v);
    // reset all filters
    setRegion('emea');
    setLocation('');
    setFrom(null);
    setTo(null);
    setSelectedEmps([]);
  };



  /** Time Duration Excel generator */
  const generateTimeDurationExcel = async data => {
    const wb = new ExcelJS.Workbook();
    const ws = wb.addWorksheet('Time Duration');

    // Title row
    ws.mergeCells('A1:M1');

ws.getCell('A1').value =
  `${region.toUpperCase()} Time Duration Report - ${formatDisplayDate(from)} to ${formatDisplayDate(to)}`;
      
    ws.getCell('A1').font = { bold: true, size: 14 };
    ws.getCell('A1').alignment = { horizontal: 'center' };
    // Header row
    const headers = [
      'Sr. No.', 'Employee Name', 'Employee ID', 'Personnel Type',
      'Partition', 'Text5', 'Year', 'Week', 'Date',
      'First Swipe', 'Last Swipe', 'Duration', 'Category',
      'Days Present', 'Violation Days', 'Clean Days', 'Defaulter'
    ];
    const headerRow = ws.addRow(headers);
    headerRow.font = { bold: true };
    headerRow.alignment = { horizontal: 'center', vertical: 'middle' };
    headerRow.eachCell(c => {
      c.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });

    // Columns widths
    ws.columns = [
      { key: 'sr', width: 8 },
      { key: 'name', width: 25 },
      { key: 'id', width: 15 },
      { key: 'ptype', width: 18 },
      { key: 'part', width: 15 },
      { key: 'txt5', width: 20 },
      { key: 'year', width: 8 },
      { key: 'week', width: 6 },
      { key: 'date', width: 12 },
      { key: 'first', width: 16 },
      { key: 'last', width: 16 },
      { key: 'dur', width: 10 },
      { key: 'cat', width: 12 },
      { key: 'dpw', width: 12 },
      { key: 'vdw', width: 14 },
      { key: 'cdw', width: 12 },
      { key: 'def', width: 10 }
    ];




    data.forEach((r, idx) => {
      const first = new Date(r.FirstSwipeTime);
      const last = new Date(r.LastSwipeTime);
      const date = new Date(r.ShiftedDate);
      const row = ws.addRow([
        idx + 1,
        r.ObjectName1,
        r.EmployeeID,
        r.PersonnelType,
        r.PartitionName2,
        r.text5,
        r.YearNumber,
        r.WeekNumber,
        date,
        first,
        last,
        r.DurationHHMM,
        r.TimeDiffCategory,
        r.DaysPresentInWeek,
        r.ViolationDaysInWeek,
        r.CleanDaysInWeek,
        r.Defaulter
      ]);

      // Date & time formatting
      row.getCell(9).numFmt = 'dd-mmm-yy';
      row.getCell(10).numFmt = 'h:mm:ss AM/PM';
      row.getCell(11).numFmt = 'h:mm:ss AM/PM';

      row.eachCell(c => {
        c.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
        c.alignment = { vertical: 'middle', horizontal: 'left' };
      });
    });

    ws.autoFilter = 'A2:Q2';

    const buf = await wb.xlsx.writeBuffer();
    const blob = new Blob([buf], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    });

   const filename =
  `TimeDuration_${region.toUpperCase()}_${formatDisplayDate(from)}_to_${formatDisplayDate(to)}.xlsx`;


    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
  };




  // // --- Excel for Daily Access (unchanged) ---
  
const generateDailyAccessExcel = async allRows => {
  const wb = new ExcelJS.Workbook();

  for (const emp of selectedEmps) {
    const ws = wb.addWorksheet(emp.substring(0, 31));
    const headers = [
      'Date', 'Time', 'Name', 'Contractor ID', 'Card No',
      'Door Name', 'Message Type', 'Partition', 'Swipe'
    ];
    ws.addRow(headers);
    const hdr = ws.getRow(1);
    hdr.font = { bold: true };
    hdr.alignment = { vertical: 'middle', horizontal: 'center' };
    hdr.eachCell(c => {
      c.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });

    ws.columns = [
      { key: 'date', width: 12 },
      { key: 'time', width: 12 },
      { key: 'name', width: 25 },
      { key: 'id', width: 15 },
      { key: 'card', width: 15 },
      { key: 'door', width: 40 },
      { key: 'msg', width: 15 },
      { key: 'part', width: 15 },
      { key: 'swipe', width: 10 }
    ];

    const rows = allRows.filter(r => r.ObjectName1 === emp);
    if (!rows.length) {
      ws.mergeCells('A2', 'I2');
      ws.getCell('A2').value = 'There is no swipe records found in Ccure';
      ws.getCell('A2').alignment = { horizontal: 'center' };
    } else {
      rows.forEach(r => {
        const iso = getServerISO(r); // server wall-clock ISO or ''
        const dateStr = iso ? formatDateFromServerISO(iso) : '';
        const timeStr = iso ? formatTimeFromServerISO(iso) : '';

        const row = ws.addRow([
          dateStr,
          timeStr,
          r.ObjectName1 || '',
          r.EmployeeID || '',
          r.CardNumber || '',
          r.Door || r.ObjectName2 || '',
          r.AdmitCode || r.Messagetype || '',
          r.location || '',
          r.Swipe || r.Direction || ''
        ]);

        // treat them as strings to preserve server wall-clock display
        row.getCell(1).alignment = { horizontal: 'left' };
        row.getCell(2).alignment = { horizontal: 'left' };

        row.eachCell(c => {
          c.border = {
            top: { style: 'thin' }, left: { style: 'thin' },
            bottom: { style: 'thin' }, right: { style: 'thin' }
          };
          c.alignment = { vertical: 'middle', horizontal: 'left' };
        });
      });
    }
    ws.autoFilter = 'A1:I1';
  }

  const buf = await wb.xlsx.writeBuffer();
  const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  const filename = `Daily Access Report(${formatDisplayDate(from)} to ${formatDisplayDate(to)}).xlsx`;
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  link.click();
};


  // // --- Excel for Rejection (unchanged except UTC->local fix) ---

const generateRejectionExcel = async data => {
  const wb = new ExcelJS.Workbook();
  const ws = wb.addWorksheet('Rejection');

  const title = `${region.toUpperCase()} Rejection Report - ${formatDisplayDate(from)}`;
  ws.mergeCells('A1:J1');
  ws.getCell('A1').value = title;
  ws.getCell('A1').font = { bold: true, size: 14 };
  ws.getCell('A1').alignment = { horizontal: 'center' };

  const headers = [
    'Sr. No.', 'Date', 'Time', 'Employee Name', 'Employee ID',
    'Access Card No.', 'Rejection Type', 'Door Name', 'Location', 'Swipe'
  ];
  const headerRow = ws.addRow(headers);
  headerRow.font = { bold: true };
  headerRow.alignment = { vertical: 'middle', horizontal: 'center' };
  headerRow.eachCell(c => {
    c.border = {
      top: { style: 'thin' }, left: { style: 'thin' },
      bottom: { style: 'thin' }, right: { style: 'thin' }
    };
  });

  ws.columns = [
    { key: 'sr', width: 8 },
    { key: 'date', width: 12 },
    { key: 'time', width: 12 },
    { key: 'name', width: 25 },
    { key: 'id', width: 15 },
    { key: 'card', width: 15 },
    { key: 'type', width: 15 },
    { key: 'door', width: 40 },
    { key: 'loc', width: 15 },
    { key: 'swipe', width: 10 }
  ];

  data.forEach((r, idx) => {
    const iso = getServerISO(r);
    const dateStr = iso ? formatDateFromServerISO(iso) : '';
    const timeStr = iso ? formatTimeFromServerISO(iso) : '';

    const row = ws.addRow([
      idx + 1,
      dateStr,
      timeStr,
      r.ObjectName1 || '',
      r.EmployeeID || '',
      r.CardNumber || '',
      r.Rejection_Type || '',
      r.Door || r.ObjectName2 || '',
      r.location || '',
      r.Direction || r.Swipe || ''
    ]);

    row.getCell(2).alignment = { horizontal: 'left' };
    row.getCell(3).alignment = { horizontal: 'left' };

    row.eachCell(c => {
      c.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
      c.alignment = { vertical: 'middle', horizontal: 'left' };
    });
  });

  // Summary (unchanged but leaves numbers as numbers)
  const counts = data.reduce((a, r) => {
    const k = r.Rejection_Type || 'Unknown';
    a[k] = (a[k] || 0) + 1; return a;
  }, {});
  let rowIdx = 3;
  ws.getCell(rowIdx, 11).value = 'Rejection';
  ws.getCell(rowIdx, 12).value = 'Count';
  [11, 12].forEach(c => {
    const cell = ws.getCell(rowIdx, c);
    cell.font = { bold: true };
    cell.alignment = { horizontal: 'center' };
    cell.border = {
      top: { style: 'thin' }, left: { style: 'thin' },
      bottom: { style: 'thin' }, right: { style: 'thin' }
    };
  });
  rowIdx++;
  Object.entries(counts).forEach(([type, cnt]) => {
    ws.getCell(rowIdx, 11).value = type;
    ws.getCell(rowIdx, 12).value = cnt;
    [11, 12].forEach(c => {
      const cell = ws.getCell(rowIdx, c);
      cell.alignment = { horizontal: 'left' };
      cell.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });
    rowIdx++;
  });
  ws.getCell(rowIdx, 11).value = 'Total';
  ws.getCell(rowIdx, 12).value = data.length;
  [11, 12].forEach(c => {
    const cell = ws.getCell(rowIdx, c);
    cell.font = { bold: true };
    cell.alignment = { horizontal: 'left' };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
  });

  // Download
  const buf = await wb.xlsx.writeBuffer();
  const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  const filename = `${region.toUpperCase()} Rejection Report - ${formatDisplayDate(from)}.xlsx`;
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  link.click();
};

  const [rawSearch, setRawSearch] = useState(''); // search string for Raw report (name or id)
  const [rawAdmitFilter, setRawAdmitFilter] = useState('all'); // 'all' | 'admit' | 'reject'




// generateRawExcel(rows, opts)
const generateRawExcel = async (rows, opts = {}) => {
  // helper: format time coming from Swipe_Time (handles ISO or "HH:mm[:ss]" fallback)
  const formatTimeFromSwipe = (swipeIso) => {
    if (!swipeIso) return '';
    // try ISO parse first
    const dt = new Date(swipeIso);
    if (!isNaN(dt.getTime())) {
      return formatTimeFromServerISO(swipeIso);
    }
    // fallback: parse "HH:mm" or "HH:mm:ss"
    const parts = ('' + swipeIso).split(':').map(p => parseInt(p || 0, 10));
    const hh = parts[0] || 0;
    const mm = parts[1] || 0;
    const ss = parts[2] || 0;
    const ampm = hh >= 12 ? 'PM' : 'AM';
    const hh12 = ((hh + 11) % 12) + 1;
    return `${hh12}:${pad2(mm)}:${pad2(ss)} ${ampm}`;
  };

  // determine which columns to include based on filter
  const admitFilter = (opts.rawAdmitFilter || 'all').toString().toLowerCase(); // 'all'|'admit'|'reject'

  // base columns always present
  const baseHeaders = ['LocaleMessageTime','DateOnly','Swipe_Time','EmployeeID','ObjectName1','PersonnelType','location','CardNumber'];
  // conditional columns
  const admitCol = 'AdmitCode';
  const rejCol = 'Rejection_Type';
  // always include these at end
  const tailCols = ['Direction','Door'];

  // build final headers in requested order
  let headers = [...baseHeaders];
  if (admitFilter === 'all') {
    headers.push(admitCol);
    headers.push(...tailCols);
    headers.push(rejCol);
  } else if (admitFilter === 'admit') {
    // admitted only -> hide Rejection_Type
    headers.push(admitCol);
    headers.push(...tailCols);
  } else if (admitFilter === 'reject') {
    // rejected only -> hide AdmitCode
    headers.push(...tailCols);
    headers.push(rejCol);
  } else {
    // defensive fallback - include both
    headers.push(admitCol);
    headers.push(...tailCols);
    headers.push(rejCol);
  }

  if (!rows || !rows.length) {
    // fallback: write an empty workbook with dynamic headers
    const wbEmpty = XLSX.utils.book_new();
    const wsEmpty = XLSX.utils.aoa_to_sheet([headers]);
    XLSX.utils.book_append_sheet(wbEmpty, wsEmpty, 'Raw');
    const fileNameEmpty = buildRawFileName(opts);
    XLSX.writeFile(wbEmpty, fileNameEmpty);
    return;
  }

  // Build rows for sheet mapping only included headers
  const rowsForSheet = rows.map(r => {
    // Build server-wall-clock ISO for the row (LocaleMessageTime preferred)
    const iso = getServerISO(r); // LocaleMessageTime || DateOnly+Swipe_Time
    const dateStr = iso ? formatDateFromServerISO(iso) : '';
    const timeStr = iso ? formatTimeFromServerISO(iso) : '';
    const localeMsgFormatted = iso ? `${dateStr} ${timeStr}` : (r.LocaleMessageTime || '');

    // Format DateOnly as DD-MMM-YY (if present), otherwise blank
    const dateOnlyFormatted = r.DateOnly ? formatDateFromServerISO(r.DateOnly) : '';

    // Format Swipe_Time as h:mm:ss AM/PM â€” handle ISO or HH:mm fallback
    const swipeTimeFormatted = r.Swipe_Time ? formatTimeFromSwipe(r.Swipe_Time) : '';

    // Build a full object then pick keys according to headers to control column inclusion order
    const fullObj = {
      LocaleMessageTime: localeMsgFormatted,
      DateOnly: dateOnlyFormatted,
      Swipe_Time: swipeTimeFormatted,
      EmployeeID: r.EmployeeID || '',
      ObjectName1: r.ObjectName1 || '',
      PersonnelType: r.PersonnelType || '',
      location: r.location || '',
      CardNumber: r.CardNumber || '',
      AdmitCode: r.AdmitCode || r.Messagetype || '',
      Direction: r.Direction || r.Swipe || '',
      Door: r.Door || r.ObjectName2 || '',
      Rejection_Type: r.Rejection_Type || ''
    };

    // pick only the requested headers
    const picked = {};
    headers.forEach(h => {
      // ensure we always provide a string/empty when key missing
      picked[h] = (fullObj[h] !== undefined && fullObj[h] !== null) ? fullObj[h] : '';
    });
    return picked;
  });

  // create workbook/sheet with ordered headers
  const ws = XLSX.utils.json_to_sheet(rowsForSheet, { header: headers });
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Raw');

  // build filename per your examples
  const filename = buildRawFileName(opts);

  XLSX.writeFile(wb, filename);
};




const handleGenerate = async () => {
  setLoading(true);
  try {
    const baseParams = { region, location: location || undefined };

    // Helper: format dates in local time without timezone conversion for API parameters
    const formatLocalDate = (date, endOfDay = false) => {
      const d = new Date(date);
      if (endOfDay) d.setHours(23, 59, 59, 999);
      else d.setHours(0, 0, 0, 0);
      const pad = n => n.toString().padStart(2, '0');
      return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}` +
             `T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    };

    // Helper: convert ISO date-only string (YYYY-MM-DD...) into a local midnight Date (avoids UTC shift)
    const isoDateOnlyToLocalDate = (iso) => {
      if (!iso) return null;
      const s = iso.toString().slice(0, 10); // YYYY-MM-DD
      const [y, m, d] = s.split('-').map(n => parseInt(n, 10));
      return new Date(y, m - 1, d);
    };

    const pad2 = n => n.toString().padStart(2, '0');
    const toLocalYMD = date => `${date.getFullYear()}-${pad2(date.getMonth()+1)}-${pad2(date.getDate())}`;




    // // // ----- 0: Daily Access -----
    if (tab === 0) {
      const params = {
        ...baseParams,
        from: formatLocalDate(from),
        to: formatLocalDate(to, true),
        employees: selectedEmps.join(',')
      };
      const resp = await axios.get('/api/reports/daily-access', { params });

      const startDate = new Date(from); startDate.setHours(8, 0, 0, 0);
      const endDate = new Date(to); endDate.setHours(8, 0, 0, 0);

      const rows = (resp.data && resp.data.data) || [];
      const filtered = rows.filter(r => {
        const dt = new Date(r.LocaleMessageTime);
        return dt >= startDate && dt < endDate;
      });

      await generateDailyAccessExcel(filtered);
      return;
    }


    // ----- 1: Raw -----
    if (tab === 1) {

const params = {
  ...baseParams,
  startDate: formatLocalDate(from),
  endDate: formatLocalDate(to, true),
  admitFilter: rawAdmitFilter  // <-- pass the UI value ('all'|'admit'|'reject')
};
const resp = await axios.get('/api/reports/raw', { params });
      const startDate = new Date(from); startDate.setHours(0, 0, 0, 0);
      const endDate = new Date(to); endDate.setHours(23, 59, 59, 999);

      const rowsSrc = (resp.data && resp.data.data) || [];
      const rows = rowsSrc.filter(r => {
        const date = r.DateOnly ? isoDateOnlyToLocalDate(r.DateOnly) : new Date(r.LocaleMessageTime);
        return date >= startDate && date <= endDate;
      });

      let filtered = rows;
      if (rawSearch && rawSearch.trim() !== '') {
        const s = rawSearch.trim().toLowerCase();
        filtered = rows.filter(r => {
          const id = r.EmployeeID ? String(r.EmployeeID).toLowerCase() : '';
          const name = r.ObjectName1 ? String(r.ObjectName1).toLowerCase() : '';
          return id.includes(s) || name.includes(s);
        });
      }


// await generateRawExcel(filtered, { region, location, rawSearch, from, to });

await generateRawExcel(filtered, { region, location, rawSearch, from, to, rawAdmitFilter });


      return;
    }




    // ----- 2: Rejection -----
    if (tab === 2) {
      const params = { ...baseParams, startDate: formatLocalDate(from), endDate: formatLocalDate(to, true) };
      const resp = await axios.get('/api/reports/rejection', { params });

      const startDate = new Date(from); startDate.setHours(0, 0, 0, 0);
      const endDate = new Date(to); endDate.setHours(23, 59, 59, 999);

      const rowsSrc = (resp.data && resp.data.data) || [];
      const rows = rowsSrc.filter(r => {
        const date = r.DateOnly ? isoDateOnlyToLocalDate(r.DateOnly) : new Date(r.LocaleMessageTime);
        return date >= startDate && date <= endDate;
      });

      await generateRejectionExcel(rows);
      return;
    }

    // ----- 3: EUROC Admit-Reject (single day) -----
    if (tab === 3) {
      if (region.toLowerCase() !== 'emea') {
        alert('EUROC report is only available for region EMEA. Please select EMEA.');
        return;
      }
      if (!from) {
        alert('Please select a date (From) for EUROC report.');
        return;
      }

      const dateParam = toLocalYMD(new Date(from));
      const params = { region: 'emea', date: dateParam };
      const resp = await axios.get('/api/reports/euroc-admit-rejection', { params });
      const { data } = resp.data || {}; // { admit: [], rejection: [], summary: [] }

      const wb = new ExcelJS.Workbook();

      // Admit sheet
      const admitTitle = `EUROC Admit Report - ${formatDisplayDate(from)}`;
      const ws1 = wb.addWorksheet('EUROC Admit');
      ws1.mergeCells('A1:I1');
      ws1.getCell('A1').value = admitTitle;
      ws1.getCell('A1').font = { bold: true, size: 14 };
      ws1.getCell('A1').alignment = { horizontal: 'center' };

      const admitHeaders = [
        'Sr. No.', 'Date', 'Time', 'Employee Name',
        'Access Card No.', 'Personnel Type', 'Door Name', 'Location', 'Swipe'
      ];
      const hdrRow1 = ws1.addRow(admitHeaders);
      hdrRow1.font = { bold: true };
      hdrRow1.alignment = { vertical: 'middle', horizontal: 'center' };
      hdrRow1.eachCell(c => {
        c.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
      });

      ws1.columns = [
        { key:'sr', width:8 }, { key:'date', width:12 }, { key:'time', width:12 },
        { key:'name', width:30 }, { key:'card', width:15 }, { key:'ptype', width:20 },
        { key:'door', width:50 }, { key:'loc', width:18 }, { key:'swipe', width:8 }
      ];




(data.admit || []).forEach((r, idx) => {
  // Build an ISO that represents server wall-clock datetime (use LocaleMessageTime if provided)
  let iso;
  if (r.LocaleMessageTime) {
    iso = r.LocaleMessageTime; // already an ISO with Z
  } else if (r.DateOnly) {
    iso = buildISOFromDateOnlyAndSwipe(r.DateOnly, r.Swipe_Time);
  } else {
    iso = '';
  }

  const dateStr = iso ? formatDateFromServerISO(iso) : '';
  const timeStr = iso ? formatTimeFromServerISO(iso) : '';

  // Insert formatted strings (not Date objects) â€” preserves exact server date/time
  const row = ws1.addRow([
    idx + 1,
    dateStr,
    timeStr,
    r.ObjectName1 || '',
    r.CardNumber || '',
    r.PersonnelType || '',
    r.Door || r.ObjectName2 || '',
    r.location || '',
    r.Direction || ''
  ]);

  // Keep formatting for header look â€” but DO NOT set numFmt expecting Excel date objects
  row.getCell(2).alignment = { horizontal: 'left' };
  row.getCell(3).alignment = { horizontal: 'left' };
  row.eachCell(c => {
    c.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
    c.alignment = { vertical: 'middle', horizontal: 'left' };
  });
});


      // Rejection sheet
      const ws2 = wb.addWorksheet('EUROC Rejection');
      ws2.mergeCells('A1:J1');
      ws2.getCell('A1').value = `EUROC Rejection Report - ${formatDisplayDate(from)}`;
      ws2.getCell('A1').font = { bold: true, size: 14 };
      ws2.getCell('A1').alignment = { horizontal: 'center' };

      const headerRow2 = ws2.addRow(['Sr. No.', 'Date', 'Time', 'Employee Name', 'Access Card No.', 'Rejection Type', 'Door Name', 'Location', 'Swipe']);
      headerRow2.font = { bold: true };
      headerRow2.alignment = { vertical: 'middle', horizontal: 'center' };
      headerRow2.eachCell(c => {
        c.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
      });

      ws2.columns = [
        { key:'sr', width:8 }, { key:'date', width:12 }, { key:'time', width:12 },
        { key:'name', width:30 }, { key:'card', width:15 }, { key:'type', width:15 },
        { key:'door', width:50 }, { key:'loc', width:18 }, { key:'swipe', width:8 }
      ];

(data.rejection || []).forEach((r, idx) => {
  let iso;
  if (r.LocaleMessageTime) {
    iso = r.LocaleMessageTime;
  } else if (r.DateOnly) {
    iso = buildISOFromDateOnlyAndSwipe(r.DateOnly, r.Swipe_Time);
  } else {
    iso = '';
  }

  const dateStr = iso ? formatDateFromServerISO(iso) : '';
  const timeStr = iso ? formatTimeFromServerISO(iso) : '';

  const row = ws2.addRow([
    idx + 1,
    dateStr,
    timeStr,
    r.ObjectName1 || '',
    r.CardNumber || '',
    r.Rejection_Type || '',
    r.Door || '',
    r.location || '',
    r.Direction || ''
  ]);

  row.getCell(2).alignment = { horizontal: 'left' };
  row.getCell(3).alignment = { horizontal: 'left' };
  row.eachCell(c => {
    c.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
    c.alignment = { vertical: 'middle', horizontal: 'left' };
  });
});




      // Summary block (same as before)
      const counts = data.summary || [];
      let startRow = 3;
      ws2.getCell(startRow, 11).value = 'Rejection';
      ws2.getCell(startRow, 12).value = 'Count';
      [11, 12].forEach(col => {
        const cell = ws2.getCell(startRow, col);
        cell.font = { bold: true };
        cell.alignment = { horizontal: 'center' };
        cell.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
      });
      startRow++;
      counts.forEach(c => {
        ws2.getCell(startRow, 11).value = c.Rejection_Type || 'Unknown';
        ws2.getCell(startRow, 12).value = c.Count || 0;
        [11, 12].forEach(col => {
          const cell = ws2.getCell(startRow, col);
          cell.alignment = { horizontal: 'left' };
          cell.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
        });
        startRow++;
      });
      ws2.getCell(startRow, 11).value = 'Grand Total';
      ws2.getCell(startRow, 12).value = (data.rejection || []).length;
      [11, 12].forEach(col => {
        const cell = ws2.getCell(startRow, col);
        cell.font = { bold: true };
        cell.alignment = { horizontal: 'left' };
        cell.border = { top:{style:'thin'}, left:{style:'thin'}, bottom:{style:'thin'}, right:{style:'thin'} };
      });

      // Download workbook
      const buf = await wb.xlsx.writeBuffer();
      const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const filename = `EUROC_Admit_Rejection_${dateParam}.xlsx`;
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = filename;
      link.click();
      return;
    }


    // ----- 4: Time Duration -----
if (tab === 4) {
  // require both start & end strictly
  if (!from || !to) {
    alert('Please select both Start Date and End Date for Time Duration report.');
    return;
  }
  const startParam = toLocalYMD(new Date(from));
  const endParam = toLocalYMD(new Date(to));
  const params = {
    region,
    startDate: startParam,
    endDate: endParam,
    partition: location ? location.split('.').pop() : 'Default'
  };
  const resp = await axios.get('/api/reports/time-duration', { params });
  await generateTimeDurationExcel(resp.data.data || []);
  return;
}



    // ----- 5: HeadCount / External navigation -----
    if (tab === 5) {
      let url = '';

      if (region === 'laca') {
        if (!location) url = 'http://10.199.22.57:3003/history';
        else {
          const LACA_URLS = {
            'CR.Costa Rica Partition': 'http://10.199.22.57:3003/partition/CR.Costa%20Rica%20Partition/history',
            'MX.Mexico City': 'http://10.199.22.57:3003/partition/MX.Mexico%20City/history',
            'AR.Cordoba': 'http://10.199.22.57:3003/partition/AR.Cordoba/history',
            'PA.Panama City': 'http://10.199.22.57:3003/partition/PA.Panama%20City/history',
            'PE.Lima': 'http://10.199.22.57:3003/partition/PE.Lima/history',
            'BR.Sao Paulo': 'http://10.199.22.57:3003/partition/BR.Sao%20Paulo/history'
          };
          url = LACA_URLS[location] || 'http://10.199.22.57:3003/history';
        }
      } else if (region === 'namer') {
        if (!location) url = 'http://10.199.22.57:3002/history';
        else {
          const NAMER_URLS = {
            'US.Denver': 'http://10.199.22.57:3002/partition/US.CO.OBS/history',
            'US.Miami': 'http://10.199.22.57:3002/partition/US.FL.Miami/history',
            'US.NYC': 'http://10.199.22.57:3002/partition/US.NYC/history',
            'US.Austin': 'http://10.199.22.57:3002/partition/USA%2FCanada%20Default/history'
          };
          url = NAMER_URLS[location] || 'http://10.199.22.57:3002/history';
        }
      } else if (region === 'apac') {
        if (!location) url = 'http://10.199.22.57:3000/history';
        else {
          const APAC_URLS = {
            'APAC.Default': 'http://10.199.22.57:3000/partition/Pune/history',
            'MY.Kuala Lumpur': 'http://10.199.22.57:3000/partition/MY.Kuala Lumpur/history',
            'PH.Manila': 'http://10.199.22.57:3000/partition/PH.Manila/history',
            'JP.Tokyo': 'http://10.199.22.57:3000/history',
            'CN.Beijing': 'http://10.199.22.57:3000/history'
         
          };
          url = APAC_URLS[location] || 'http://10.199.22.57:3000/history';
        }
      } else if (region === 'emea') {
        if (!location) url = 'http://10.199.22.57:3001/history';
        else {
          const EMEA_URLS = {
            'AUT.Vienna': 'http://10.199.22.57:3001/history',
            'DU.Abu Dhabi': 'http://10.199.22.57:3001/history',
            'IE.Dublin': 'http://10.199.22.57:3001/history',
            'IT.Rome': 'http://10.199.22.57:3001/history',
            'LT.Vilnius': 'http://10.199.22.57:3001/history',
            'MA.Casablanca': 'http://10.199.22.57:3001/history',
            'RU.Moscow': 'http://10.199.22.57:3001/history',
            'UK.London': 'http://10.199.22.57:3001/history',
            'ES.Madrid': 'http://10.199.22.57:3001/history'
          };
          url = EMEA_URLS[location] || 'http://10.199.22.57:3001/history';
        }
      }

      if (url) window.location.href = url;
      else alert('Invalid region or location selected.');
      return;
    }

  } catch (err) {
    console.error(err);
    alert('Failed to generate report');
  } finally {
    setLoading(false);
  }
};





const disabled = loading
  || !region
  || (tab === 0 && (!from || !to || selectedEmps.length === 0)) // Daily Access
  || (tab === 1 && (!from || !to)) // Raw
  || (tab === 2 && (!from || !to)) // Rejection - require date range
  || (tab === 3 && !from) // EUROC (single day)
  || (tab === 4 && (!from || !to));


  // helper variable to keep navigation special-case consistent
  const navDisabled = !region || loading;


  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Box sx={{ minHeight: '100vh', background: 'linear-gradient(180deg,#070707 0%, #111 100%)', color: '#fff' }}>
        {/* Topbar / Header */}
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2,
            px: 3,
            py: 2,
            borderBottom: '1px solid rgba(255,204,0,0.08)',
            background: 'linear-gradient(90deg, rgba(20,20,20,0.7), rgba(0,0,0,0.4))'
          }}
        >
          <Avatar sx={{ bgcolor: '#000', border: '3px solid #FFCC00', width: 56, height: 56 }}>
            <Typography sx={{ color: '#FFCC00', fontWeight: 900 }}>WU</Typography>
          </Avatar>

          <Box sx={{ flex: 1 }}>
            <Typography variant="h5" sx={{ fontWeight: 900, letterSpacing: 0.6 }}>
              Global Security Operation Center
            </Typography>
            <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              Reports & Exports â€” Secure access, fast insights
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>



<Button
  startIcon={<DownloadIcon />}
  onClick={handleGenerate}
  // navigation special-case should be tab === 5 (HeadCount)
  disabled={tab === 5 ? navDisabled : disabled}
  sx={{
    bgcolor: '#FFCC00',
    color: '#000',
    fontWeight: 800,
    px: 3,
    py: 1,
    borderRadius: 3,
    boxShadow: '0 6px 22px rgba(255,204,0,0.18)',
    transformOrigin: 'center',
    '&:hover': { bgcolor: '#ffd84d', transform: 'translateY(-2px)' }
  }}
>
  {loading ? 'Loadingâ€¦'
           : (tab === 5 ? (location ? `Navigate ${location.split('.').pop()}` : `Navigate ${region.toUpperCase()}`) : 'Export to Excel')}
</Button>
            
          </Box>
        </Box>

        {/* Main content: Sidebar + Content */}
        <Grid container sx={{ px: 3, py: 4 }} spacing={3}>
          {/* Sidebar */}
          <Grid item xs={12} md={3}>
            <Paper
              elevation={8}
              sx={{
                p: 2.5,
                borderRadius: 3,
                height: { xs: 'auto', md: 'calc(100vh - 150px)' },
                overflow: 'auto',
                background: 'linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.015))',
                border: '1px solid rgba(255,204,0,0.06)'
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                <Box>
                  <Typography variant="subtitle1" sx={{ fontWeight: 800, color: '#FFCC00' }}>Filters</Typography>
                  <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                    Narrow down by region, date and employees
                  </Typography>
                </Box>
                <IconButton size="small" sx={{ color: '#FFCC00' }}>
                  <FilterListIcon />
                </IconButton>
              </Box>

              <Divider sx={{ my: 1, borderColor: 'rgba(255,204,0,0.06)' }} />

              {/* Region */}
              <Box sx={{ mt: 1 }}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#FFCC00' }}>Region</InputLabel>
                  <Select
                    value={region}
                    onChange={e => { setRegion(e.target.value); setLocation(''); }}
                    input={<OutlinedInput label="Region" />}
                    sx={{
                      color: '#fff',
                      '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.24)' }
                    }}
                  >
                    {REGION_OPTIONS.map(r => <MenuItem key={r} value={r}>{r.toUpperCase()}</MenuItem>)}
                  </Select>
                </FormControl>
              </Box>

              {/* Location */}
              <Box sx={{ mt: 2 }}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#FFCC00' }}>Location</InputLabel>
                  <Select
                    value={location}
                    onChange={e => setLocation(e.target.value)}
                    input={<OutlinedInput label="Location" />}
                    disabled={!region}
                    sx={{
                      color: '#fff',
                      '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.12)' }
                    }}
                  >
                    {(LOCATION_MAP[region] || []).map(loc => <MenuItem key={loc} value={loc}>{loc.split('.').pop()}</MenuItem>)}
                  </Select>
                </FormControl>
              </Box>

              <Divider sx={{ my: 2, borderColor: 'rgba(255,204,0,0.04)' }} />





              {/* Employee search (only for Raw tab) */}
              {/* {tab === 1 && (
                <Box sx={{ mt: 2 }}>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                    Employee (name or ID)
                  </Typography>
                  <TextField
                    fullWidth
                    placeholder="Type employee name or ID (e.g. 'Jejurkar' or '323471')"
                    label="Search Employee"
                    value={rawSearch}
                    onChange={(e) => setRawSearch(e.target.value)}
                    sx={{
                      '& .MuiInputBase-input': { color: '#fff' },
                      '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                    }}
                    InputLabelProps={{ style: { color: '#FFCC00' } }}
                  />
                  <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.55)', mt: 1, display: 'block' }}>
                    Leave empty to export all raw rows for the date range.
                  </Typography>
                </Box>
              )} */}





{tab === 1 && (
  <Box sx={{ mt: 2 }}>
    <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
      Employee (name or ID)
    </Typography>
    <TextField
      fullWidth
      placeholder="Type employee name or ID (e.g. 'Jejurkar' or '323471')"
      label="Search Employee"
      value={rawSearch}
      onChange={(e) => setRawSearch(e.target.value)}
      sx={{
        '& .MuiInputBase-input': { color: '#fff' },
        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
      }}
      InputLabelProps={{ style: { color: '#FFCC00' } }}
    />
    <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.55)', mt: 1, display: 'block' }}>
      Leave empty to export all raw rows for the date range.
    </Typography>

    {/* --- NEW: Admit/Reject filter --- */}
    <Box sx={{ mt: 2 }}>
      <FormControl fullWidth>
        <InputLabel sx={{ color: '#FFCC00' }}>Admit / Reject</InputLabel>
        <Select
          value={rawAdmitFilter}
          onChange={(e) => setRawAdmitFilter(e.target.value)}
          input={<OutlinedInput label="Admit / Reject" />}
          sx={{
            color: '#fff',
            '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.06)' }
          }}
        >
          <MenuItem value="all">All (Admitted + Rejected)</MenuItem>
          <MenuItem value="admit">Admitted only</MenuItem>
          <MenuItem value="reject">Rejected only</MenuItem>
        </Select>
      </FormControl>
      <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.55)', mt: 1, display: 'block' }}>
        Default = All.
      </Typography>
    </Box>
  </Box>
)}


              {/* Dates */}
              {tab !== 5 && (
                <Box>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                    Date Range
                  </Typography>
                  <Box sx={{ display: 'grid', gap: 1.25 }}>
                    <TextField
                      label={tab === 0 ? 'From Date' : 'Start Date'}
                      value={from ? from.toLocaleDateString() : ''}
                      readOnly
                      onClick={() => setShowFromCal(true)}
                      sx={{
                        '& .MuiInputBase-input': { color: '#fff' },
                        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                      }}
                    />
                    <TextField
                      label={tab === 0 ? 'To Date' : 'End Date'}
                      value={to ? to.toLocaleDateString() : ''}
                      readOnly
                      onClick={() => setShowToCal(true)}
                      sx={{
                        '& .MuiInputBase-input': { color: '#fff' },
                        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                      }}
                    />
                  </Box>

                  {/* Static pickers (keeps your existing state handlers) */}
                  {showFromCal && (
                    <Box sx={{ mt: 1 }}>
                      <StaticDatePicker
                        displayStaticWrapperAs="desktop"
                        value={from}
                        onChange={(newValue) => setFrom(newValue)}
                        onAccept={() => setShowFromCal(false)}
                        onClose={() => setShowFromCal(false)}
                        renderInput={(params) => <TextField {...params} />}
                        views={['year', 'month', 'day']}
                      />
                    </Box>
                  )}
                  {showToCal && (
                    <Box sx={{ mt: 1 }}>
                      <StaticDatePicker
                        displayStaticWrapperAs="desktop"
                        value={to}
                        onChange={(newValue) => setTo(newValue)}
                        onAccept={() => setShowToCal(false)}
                        onClose={() => setShowToCal(false)}
                        renderInput={(params) => <TextField {...params} />}
                        views={['year', 'month', 'day']}
                      />
                    </Box>
                  )}
                </Box>
              )}

              <Divider sx={{ my: 2, borderColor: 'rgba(255,204,0,0.04)' }} />

              {/* Employees (only Daily) */}
              {tab === 0 && (
                <Box>
                  <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                    Employees
                  </Typography>
                  <FormControl fullWidth>
                    <InputLabel sx={{ color: '#FFCC00' }}>Employees</InputLabel>
                    <Select
                      multiple
                      value={selectedEmps}
                      onChange={e => setSelectedEmps(e.target.value)}
                      input={<OutlinedInput label="Employees" />}
                      renderValue={vals => vals.join(', ')}
                      sx={{
                        color: '#fff',
                        '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.06)' }
                      }}
                    >
                      {EMPLOYEE_OPTIONS.map(n => (
                        <MenuItem key={n} value={n}>
                          <Checkbox checked={selectedEmps.includes(n)} />
                          <ListItemText primary={n} />
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Box>
              )}

              {/* Helpful hint */}
              <Box sx={{ mt: 3, p: 2, borderRadius: 2, background: 'rgba(255,255,255,0.02)' }}>
                <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
                  Tip: For daily exports pick employees & a single day range. For Time Duration choose the required partition via Location.
                </Typography>
              </Box>
            </Paper>
          </Grid>

          {/* Main panel */}
          <Grid item xs={12} md={9}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              {/* Tabs (visual only) */}
              <Paper
                elevation={3}
                sx={{
                  px: 2,
                  py: 1,
                  borderRadius: 2,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  gap: 2,
                  border: '1px solid rgba(255,204,0,0.04)'
                }}
              >
                <Tabs
                  value={tab}
                  onChange={handleTabChange}
                  sx={{
                    '& .MuiTab-root': {
                      textTransform: 'none',
                      minWidth: 120,
                      fontWeight: 700,
                      color: 'rgba(255,255,255,0.8)'
                    },
                    '& .Mui-selected': { color: '#FFCC00' }
                  }}
                >
                  <Tab icon={<CalendarTodayIcon />} label="Daily Access" />
                  <Tab icon={<PeopleIcon />} label="Raw" />
                  <Tab icon={<PlaceIcon />} label="Rejection" />
                  <Tab icon={<PeopleIcon />} label="EUROC Admit-Reject" />

                  <Tab icon={<CalendarTodayIcon />} label="Time Duration" />
                  <Tab icon={<PeopleIcon />} label="HeadCount" />

                </Tabs>

                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                  <Button
                    variant="text"
                    startIcon={<FilterListIcon />}
                    sx={{ color: 'rgba(255,255,255,0.65)', textTransform: 'none' }}
                    onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
                  >
                    Reset View
                  </Button>
                </Box>
              </Paper>

              {/* Action summary + CTA */}
              <Paper elevation={6} sx={{ p: 3, borderRadius: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 2 }}>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 900 }}>Export Center</Typography>
                  <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.7)' }}>
                    Selected Region: <strong style={{ color: '#FFCC00' }}>{region.toUpperCase()}</strong> {location ? `â€¢ ${location.split('.').pop()}` : ''}
                  </Typography>
                  <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                    Choose tab, select filters and export reports in Excel.
                  </Typography>
                </Box>

                <Box>

<Button
  startIcon={loading ? <CircularProgress size={20} /> : <DownloadIcon />}
  disabled={tab === 5 ? navDisabled : disabled}
  onClick={handleGenerate}

                    sx={{
                      bgcolor: '#FFCC00',
                      color: '#000',
                      fontWeight: 900,
                      px: 4,
                      py: 1,
                      borderRadius: 3,
                      boxShadow: '0 8px 30px rgba(255,204,0,0.22)',
                      '&:hover': { bgcolor: '#ffd84d', transform: 'translateY(-3px)' }
                    }}
                  >

                     {loading
    ? 'Loadingâ€¦'
    : (tab === 5
        ? (location ? `Navigate ${location.split('.').pop()}` : `Navigate ${region.toUpperCase()}`)
        : 'Export to Excel')}
</Button>

                </Box>
              </Paper>

            </Box>
          </Grid>

        </Grid>
      </Box>
    </LocalizationProvider>
  );

}



















// frontend/src/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: '/api',         // frontend calls '/api/...' and vite proxy rewrites it
  timeout: 120000,
  headers: {
    'Accept': 'application/json',
  }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    // friendly log for dev
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;











//C:\Users\W0024618\Desktop\global-page\frontend\src\App.jsx

import React from 'react';
import { Routes, Route, Navigate, Link } from 'react-router-dom';
import { Box, AppBar, Toolbar, Button } from '@mui/material';

import GlobalPage   from './pages/GlobalPage.jsx';
import VipPage      from './pages/VipPage.jsx';
import ReportsPage  from './pages/ReportsPage.jsx';
import DurationPage from "./pages/DurationPage";

export default function App() {
  return (
    <>
      <Routes>
        <Route path="/"      element={<GlobalPage />} />
        <Route path="/vip"   element={<VipPage />} />
        <Route path="/reports" element={<ReportsPage />} />
        <Route path="*"      element={<Navigate to="/" replace />} />
        <Route path="/duration" element={<DurationPage />} />

      </Routes>
    </>
  );
}









// //C:\Users\W0024618\Desktop\global-page\frontend\src\main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';

// âœ… CssBaseline from @mui/material
import { CssBaseline } from '@mui/material';
// âœ… ThemeProvider from @mui/material/styles
import { ThemeProvider } from '@mui/material/styles';

import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import App from './App.jsx';
import theme from './theme.js';  // our fixed theme.js

const router = createBrowserRouter(
  [{ path: '/*', element: <App /> }],
  {
    future: {
      v7_startTransition: true,
      v7_relativeSplatPath: true,
    },
  }
);

ReactDOM
  .createRoot(document.getElementById('root'))
  .render(
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <RouterProvider router={router} />
    </ThemeProvider>
  );










// src/theme.js

// âœ… Make sure you import *only* from @mui/material/styles:
import { createTheme } from '@mui/material/styles';


export const brandColors = [
  '#FFCC00','#FFD230', '#FFCC00', '#FFCC00','#FFCC00', '#FFCC00'
];

//'#05DF72','#FEF2F2','#AF52DE', '#5AC8FA','#FF2D55','#FFC9C9','#FF9F0A',  '#32D74B'

const theme = createTheme({
  palette: {
    primary:   { main: brandColors[2], contrastText: '#000' },
    secondary: { main: '#000', contrastText: '#fff' },
    background:{ default: '#000000', paper: '#000000' },
    text:      { primary: '#fff', secondary: brandColors[2] },
    // Any custom slots must map to one of MUIâ€™s recognized keys:
    info:      { main: brandColors[5] },
  },
  typography: {
    fontFamily: '"Helvetica Neue", Arial, sans-serif',
  }
});

export default theme;











// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://localhost:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://localhost:3008';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      '@mui/material': path.resolve(__dirname, 'node_modules/@mui/material'),
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    }
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // 1) Route CCURE-related API calls to Python backend and remove the /api prefix
      //    Example: /api/ccure/averages -> http://localhost:8000/ccure/averages
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''), // remove leading /api
        timeout: 120000
      },

      // 2) All other /api/* calls go to the legacy Node backend (no rewrite)
      //    This preserves the previous working headcount behavior:
      //    /api/headcount -> http://localhost:3008/api/headcount
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        // NOTE: NO rewrite here so the '/api' prefix is kept
        timeout: 120000
      }
    }
  }
});
















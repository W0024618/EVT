"""
duration_report.py

Purpose:
  - Connects to ACVSUJournal MSSQL databases for APAC, EMEA, LACA, NAMER regions (credentials provided by user)
  - Extracts CardAdmitted swipe events for a specified date and computes daily duration per employee
    using first swipe (min) and last swipe (max) timestamps for that date.
  - Writes per-region CSV duration reports and returns pandas DataFrames for further use.
  - Contains clear TODO hooks to later improve shift-aware logic.

Notes & Usage:
  - Place this file in:
      C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics
    (or any other folder).

  - Requires Python packages: pyodbc, pandas, python-dateutil
    Install (example):
      pip install pyodbc pandas python-dateutil

  - ODBC driver: adjust DRIVER in the connection string depending on the host environment.
    Example uses 'ODBC Driver 17 for SQL Server' by default.
    If you use a different driver (e.g. 18), change the DRIVER value.

  - Example CLI usage:
      python duration_report.py --date 2025-07-21 --regions apac,namer --outdir ./out_reports

  - The script by default picks "today" in Asia/Kolkata timezone if --date is omitted.

Security:
  - This script contains credentials as provided by the user. In production, consider moving credentials
    to environment variables or a secure vault.

TODO (future improvements):
  - Shift-aware logic: handle cases where employees have predefined shift windows spanning midnight,
    and decide which swipes belong to which shift.
  - Handle badge-in-only or badge-out-only cases (e.g., tele-getting or push-button exits)
  - More advanced deduplication of multiple swipes in short windows.

"""

import argparse
import logging
import os
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo
from pathlib import Path

import pandas as pd

# Optional: import pyodbc only when connecting (allows importing this module even without driver)
try:
    import pyodbc
except Exception:
    pyodbc = None

# --------------------- Configuration ---------------------
ODBC_DRIVER = os.getenv("ODBC_DRIVER", "ODBC Driver 17 for SQL Server")

REGION_CONFIG = {
    "apac": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUPNQ0986V",
        "database": "ACVSUJournal_00010029",
        # partitions to include (from provided query)
        "partitions": [
            "APAC.Default", "CN.Beijing", "JP.Tokyo", "PH.Manila", "MY.Kuala Lumpur"
        ]
    },
    "emea": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUFRA0986V",
        "database": "ACVSUJournal_00011028",  # note: user provided 00011028 in credentials block
        "partitions": [
            "LT.Vilnius", "AUT.Vienna", "IE.DUblin", "DU.Abu Dhab", "ES.Madrid",
            "IT.Rome", "MA.Casablanca", "RU.Moscow", "UK.London"
        ]
    },
    "laca": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUSJO0986V",
        "database": "ACVSUJournal_00010029",
        "partitions": [
            "AR.Cordoba", "BR.Sao Paulo", "CR.Costa Rica Partition", "MX.Mexico City",
            "PA.Panama City", "PE.Lima"
        ]
    },
    "namer": {
        "user": "GSOC_Test",
        "password": "Westernccure@2025",
        "server": "SRVWUDEN0891V",
        "database": "ACVSUJournal_00010029",
        # For NAMER we'll filter by ObjectName2 patterns (HQ, Austin, Miami, NYC)
        "logical_like": ["%HQ%", "%Austin%", "%Miami%", "%NYC%"]
    }
}


# --------------------- SQL Builder ---------------------
GENERIC_SQL_TEMPLATE = r"""
SELECT
    t1.[ObjectName1],
    t1.[ObjectName2],
    CASE WHEN t2.[Int1] = 0 THEN t2.[Text12] ELSE CAST(t2.[Int1] AS NVARCHAR) END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name] AS PersonnelTypeName,
    t1.ObjectIdentity1 AS EmployeeIdentity,
    t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t1.MessageType
FROM [{db}].[dbo].[ACVSUJournalLog] AS t1
INNER JOIN [ACVSCore].[Access].[Personnel] AS t2 ON t1.ObjectIdentity1 = t2.GUID
INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3 ON t2.PersonnelTypeID = t3.ObjectID
WHERE t1.MessageType = 'CardAdmitted'
  AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) = '{date}'
  {region_filter}
;
"""


def build_region_query(region_key: str, target_date: date) -> str:
    rc = REGION_CONFIG[region_key]
    date_str = target_date.strftime("%Y-%m-%d")
    region_filter = ""

    if region_key in ("apac", "emea", "laca"):
        partitions = rc.get("partitions", [])
        # build partition IN clause
        parts_sql = ", ".join(f"'{p}'" for p in partitions)
        region_filter = f"AND t1.PartitionName2 IN ({parts_sql})"
    elif region_key == "namer":
        likes = rc.get("logical_like", [])
        # build OR of LIKE patterns on ObjectName2
        like_sql = " OR ".join(f"t1.[ObjectName2] LIKE '{p}'" for p in likes)
        region_filter = f"AND ({like_sql})"
    else:
        # no filter
        region_filter = ""

    return GENERIC_SQL_TEMPLATE.format(db=rc["database"], date=date_str, region_filter=region_filter)


# --------------------- DB Utilities ---------------------
def get_connection(region_key: str):
    """Create and return a pyodbc connection for the region configuration.
    Caller must ensure pyodbc is installed and the ODBC driver exists on the host.
    """
    if pyodbc is None:
        raise RuntimeError("pyodbc is not available. Install it with 'pip install pyodbc'.")

    rc = REGION_CONFIG[region_key]
    conn_str = (
        f"DRIVER={{{ODBC_DRIVER}}};"
        f"SERVER={rc['server']};DATABASE={rc['database']};UID={rc['user']};PWD={rc['password']};"
        "TrustServerCertificate=Yes;"
    )
    return pyodbc.connect(conn_str, autocommit=True)


def fetch_swipes_for_region(region_key: str, target_date: date) -> pd.DataFrame:
    """Fetch CardAdmitted swipes for the given region and target_date.
    Returns a pandas DataFrame with columns including EmployeeID and LocaleMessageTime (UTC->locale adjusted).
    """
    sql = build_region_query(region_key, target_date)
    logging.info("Built SQL for region %s, date %s", region_key, target_date)
    if pyodbc is None:
        # Return an empty DataFrame skeleton so the script can be inspected without DB driver installed.
        logging.warning("pyodbc not available - returning empty DataFrame skeleton for region %s", region_key)
        cols = ["ObjectName1", "ObjectName2", "EmployeeID", "PersonnelTypeID", "PersonnelTypeName",
                "EmployeeIdentity", "PartitionName2", "LocaleMessageTime", "MessageType"]
        return pd.DataFrame(columns=cols)

    conn = get_connection(region_key)
    try:
        df = pd.read_sql(sql, conn)
    finally:
        conn.close()
    # Ensure LocaleMessageTime is datetime
    if "LocaleMessageTime" in df.columns:
        df["LocaleMessageTime"] = pd.to_datetime(df["LocaleMessageTime"])
    return df


# --------------------- Duration Calculation ---------------------
def compute_daily_durations(swipes_df: pd.DataFrame) -> pd.DataFrame:
    """Given swipe events DataFrame, compute first and last swipe per employee per day and duration.
    Returns DataFrame with columns: EmployeeID, Date, FirstSwipe, LastSwipe, DurationSeconds, Duration (HH:MM:SS), CountSwipes
    """
    if swipes_df.empty:
        return pd.DataFrame(columns=[
            "EmployeeID", "Date", "FirstSwipe", "LastSwipe", "DurationSeconds", "Duration", "CountSwipes",
            "PersonnelTypeName", "PartitionName2"
        ])

    df = swipes_df.copy()

    # Normalize employee id and remove rows without EmployeeID
    df = df[df["EmployeeID"].notna()].copy()
    # Create date column (local date already applied in SQL)
    df["Date"] = df["LocaleMessageTime"].dt.date

    # Group by EmployeeID + Date (use EmployeeIdentity if you prefer)
    group_cols = ["EmployeeID", "Date"]
    agg = df.groupby(group_cols).agg(
        FirstSwipe=pd.NamedAgg(column="LocaleMessageTime", aggfunc="min"),
        LastSwipe=pd.NamedAgg(column="LocaleMessageTime", aggfunc="max"),
        CountSwipes=pd.NamedAgg(column="LocaleMessageTime", aggfunc="count"),
        PersonnelTypeName=pd.NamedAgg(column="PersonnelTypeName", aggfunc="first"),
        PartitionName2=pd.NamedAgg(column="PartitionName2", aggfunc="first")
    ).reset_index()

    agg["DurationSeconds"] = (agg["LastSwipe"] - agg["FirstSwipe"]).dt.total_seconds()
    # Negative durations (if any) will be clipped to 0
    agg["DurationSeconds"] = agg["DurationSeconds"].clip(lower=0)

    # Human readable HH:MM:SS
    agg["Duration"] = agg["DurationSeconds"].apply(lambda s: str(timedelta(seconds=int(s))))
    return agg


# --------------------- Main Runner ---------------------
def run_for_date(target_date: date, regions: list, outdir: str) -> dict:
    """
    Run duration reports for the requested regions on target_date.
    Returns a dict of region->DataFrame (duration report).
    """
    outdir_path = Path(outdir)
    outdir_path.mkdir(parents=True, exist_ok=True)

    results = {}
    for r in regions:
        r = r.lower()
        if r not in REGION_CONFIG:
            logging.warning("Unknown region '%s' - skipping", r)
            continue
        logging.info("Fetching swipes for region %s on %s", r, target_date)
        swipes = fetch_swipes_for_region(r, target_date)
        durations = compute_daily_durations(swipes)
        csv_path = outdir_path / f"{r}_duration_{target_date.strftime('%Y%m%d')}.csv"
        durations.to_csv(csv_path, index=False)
        logging.info("Wrote duration CSV for %s to %s (rows=%d)", r, csv_path, len(durations))
        results[r] = durations
    return results


def parse_args():
    p = argparse.ArgumentParser(description="Generate daily duration report from ACVSUJournal swipe logs.")
    p.add_argument("--date", "-d", help="Target date (YYYY-MM-DD). Defaults to today in Asia/Kolkata", default=None)
    p.add_argument("--regions", "-r", help="Comma-separated regions (apac,emea,laca,namer). Default: all",
                   default="apac,emea,laca,namer")
    p.add_argument("--outdir", "-o", help="Output directory for CSVs", default="./duration_reports")
    return p.parse_args()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
    args = parse_args()

    # Default date in Asia/Kolkata timezone
    if args.date:
        target_date = datetime.strptime(args.date, "%Y-%m-%d").date()
    else:
        tz = ZoneInfo("Asia/Kolkata")
        target_date = datetime.now(tz).date()

    regions = [x.strip().lower() for x in args.regions.split(",") if x.strip()]
    outdir = args.outdir

    logging.info("Generating duration reports for date %s and regions: %s", target_date, regions)
    results = run_for_date(target_date, regions, outdir)

    # Print a short summary
    for r, df in results.items():
        logging.info("Region %s: %d employees with computed durations", r, len(df))
    logging.info("Completed. CSVs are in %s", Path(outdir).absolute())








pip install pyodbc pandas python-dateutil


Copy the file to your target folder:
C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\duration_report.py












Read Beloow HeadCount Query carefully check all (APAC + EMEA + LACA + NAMER ) all query carefully and build Time Dusration report 
so Basically we are 
initially calculate Duration report using First swipe and last swipe for day ..
then will improve Logic for those Who are work in Shift.
check below db connection details and
create new .py file for Duration 
in attendance analytics folder and start building duration repot caredfully...
create file here ..
C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics
create new python file below for duration .


 apac: 
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUPNQ0986V',
    database: 'ACVSUJournal_00010029',
 
  emea: 
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUFRA0986V',
    database: 'ACVSUJournal_00011028,


  laca: 
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUSJO0986V',
    database: 'ACVSUJournal_00010029',

 
  namer: 
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUDEN0891V',
    database: 'ACVSUJournal_00010029',







1)APAC HeadCouint Query


/*SELECT 
    t1.[ObjectName1],
    t1.[ObjectName2],
   CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
    END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name],  -- Adding the PersonnelType from the third table
	Case
		WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
		WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
		WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
		ELSE t1.PartitionName2
	END AS Location,
	t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
	t1.MessageType
INTO 
    #CombinedEmployeeData  -- Temporary table
FROM 
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLog] AS t1  -- Replace with your actual table name
INNER JOIN 
    [ACVSCore].[Access].[Personnel] AS t2  -- Replace with the actual table name
ON 
    t1.ObjectIdentity1 = t2.GUID
INNER JOIN 
    [ACVSCore].[Access].[PersonnelType] AS t3  -- Replace with the actual table name containing PersonnelType
ON 
    t2.[PersonnelTypeId] = t3.[ObjectID];
	SELECT DISTINCT
    [ObjectName1],
    [Name],
	EmployeeID,
	Location,
	Messagetype,
    CONVERT(DATE, LocaleMessageTime) AS Date
	FROM 
    #CombinedEmployeeData  -- Use the temporary table with combined data
	WHERE 
    CONVERT (DATE, LocaleMessageTime) = '2025-05-5' 
	AND PartitionName2 IN ('APAC.Default', 'CN.Beijing', 'JP.Tokyo', 'PH.Manila', 'MY.Kuala Lumpur') 
	AND MessageType = 'CardAdmitted';
	*/
	


	WITH CombinedEmployeeData AS (
    SELECT
        t1.[ObjectName1],
        t1.[ObjectName2],
        CASE
            WHEN t2.[Int1] = 0 THEN t2.[Text12]
            ELSE CAST(t2.[Int1] AS NVARCHAR)
        END AS EmployeeID,
        t2.[PersonnelTypeID],
        t3.[Name] AS PersonnelTypeName,
		t1.Objectidentity1 AS EmployeeIdentity,
        CASE
            WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
            WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
            WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
            ELSE t1.PartitionName2
        END AS Location,
        t1.PartitionName2,
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.MessageType
    FROM
        [ACVSUJournal_00010028].[dbo].[ACVSUJournalLog] AS t1
        INNER JOIN [ACVSCore].[Access].[Personnel] AS t2 ON t1.ObjectIdentity1 = t2.GUID
        INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3 ON t2.PersonnelTypeID = t3.ObjectID
    WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN ('APAC.Default', 'CN.Beijing', 'JP.Tokyo', 'PH.Manila', 'MY.Kuala Lumpur')
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC])) = '2025-06-26'
),
RankedEmployeeData AS (
    SELECT *,
        ROW_NUMBER() OVER (PARTITION BY EmployeeIdentity, CONVERT(DATE, LocaleMessageTime) ORDER BY LocaleMessageTime DESC) AS rn
    FROM
        CombinedEmployeeData
)
SELECT
    [ObjectName1],
    PersonnelTypeName,
    EmployeeID,
    Location,
    MessageType,
    CONVERT(DATE, LocaleMessageTime) AS Date
FROM
    RankedEmployeeData
WHERE
    rn = 1;

	--DROP Table #CombinedEmployeeData;



2)NAMER HeadCount Query


-- Step 1: Build the temp table with corrected logical location using door name (ObjectName2)
SELECT
    t1.[ObjectName1],
    t1.[ObjectName2],
    CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
    END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name], -- Personnel type
    t2.[Text5],
    t1.[PartitionName2],
 
    -- Assign accurate LogicalLocation using door name (ObjectName2)
    CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        WHEN t1.[ObjectName2] LIKE '%Austin%' THEN 'Austin'
        WHEN t1.[ObjectName2] LIKE '%Miami%' THEN 'Miami'
        WHEN t1.[ObjectName2] LIKE '%NYC%' THEN 'New York'
        ELSE 'Other'
    END AS LogicalLocation,
 
    t1.[MessageType],
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime
 
INTO #CombinedEmployeeData
FROM [ACVSUJournal_00010028].[dbo].[ACVSUJournalLog] AS t1
INNER JOIN [ACVSCore].[Access].[Personnel] AS t2
    ON t1.ObjectIdentity1 = t2.GUID
INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3
    ON t2.[PersonnelTypeID] = t3.[ObjectID];
 
-- Step 2: Select cleaned data for specific logical locations
SELECT DISTINCT
    [ObjectName1],
    [Name],
    EmployeeID,
    Text5,
    LogicalLocation,
    MessageType,
    CONVERT(DATE, LocaleMessageTime) AS [Date]
FROM #CombinedEmployeeData
WHERE
    CONVERT(DATE, LocaleMessageTime) = '2025-07-21'
    AND LogicalLocation IN ('Denver', 'Austin', 'Miami', 'New York')
    AND MessageType = 'CardAdmitted';

DROP TABLE #CombinedEmployeeData;







3) EMEA Headcount Query 

SELECT 
    t1.[ObjectName1],
    t1.[ObjectName2],
   CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
    END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name],  -- Adding the PersonnelType from the third table
	t2.text5,
	t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
	t1.MessageType
INTO 
    #CombinedEmployeeData  -- Temporary table
FROM 
    [ACVSUJournal_00011027].[dbo].[ACVSUJournalLog] AS t1  -- Replace with your actual table name
INNER JOIN 
    [ACVSCore].[Access].[Personnel] AS t2  -- Replace with the actual table name
ON 
    t1.ObjectIdentity1 = t2.GUID
INNER JOIN 
    [ACVSCore].[Access].[PersonnelType] AS t3  -- Replace with the actual table name containing PersonnelType
ON 
    t2.[PersonnelTypeId] = t3.[ObjectID];
	SELECT DISTINCT
    [ObjectName1],
    [Name],
	EmployeeID,
	text5,
	PartitionName2,
	Messagetype,
    CONVERT(DATE, LocaleMessageTime) AS Date
	FROM 
    #CombinedEmployeeData  -- Use the temporary table with combined data
	WHERE 
    CONVERT (DATE, LocaleMessageTime) = '2025-06-26' 
	AND PartitionName2 IN ('LT.Vilnius', 'AUT.Vienna', 'IE.DUblin', 'DU.Abu Dhab', 'ES.Madrid', 'IT.Rome', 'MA.Casablanca', 'RU.Moscow',
	'UK.London') 
	AND MessageType = 'CardAdmitted';

	DROP Table #CombinedEmployeeData;





4) Laca  Headcount Query
SELECT 
    t1.[ObjectName1],
    t1.[ObjectName2],
   CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
    END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name],  -- Adding the PersonnelType from the third table
	t2.text5,
	t1.PartitionName2,
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
	t1.MessageType
INTO 
    #CombinedEmployeeData  -- Temporary table
FROM 
    [ACVSUJournal_00010028].[dbo].[ACVSUJournalLog] AS t1  -- Replace with your actual table name
INNER JOIN 
    [ACVSCore].[Access].[Personnel] AS t2  -- Replace with the actual table name
ON 
    t1.ObjectIdentity1 = t2.GUID
INNER JOIN 
    [ACVSCore].[Access].[PersonnelType] AS t3  -- Replace with the actual table name containing PersonnelType
ON 
    t2.[PersonnelTypeId] = t3.[ObjectID];
	SELECT DISTINCT
    [ObjectName1],
    [Name],
	EmployeeID,
	text5,
	PartitionName2,
	Messagetype,
    CONVERT(DATE, LocaleMessageTime) AS Date
	FROM 
    #CombinedEmployeeData  -- Use the temporary table with combined data
	WHERE 
    CONVERT (DATE, LocaleMessageTime) = '2025-07-12' 
	AND PartitionName2 IN ('AR.Cordoba', 'BR.Sao Paulo', 'CR.Costa Rica Partition', 'MX.Mexico City', 'PA.Panama City', 'PE.Lima') 
	AND MessageType = 'CardAdmitted';

	DROP Table #CombinedEmployeeData;

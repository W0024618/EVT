http://localhost:3007/api/occupancy/live-summary
{
  "success": true,
  "today": {
    "total": 1270,
    "Employee": 1125,
    "Contractor": 145
  },
  "realtime": {
    "Pune": {
      "total": 870,
      "Employee": 793,
      "Contractor": 77,
      "floors": {
        "2nd Floor": 129,
        "Podium Floor": 601,
        "Tower B": 140
      }
    },
    "Quezon City": {
      "total": 163,
      "Employee": 142,
      "Contractor": 21,
      "floors": {
        "7th Floor": 118,
        "6th Floor": 45
      }
    },
    "MY.Kuala Lumpur": {
      "total": 3,
      "Employee": 2,
      "Contractor": 1,
      "floors": {
        "Kuala Lumpur": 3
      }
    },
    "Taguig City": {
      "total": 24,
      "Employee": 20,
      "Contractor": 4,
      "floors": {
        "Taguig": 24
      }
    },
    "JP.Tokyo": {
      "total": 8,
      "Employee": 7,
      "Contractor": 1,
      "floors": {
        "Tokyo": 8
      }
    }
  },
  "unmapped": [],
  "details": [
    {
      "ObjectName1": "Unavane, Aditya",
      "Door": "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B",
      "PersonnelType": "Employee",
      "EmployeeID": "328923",
      "CardNumber": "620146",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-08-12T12:04:20.000Z",
      "Direction": "InDirection",
      "PersonGUID": "F4980CD9-374E-4408-BD7B-001F7D12F8AD"
    },
    {
      "ObjectName1": "Sarkaniya, Harish",
      "Door": "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)",
      "PersonnelType": "Contractor",
      "EmployeeID": "W0024571",
      "CardNumber": "615794",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-08-12T12:09:43.000Z",
      "Direction": "InDirection",
      "PersonGUID": "51A95852-C14E-4BB4-8F31-0057A87F67C7"
    },



Currently APi get above responce structure , now Below PartitionName2 add Floor section and display using Floor maping like 
Podium Floor , 
if Zone is avilable display 
Zone also Grren Zone like 

as per requirnment update APi responce carefully



C:\Users\W0024618\Desktop\apac-occupancy-backend\src\controllers\occupancy.controller.js

//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\controllers\occupancy.controller.js

const service = require('../services/occupancy.service');

const {
  doorMap,
  normalizedDoorZoneMap,
  doorZoneMap,
  zoneFloorMap,
  normalizeDoorName
} = require('../utils/doorMap');


function isEmployeeType(pt) {
  return ['Employee','Terminated Employee','Terminated Personnel'].includes(pt);
}

function lookupFloor(partition, rawDoor, direction, unmapped) {
  const norm = normalizeDoorName(rawDoor);
  const key  = `${norm}___${direction}`;

  // 1) Try normalized lookup
  const zone = normalizedDoorZoneMap[key];
  if (zone) {
    const f = zoneFloorMap[zone];
    if (f) return f;
  }

  // 2) Fallback to per-partition doorMap
  const entry = doorMap.find(d =>
    d.normalizedDoor === norm && d.partition === partition
  );
  if (entry) {
    const fl = direction === 'InDirection'
      ? entry.inDirectionFloor
      : entry.outDirectionFloor;
    if (fl) return fl;
  }

  // 3) Nothing matched → record & return Unknown
  unmapped.add(`${partition}|${rawDoor}`);
  return 'Unknown';
}



function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeDoorName(rawDoor) + '___' + (rawDir === 'InDirection' ? 'InDirection' : 'OutDirection');
  const zone = normalizedDoorZoneMap[key];
  if (!zone) return 'Unknown Zone';
  // for OutDirection that aren’t true “Out of office”, strip trailing “ Zone”
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    return zone.replace(/\s+Zone$/i, '');
  }
  return zone;
}



exports.getLiveOccupancy = async (req,res) => {
  try {
    const data = await service.fetchLiveOccupancy();
    res.json({ success:true, count:data.length, data });
  } catch(e) {
    console.error(e);
    res.status(500).json({ success:false, message:'Live fetch failed' });
  }
};

exports.getLiveSummary = async (req,res) => {
  try {
    const swipes = await service.fetchLiveOccupancy();

    // first swipe per person = TODAY
    const first = {};
    swipes.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!first[r.PersonGUID] || t < new Date(first[r.PersonGUID].LocaleMessageTime).getTime()) {
        first[r.PersonGUID] = r;
      }
    });
    const today = { total:0, Employee:0, Contractor:0 };
    Object.values(first).forEach(r => {
      today.total++;
      if (isEmployeeType(r.PersonnelType)) today.Employee++;
      else today.Contractor++;
    });

    // last swipe per person for realtime
    const last = {};
    swipes.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!last[r.PersonGUID] || t > new Date(last[r.PersonGUID].LocaleMessageTime).getTime()) {
        last[r.PersonGUID] = r;
      }
    });

    const realtime = {};
    const unmapped = new Set();




    Object.values(last).forEach(r => {
      const p = r.PartitionName2;

      // ── Pune gets the more advanced In/Out eviction logic ──
      if (p === 'Pune') {
        const zoneRaw = mapDoorToZone(r.Door, r.Direction);

        // 1) Unknown keys → drop
        if (zoneRaw === 'Unknown Zone') return;

        // 2) True “Out of office” → full drop
        if (r.Direction === 'OutDirection' && zoneRaw === 'Out of office') {
          return;
        }

        // 3) Any other OutDirection → only keep if it’s “…Outer Area”
        if (r.Direction === 'OutDirection' && !zoneRaw.endsWith('Outer Area')) {
          return;
        }

        // 4) now safe to count
        if (!realtime[p]) realtime[p] = { total:0, Employee:0, Contractor:0, floors:{} };
        realtime[p].total++;
        if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
        else                                  realtime[p].Contractor++;

        // 5) floor‐bucket as usual
        const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
       if (fl !== 'Unknown') {
          realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
        }
        return;
      }

      // ── All other partitions keep your existing logic ──
      // (the original “drop only Out of office” snippet)
      const normKey = normalizeDoorName(r.Door) + '___' + r.Direction;
      let zone = normalizedDoorZoneMap[normKey];
      if (!zone) {
        const entry = doorMap.find(d =>
          d.normalizedDoor === normalizeDoorName(r.Door) &&
          d.partition === p
        );
        zone = entry
          ? (r.Direction === 'InDirection'
              ? normalizedDoorZoneMap[`${entry.normalizedDoor}___InDirection`]
              : normalizedDoorZoneMap[`${entry.normalizedDoor}___OutDirection`])
          : null;
      }
     if (zone === 'Out of office') return;

      if (!realtime[p]) realtime[p] = { total:0, Employee:0, Contractor:0, floors:{} };
      realtime[p].total++;
      if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
      else                                  realtime[p].Contractor++;

      const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
      if (fl !== 'Unknown') {
        realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
      }
    });


    // Log to server console for quick dev feedback:
    if (unmapped.size) console.warn('Unmapped doors:', Array.from(unmapped));

    res.json({
      success:    true,
      today,
      realtime,
      // expose the raw list of partition|door keys that had no mapping:
      unmapped:   Array.from(unmapped),
      details:    Object.values(last)
    });

  } catch (e) {
    console.error(e);
    res.status(500).json({ success:false, message:'Summary failed' });
  }
};





exports.getHistoricalOccupancy = async (req, res) => {
  const location = req.params.location || null;
  try {
    // 1) Pull in rows — each now has non-null PartitionNameFriendly
    const raw = await service.fetchHistoricalOccupancy(location);

    // 2) Dedupe to first swipe per person per day
    const byDate = raw.reduce((acc, r) => {
           // force into a "YYYY-MM-DD" string
     const date = new Date(r.LocaleMessageTime).toISOString().slice(0, 10);
      acc[date] = acc[date] || {};
      if (
        !acc[date][r.PersonGUID] ||
        new Date(r.LocaleMessageTime) < new Date(acc[date][r.PersonGUID].LocaleMessageTime)
      ) {
        acc[date][r.PersonGUID] = r;
      }
      return acc;
    }, {});

    const summaryByDate = [];
    const details = [];

    // 3) Build summaries
    Object.keys(byDate).sort().forEach(date => {
      const recs = Object.values(byDate[date]);
      details.push(...recs);

      // region totals
      const region = { total: 0, Employee: 0, Contractor: 0 };
      // per-partition buckets
      const partitions = {};

      recs.forEach(r => {
        // increment region
        region.total++;
        if (isEmployeeType(r.PersonnelType)) region.Employee++;
        else region.Contractor++;

        // only build partitions if we're not filtering to a single location
        if (!location) {
          // use the friendly name (guaranteed non-null!), with fallback
          const key = r.PartitionNameFriendly || 'APAC.Default';
          if (!partitions[key]) {
            partitions[key] = { total: 0, Employee: 0, Contractor: 0 };
          }
          partitions[key].total++;
          if (isEmployeeType(r.PersonnelType)) partitions[key].Employee++;
          else partitions[key].Contractor++;
        }
      });

      summaryByDate.push({
        date,
        day: new Date(date).toLocaleDateString('en-US', { weekday: 'long' }),
        region: location
          ? { name: location, ...region }
          : { name: 'APAC', ...region },
        // if location is provided, you can still emit an empty object (`{}`) or skip:
        partitions: location ? {} : partitions
      });
    });

    // 4) Return
    res.json({ success: true, summaryByDate, details });
  } catch (e) {
    console.error(e);
    res.status(500).json({ success: false, message: 'Historical failed' });
  }
};





C:\Users\W0024618\Desktop\apac-occupancy-backend\src\routes\occupancy.routes.js


// src/routes/occupancy.routes.js
const express    = require('express');
const controller = require('../controllers/occupancy.controller');
const router     = express.Router();

router.get('/live',         controller.getLiveOccupancy);
router.get('/live-summary', controller.getLiveSummary);
router.get('/history',           controller.getHistoricalOccupancy);
router.get('/history/:location', controller.getHistoricalOccupancy);

module.exports = router;








C:\Users\W0024618\Desktop\apac-occupancy-backend\src\services\occupancy.service.js




//C:\Users\W0024618\Desktop\apac-occupancy-backend\src\services\occupancy.service.js

const { poolPromise, sql } = require('../config/db');

const partitionList = [
  'APAC.Default',
  'CN.Beijing',
  'JP.Tokyo',
  'PH.Manila',
  'MY.Kuala Lumpur',
  'IN.Pune'
];

function quoteList(arr) {
  return arr.map(p => `'${p.replace("'", "''")}'`).join(',');
}

/**
 * Live occupancy (today) for APAC
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
    WITH CombinedEmployeeData AS (
      SELECT
        t1.ObjectName1,
        t1.ObjectName2             AS Door,               -- include Door
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                    AS PersonnelType,
        t1.ObjectIdentity1         AS PersonGUID,
        -- extract CardNumber from XML or shred table
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                          AS CardNumber,
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%'   THEN 'Pune'
          WHEN t1.ObjectName2 LIKE 'APAC_JPN%' THEN 'JP.Tokyo'
          WHEN t1.ObjectName2 LIKE 'APAC_MY%'  THEN 'MY.Kuala Lumpur'
          ELSE t1.PartitionName2
        END                        AS PartitionName2,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t5d.value                  AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID

      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
      ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')

      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${parts})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    ), Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (PARTITION BY PersonGUID ORDER BY LocaleMessageTime DESC) AS rn
      FROM CombinedEmployeeData
    )
    SELECT
      ObjectName1,
      Door,                            -- door
      PersonnelType,
      EmployeeID,
      CardNumber,                      -- now returned
      PartitionName2,
      LocaleMessageTime,
      Direction,
      PersonGUID
    FROM Ranked
    WHERE rn = 1;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};




/**
 * Historical raw‐data fetch for the past N days, all or by location.
 */


exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  // Outer‐query filter based on the alias
  const outerFilter = location
    ? `WHERE PartitionNameFriendly = @location`
    : `WHERE PartitionNameFriendly IN (${quoteList([
        'Pune','Quezon City','JP.Tokyo','MY.Kuala Lumpur','Taguig City'
      ])})`;

  const query = `
    WITH Hist AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2               AS Door,
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                      AS PersonnelType,
        t1.ObjectIdentity1           AS PersonGUID,


 -- **Single** friendly‐name alias, with fallback
        COALESCE(
          CASE
            WHEN t1.ObjectName2 LIKE 'APAC_PI%'   THEN 'Taguig City'
            WHEN t1.ObjectName2 LIKE 'APAC_PH%'   THEN 'Quezon City'
            WHEN t1.ObjectName2 LIKE '%PUN%'      THEN 'Pune'
            WHEN t1.ObjectName2 LIKE 'APAC_JPN%'  THEN 'JP.Tokyo'
            WHEN t1.ObjectName2 LIKE 'APAC_MY%'   THEN 'MY.Kuala Lumpur'
            ELSE t1.PartitionName2
          END,
          'APAC.Default'
        )                             AS PartitionNameFriendly,

        -- extract CardNumber
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                            AS CardNumber,
        t5d.value                    AS Direction
      FROM ACVSUJournal_00010028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      
      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID 
        AND t5d.Value IN ('InDirection','OutDirection')



      LEFT JOIN ACVSUJournal_00010028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
  
        -- date filter remains here
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
    )

    -- now filter by the newly‐defined alias
    SELECT *
    FROM Hist
    ${outerFilter}
    ORDER BY LocaleMessageTime ASC;
  `;

  const req = pool.request();
  if (location) {
    req.input('location', sql.NVarChar, location);
  }
  const result = await req.query(query);
  return result.recordset;
};


exports.fetchHistoricalOccupancy = async (location) =>
  exports.fetchHistoricalData({ days: 7, location: location || null });





// src/utils/doorMap.js

// 1) Raw mapping from “DOOR___Direction” → zone name
const doorZoneMap = {
  // Podium / Red


  // Podium / Red
  "APAC_IN_PUN_PODIUM_RED_IDF ROOM-02-RESTRICTED DOOR___InDirection":                 "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___InDirection":                            "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED)___OutDirection":                           "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___InDirection":                 "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___OutDirection":                "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___InDirection":                                "Red Zone",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___OutDirection":                               "Red Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___InDirection":             "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___OutDirection":            "Reception Area",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___InDirection":         "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___OutDirection":        "Yellow Zone - Outer Area",

  // Podium / Yellow
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___InDirection":                              "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___OutDirection":                             "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MDF RESTRICTED DOOR___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_IT STORE ROOM-DOOR RESTRICTED DOOR___InDirection":        "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_REPRO STORE-DOOR RESTRICTED DOOR___InDirection":           "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_CONTROL PANEL ROOM-DOOR RESTRICTED DOOR___InDirection":   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_PREACTION ROOM-DOOR RESTRICTED DOOR___InDirection":        "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_TESTING LAB-DOOR RESTRICTED DOOR___InDirection":           "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___OutDirection":                      "Reception Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___InDirection":                   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___OutDirection":                  "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___InDirection":                               "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___OutDirection":                              "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___InDirection":                       "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___OutDirection":                      "Yellow Zone - Outer Area",

  // Podium / Green
  "APAC_IN_PUN_PODIUM_GREEN-_IDF ROOM 1-RESTRICTED DOOR___InDirection":                "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 1-DOOR RESTRICTED DOOR___InDirection":            "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 2-DOOR RESTRICTED DOOR___InDirection":            "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_LOCKER HR STORE 3-DOOR RESTRICTED DOOR___InDirection":      "Green Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___InDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___InDirection":                        "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___OutDirection":                       "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___InDirection":                                "Green Zone",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___OutDirection":                               "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___InDirection":                        "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___OutDirection":                       "Reception Area",

  // Podium / Orange
  "APAC_IN_PUN_PODIUM_ST4 DOOR 1 (ORANGE)___InDirection":                               "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___InDirection":                      "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___OutDirection":                     "Reception Area",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___InDirection":                              "Orange Zone",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___OutDirection":                             "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___InDirection":                       "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___OutDirection":                      "Orange Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ORANGE-IDF ROOM 3-RESTRICTED DOOR___InDirection":                "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___InDirection":            "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___OutDirection":           "Orange Zone - Outer Area",

  // Podium / GSOC door
  "APAC_IN_PUN_PODIUM_GSOC DOOR RESTRICTED DOOR___InDirection":                         "Yellow Zone",

  // Podium / Main Right & Left Entry
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___InDirection":                  "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___OutDirection":                 "Assembly Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___InDirection":                   "Reception Area",
  "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___OutDirection":                  "Assembly Area",

  // Podium / Turnstiles
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 3-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4-DOOR___InDirection":                               "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4 -OUT DOOR___OutDirection":                         "Out of office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-OUT DOOR___OutDirection":                          "Out of office",

  // 2nd-Floor / IDF + UPS/ELEC + Reception→Workstation + LiftLobby→Reception
  "APAC_IN_PUN_2NDFLR_IDF ROOM_10:05:86 RESTRICTED DOOR___InDirection":                  "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_UPS/ELEC ROOM RESTRICTED DOOR___InDirection":                      "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___InDirection":                       "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR___OutDirection":                      "Out of office",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___InDirection":                   "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR___OutDirection":                  "2nd Floor, Pune",

  // Tower B
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___InDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___OutDirection":                              "Out of office",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___InDirection":                                   "Tower B",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection":                                  "Out of office",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___InDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___OutDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___InDirection":                                 "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___OutDirection":                                "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___InDirection":                               "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___OutDirection":                              "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___InDirection":                              "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___OutDirection":                             "Tower B",
  "APAC_IN_PUN_TOWER B_IBMS ROOM___InDirection":                                         "Tower B",
  "APAC_IN_PUN_TOWER B_UPS ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_MDF ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_PAC ROOM___InDirection":                                          "Tower B",
  "APAC_IN_PUN_TOWER B_IT STORE ROOM___InDirection":                                    "Tower B",
  "APAC_IN_PUN_TOWER B_GYM ROOM___InDirection":                                          "Tower B GYM",
  "APAC_IN_PUN_TOWER B_GYM ROOM___OutDirection":                                         "Tower B GYM",
  "APAC_IN_PUN_TOWER B_SITE OPS STORE___InDirection":                    "Tower B",

 // ----- APAC-wide (from your Excel file) -----
  // Kuala Lumpur
  "APAC_MY_KL_MAIN ENTRANCE DOOR___InDirection":    "Kuala Lumpur",
  "APAC_MY_KL_MAIN ENTRANCE DOOR___OutDirection":  "Out of office",
  "APAC_MY_KL_INTERIOR RECEPTION DOOR___InDirection":"Kuala Lumpur",
  "APAC_MY_KL_INTERIOR RECEPTION DOOR___OutDirection":"Kuala Lumpur",
  "APAC_MY_KL_SIDE ENTRANCE DOOR NEW___InDirection":"Kuala Lumpur",
  "APAC_MY_KL_SIDE ENTRANCE DOOR NEW___OutDirection":"Kuala Lumpur",
  "APAC_MY_KL_PANTRY ENTRANCE DOOR NEW___InDirection":"Kuala Lumpur",
  "APAC_MY_KL_PANTRY ENTRANCE DOOR NEW___OutDirection":"Kuala Lumpur",
  "APAC_MY_KL_SERVER ROOM DOOR___InDirection":     "Kuala Lumpur",
  "APAC_MY_KL_SERVER ROOM DOOR___OutDirection":    "Kuala Lumpur",

  // Tokyo
  "APAC_JPN_Tokyo_7th FLRSide Entrance___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLRSide Entrance___OutDirection":"Out of office",
  "APAC_JPN_Tokyo_7th FLR_IT Room___InDirection":     "Tokyo",
  "APAC_JPN_Tokyo_7th FLR_IT Room___OutDirection":    "Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Main Entrance___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Main Entrance___OutDirection":"Out of office",
  "APAC_JPN_Tokyo_7th FLR_Office Entrance___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Office Entrance___OutDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Side Entrance to Back Office___InDirection":"Tokyo",
  "APAC_JPN_Tokyo_7th FLR_Side Entrance to Back Office___OutDirection":"Out of office",

  // Manila (6th & 7th Floor)
  "APAC_PH_Manila_6th Floor Enrty Door 1___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor Enrty Door 1___OutDirection":"Out of office",
  "APAC_PH_Manila_6th Floor Open Office 2___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor Open Office 2___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Entry Door 2___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Entry Door 2___OutDirection":"Out of office",
  "APAC_PH_Manila_6th Floor_Entry Door 3___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Entry Door 3___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Exit Corridor___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Exit Corridor___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_IDF Restricted Door___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_IDF Restricted Door___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Mothers Room___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Mothers Room___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Print Area___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_Print Area___OutDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_UPS/Switch Restricted Door___InDirection":"6th Floor",
  "APAC_PH_Manila_6th Floor_UPS/Switch Restricted Door___OutDirection":"6th Floor",

  "APAC_PH_Manila_7th Floor_Directors Office-708___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Directors Office-708___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Exit Corridore-704___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Exit Corridore-704___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_IT Work Room  725___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_IT Work Room  725___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_MDF-726 Restricted Door___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_MDF-726 Restricted Door___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 1-721___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 1-721___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 2-721___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Open Office Door 2-721___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Pantry-720a___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Pantry-720a___OutDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Recption Door 1-701___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Recption Door 1-701___OutDirection":"Out of office",
  "APAC_PH_Manila_7th Floor_Recption Door 2-701___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Recption Door 2-701___OutDirection":"Out of office",
  "APAC_PH_Manila_7th Floor_Security Room-723___InDirection":"7th Floor",
  "APAC_PH_Manila_7th Floor_Security Room-723___OutDirection":"7th Floor",

  // PI Manila DR (Taguig)
  "APAC_PI_Manila_DR_MainEntrance___InDirection":"Taguig",
  "APAC_PI_Manila_DR_MainEntrance___OutDirection":"Out of office",
  "APAC_PI_Manila_DR_OfficeLobby___InDirection":"Taguig",
  "APAC_PI_Manila_DR_OfficeLobby___OutDirection":"Out of office",
  "APAC_PI_Manila_DR_Server Restricted Door___InDirection":"Taguig",
  "APAC_PI_Manila_DR_Server Restricted Door___OutDirection":"Taguig",
  "APAC_PI_Manila_DR_StorageRm___InDirection":"Taguig",
  "APAC_PI_Manila_DR_StorageRm___OutDirection":"Taguig",
  "APAC_PI_Manila_Emerg Exit Dr- Lobby___InDirection":"Taguig",
  "APAC_PI_Manila_Emerg Exit Dr- Lobby___OutDirection":"Taguig",
  "APAC_PI_Manila_Emgerg DR_Storage RM___InDirection":"Taguig",
  "APAC_PI_Manila_Emgerg DR_Storage RM___OutDirection":"Taguig",




// --- Manila 7th Floor Reception Doors ---
"APAC_PH_Manila_7th Floor Recption Door 1-701___InDirection":    "7th Floor",
"APAC_PH_Manila_7th Floor Recption Door 1-701___OutDirection":   "Out of office",

"APAC_PH_Manila_7th Floor Recption Door 2-701___InDirection":    "7th Floor",
"APAC_PH_Manila_7th Floor Recption Door 2-701___OutDirection":   "Out of office",

// --- Manila 7th Floor Open Office Door 2-721 ---
"APAC_PH_Manila_7th Floor Open Office Door 2-721___InDirection":  "7th Floor",
"APAC_PH_Manila_7th Floor Open Office Door 2-721___OutDirection": "7th Floor",

// --- Manila 7th Floor IT Work Room  725 & Security Room 723 ---
"APAC_PH_Manila_7th Floor IT Work Room  725___InDirection":      "7th Floor",
"APAC_PH_Manila_7th Floor IT Work Room  725___OutDirection":     "7th Floor",

"APAC_PH_Manila_7th Floor Security Room-723___InDirection":      "7th Floor",
"APAC_PH_Manila_7th Floor Security Room-723___OutDirection":     "7th Floor",

// --- Manila 6th Floor variants ---
"APAC_PH_Manila_6th Floor Enrty Door 1___InDirection":           "6th Floor",
"APAC_PH_Manila_6th Floor Enrty Door 1___OutDirection":          "Out of office",

"APAC_PH_Manila_6th Floor Print Area___InDirection":             "6th Floor",
"APAC_PH_Manila_6th Floor Print Area___OutDirection":            "6th Floor",

"APAC_PH_Manila_6th Floor Entry Door 2___InDirection":           "6th Floor",
"APAC_PH_Manila_6th Floor Entry Door 2___OutDirection":          "Out of office",

"APAC_PH_Manila_6th Floor Entry Door 3___InDirection":           "6th Floor",
"APAC_PH_Manila_6th Floor Entry Door 3___OutDirection":          "6th Floor",

// --- Pune Tower B Lift Lobby Door (OutDirection) ---
"APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection":            "Out of office",

// --- Pune Turnstile 1 Exit Door (normalize the hyphen) ---
"APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1 OUT DOOR___OutDirection":    "Out of office",

// --- Taguig Main Entrance Door (InDirection) ---
"APAC_PI_Manila_DR_MainEntrance___InDirection":                  "Taguig",
"APAC_PI_Manila_DR_MainEntrance___OutDirection":                 "Out of office",

// --- Tokyo 7th Floor Office Entrance (OutDirection) ---
"APAC_JPN_Tokyo_7th FLR Office Entrance___OutDirection":        "Out of office",

};




// 2) zone → floor
const zoneFloorMap = {

  "Red Zone":                    "Podium Floor",
  "Yellow Zone":                 "Podium Floor",
  "Reception Area":              "Podium Floor",
  "Green Zone":                  "Podium Floor",
  "Orange Zone":                 "Podium Floor",
  "Gsoc Zone":                   "Podium Floor",
  "Assembly Area":               "Podium Floor",
  "Red":"Podium Floor",

  // 2nd Floor
  "2nd Floor, Pune":             "2nd Floor",

  // Tower B
  "Tower B":                     "Tower B",
  "Reception Area Tower B":      "Tower B",
  "Tower B GYM":                 "Tower B",

  // Outer‐Area variants (same floors as their base zones)
  "Red Zone - Outer Area":               "Podium Floor",
  "Yellow Zone - Outer Area":            "Podium Floor",
  "Reception Area - Outer Area":         "Podium Floor",
  "Green Zone - Outer Area":             "Podium Floor",
  "Orange Zone - Outer Area":            "Podium Floor",
  "Assembly Area - Outer Area":          "Podium Floor",
  "2nd Floor, Pune - Outer Area":        "2nd Floor",
  "Tower B - Outer Area":                "Tower B",
  "Reception Area Tower B - Outer Area": "Tower B",
  "Tower B GYM - Outer Area":            "Tower B",

  // True “Out of office” eviction (we filter these out in the controller)
  

  "Kuala Lumpur":             "Kuala Lumpur",
  "6th Floor":                "6th Floor",
  "7th Floor":                "7th Floor",
  "Tokyo":                    "Tokyo",
  "Taguig":                   "Taguig",
  // All true “Out of office” go to Unknown:
  "Out of office":            null
};


// 3) How to derive partition for PartitionName2
// 3) Partition → friendly name
const partitionMap = {
  'APAC_IN_PUN':    'Pune',
  'APAC_PH_Manila': 'Quezon City',
  'APAC_JPN_Tokyo': 'JP.Tokyo',
  'APAC_MY_KL':     'MY.Kuala Lumpur',
  'APAC_PI_Manila': 'Taguig City'
};



function normalizeDoorName(name) {
  return name
    .replace(/[_/]/g, ' ')                      // underscores/slashes → spaces
    .replace(/[^\w\s-]/g, '')                   // drop punctuation except hyphens
    .replace(/\bRECPTION\b/gi, 'RECEPTION')     // typo fix
    .replace(/\bENRTY\b|\bENTRTY\b/gi, 'ENTRY') // typo fix
   // strip any trailing 6-digit hex string (e.g. "10054B")
   .replace(/\b[0-9A-F]{6}\b$/, '')
    .replace(/[\s-]+/g, ' ')                    // collapse spaces & hyphens
    .toUpperCase()
    .trim();
}



// 5) Build normalized door→zone lookup
const normalizedDoorZoneMap = Object.entries(doorZoneMap).reduce((acc, [rawKey, zone]) => {
  const [rawDoor, direction] = rawKey.split('___');
  const normKey = `${normalizeDoorName(rawDoor)}___${direction}`;
  acc[normKey] = zone;
  return acc;
}, {});

// 6) Build per-partition doorMap entries
const doorMap = Object.entries(doorZoneMap).reduce((acc, [rawKey, zone]) => {
  const [rawDoor, direction] = rawKey.split('___');
  const prefix    = rawDoor.split('_').slice(0,3).join('_');
  const partition = partitionMap[prefix] || prefix;
  const floor     = zoneFloorMap[zone]  || 'Unknown';

  if (!acc[rawDoor]) {
    acc[rawDoor] = {
      partition,
      door: rawDoor,
      inDirectionFloor:  null,
      outDirectionFloor: null,
      normalizedDoor:    normalizeDoorName(rawDoor)
    };
  }
  if (direction === 'InDirection')  acc[rawDoor].inDirectionFloor  = floor;
  else                              acc[rawDoor].outDirectionFloor = floor;

  return acc;
}, {});

// 7) Export
module.exports = {
  doorZoneMap,
  normalizedDoorZoneMap,
  zoneFloorMap,
  doorMap: Object.values(doorMap),
  normalizeDoorName
};








C:\Users\W0024618\Desktop\apac-occupancy-backend\src\app.js



// src/app.js
const express           = require('express');
const cors              = require('cors');
const occupancyRoutes   = require('./routes/occupancy.routes');

const app = express();
app.use(express.json());
app.use(cors());

// Health check
app.get('/', (_req,res) => res.send('🌏 APAC Occupancy API Running'));

// Mount occupancy
app.use('/api/occupancy', occupancyRoutes);

module.exports = app;








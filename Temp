// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_HOST = `http://localhost:${BACKEND_PORT}`;

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Keep single copies of MUI/emotion to avoid runtime errors such as
      // "createTheme_default is not a function" caused by duplicate copies.
      '@mui/material': path.resolve(__dirname, 'node_modules/@mui/material'),
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    }
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // Proxy '/api/*' to backend, removing the '/api' prefix
      '/api': {
        target: BACKEND_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (p) => p.replace(/^\/api/, ''),
        timeout: 120000
      }
    }
  }
});











// frontend/src/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: '/api',         // frontend calls '/api/...' and vite proxy rewrites it
  timeout: 120000,
  headers: {
    'Accept': 'application/json',
  }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    // friendly log for dev
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;










// frontend/src/pages/GlobalPage.jsx
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Typography,
  CircularProgress,
  IconButton,
  Button,
  Paper,
  Divider,
  LinearProgress,
  Snackbar,
  Alert
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import DescriptionIcon from '@mui/icons-material/Description';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import MapChart from '../components/MapChart.jsx';
import api from '../api'; // <- use centralized axios instance
import { useNavigate, Link } from 'react-router-dom';

const REGION_PARTITIONS = {
  apac: ['Pune', 'Quezon City', 'Taguig City', 'JP.Tokyo', 'MY.Kuala Lumpur', 'Tokyo', 'Quezon', 'Taguig'],
  emea: ['Vilnius', 'Casablanca', 'Vienna', 'Dublin', 'Abu Dhab', 'Madrid', 'Rome', 'Moscow', 'London', 'IE.Dublin', 'LT.Vilnius', 'MA.Casablanca', 'AUT.Vienna'],
  laca: ['Costa Rica', 'Mexico City', 'Sao Paulo', 'Lima', 'Cordoba', 'CR.Costa Rica Partition', 'MX.Mexico City', 'BR.Sao Paulo', 'AR.Cordoba', 'PE.Lima'],
  namer: ['Denver', 'US.NYC', 'US.FL.Miami', 'USA/Canada Default', 'Austin', 'Miami', 'New York']
};

function regionFromPartition(partition) {
  if (!partition) return null;
  const p = String(partition);
  // quick contains matching
  for (const [region, parts] of Object.entries(REGION_PARTITIONS)) {
    for (const candidate of parts) {
      if (p.includes(candidate) || p.toLowerCase().includes(candidate.toLowerCase())) {
        return region;
      }
    }
  }
  return null;
}

export default function GlobalPage() {
  const navigate = useNavigate();

  const [counts, setCounts] = useState(null);
  const [selected, setSelected] = useState('global');

  const [averages, setAverages] = useState(null);
  const [loadingAverages, setLoadingAverages] = useState(true);
  const [averagesError, setAveragesError] = useState(null);

  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  const fileInputEmpRef = useRef();
  const fileInputContrRef = useRef();
  const [snack, setSnack] = useState({ open: false, severity: 'info', message: '' });

  // fetch headcount totals (robust)
  useEffect(() => {
    let mounted = true;
    const defaultCounts = { apac: 0, emea: 0, laca: 0, namer: 0 };

    const mapFromAverages = (averagesObj) => {
      // If backend returns per-location breakdowns we try to map partitions to regions
      const byLocation = averagesObj?.headcount?.by_location || averagesObj?.live_headcount?.by_location || {};
      const perRegion = { apac: 0, emea: 0, laca: 0, namer: 0 };
      for (const [part, stats] of Object.entries(byLocation)) {
        const region = regionFromPartition(part) || regionFromPartition(part.split('.')[0]) || null;
        if (region) {
          perRegion[region] = perRegion[region] + (stats?.total || 0);
        } else {
          // if unknown, attempt a heuristic: Pune/Philippines -> apac etc.
          const pLower = part.toLowerCase();
          if (pLower.includes('pune') || pLower.includes('philipp') || pLower.includes('tokyo') || pLower.includes('taguig')) {
            perRegion.apac += (stats?.total || 0);
          } else if (pLower.includes('vilnius') || pLower.includes('vienna') || pLower.includes('casablanca') || pLower.includes('dublin') || pLower.includes('rome')) {
            perRegion.emea += (stats?.total || 0);
          } else if (pLower.includes('mexico') || pLower.includes('costa') || pLower.includes('buenos') || pLower.includes('lima')) {
            perRegion.laca += (stats?.total || 0);
          } else if (pLower.includes('denver') || pLower.includes('miami') || pLower.includes('new york') || pLower.includes('austin')) {
            perRegion.namer += (stats?.total || 0);
          } else {
            // last resort: put into namer
            perRegion.namer += (stats?.total || 0);
          }
        }
      }
      return perRegion;
    };

    const fetchCounts = async () => {
      try {
        // primary: try /api/headcount (expected)
        const res = await api.get('/headcount');
        if (!mounted) return;
        // Expecting { apac: n, emea: n, laca: n, namer: n } — be defensive
        const d = res.data;
        if (d && typeof d === 'object' && ('apac' in d || 'emea' in d || 'laca' in d || 'namer' in d)) {
          setCounts({
            apac: Number(d.apac || 0),
            emea: Number(d.emea || 0),
            laca: Number(d.laca || 0),
            namer: Number(d.namer || 0),
          });
          return;
        }
        // fallback: maybe the backend returned an object like { totals: { ... } }
        if (d && d.totals && typeof d.totals === 'object') {
          setCounts({
            apac: Number(d.totals.apac || 0),
            emea: Number(d.totals.emea || 0),
            laca: Number(d.totals.laca || 0),
            namer: Number(d.totals.namer || 0),
          });
          return;
        }
        // otherwise fallback to computing from ccure/averages
        throw new Error('Unexpected headcount shape — falling back');
      } catch (err) {
        console.warn('[fetchCounts] /api/headcount failed, falling back to /api/ccure/averages:', err.message || err);
        try {
          const res2 = await api.get('/ccure/averages');
          if (!mounted) return;
          const r = res2.data;
          // try to extract a regional breakdown
          const mapped = mapFromAverages(r);
          setCounts(mapped);
        } catch (err2) {
          console.error('[fetchCounts fallback] /api/ccure/averages failed', err2);
          // Finally, set safe defaults (don’t set to null — keep previous if any)
          setCounts(prev => prev || defaultCounts);
        }
      }
    };

    fetchCounts();
    const id = setInterval(fetchCounts, 15000);
    return () => {
      mounted = false;
      clearInterval(id);
    };
  }, []);

  // fetch ccure averages + stats
  useEffect(() => {
    let mounted = true;
    async function fetchAverages() {
      setLoadingAverages(true);
      setAveragesError(null);
      try {
        const res = await api.get('/ccure/averages');
        if (!mounted) return;
        setAverages(res.data);
      } catch (err) {
        console.error('Failed to fetch ccure averages', err);
        if (!mounted) return;
        setAveragesError(err);
      } finally {
        if (mounted) setLoadingAverages(false);
      }
    }
    fetchAverages();
    const id = setInterval(fetchAverages, 30000);
    return () => {
      mounted = false;
      clearInterval(id);
    };
  }, []);

  // upload helper
  const handleUpload = async (file, type) => {
    if (!file) return;
    const endpoint = type === 'employee' ? '/upload/active-employees' : '/upload/active-contractors';
    const fd = new FormData();
    fd.append('file', file, file.name);
    setUploading(true);
    setUploadResult(null);
    setUploadError(null);
    try {
      const res = await api.post(endpoint, fd, {
        headers: { 'Content-Type': 'multipart/form-data' },
        timeout: 120000
      });
      setUploadResult(res.data);
      setSnack({ open: true, severity: 'success', message: `Upload successful: ${file.name}` });
      // refresh small parts after upload
      try { const r = await api.get('/ccure/averages'); setAverages(r.data); } catch (_) {}
      try { const r2 = await api.get('/headcount'); setCounts(r2.data); } catch (_) {}
    } catch (err) {
      console.error('Upload failed', err);
      setUploadError(err);
      setSnack({ open: true, severity: 'error', message: `Upload failed: ${file.name}` });
    } finally {
      setUploading(false);
    }
  };

  const onChooseEmployeeFile = (e) => {
    const f = e.target.files && e.target.files[0];
    if (f) handleUpload(f, 'employee');
    e.target.value = null;
  };
  const onChooseContractorFile = (e) => {
    const f = e.target.files && e.target.files[0];
    if (f) handleUpload(f, 'contractor');
    e.target.value = null;
  };

  const safe = (path, fallback = null) => {
    if (!averages) return fallback;
    try {
      return path.split('.').reduce((a, k) => (a && a[k] !== undefined) ? a[k] : fallback, averages);
    } catch {
      return fallback;
    }
  };

  const liveEmployee = safe('live_today.employee', safe('live_headcount.employee', null));
  const liveContractor = safe('live_today.contractor', safe('live_headcount.contractor', null));
  const liveTotalReported = safe('live_today.total_reported', safe('live_headcount.currently_present_total', null));
  const liveTotalDetails = safe('live_today.total_from_details', null);

  const ccureActiveEmployees = safe('ccure_active.active_employees', safe('ccure_active.ccure_active_employees_reported', null));
  const ccureActiveContractors = safe('ccure_active.active_contractors', safe('ccure_active.ccure_active_contractors_reported', null));

  const empPct = safe('averages.employee_pct', safe('averages.head_emp_pct_vs_ccure_today', null));
  const conPct = safe('averages.contractor_pct', safe('averages.head_contractor_pct_vs_ccure_today', null));
  const overallPct = safe('averages.overall_pct', safe('averages.headcount_overall_pct_vs_ccure_today', null));

  const avg7 = safe('averages.avg_headcount_last_7_days', safe('averages.history_avg_overall_last_7_days', null));

  // Render
  if (!counts) {
    return (
      <Box display="flex" justifyContent="center" mt={6}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh', overflow: 'hidden' }}>
      {/* Header */}
      <Box
        px={2}
        py={1}
        sx={{
          backgroundColor: 'black',
          color: '#fff',
          borderBottom: '4px solid #FFD700',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
        }}
      >
        <Box>
          <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}>
            <HomeIcon fontSize="medium" />
          </IconButton>
          <IconButton component={Link} to="/reports" sx={{ color: '#FFC72C', ml: 1 }}>
            <DescriptionIcon fontSize="medium" />
          </IconButton>
        </Box>

        <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <Box component="img" src="/wu-head-logo.png" alt="WU Logo" sx={{ height: { xs: 30, md: 55 }, mr: 2 }} />
          <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
            Global Headcount Dashboard
          </Typography>
        </Box>

        <Box sx={{ width: 120 }} />
      </Box>

      {/* Region Cards */}
      <Box sx={{ display: 'flex', gap: 2, p: 2, flexWrap: 'wrap', justifyContent: 'center' }}>
        {[
          { key: 'apac', label: 'APAC', url: 'http://10.199.22.57:3000/', textColor: '#f5650c' },
          { key: 'emea', label: 'EMEA', url: 'http://10.199.22.57:3001/', textColor: '#11e6ed' },
          { key: 'laca', label: 'LACA', url: 'http://10.199.22.57:3003/', textColor: '#FF2DD1' },
          { key: 'namer', label: 'NAMER', url: 'http://10.199.22.57:3002/', textColor: '#a6e61c' },
        ].map(region => (
          <Box
            key={region.key}
            onClick={() => { window.location.href = region.url; }}
            sx={{
              cursor: 'pointer',
              width: 200,
              height: 80,
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              border: '4px solid rgba(255, 204, 0, 0.89)',
              borderRadius: 2,
              boxShadow: 3,
              color: region.textColor,
              '&:hover': { opacity: 0.9 },
            }}
          >
            <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: region.textColor, fontSize: { xs: '1.3rem' } }}>
              {region.label}
            </Typography>
            <Typography variant="h3" sx={{ fontWeight: 700, fontSize: { xs: '1.5rem', sm: '1.8rem' }, color: region.textColor }}>
              {typeof counts[region.key] === 'number' ? counts[region.key] : 0}
            </Typography>
          </Box>
        ))}
      </Box>

      {/* Main content */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        <Box sx={{ width: 360, p: 2, bgcolor: 'background.paper', borderRight: '1px solid rgba(255,255,255,0.06)', overflowY: 'auto' }}>
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Live vs CCURE Summary</Typography>

          {loadingAverages ? (
            <Box sx={{ py: 2 }}><LinearProgress /></Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load CCURE averages</Alert>
          ) : averages ? (
            <>
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">CCURE Active (reported)</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 700 }}>{ccureActiveEmployees ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Employees</Typography>
                  </Box>
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="h5" sx={{ fontWeight: 700 }}>{ccureActiveContractors ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Contractors</Typography>
                  </Box>
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="subtitle2" color="text.secondary">Live Today</Typography>
                  <Typography variant="caption" color="text.secondary">{averages.date ?? ''}</Typography>
                </Box>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 700 }}>{liveEmployee ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Employee</Typography>
                  </Box>
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 700 }}>{liveContractor ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Contractor</Typography>
                  </Box>
                </Box>

                <Divider sx={{ my: 1 }} />

                <Box>
                  <Typography variant="caption" color="text.secondary">Totals</Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                    <Typography variant="body2">Reported total</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveTotalReported ?? '—'}</Typography>
                  </Box>
                  {liveTotalDetails != null && (
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                      <Typography variant="body2">Detail rows total</Typography>
                      <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveTotalDetails}</Typography>
                    </Box>
                  )}
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">Percentages vs CCURE</Typography>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">Employees</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{empPct != null ? `${empPct}%` : '—'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="body2">Contractors</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{conPct != null ? `${conPct}%` : '—'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                  <Typography variant="body2">Overall</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{overallPct != null ? `${overallPct}%` : '—'}</Typography>
                </Box>

                <Divider sx={{ my: 1 }} />
                <Typography variant="caption" color="text.secondary">Averages</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">7-day avg headcount</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{avg7 ?? '—'}</Typography>
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary" sx={{ mb: 1 }}>Upload Active Sheets</Typography>

                <input type="file" accept=".xls,.xlsx" style={{ display: 'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
                <Button variant="contained" startIcon={<UploadFileIcon />} sx={{ mr: 1 }} onClick={() => fileInputEmpRef.current && fileInputEmpRef.current.click()} disabled={uploading}>
                  Upload Employees
                </Button>

                <input type="file" accept=".xls,.xlsx" style={{ display: 'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
                <Button variant="outlined" startIcon={<UploadFileIcon />} onClick={() => fileInputContrRef.current && fileInputContrRef.current.click()} disabled={uploading}>
                  Upload Contractors
                </Button>

                {uploading && <Box sx={{ mt: 1 }}><LinearProgress /></Box>}
                {uploadResult && <Typography variant="caption" color="success.main" sx={{ mt: 1, display: 'block' }}>Upload OK</Typography>}
                {uploadError && <Typography variant="caption" color="error.main" sx={{ mt: 1, display: 'block' }}>Upload error</Typography>}
              </Paper>

              {averages.notes && (
                <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }}>
                  <Typography variant="caption" color="text.secondary">Notes</Typography>
                  <Typography variant="body2" sx={{ mt: 1 }}>{averages.notes}</Typography>
                </Paper>
              )}
            </>
          ) : (
            <Typography variant="body2" color="text.secondary">No data</Typography>
          )}
        </Box>

        <Box sx={{ flex: 1, height: '100%', position: 'relative' }}>
          <MapChart selected={selected} onClickSite={r => setSelected(r)} initialZoom={1.8} />
        </Box>
      </Box>

      <Snackbar
        open={snack.open}
        autoHideDuration={3500}
        onClose={() => setSnack(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snack.severity} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>
          {snack.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}




















Check Both Previous file and Current File and Fix issue 
When i upadte below file after certailn time Ui refresh automaticallyv and region card dont display any data 
fix this error carefullly


Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
:5173/api/headcount:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError
(anonymous) @ GlobalPage.jsx:244Understand this error
GlobalPage.jsx:239  GET http://localhost:5173/api/headcount 404 (Not Found)
dispatchXhrRequest @ axios.js?v=0d73aa9e:1683
xhr @ axios.js?v=0d73aa9e:1563
dispatchRequest @ axios.js?v=0d73aa9e:2038
_request @ axios.js?v=0d73aa9e:2259
request @ axios.js?v=0d73aa9e:2150
Axios.<computed> @ axios.js?v=0d73aa9e:2278
wrap @ axios.js?v=0d73aa9e:8
fetchCounts @ GlobalPage.jsx:239Understand this error
GlobalPage.jsx:244 Failed to fetch headcounts AxiosError {message: 'Request failed with status code 404', name: 'AxiosError', code: 'ERR_BAD_REQUEST', config: {…}, request: XMLHttpRequest, …}




// // frontend/vite.config.js
// import { defineConfig } from 'vite';
// import react from '@vitejs/plugin-react';
// import path from 'path';

// export default defineConfig({
//   plugins: [react()],
//   // Points Vite at your shared /public folder
//   publicDir: path.resolve(__dirname, '../public'),
//   server: {
//     port: 5173,
//     // Serve index.html for all non-asset routes (SPA fallback)
//     historyApiFallback: true,
//     // Disable the HMR error overlay so you don't get that popup
//     hmr: {
//       overlay: false
//     },
//     proxy: {
//       // All API calls under /api will be forwarded to your backend
//       '/api': {
//         target: 'http://localhost:3008',
//         changeOrigin: true,
//         secure: false,
//       }
//     }
//   }
// });








//


// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Optional: helps prevent duplicate MUI/emotion copies causing createTheme_default issues
      '@mui/material': path.resolve(__dirname, 'node_modules/@mui/material'),
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    }
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // Proxy '/api/*' to your backend, removing the '/api' prefix so backend receives '/ccure/averages'
      '/api': {
        target: 'http://localhost:8000',     // <-- set to your backend port (e.g. 8000)
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''), // remove /api prefix
        // optional timeout
        timeout: 120000
      }
    }
  }
});









// src/pages/GlobalPage.jsx
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Typography,
  CircularProgress,
  IconButton,
  Button,
  Paper,
  Divider,
  LinearProgress,
  Snackbar,
  Alert
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import DescriptionIcon from '@mui/icons-material/Description';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import MapChart from '../components/MapChart.jsx';
import axios from 'axios';
import { useNavigate, Link } from 'react-router-dom';

export default function GlobalPage() {
  const navigate = useNavigate();

  // small state groups
  const [counts, setCounts] = useState(null);
  const [selected, setSelected] = useState('global');

  // averages / ccure
  const [averages, setAverages] = useState(null);
  const [loadingAverages, setLoadingAverages] = useState(true);
  const [averagesError, setAveragesError] = useState(null);

  // upload state
  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  const fileInputEmpRef = useRef();
  const fileInputContrRef = useRef();

  // snackbars
  const [snack, setSnack] = useState({ open: false, severity: 'info', message: '' });

  // fetch headcount totals (existing behaviour)
  useEffect(() => {
    let isMounted = true;
    const fetchCounts = () => {
      axios.get('/api/headcount')
        .then(res => {
          if (isMounted) setCounts(res.data);
        })
        .catch(err => {
          console.error('Failed to fetch headcounts', err);
          if (isMounted) setCounts({ apac: 0, emea: 0, laca: 0, namer: 0 });
        });
    };
    fetchCounts();
    const intervalId = setInterval(fetchCounts, 15000);
    return () => {
      isMounted = false;
      clearInterval(intervalId);
    };
  }, []);

  // fetch ccure averages + stats
  useEffect(() => {
    let mounted = true;
    async function fetchAverages() {
      setLoadingAverages(true);
      setAveragesError(null);
      try {
        const res = await axios.get('/api/ccure/averages');
        if (!mounted) return;
        // Some backends return nested naming — normalize for UI
        setAverages(res.data);
      } catch (err) {
        console.error('Failed to fetch ccure averages', err);
        if (!mounted) return;
        setAveragesError(err);
      } finally {
        if (mounted) setLoadingAverages(false);
      }
    }
    fetchAverages();
    const id = setInterval(fetchAverages, 30000); // refresh every 30s
    return () => {
      mounted = false;
      clearInterval(id);
    };
  }, []);

  // upload helper
  const handleUpload = async (file, type) => {
    if (!file) return;
    const endpoint = type === 'employee' ? '/api/upload/active-employees' : '/api/upload/active-contractors';
    const fd = new FormData();
    fd.append('file', file, file.name);
    setUploading(true);
    setUploadResult(null);
    setUploadError(null);
    try {
      const res = await axios.post(endpoint, fd, {
        headers: { 'Content-Type': 'multipart/form-data' },
        timeout: 120000
      });
      setUploadResult(res.data);
      setSnack({ open: true, severity: 'success', message: `Upload successful: ${file.name}` });
      // after successful upload, refresh averages and headcounts
      try { await axios.get('/api/ccure/averages').then(r => setAverages(r.data)); } catch(_) {}
      try { await axios.get('/api/headcount').then(r => setCounts(r.data)); } catch(_) {}
    } catch (err) {
      console.error('Upload failed', err);
      setUploadError(err);
      setSnack({ open: true, severity: 'error', message: `Upload failed: ${file.name}` });
    } finally {
      setUploading(false);
    }
  };

  // wire file inputs
  const onChooseEmployeeFile = (e) => {
    const f = e.target.files && e.target.files[0];
    if (f) handleUpload(f, 'employee');
    e.target.value = null;
  };
  const onChooseContractorFile = (e) => {
    const f = e.target.files && e.target.files[0];
    if (f) handleUpload(f, 'contractor');
    e.target.value = null;
  };

  // helper to safely read nested fields returned by backend
  const safe = (path, fallback = null) => {
    if (!averages) return fallback;
    try {
      return path.split('.').reduce((a, k) => (a && a[k] !== undefined) ? a[k] : fallback, averages);
    } catch {
      return fallback;
    }
  };

  // derived values for the UI (backward-compatible with previous responses)
  const liveEmployee = safe('live_today.employee', safe('live_headcount.employee', null));
  const liveContractor = safe('live_today.contractor', safe('live_headcount.contractor', null));
  const liveTotalReported = safe('live_today.total_reported', safe('live_headcount.currently_present_total', null));
  const liveTotalDetails = safe('live_today.total_from_details', null);

  const ccureActiveEmployees = safe('ccure_active.active_employees', safe('ccure_active.ccure_active_employees_reported', null));
  const ccureActiveContractors = safe('ccure_active.active_contractors', safe('ccure_active.ccure_active_contractors_reported', null));

  const empPct = safe('averages.employee_pct', safe('averages.head_emp_pct_vs_ccure_today', null));
  const conPct = safe('averages.contractor_pct', safe('averages.head_contractor_pct_vs_ccure_today', null));
  const overallPct = safe('averages.overall_pct', safe('averages.headcount_overall_pct_vs_ccure_today', null));

  const avg7 = safe('averages.avg_headcount_last_7_days', safe('averages.history_avg_overall_last_7_days', null));

  // Render
  if (!counts) {
    return (
      <Box display="flex" justifyContent="center" mt={6}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh', overflow: 'hidden' }}>
      {/* Header */}
      <Box
        px={2}
        py={1}
        sx={{
          backgroundColor: 'black',
          color: '#fff',
          borderBottom: '4px solid #FFD700',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
        }}
      >
        <Box>
          <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}>
            <HomeIcon fontSize="medium" />
          </IconButton>
          <IconButton component={Link} to="/reports" sx={{ color: '#FFC72C', ml: 1 }}>
            <DescriptionIcon fontSize="medium" />
          </IconButton>
        </Box>

        <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <Box component="img" src="/wu-head-logo.png" alt="WU Logo" sx={{ height: { xs: 30, md: 55 }, mr: 2 }} />
          <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
            Global Headcount Dashboard
          </Typography>
        </Box>

        <Box sx={{ width: 120 }} /> {/* spacer to keep header centered */}
      </Box>

      {/* Region Cards */}
      <Box sx={{ display: 'flex', gap: 2, p: 2, flexWrap: 'wrap', justifyContent: 'center' }}>
        {[
          { key: 'apac', label: 'APAC', url: 'http://10.199.22.57:3000/', textColor: '#f5650c' },
          { key: 'emea', label: 'EMEA', url: 'http://10.199.22.57:3001/', textColor: '#11e6ed' },
          { key: 'laca', label: 'LACA', url: 'http://10.199.22.57:3003/', textColor: '#FF2DD1' },
          { key: 'namer', label: 'NAMER', url: 'http://10.199.22.57:3002/', textColor: '#a6e61c' },
        ].map(region => (
          <Box
            key={region.key}
            onClick={() => { window.location.href = region.url; }}
            sx={{
              cursor: 'pointer',
              width: 200,
              height: 80,
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              border: '4px solid rgba(255, 204, 0, 0.89)',
              borderRadius: 2,
              boxShadow: 3,
              color: region.textColor,
              '&:hover': { opacity: 0.9 },
            }}
          >
            <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: region.textColor, fontSize: { xs: '1.3rem' } }}>
              {region.label}
            </Typography>
            <Typography variant="h3" sx={{ fontWeight: 700, fontSize: { xs: '1.5rem', sm: '1.8rem' }, color: region.textColor }}>
              {typeof counts[region.key] === 'number' ? counts[region.key] : 0}
            </Typography>
          </Box>
        ))}
      </Box>

      {/* Main content: left panel + map */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        {/* Left panel (fixed width) */}
        <Box sx={{ width: 360, p: 2, bgcolor: 'background.paper', borderRight: '1px solid rgba(255,255,255,0.06)', overflowY: 'auto' }}>
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Live vs CCURE Summary</Typography>

          {loadingAverages ? (
            <Box sx={{ py: 2 }}><LinearProgress /></Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load CCURE averages</Alert>
          ) : averages ? (
            <>
              {/* CCURE active totals */}
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">CCURE Active (reported)</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 700 }}>{ccureActiveEmployees ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Employees</Typography>
                  </Box>
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="h5" sx={{ fontWeight: 700 }}>{ccureActiveContractors ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Contractors</Typography>
                  </Box>
                </Box>
              </Paper>

              {/* Live / headcount summary */}
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="subtitle2" color="text.secondary">Live Today</Typography>
                  <Typography variant="caption" color="text.secondary">{averages.date ?? ''}</Typography>
                </Box>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 700 }}>{liveEmployee ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Employee</Typography>
                  </Box>
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 700 }}>{liveContractor ?? '—'}</Typography>
                    <Typography variant="caption" color="text.secondary">Contractor</Typography>
                  </Box>
                </Box>

                <Divider sx={{ my: 1 }} />

                <Box>
                  <Typography variant="caption" color="text.secondary">Totals</Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                    <Typography variant="body2">Reported total</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveTotalReported ?? '—'}</Typography>
                  </Box>
                  {liveTotalDetails != null && (
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                      <Typography variant="body2">Detail rows total</Typography>
                      <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveTotalDetails}</Typography>
                    </Box>
                  )}
                </Box>
              </Paper>

              {/* Percentages & averages */}
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">Percentages vs CCURE</Typography>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">Employees</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{empPct != null ? `${empPct}%` : '—'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="body2">Contractors</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{conPct != null ? `${conPct}%` : '—'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                  <Typography variant="body2">Overall</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{overallPct != null ? `${overallPct}%` : '—'}</Typography>
                </Box>

                <Divider sx={{ my: 1 }} />
                <Typography variant="caption" color="text.secondary">Averages</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">7-day avg headcount</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{avg7 ?? '—'}</Typography>
                </Box>
              </Paper>

              {/* Upload controls */}
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.03)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary" sx={{ mb: 1 }}>Upload Active Sheets</Typography>

                <input type="file" accept=".xls,.xlsx" style={{ display: 'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
                <Button variant="contained" startIcon={<UploadFileIcon />} sx={{ mr: 1 }} onClick={() => fileInputEmpRef.current && fileInputEmpRef.current.click()} disabled={uploading}>
                  Upload Employees
                </Button>

                <input type="file" accept=".xls,.xlsx" style={{ display: 'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
                <Button variant="outlined" startIcon={<UploadFileIcon />} onClick={() => fileInputContrRef.current && fileInputContrRef.current.click()} disabled={uploading}>
                  Upload Contractors
                </Button>

                {uploading && <Box sx={{ mt: 1 }}><LinearProgress /></Box>}
                {uploadResult && <Typography variant="caption" color="success.main" sx={{ mt: 1, display: 'block' }}>Upload OK</Typography>}
                {uploadError && <Typography variant="caption" color="error.main" sx={{ mt: 1, display: 'block' }}>Upload error</Typography>}
              </Paper>

              {/* Notes / diagnostics */}
              {averages.notes && (
                <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }}>
                  <Typography variant="caption" color="text.secondary">Notes</Typography>
                  <Typography variant="body2" sx={{ mt: 1 }}>{averages.notes}</Typography>
                </Paper>
              )}
            </>
          ) : (
            <Typography variant="body2" color="text.secondary">No data</Typography>
          )}
        </Box>

        {/* Map (flex) */}
        <Box sx={{ flex: 1, height: '100%', position: 'relative' }}>
          <MapChart selected={selected} onClickSite={r => setSelected(r)} initialZoom={1.8} />
        </Box>
      </Box>

      <Snackbar
        open={snack.open}
        autoHideDuration={3500}
        onClose={() => setSnack(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snack.severity} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>
          {snack.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}
















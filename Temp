Issue is Here 



// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PY_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_PY_HOST = `http://localhost:${BACKEND_PY_PORT}`; // Python (ccure)
const NODE_BACKEND = 'http://localhost:3008';                 // Node (headcount + other legacy endpoints)

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      '@mui/material': path.resolve(__dirname, 'node_modules/@mui/material'),
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    }
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // 1) Route CCURE-related API calls to Python backend and remove the /api prefix
      //    Example: /api/ccure/averages -> http://localhost:8000/ccure/averages
      '/api/ccure': {
        target: BACKEND_PY_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''), // remove leading /api
        timeout: 120000
      },

      // 2) All other /api/* calls go to the legacy Node backend (no rewrite)
      //    This preserves the previous working headcount behavior:
      //    /api/headcount -> http://localhost:3008/api/headcount
      '/api': {
        target: NODE_BACKEND,
        changeOrigin: true,
        secure: false,
        // NOTE: NO rewrite here so the '/api' prefix is kept
        timeout: 120000
      }
    }
  }
});












// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  // Points Vite at your shared /public folder
  publicDir: path.resolve(__dirname, '../public'),
  server: {
    port: 5173,
    // Serve index.html for all non-asset routes (SPA fallback)
    historyApiFallback: true,
    // Disable the HMR error overlay so you don't get that popup
    hmr: {
      overlay: false
    },
    proxy: {
      // All API calls under /api will be forwarded to your backend
      '/api': {
        target: 'http://localhost:3008',
        changeOrigin: true,
        secure: false,
      }
    }
  }
});




When i use this file We got Correct output like HaedCount logic is Working Perfect 

But ccure logic is not Working '

When I use 



//
// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const BACKEND_PORT = process.env.BACKEND_PORT || 8000;
const BACKEND_HOST = `http://localhost:${BACKEND_PORT}`;

export default defineConfig({
  plugins: [react()],
  publicDir: path.resolve(__dirname, '../public'),
  resolve: {
    alias: {
      // Keep single copies of MUI/emotion to avoid runtime errors such as
      // "createTheme_default is not a function" caused by duplicate copies.
      '@mui/material': path.resolve(__dirname, 'node_modules/@mui/material'),
      '@emotion/react': path.resolve(__dirname, 'node_modules/@emotion/react'),
      '@emotion/styled': path.resolve(__dirname, 'node_modules/@emotion/styled'),
    }
  },
  server: {
    port: 5173,
    hmr: { overlay: false },
    proxy: {
      // Proxy '/api/*' to backend, removing the '/api' prefix
      '/api': {
        target: BACKEND_HOST,
        changeOrigin: true,
        secure: false,
        rewrite: (p) => p.replace(/^\/api/, ''),
        timeout: 120000
      }
    }
  }
});




This logic Ccure -vs live Summary display but Headcount is not Display 
Keep both logic seprate seprate and fix both issue carefully


// frontend/src/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: '/api',         // frontend calls '/api/...' and vite proxy rewrites it
  timeout: 120000,
  headers: {
    'Accept': 'application/json',
  }
});

api.interceptors.response.use(
  (r) => r,
  (err) => {
    // friendly log for dev
    console.error('[API ERROR]', err?.config?.method?.toUpperCase(), err?.config?.url, err?.response?.status, err?.message);
    return Promise.reject(err);
  }
);

export default api;




[
  {
    "LocaleMessageTime": "2025-08-17T11:52:29.000Z",
    "ObjectName1": "Cantillon, Maricar Urrutia",
    "Door": "APAC_PH_Manila_7th Floor_Open Office Door 2-721",
    "PersonnelType": "Employee",
    "EmployeeID": "312523",
    "CardNumber": "418890",
    "PartitionName2": "Quezon City",
    "Direction": "InDirection",
    "Zone": "7th Floor",
    "Floor": "7th Floor"
  },
  {
    "LocaleMessageTime": "2025-08-17T09:43:40.000Z",
    "ObjectName1": "Minekar, Kisan",
    "Door": "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW",
    "PersonnelType": "Property Management",
    "EmployeeID": "",
    "CardNumber": "414240",
    "PartitionName2": "Pune",
    "Direction": "OutDirection",
    "Zone": "Orange Zone - Outer Area",
    "Floor": "Podium Floor"
  }
]










# app.py
from fastapi import FastAPI, UploadFile, File, HTTPException, Request
from fastapi.responses import JSONResponse
import shutil, uuid, json
from settings import UPLOAD_DIR, OUTPUT_DIR, LIVE_API_URL
from ingest_excel import ingest_employee_excel, ingest_contractor_excel
from compare_service import ingest_live_details_list, compute_daily_attendance, compare_with_active
import os

app = FastAPI(title="Attendance Analytics")

@app.post("/upload/active-employees")
async def upload_active_employees(file: UploadFile = File(...)):
    if not file.filename.endswith(('.xls', '.xlsx')):
        raise HTTPException(400, "Please upload an Excel file")
    dest = UPLOAD_DIR / f"{uuid.uuid4().hex}_{file.filename}"
    with open(dest, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    # ingest synchronously (small files)
    ingest_employee_excel(dest)
    return {"status":"ok", "path": str(dest)}

@app.post("/upload/active-contractors")
async def upload_active_contractors(file: UploadFile = File(...)):
    dest = UPLOAD_DIR / f"{uuid.uuid4().hex}_{file.filename}"
    with open(dest, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    ingest_contractor_excel(dest)
    return {"status":"ok", "path": str(dest)}

@app.post("/ingest/live-details")
async def ingest_live(request: Request):
    """
    Accepts:
      - JSON body: a raw array of detail objects
      - multipart/form-data form field 'details' containing JSON string
      - form body with a single JSON string
    """
    # 1) Try JSON body
    try:
        body = await request.json()
        # if body is a dict and contains 'details' key, use it
        if isinstance(body, dict) and 'details' in body:
            details = body['details']
        else:
            details = body
    except Exception:
        # 2) Not valid JSON — try form parsing (multipart/form-data)
        form = await request.form()
        # try 'details' field
        if 'details' in form:
            raw = form['details']
            if isinstance(raw, str):
                try:
                    details = json.loads(raw)
                except Exception as e:
                    raise HTTPException(status_code=400, detail=f"Invalid JSON in form field 'details': {e}")
            else:
                # could be UploadFile or list-like
                try:
                    # convert to a list if possible
                    details = list(raw)
                except Exception:
                    details = raw
        else:
            # fallback: if form contains a single string field that is JSON, parse it
            first = None
            for v in form.values():
                first = v
                break
            if first is None:
                raise HTTPException(status_code=400, detail="No JSON body or 'details' form field found")
            if isinstance(first, str):
                try:
                    details = json.loads(first)
                except Exception as e:
                    raise HTTPException(status_code=400, detail=f"Invalid JSON in form body: {e}")
            else:
                # non-string form value (unlikely)
                details = first

    # validate basic shape
    if not isinstance(details, (list, tuple)):
        raise HTTPException(status_code=400, detail="Expected an array of detail records (JSON list)")

    # persist
    try:
        ingest_live_details_list(details)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to ingest details: {e}")

    return {"status": "ok", "inserted": len(details)}

# convenience endpoint: fetch live-summary from configured region endpoints (calls Python region_clients)
@app.get("/ingest/fetch-all")
def fetch_all_and_ingest():
    try:
        from region_clients import fetch_all_details  # local import so module can be optional
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"region_clients unavailable: {e}")

    details = fetch_all_details()
    if not isinstance(details, list):
        raise HTTPException(status_code=500, detail="Unexpected data from region_clients.fetch_all_details")
    ingest_live_details_list(details)
    return {"status":"ok", "inserted": len(details)}

@app.get("/reports/daily/{yyyymmdd}")
def daily_report(yyyymmdd: str):
    import datetime
    dt = datetime.datetime.strptime(yyyymmdd, "%Y%m%d").date()
    compute_daily_attendance(dt)
    summary = compare_with_active(dt)
    return JSONResponse(summary)









# region_clients.py
import requests
from requests.exceptions import RequestException

endpoints = {
    "namer": "http://10.199.22.57:3006/api/occupancy/live-summary",
    "emea":  "http://10.199.22.57:3007/api/occupancy/live-summary",
    "laca":  "http://10.199.22.57:4000/api/occupancy/live-summary",
    "apac":  "http://10.199.22.57:3008/api/occupancy/live-summary"
}

def fetch_all_regions():
    """Return list of dicts: [{region: name, count: N}, ...]"""
    results = []
    for region, url in endpoints.items():
        try:
            r = requests.get(url, timeout=10)
            r.raise_for_status()
            data = r.json()
            realtime = data.get("realtime", {})
            total = sum((v.get("total", 0) for v in realtime.values()))
            results.append({"region": region, "count": int(total)})
        except RequestException as e:
            results.append({"region": region, "count": None})
    return results

def fetch_all_details():
    """
    Return flattened 'details' across regions, tagging each item with '__region'.
    """
    all_details = []
    for region, url in endpoints.items():
        try:
            r = requests.get(url, timeout=10)
            r.raise_for_status()
            data = r.json()
            details = data.get("details", [])
            for d in details:
                d_copy = dict(d)
                d_copy["__region"] = region
                all_details.append(d_copy)
        except RequestException:
            continue
    return all_details







# reports.py
import csv
from compare_service import compare_with_active
from datetime import datetime, date

def write_daily_location_csv(target_date: date, out_path: str):
    summary = compare_with_active(target_date)
    rows = summary.get("by_location", [])
    # write to CSV
    with open(out_path, "w", newline="", encoding="utf-8") as fh:
        writer = csv.DictWriter(fh, fieldnames=["location_city", "total_n", "present_n", "percent_present"])
        writer.writeheader()
        for r in rows:
            writer.writerow({
                "location_city": r.get("location_city"),
                "total_n": r.get("total_n"),
                "present_n": r.get("present_n"),
                "percent_present": r.get("percent_present")
            })
    return out_path







# ml/predict.py
from joblib import load
import os
import pandas as pd

MODEL_PATH = os.path.join(os.path.dirname(__file__), "isojob.joblib")

def score_features(df_features: pd.DataFrame):
    """
    Returns anomaly scores if model exists, otherwise returns None.
    df_features: DataFrame with same columns used during training (e.g. days_present, presence_rate)
    """
    if not os.path.exists(MODEL_PATH):
        return None
    clf = load(MODEL_PATH)
    preds = clf.predict(df_features)        # -1 anomaly, 1 normal
    scores = clf.decision_function(df_features)
    df = df_features.copy()
    df["pred"] = preds
    df["score"] = scores
    return df






Set-Content -Path .\region_clients.py -Value @"
# (paste the content of region_clients.py here)
"@ -Encoding utf8




uvicorn app:app --reload --host 0.0.0.0 --port 8000











Check Below each file line by line and fix the issue carefully..

Let See and Understand and go step by step

When i rum this 

http://localhost:8000/docs#/

Attendance Analytics
 0.1.0 
OAS 3.1
/openapi.json
default


POST
/upload/active-employees
Upload Active Employees


POST
/upload/active-contractors
Upload Active Contractors


POST
/ingest/live-details
Ingest Live


GET
/reports/daily/{yyyymmdd}
Daily Report


Schemas
Body_ingest_live_ingest_live_details_postCollapse allobject
detailsExpand allarray<any>
Body_upload_active_contractors_upload_active_contractors_postExpand allobject
Body_upload_active_employees_upload_active_employees_postExpand allobject
HTTPValidationErrorExpand allobject
ValidationErrorExpand allobject


we Got this 

(.venv) PS C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics> uvicorn app:app --reload --host 0.0.0.0 --port 8000
>>
INFO:     Will watch for changes in these directories: ['C:\\Users\\W0024618\\Desktop\\global-page\\backend\\attendance-analytics']
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [25516] using WatchFiles
INFO:     Started server process [14740]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     127.0.0.1:52102 - "GET /docs HTTP/1.1" 200 OK
INFO:     127.0.0.1:52102 - "GET /openapi.json HTTP/1.1" 200 OK
INFO:     127.0.0.1:52103 - "POST /ingest/live-details HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
  + Exception Group Traceback (most recent call last):
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py", line 409, in run_asgi
  |     result = await app(  # type: ignore[func-returns-value]
  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |         self.scope, self.receive, self.send
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 60, in __call__
  |     return await self.app(scope, receive, send)
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\applications.py", line 1054, in __call__
  |     await super().__call__(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\applications.py", line 113, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 186, in __call__
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 164, in __call__
  |     await self.app(scope, receive, _send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\exceptions.py", line 63, in __call__
  |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 716, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 736, in app
  |     await route.handle(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 290, in handle
  |     await self.app(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 78, in app
  |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 75, in app
  |     response = await f(request)
  |                ^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\routing.py", line 292, in app
  |     solved_result = await solve_dependencies(
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<6 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 666, in solve_dependencies
  |     ) = await request_body_to_args(  # body_params checked above
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<3 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 923, in request_body_to_args
  |     body_to_process = await _extract_form_body(fields_to_extract, received_body)
  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 893, in _extract_form_body
  |     async with anyio.create_task_group() as tg:
  |                ~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\anyio\_backends\_asyncio.py", line 772, in __aexit__
  |     raise BaseExceptionGroup(
  |         "unhandled errors in a TaskGroup", self._exceptions
  |     ) from None
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 895, in _extract_form_body
    |     tg.start_soon(process_fn, sub_value.read)
    |                               ^^^^^^^^^^^^^^
    | AttributeError: 'str' object has no attribute 'read'
    +------------------------------------
INFO:     127.0.0.1:52105 - "POST /ingest/live-details HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
  + Exception Group Traceback (most recent call last):
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py", line 409, in run_asgi
  |     result = await app(  # type: ignore[func-returns-value]
  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |         self.scope, self.receive, self.send
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 60, in __call__
  |     return await self.app(scope, receive, send)
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\applications.py", line 1054, in __call__
  |     await super().__call__(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\applications.py", line 113, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 186, in __call__
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 164, in __call__
  |     await self.app(scope, receive, _send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\exceptions.py", line 63, in __call__
  |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 716, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 736, in app
  |     await route.handle(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 290, in handle
  |     await self.app(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 78, in app
  |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 75, in app
  |     response = await f(request)
  |                ^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\routing.py", line 292, in app
  |     solved_result = await solve_dependencies(
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<6 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 666, in solve_dependencies
  |     ) = await request_body_to_args(  # body_params checked above
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<3 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 923, in request_body_to_args
  |     body_to_process = await _extract_form_body(fields_to_extract, received_body)
  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 893, in _extract_form_body
  |     async with anyio.create_task_group() as tg:
  |                ~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\anyio\_backends\_asyncio.py", line 772, in __aexit__
  |     raise BaseExceptionGroup(
  |         "unhandled errors in a TaskGroup", self._exceptions
  |     ) from None
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 895, in _extract_form_body
    |     tg.start_soon(process_fn, sub_value.read)
    |                               ^^^^^^^^^^^^^^
    | AttributeError: 'str' object has no attribute 'read'
    +------------------------------------
INFO:     127.0.0.1:52140 - "POST /ingest/live-details HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
  + Exception Group Traceback (most recent call last):
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py", line 409, in run_asgi
  |     result = await app(  # type: ignore[func-returns-value]
  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |         self.scope, self.receive, self.send
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 60, in __call__
  |     return await self.app(scope, receive, send)
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\applications.py", line 1054, in __call__
  |     await super().__call__(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\applications.py", line 113, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 186, in __call__
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 164, in __call__
  |     await self.app(scope, receive, _send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\exceptions.py", line 63, in __call__
  |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 716, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 736, in app
  |     await route.handle(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 290, in handle
  |     await self.app(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 78, in app
  |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 75, in app
  |     response = await f(request)
  |                ^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\routing.py", line 292, in app
  |     solved_result = await solve_dependencies(
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<6 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 666, in solve_dependencies
  |     ) = await request_body_to_args(  # body_params checked above
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<3 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 923, in request_body_to_args
  |     body_to_process = await _extract_form_body(fields_to_extract, received_body)
  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 893, in _extract_form_body
  |     async with anyio.create_task_group() as tg:
  |                ~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\anyio\_backends\_asyncio.py", line 772, in __aexit__
  |     raise BaseExceptionGroup(
  |         "unhandled errors in a TaskGroup", self._exceptions
  |     ) from None
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 895, in _extract_form_body
    |     tg.start_soon(process_fn, sub_value.read)
    |                               ^^^^^^^^^^^^^^
    | AttributeError: 'str' object has no attribute 'read'
    +------------------------------------
INFO:     127.0.0.1:52170 - "POST /upload/active-contractors HTTP/1.1" 200 OK
INFO:     127.0.0.1:52141 - "POST /upload/active-employees HTTP/1.1" 200 OK
INFO:     127.0.0.1:52141 - "POST /ingest/live-details HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
  + Exception Group Traceback (most recent call last):
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py", line 409, in run_asgi
  |     result = await app(  # type: ignore[func-returns-value]
  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |         self.scope, self.receive, self.send
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 60, in __call__
  |     return await self.app(scope, receive, send)
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\applications.py", line 1054, in __call__
  |     await super().__call__(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\applications.py", line 113, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 186, in __call__
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\errors.py", line 164, in __call__
  |     await self.app(scope, receive, _send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\middleware\exceptions.py", line 63, in __call__
  |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 716, in __call__
  |     await self.middleware_stack(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 736, in app
  |     await route.handle(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 290, in handle
  |     await self.app(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 78, in app
  |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
  |     raise exc
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
  |     await app(scope, receive, sender)
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\starlette\routing.py", line 75, in app
  |     response = await f(request)
  |                ^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\routing.py", line 292, in app
  |     solved_result = await solve_dependencies(
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<6 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 666, in solve_dependencies
  |     ) = await request_body_to_args(  # body_params checked above
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |     ...<3 lines>...
  |     )
  |     ^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 923, in request_body_to_args
  |     body_to_process = await _extract_form_body(fields_to_extract, received_body)
  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 893, in _extract_form_body
  |     async with anyio.create_task_group() as tg:
  |                ~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\anyio\_backends\_asyncio.py", line 772, in __aexit__
  |     raise BaseExceptionGroup(
  |         "unhandled errors in a TaskGroup", self._exceptions
  |     ) from None
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\.venv\Lib\site-packages\fastapi\dependencies\utils.py", line 895, in _extract_form_body
    |     tg.start_soon(process_fn, sub_value.read)
    |                               ^^^^^^^^^^^^^^
    |                               ^^^^^^^^^^^^^^
    |                               ^^^^^^^^^^^^^^
    |                               ^^^^^^^^^^^^^^
    | AttributeError: 'str' object has no attribute 'read'
    +------------------------------------
INFO:     127.0.0.1:52187 - "POST /upload/active-employees HTTP/1.1" 200 OK
INFO:     127.0.0.1:52187 - "POST /upload/active-contractors HTTP/1.1" 200 OK
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
INFO:     Finished server process [14740]
INFO:     Stopping reloader process [25516]
(.venv) PS C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics>





Why this Happen Go step by step and solve issue one by one and Generate output one by one 

also i have review like you are not mention APi endpont for access live Summay 
 namer: 'http://10.199.22.57:3006/api/occupancy/live-summary',
  emea:  'http://10.199.22.57:3007/api/occupancy/live-summary',
  laca:  'http://10.199.22.57:4000/api/occupancy/live-summary',
  apac:  'http://10.199.22.57:3008/api/occupancy/live-summary'

This API...
// backend/services/regionClients.js

import axios from 'axios';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import { createRequire } from 'module';

// ── Enable require() for our CJS doorMap helpers
const require = createRequire(import.meta.url);
const {
  normalizeDoorName,
  getDisplayPartition,
  lookupFloor,
  partitionMap
} = require('../utils/doorMap.js');

// ── Setup __dirname for ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname  = dirname(__filename);

// ── Load VIP list once
const vipListPath = resolve(__dirname, '../config/vip.json');
const vipList     = JSON.parse(readFileSync(vipListPath, 'utf8'));
const vipIds      = new Set(vipList.map(v => v.id));

// ── Region endpoints
export const endpoints = {
  namer: 'http://10.199.22.57:3006/api/occupancy/live-summary',
  emea:  'http://10.199.22.57:3007/api/occupancy/live-summary',
  laca:  'http://10.199.22.57:4000/api/occupancy/live-summary',
  apac:  'http://10.199.22.57:3008/api/occupancy/live-summary'
};

/**
 * Fetch each region’s live‐summary and return totals per region.
 */
export async function fetchAllRegions() {
  const results = await Promise.all(
    Object.entries(endpoints).map(async ([region, url]) => {
      try {
        const { data } = await axios.get(url);
        const realtime = data?.realtime;
        if (realtime && typeof realtime === 'object') {
          const total = Object.values(realtime)
            .map(site => (typeof site.total === 'number' ? site.total : 0))
            .reduce((sum, n) => sum + n, 0);
          return { region, count: total };
        }
        console.warn(`No realtime for ${region}`, data);
        return { region, count: null };
      } catch (err) {
        console.error(`Error fetching ${region} @ ${url}:`, err.message);
        return { region, count: null };
      }
    })
  );
  return results;
}

/**
 * Fetch each region’s live‐summary details array,
 * tagging each with its region, and flattening.
 */
export async function fetchAllDetails() {
  const calls = await Promise.all(
    Object.entries(endpoints).map(async ([region, url]) => {
      try {
        const { data } = await axios.get(url);
        return (data.details || []).map(d => ({ ...d, __region: region }));
      } catch (err) {
        console.error(`Error fetching details from ${region}@${url}:`, err.message);
        return [];
      }
    })
  );
  return calls.flat();
}

/**
 * From all detail records:
 *  - keep only VIP swipes,
 *  - normalize door names,
 *  - map to friendly partition & precise floor,
 *  - drop any “Out of office” (floor === null),
 *  - format location as "Pune – Podium Floor", etc.
 */
export async function fetchVipSwipes() {
  const all = await fetchAllDetails();

  return all
    .filter(d => vipIds.has(d.EmployeeID ?? d.CardNumber))
    .map(d => {
      // 1) Raw API partition code
      const rawPartitionCode = d.PartitionName2 || d.PartitionName1 || 'Unknown';
      // 2) Map through doorMap’s partitionMap
      const mappedPartition  = partitionMap[rawPartitionCode] || rawPartitionCode;
      // 3) Normalize door name & direction
      const rawDoor   = normalizeDoorName(d.DoorName || d.Door || '');
      const direction = d.Direction || 'InDirection';
      // 4) Lookup floor using the **mapped** partition
      const floor = lookupFloor(mappedPartition, rawDoor, direction);
      // 5) Build friendly “Location” string
      const location = floor
        ? `${getDisplayPartition(mappedPartition)} – ${floor}`
        : null;

      return {
        vipId:    d.EmployeeID ?? d.CardNumber,
        name:     d.ObjectName1,
        time:     d.LocaleMessageTime,
        floor,       // actual floor or null
        location,    // e.g. "Pune – Podium Floor"
        region:   d.__region
      };
    })
    // drop “Out of office” (floor===null)
    .filter(r => r.floor != null);
}




also Check each below Python file carefully and fix all issue carefully...


C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics


C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\ml\predict.py

...
Blank 




C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\ml\train_model.py

import pandas as pd
from sklearn.ensemble import IsolationForest
from joblib import dump, load
from db import SessionLocal
from models import AttendanceSummary
from datetime import date, timedelta

def build_feature_table(last_n_days=30):
    with SessionLocal() as db:
        # pull attendance summary for last N days
        end = date.today()
        start = end - timedelta(days=last_n_days)
        q = db.query(AttendanceSummary).filter(AttendanceSummary.date >= start, AttendanceSummary.date <= end)
        df = pd.read_sql(q.statement, q.session.bind)
    if df.empty:
        return None
    # pivot: rows=employee_id, cols=date, values=presence_count>0
    df['present'] = df['presence_count'] > 0
    pivot = df.pivot_table(index='employee_id', columns='date', values='present', aggfunc='max', fill_value=0)
    pivot['days_present'] = pivot.sum(axis=1)
    pivot['presence_rate'] = pivot['days_present'] / last_n_days
    features = pivot[['days_present','presence_rate']].fillna(0)
    return features

def train_isolationforest(save_path="models/isojob.joblib"):
    features = build_feature_table()
    if features is None:
        raise RuntimeError("No data")
    clf = IsolationForest(contamination=0.05, random_state=42)
    clf.fit(features)
    dump(clf, save_path)
    return save_path

if __name__ == "__main__":
    print("Training...")
    print(train_isolationforest())






C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\app.py


from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
import shutil, uuid
from settings import UPLOAD_DIR, OUTPUT_DIR
from ingest_excel import ingest_employee_excel, ingest_contractor_excel
from compare_service import ingest_live_details_list, compute_daily_attendance, compare_with_active
import os, json

app = FastAPI(title="Attendance Analytics")

@app.post("/upload/active-employees")
async def upload_active_employees(file: UploadFile = File(...)):
    if not file.filename.endswith(('.xls','.xlsx')):
        raise HTTPException(400, "Please upload an Excel file")
    dest = UPLOAD_DIR / f"{uuid.uuid4().hex}_{file.filename}"
    with open(dest, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    ingest_employee_excel(dest)
    return {"status":"ok", "path": str(dest)}

@app.post("/upload/active-contractors")
async def upload_active_contractors(file: UploadFile = File(...)):
    dest = UPLOAD_DIR / f"{uuid.uuid4().hex}_{file.filename}"
    with open(dest, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    ingest_contractor_excel(dest)
    return {"status":"ok", "path": str(dest)}

@app.post("/ingest/live-details")
async def ingest_live(details: list):
    # accept the data.details array from live-summary API
    ingest_live_details_list(details)
    return {"status":"ok", "inserted": len(details)}

@app.get("/reports/daily/{yyyymmdd}")
def daily_report(yyyymmdd: str):
    import datetime
    dt = datetime.datetime.strptime(yyyymmdd, "%Y%m%d").date()
    compute_daily_attendance(dt)
    summary = compare_with_active(dt)
    return JSONResponse(summary)




C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\attendance.db




C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\compare_service.py


# compare_service.py
import pandas as pd
from datetime import datetime, date
from db import SessionLocal
from models import ActiveEmployee, ActiveContractor, LiveSwipe, AttendanceSummary

def ingest_live_details_list(details_list):
    """
    Persist details_list (array of detail dicts) into LiveSwipe table.
    Each dict expected to include LocaleMessageTime, EmployeeID, CardNumber, ObjectName1, PartitionName2, Floor, Door, Direction
    """
    from db import SessionLocal as _SessionLocal
    with _SessionLocal() as db:
        for d in details_list:
            ts = d.get("LocaleMessageTime")
            try:
                ts_parsed = datetime.fromisoformat(ts.replace("Z", "+00:00"))
            except Exception:
                ts_parsed = datetime.utcnow()
            rec = LiveSwipe(
                timestamp=ts_parsed,
                employee_id=(d.get("EmployeeID") or "").strip() or None,
                card_number=(d.get("CardNumber") or "").strip() or None,
                full_name=d.get("ObjectName1"),
                partition=d.get("PartitionName2") or d.get("PartitionName1"),
                floor=d.get("Floor"),
                door=d.get("Door") or d.get("DoorName"),
                region=d.get("PartitionName2"),
                raw=d
            )
            db.add(rec)
        db.commit()

def compute_daily_attendance(target_date: date):
    """
    Build AttendanceSummary rows for target_date by reading LiveSwipe rows on that date
    """
    with SessionLocal() as db:
        start = datetime.combine(target_date, datetime.min.time())
        end = datetime.combine(target_date, datetime.max.time())
        swipes_q = db.query(LiveSwipe).filter(LiveSwipe.timestamp >= start, LiveSwipe.timestamp <= end)
        swipes = swipes_q.all()
        if not swipes:
            return []  # nothing to summarize

        # Create dataframe from raw objects
        rows = []
        for s in swipes:
            rows.append({
                "id": s.id,
                "timestamp": s.timestamp,
                "employee_id": s.employee_id,
                "card_number": s.card_number,
                "full_name": s.full_name,
                "partition": s.partition,
                "floor": s.floor,
                "door": s.door
            })
        df = pd.DataFrame(rows)
        if df.empty:
            return []

        # determine primary key for grouping (employee_id or card_number)
        df['key'] = df['employee_id'].fillna(df['card_number'])
        grouped = df.groupby('key').agg(
            presence_count=('id', 'count'),
            first_seen=('timestamp', 'min'),
            last_seen=('timestamp', 'max'),
            full_name=('full_name', 'first'),
            partition=('partition', 'first')
        ).reset_index()

        # upsert into AttendanceSummary
        for _, row in grouped.iterrows():
            rec = AttendanceSummary(
                employee_id=row['key'],
                date=target_date,
                presence_count=int(row['presence_count']),
                first_seen=row['first_seen'],
                last_seen=row['last_seen'],
                derived={"partition": row['partition'], "full_name": row['full_name']}
            )
            db.merge(rec)
        db.commit()
        return grouped.to_dict(orient='records')

def compare_with_active(target_date: date):
    """
    Compare AttendanceSummary (for target_date) with ActiveEmployee table.
    Returns a dict: { by_location: [...], merged: [...] }
    This function is robust when either side is empty.
    """
    with SessionLocal() as db:
        # fetch attendance summary rows for date
        att_rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == target_date).all()
        if not att_rows:
            att_df = pd.DataFrame(columns=["employee_id", "presence_count", "first_seen", "last_seen"])
        else:
            att_df = pd.DataFrame([{
                "employee_id": a.employee_id,
                "presence_count": a.presence_count,
                "first_seen": a.first_seen,
                "last_seen": a.last_seen,
                **(a.derived or {})
            } for a in att_rows])

        # fetch active employees
        act_rows = db.query(ActiveEmployee).all()
        if not act_rows:
            act_df = pd.DataFrame(columns=["employee_id", "full_name", "location_city", "status"])
        else:
            act_df = pd.DataFrame([{
                "employee_id": e.employee_id,
                "full_name": e.full_name,
                "location_city": e.location_city,
                "status": e.current_status
            } for e in act_rows])

        # Ensure 'employee_id' column exists on both dataframes before merge
        if 'employee_id' not in act_df.columns:
            act_df['employee_id'] = pd.NA
        if 'employee_id' not in att_df.columns:
            att_df['employee_id'] = pd.NA

        # Merge - left join active employees with attendance
        merged = pd.merge(act_df, att_df, on='employee_id', how='left')

        # If presence_count missing -> 0
        merged['presence_count'] = merged['presence_count'].fillna(0).astype(int)
        merged['present_today'] = merged['presence_count'] > 0

        # Location-wise summary
        # Use location_city; fill null with 'Unknown'
        merged['location_city'] = merged['location_city'].fillna('Unknown')
        loc_group = merged.groupby('location_city', dropna=False).agg(
            total_n=('employee_id', 'count'),
            present_n=('present_today', 'sum')
        ).reset_index()
        loc_group['percent_present'] = ((loc_group['present_n'] / loc_group['total_n']) * 100).round(2)

        # Prepare JSON-compatible outputs
        by_location = loc_group.to_dict(orient='records')
        merged_list = merged.to_dict(orient='records')

        return {"by_location": by_location, "merged": merged_list}




C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\db.py


from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from settings import DB_URL

engine = create_engine(DB_URL, connect_args={"check_same_thread": False} if DB_URL.startswith("sqlite") else {})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()





C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\ingest_excel.py

import pandas as pd
from datetime import datetime
from sqlalchemy.exc import IntegrityError
from db import SessionLocal, engine
from models import Base, ActiveEmployee, ActiveContractor
from settings import UPLOAD_DIR
import uuid, os

Base.metadata.create_all(bind=engine)

def normalize_colname(c):
    return ''.join(ch for ch in c).strip()

def ingest_employee_excel(path, uploaded_by="system"):
    df = pd.read_excel(path, sheet_name=0, dtype=str)
    df.columns = [c.strip() for c in df.columns]
    important = ['Employee ID','Full Name','Location City','Location Description','Current Status','Employee Type','Employee\'s Email']
    # adapt column mapping if names differ
    with SessionLocal() as db:
        for _, row in df.iterrows():
            emp_id = (row.get('Employee ID') or row.get('EmployeeID') or '').strip()
            if not emp_id:
                continue
            full_name = (row.get('Full Name') or f"{row.get('First Name','')} {row.get('Last Name','')}").strip()
            rec = ActiveEmployee(
                employee_id=emp_id,
                full_name=full_name,
                email=row.get("Employee's Email"),
                location_city=row.get('Location City') or row.get('Location Description'),
                location_desc=row.get('Location Description'),
                current_status=row.get('Current Status'),
                raw_row=row.to_dict(),
                uploaded_at=datetime.utcnow()
            )
            try:
                db.merge(rec)  # upsert logic with merge
                db.commit()
            except IntegrityError:
                db.rollback()

def ingest_contractor_excel(path):
    df = pd.read_excel(path, sheet_name=0, dtype=str)
    df.columns = [c.strip() for c in df.columns]
    with SessionLocal() as db:
        for _, row in df.iterrows():
            wsid = (row.get('Worker System Id') or row.get('Worker System ID') or '').strip()
            if not wsid:
                continue
            rec = ActiveContractor(
                worker_system_id=wsid,
                ipass_id=row.get('iPass ID') or row.get('"W" iPass ID'),
                full_name=row.get('Full Name'),
                vendor=row.get('Vendor Company Name'),
                location=row.get('Worker Location'),
                status=row.get('Status'),
                raw_row=row.to_dict(),
                uploaded_at=datetime.utcnow()
            )
            try:
                db.merge(rec)
                db.commit()
            except IntegrityError:
                db.rollback()

if __name__ == "__main__":
    # example usage
    for f in os.listdir(UPLOAD_DIR):
        p = UPLOAD_DIR / f
        if 'contractor' in f.lower():
            ingest_contractor_excel(p)
        else:
            ingest_employee_excel(p)
    print("Ingestion completed.")



C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\models.py


from sqlalchemy import Column, Integer, String, DateTime, JSON, Boolean, Date
from sqlalchemy import ForeignKey, UniqueConstraint
from sqlalchemy.orm import relationship
from db import Base

class ActiveEmployee(Base):
    __tablename__ = "active_employees"
    id = Column(Integer, primary_key=True)
    employee_id = Column(String, index=True, unique=True, nullable=False)
    full_name = Column(String, index=True)
    email = Column(String)
    location_city = Column(String, index=True)
    location_desc = Column(String)
    current_status = Column(String)
    raw_row = Column(JSON)  # store original row for reference
    uploaded_at = Column(DateTime)

class ActiveContractor(Base):
    __tablename__ = "active_contractors"
    id = Column(Integer, primary_key=True)
    worker_system_id = Column(String, index=True, unique=True, nullable=False)
    ipass_id = Column(String, index=True)
    full_name = Column(String, index=True)
    vendor = Column(String)
    location = Column(String)
    status = Column(String)
    raw_row = Column(JSON)
    uploaded_at = Column(DateTime)

class LiveSwipe(Base):
    __tablename__ = "live_swipes"
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, index=True)
    employee_id = Column(String, index=True, nullable=True)
    card_number = Column(String, index=True, nullable=True)
    full_name = Column(String)
    partition = Column(String, index=True)
    floor = Column(String)
    door = Column(String)
    region = Column(String, index=True)
    raw = Column(JSON)

class AttendanceSummary(Base):
    __tablename__ = "attendance_summary"
    id = Column(Integer, primary_key=True)
    employee_id = Column(String, index=True)
    date = Column(Date, index=True)
    presence_count = Column(Integer)
    first_seen = Column(DateTime)
    last_seen = Column(DateTime)
    derived = Column(JSON)  # extra stats





C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\reports.py

...Blank 





C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\settings.py

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent
UPLOAD_DIR = BASE_DIR / "data" / "raw_uploads"
OUTPUT_DIR = BASE_DIR / "data" / "outputs"
DB_URL = os.environ.get("ATT_DB_URL", "sqlite:///./attendance.db")  # change to postgres in prod
LIVE_API_URL = os.environ.get("LIVE_API_URL", "http://localhost:3008/api/occupancy/live-summary")

UPLOAD_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)




C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\tables.py

from db import Base, engine

Base.metadata.create_all(bind=engine)
print("DB tables created (SQLite).")





Check abobe each file line by line and fix this issue carefully...

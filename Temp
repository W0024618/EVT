# --- add to data_compare_service.py ---

def export_uploaded_sheets():
    """
    Create a single xlsx workbook with:
      - Sheet "Employee" -> contents of latest canonical employee sheet (if present)
      - Sheet "Contractor" -> contents of latest canonical contractor sheet (if present)
    Writes file into OUTPUT_DIR and returns the filename (not full path).
    """
    try:
        emp_path = _find_latest_file_for_kind("employee")
        contr_path = _find_latest_file_for_kind("contractor")

        # Ensure OUTPUT_DIR exists
        OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
        ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
        fname = f"uploaded_sheets_{ts}.xlsx"
        fullpath = OUTPUT_DIR / fname

        # Read tables (if present) or create empty dataframe placeholders
        if emp_path and emp_path.exists():
            df_emp = _read_table(emp_path)
        else:
            df_emp = pd.DataFrame()

        if contr_path and contr_path.exists():
            df_con = _read_table(contr_path)
        else:
            df_con = pd.DataFrame()

        # Write to one workbook (try openpyxl if available)
        try:
            with pd.ExcelWriter(fullpath, engine="openpyxl") as writer:
                df_emp.to_excel(writer, sheet_name="Employee", index=False)
                df_con.to_excel(writer, sheet_name="Contractor", index=False)
        except Exception:
            # fallback to default engine
            with pd.ExcelWriter(fullpath) as writer:
                df_emp.to_excel(writer, sheet_name="Employee", index=False)
                df_con.to_excel(writer, sheet_name="Contractor", index=False)

        return fname
    except Exception:
        logger.exception("export_uploaded_sheets failed")
        return None




__all__ = ["compare_ccure_vs_sheets", "compare_ccure_vs_sheets", "export_uploaded_sheets"]












@app.get("/ccure/export_uploaded")
def ccure_export_uploaded():
    """
    Export the currently uploaded canonical sheets into one workbook.
    Returns JSON: { status: "ok", report_path: "<filename>" }
    Downloadable at /ccure/report/{filename}
    """
    try:
        from data_compare_service import export_uploaded_sheets
    except Exception as e:
        logger.exception("data_compare_service import failed for export_uploaded")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")

    fname = export_uploaded_sheets()
    if not fname:
        raise HTTPException(status_code=500, detail="failed to export uploaded sheets")
    return JSONResponse({"status": "ok", "report_path": fname})









  // upload state
  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  // added: whether a canonical sheet is present for either kind (controls hiding upload button)
  const [uploadedEmployee, setUploadedEmployee] = useState(false);
  const [uploadedContractor, setUploadedContractor] = useState(false);

  const [exportReportPath, setExportReportPath] = useState(null);







  const handleUpload = async (file, type) => {
    if (!file) return;
    const endpoint = type === 'employee' ? '/upload/active-employees' : '/upload/active-contractors';
    const fd = new FormData();
    fd.append('file', file, file.name);

    setUploading(true);
    setUploadResult(null);
    setUploadError(null);

    try {
      // Let axios set the Content-Type boundary header automatically (do not pass custom header)
      const res = await api.post(endpoint, fd, {
        timeout: 120000
      });

      setUploadResult(res.data);
      setSnack({ open: true, severity: 'success', message: `Upload successful: ${file.name}` });

      // if server returned canonical_saved path, mark uploaded flag
      const saved = res.data && res.data.detail && (res.data.detail.canonical_saved || res.data.detail.canonical_saved === "");
      if (type === 'employee') setUploadedEmployee(!!saved);
      if (type === 'contractor') setUploadedContractor(!!saved);

      // optionally re-fetch averages/headcount after successful upload:
      try { await api.get('/ccure/verify?raw=true').then(r => setAverages(r.data)); } catch (_) {}
      try { await api.get('/headcount').then(r => {
        const d = r.data;
        if (d && typeof d === 'object') {
          setCounts(prev => ({
            apac: Number(d.apac || prev.apac || 0),
            emea: Number(d.emea || prev.emea || 0),
            laca: Number(d.laca || prev.laca || 0),
            namer: Number(d.namer || prev.namer || 0)
          }));
        }
      }) } catch (_) {}
    } catch (err) {
      console.error('Upload failed', err);
      setUploadError(err);
      setSnack({ open: true, severity: 'error', message: `Upload failed: ${file.name}` });
    } finally {
      setUploading(false);
    }
  };







  const exportUploadedSheets = async () => {
    setUploading(true);
    try {
      const res = await api.get('/ccure/export_uploaded');
      if (res && res.data && res.data.report_path) {
        setExportReportPath(res.data.report_path);
        setSnack({ open: true, severity: 'success', message: 'Export created â€” starting download' });

        // open download (uses api proxy; same-origin)
        const dlUrl = `/ccure/report/${res.data.report_path}`;
        window.open(dlUrl, '_blank');
      } else {
        setSnack({ open: true, severity: 'error', message: 'Export failed: no file returned' });
      }
    } catch (err) {
      console.error('export failed', err);
      setSnack({ open: true, severity: 'error', message: 'Export failed' });
    } finally {
      setUploading(false);
    }
  };









        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
          <Paper sx={{ p: 1, width: 200, boxShadow: 1 }}>
            <input type="file" accept=".xls,.xlsx,.csv" style={{ display: 'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
            {uploadedEmployee ? (
              <Button variant="contained" size="small" startIcon={<DescriptionIcon />} sx={{ mt: 1, width: '100%' }} onClick={exportUploadedSheets} disabled={uploading}>
                Export into Excel (Employee)
              </Button>
            ) : (
              <Button variant="contained" size="small" startIcon={<UploadFileIcon />} sx={{ mt: 1, width: '100%' }} onClick={() => fileInputEmpRef.current && fileInputEmpRef.current.click()} disabled={uploading}>
                Upload Employee
              </Button>
            )}
          </Paper>

          <Paper sx={{ p: 0, width: 200, boxShadow: 1 }}>
            <input type="file" accept=".xls,.xlsx,.csv" style={{ display: 'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
            {uploadedContractor ? (
              <Button variant="outlined" size="small" startIcon={<DescriptionIcon />} sx={{ mt: 1, width: '100%' }} onClick={exportUploadedSheets} disabled={uploading}>
                Export into Excel (Contractor)
              </Button>
            ) : (
              <Button variant="outlined" size="small" startIcon={<UploadFileIcon />} sx={{ mt: 1, width: '100%' }} onClick={() => fileInputContrRef.current && fileInputContrRef.current.click()} disabled={uploading}>
                Upload Contractor
              </Button>
            )}
          </Paper>
        </Box>







  const onChooseEmployeeFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'employee'); e.target.value = null; };
  const onChooseContractorFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'contractor'); e.target.value = null; };









Now Good We are getting Correct Count 
"ccure_active_employees_count": 8588,
  "ccure_active_contractors_count": 652,
  "active_sheet_employee_count": 8671,
  "active_sheet_contractor_count": 6740,

Alos Check below APi Responce and check our Logic as per logic everything is Working or not 
because we got 
 "missing_employees_count": 69,
  "missing_contractors_count": 6,
This is Possible mismatch count , just cross check logic all is Working correct or not and 

2) From frontend we have upload sheet option but this is not working need to fix ...
after upload Active Employee Sheet .hide Upload button and display Export into excel button 
for both active Employee and ACtive Contractor 
and generate one excel report and display sheet 1 for Employee , and Sheet 2 for Contractor 

Check below all file carefully and fix the issue carefully...


http://localhost:8000/ccure/compare?mode=full&limit_list=200&export=false

{
  "ccure_active_employees_count": 8588,
  "ccure_active_contractors_count": 652,
  "active_sheet_employee_count": 8671,
  "active_sheet_contractor_count": 6740,
  "missing_employees_count": 69,
  "missing_contractors_count": 6,
  "missing_employees_sample": [
    {
      "ccure_key": "329444",
      "EmployeeID": "329444",
      "EmpName": "SoniJayasri, Yallapu",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210300,
        "EmpName": "SoniJayasri, Yallapu",
        "EmployeeID": "329444",
        "PersonnelType": "Employee",
        "Manager_Name": "Saravanan Radhakrishnan",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210300/image"
      }
    },
    {
      "ccure_key": "324176",
      "EmployeeID": "324176",
      "EmpName": "Ortiz, Dayana",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097203786,
        "EmpName": "Ortiz, Dayana",
        "EmployeeID": "324176",
        "PersonnelType": "Employee",
        "Manager_Name": "Priscila Da Silva Nogueira",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097203786/image"
      }
    },
    {
      "ccure_key": "329504",
      "EmployeeID": "329504",
      "EmpName": "Vignolo, Ashton",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210366,
        "EmpName": "Vignolo, Ashton",
        "EmployeeID": "329504",
        "PersonnelType": "Employee",
        "Manager_Name": "Roberto Golcher",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210366/image"
      }
    },
    {
      "ccure_key": "329165",
      "EmployeeID": "329165",
      "EmpName": "Bhadoria, Gyanendra Singh",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210011,
        "EmpName": "Bhadoria, Gyanendra Singh",
        "EmployeeID": "329165",
        "PersonnelType": "Employee",
        "Manager_Name": "Yogesh Sharma",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210011/image"
      }
    },
    {
      "ccure_key": "329506",
      "EmployeeID": "329506",
      "EmpName": "Alarco, Luisa",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210368,
        "EmpName": "Alarco, Luisa",
        "EmployeeID": "329506",
        "PersonnelType": "Employee",
        "Manager_Name": "Jeankarlo Melgar",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210368/image"
      }
    },
    {
      "ccure_key": "name::siegmund jan",
      "EmployeeID": "",
      "EmpName": "Siegmund, Jan",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097193692,
        "EmpName": "Siegmund, Jan",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Director ",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 2,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097193692/image"
      }
    },
    {
      "ccure_key": "name::sun angela",
      "EmployeeID": "",
      "EmpName": "Sun, Angela",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097186937,
        "EmpName": "Sun, Angela",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Directors WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097186937/image"
      }
    },
    {
      "ccure_key": "329429",
      "EmployeeID": "329429",
      "EmpName": "Paskiene, Greta",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210284,
        "EmpName": "Paskiene, Greta",
        "EmployeeID": "329429",
        "PersonnelType": "Employee",
        "Manager_Name": "Gabriele Vascile",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210284/image"
      }
    },
    {
      "ccure_key": "name::holden betsy",
      "EmployeeID": "",
      "EmpName": "Holden, Betsy",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097166097,
        "EmpName": "Holden, Betsy",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Directors WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097166097/image"
      }
    },
    {
      "ccure_key": "name::cole marty",
      "EmployeeID": "",
      "EmpName": "Cole, Marty",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097168173,
        "EmpName": "Cole, Marty",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Directors WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097168173/image"
      }
    },
    {
      "ccure_key": "329175",
      "EmployeeID": "329175",
      "EmpName": "Bhagat, Rushali",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210019,
        "EmpName": "Bhagat, Rushali",
        "EmployeeID": "329175",
        "PersonnelType": "Employee",
        "Manager_Name": "Jalil Laraki",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210019/image"
      }
    },
    {
      "ccure_key": "name::deering suzy",
      "EmployeeID": "",
      "EmpName": "Deering, Suzy",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097206109,
        "EmpName": "Deering, Suzy",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Shelley Pogodzinski",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097206109/image"
      }
    },
    {
      "ccure_key": "300843",
      "EmployeeID": "300843",
      "EmpName": "Kuzkina, Ala",
      "PersonnelType": "Employee",
      "raw": {
        "id": 142617780,
        "EmpName": "Kuzkina, Ala",
        "EmployeeID": "300843",
        "PersonnelType": "Employee",
        "Manager_Name": "Yushu Landes",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 0,
        "Employee_Status": "Deactive",
        "imageUrl": "/api/employees/142617780/image"
      }
    },
    {
      "ccure_key": "328728",
      "EmployeeID": "328728",
      "EmpName": "Sallam, Mohamed",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209447,
        "EmpName": "Sallam, Mohamed",
        "EmployeeID": "328728",
        "PersonnelType": "Employee",
        "Manager_Name": "Huss Elshamy",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209447/image"
      }
    },
    {
      "ccure_key": "name::miles mike",
      "EmployeeID": "",
      "EmpName": "Miles, Mike",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097166093,
        "EmpName": "Miles, Mike",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Directors WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097166093/image"
      }
    },
    {
      "ccure_key": "329463",
      "EmployeeID": "329463",
      "EmpName": "Ghaderi, Abol",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210320,
        "EmpName": "Ghaderi, Abol",
        "EmployeeID": "329463",
        "PersonnelType": "Employee",
        "Manager_Name": "Bill Sands",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210320/image"
      }
    },
    {
      "ccure_key": "329144",
      "EmployeeID": "329144",
      "EmpName": "Gulhane, Akshay Ramesh",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209973,
        "EmpName": "Gulhane, Akshay Ramesh",
        "EmployeeID": "329144",
        "PersonnelType": "Employee",
        "Manager_Name": "Sandeep Singh",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209973/image"
      }
    },
    {
      "ccure_key": "329448",
      "EmployeeID": "329448",
      "EmpName": "Magalhaes Takenaka, Amanda",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210306,
        "EmpName": "Magalhaes Takenaka, Amanda",
        "EmployeeID": "329448",
        "PersonnelType": "Employee",
        "Manager_Name": "Glauber Semino",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210306/image"
      }
    },
    {
      "ccure_key": "329471",
      "EmployeeID": "329471",
      "EmpName": "Clark, Eddie",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210330,
        "EmpName": "Clark, Eddie",
        "EmployeeID": "329471",
        "PersonnelType": "Employee",
        "Manager_Name": "Annie Vassallo",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210330/image"
      }
    },
    {
      "ccure_key": "329469",
      "EmployeeID": "329469",
      "EmpName": "Fernandez, Florencia Lucia",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210328,
        "EmpName": "Fernandez, Florencia Lucia",
        "EmployeeID": "329469",
        "PersonnelType": "Employee",
        "Manager_Name": "Diego Longo",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210328/image"
      }
    },
    {
      "ccure_key": "329169",
      "EmployeeID": "329169",
      "EmpName": "Gutierrez, Felipe",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210014,
        "EmpName": "Gutierrez, Felipe",
        "EmployeeID": "329169",
        "PersonnelType": "Employee",
        "Manager_Name": "Dany Asencio",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210014/image"
      }
    },
    {
      "ccure_key": "name::joerres jeff",
      "EmployeeID": "",
      "EmpName": "Joerres, Jeff",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097198112,
        "EmpName": "Joerres, Jeff",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Director WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097198112/image"
      }
    },
    {
      "ccure_key": "name::murphy tim",
      "EmployeeID": "",
      "EmpName": "Murphy, Tim",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097195537,
        "EmpName": "Murphy, Tim",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of directors WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 3,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097195537/image"
      }
    },
    {
      "ccure_key": "329201",
      "EmployeeID": "329201",
      "EmpName": "Yang, Jessica",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210048,
        "EmpName": "Yang, Jessica",
        "EmployeeID": "329201",
        "PersonnelType": "Employee",
        "Manager_Name": "Alexi Paxinos",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210048/image"
      }
    },
    {
      "ccure_key": "329455",
      "EmployeeID": "329455",
      "EmpName": "Macdonald, Chris",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210314,
        "EmpName": "Macdonald, Chris",
        "EmployeeID": "329455",
        "PersonnelType": "Employee",
        "Manager_Name": "Bill Sands",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210314/image"
      }
    },
    {
      "ccure_key": "329475",
      "EmployeeID": "329475",
      "EmpName": "Caringer, Kevin Robert",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210334,
        "EmpName": "Caringer, Kevin Robert",
        "EmployeeID": "329475",
        "PersonnelType": "Employee",
        "Manager_Name": "Swati Shah",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 0,
        "Employee_Status": "Deactive",
        "imageUrl": "/api/employees/2097210334/image"
      }
    },
    {
      "ccure_key": "329464",
      "EmployeeID": "329464",
      "EmpName": "Sodi, Allegra",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210321,
        "EmpName": "Sodi, Allegra",
        "EmployeeID": "329464",
        "PersonnelType": "Employee",
        "Manager_Name": "Bill Sands",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 0,
        "Employee_Status": "Deactive",
        "imageUrl": "/api/employees/2097210321/image"
      }
    },
    {
      "ccure_key": "329200",
      "EmployeeID": "329200",
      "EmpName": "Lorenzana, Melissa",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210047,
        "EmpName": "Lorenzana, Melissa",
        "EmployeeID": "329200",
        "PersonnelType": "Employee",
        "Manager_Name": "Amanda Demarest",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210047/image"
      }
    },
    {
      "ccure_key": "329514",
      "EmployeeID": "329514",
      "EmpName": "DIAITE, Daddy Mmamadou",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210372,
        "EmpName": "DIAITE, Daddy Mmamadou",
        "EmployeeID": "329514",
        "PersonnelType": "Employee",
        "Manager_Name": "Marwa Amara",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210372/image"
      }
    },
    {
      "ccure_key": "329421",
      "EmployeeID": "329421",
      "EmpName": "Jaedicke, Andreas",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210265,
        "EmpName": "Jaedicke, Andreas",
        "EmployeeID": "329421",
        "PersonnelType": "Employee",
        "Manager_Name": "Aurelija Ajauskiene",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210265/image"
      }
    },
    {
      "ccure_key": "309367",
      "EmployeeID": "309367",
      "EmpName": "Urbanaviciene, Migle",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097180892,
        "EmpName": "Urbanaviciene, Migle",
        "EmployeeID": "309367",
        "PersonnelType": "Employee",
        "Manager_Name": "Raimonda Janceviciute",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097180892/image"
      }
    },
    {
      "ccure_key": "329511",
      "EmployeeID": "329511",
      "EmpName": "Milic, Vlado Aliev",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210370,
        "EmpName": "Milic, Vlado Aliev",
        "EmployeeID": "329511",
        "PersonnelType": "Employee",
        "Manager_Name": "Nathalie Tsopgni",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210370/image"
      }
    },
    {
      "ccure_key": "329447",
      "EmployeeID": "329447",
      "EmpName": "Minnakanti, Vinay Babu",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210305,
        "EmpName": "Minnakanti, Vinay Babu",
        "EmployeeID": "329447",
        "PersonnelType": "Employee",
        "Manager_Name": "Manu Suresh",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210305/image"
      }
    },
    {
      "ccure_key": "329473",
      "EmployeeID": "329473",
      "EmpName": "Moura, Matheus Anselmo Rodrigues",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210332,
        "EmpName": "Moura, Matheus Anselmo Rodrigues",
        "EmployeeID": "329473",
        "PersonnelType": "Employee",
        "Manager_Name": "Henrique Silva Aguiar",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210332/image"
      }
    },
    {
      "ccure_key": "329138",
      "EmployeeID": "329138",
      "EmpName": "Mendiratta, Ujjwal",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209964,
        "EmpName": "Mendiratta, Ujjwal",
        "EmployeeID": "329138",
        "PersonnelType": "Employee",
        "Manager_Name": "Lacey Hartford",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209964/image"
      }
    },
    {
      "ccure_key": "329181",
      "EmployeeID": "329181",
      "EmpName": "Sotoye, Ola",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210024,
        "EmpName": "Sotoye, Ola",
        "EmployeeID": "329181",
        "PersonnelType": "Employee",
        "Manager_Name": "Rich Fox",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210024/image"
      }
    },
    {
      "ccure_key": "329503",
      "EmployeeID": "329503",
      "EmpName": "Almohaimeed, Noura",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210365,
        "EmpName": "Almohaimeed, Noura",
        "EmployeeID": "329503",
        "PersonnelType": "Employee",
        "Manager_Name": "Ali Badreddine",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210365/image"
      }
    },
    {
      "ccure_key": "name::trujillo solomon",
      "EmployeeID": "",
      "EmpName": "Trujillo, Solomon",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097166098,
        "EmpName": "Trujillo, Solomon",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Board of Directors WU",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097166098/image"
      }
    },
    {
      "ccure_key": "329141",
      "EmployeeID": "329141",
      "EmpName": "Lavankar, Niraj",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209967,
        "EmpName": "Lavankar, Niraj",
        "EmployeeID": "329141",
        "PersonnelType": "Employee",
        "Manager_Name": "Jinesh Sheth",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209967/image"
      }
    },
    {
      "ccure_key": "329189",
      "EmployeeID": "329189",
      "EmpName": "Dâ€™Souza, Diana Mary",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210032,
        "EmpName": "Dâ€™Souza, Diana Mary",
        "EmployeeID": "329189",
        "PersonnelType": "Employee",
        "Manager_Name": "Priyanka Iyer",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210032/image"
      }
    },
    {
      "ccure_key": "329445",
      "EmployeeID": "329445",
      "EmpName": "Andrejevas, Olegas",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210301,
        "EmpName": "Andrejevas, Olegas",
        "EmployeeID": "329445",
        "PersonnelType": "Employee",
        "Manager_Name": "Gabriele Vascile",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210301/image"
      }
    },
    {
      "ccure_key": "329474",
      "EmployeeID": "329474",
      "EmpName": "Herrera, Cristina Rafaela",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210333,
        "EmpName": "Herrera, Cristina Rafaela",
        "EmployeeID": "329474",
        "PersonnelType": "Employee",
        "Manager_Name": "Mario Cohen Amaya",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210333/image"
      }
    },
    {
      "ccure_key": "329238",
      "EmployeeID": "329238",
      "EmpName": "Tatiparthi, Gowtham",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210091,
        "EmpName": "Tatiparthi, Gowtham",
        "EmployeeID": "329238",
        "PersonnelType": "Employee",
        "Manager_Name": "Vaibhav Bapat",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210091/image"
      }
    },
    {
      "ccure_key": "329191",
      "EmployeeID": "329191",
      "EmpName": "Vuppuluri, Madhu",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210034,
        "EmpName": "Vuppuluri, Madhu",
        "EmployeeID": "329191",
        "PersonnelType": "Employee",
        "Manager_Name": "Prasad Honrao",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210034/image"
      }
    },
    {
      "ccure_key": "329466",
      "EmployeeID": "329466",
      "EmpName": "Duval, Monet",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210323,
        "EmpName": "Duval, Monet",
        "EmployeeID": "329466",
        "PersonnelType": "Employee",
        "Manager_Name": "John M Morales",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210323/image"
      }
    },
    {
      "ccure_key": "329068",
      "EmployeeID": "329068",
      "EmpName": "Patil, Harshavardhan",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209841,
        "EmpName": "Patil, Harshavardhan",
        "EmployeeID": "329068",
        "PersonnelType": "Employee",
        "Manager_Name": "Jill Rodriguez Sedo",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209841/image"
      }
    },
    {
      "ccure_key": "329505",
      "EmployeeID": "329505",
      "EmpName": "Armendariz, Miguel",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210367,
        "EmpName": "Armendariz, Miguel",
        "EmployeeID": "329505",
        "PersonnelType": "Employee",
        "Manager_Name": "Esteban Dominguez",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210367/image"
      }
    },
    {
      "ccure_key": "329406",
      "EmployeeID": "329406",
      "EmpName": "Segura, Arnaldo Andres",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210245,
        "EmpName": "Segura, Arnaldo Andres",
        "EmployeeID": "329406",
        "PersonnelType": "Employee",
        "Manager_Name": "Lisa Mulas",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210245/image"
      }
    },
    {
      "ccure_key": "329039",
      "EmployeeID": "329039",
      "EmpName": "V, Ponnurangam",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209790,
        "EmpName": "V, Ponnurangam",
        "EmployeeID": "329039",
        "PersonnelType": "Employee",
        "Manager_Name": "Justas Radzevicius",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209790/image"
      }
    },
    {
      "ccure_key": "320501",
      "EmployeeID": "320501",
      "EmpName": "Torres Bartolone, Giovanna",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097198658,
        "EmpName": "Torres Bartolone, Giovanna",
        "EmployeeID": "320501",
        "PersonnelType": "Employee",
        "Manager_Name": "Ana Mariel Barcia",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097198658/image"
      }
    },
    {
      "ccure_key": "329436",
      "EmployeeID": "329436",
      "EmpName": "Castillo, Katherine",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210291,
        "EmpName": "Castillo, Katherine",
        "EmployeeID": "329436",
        "PersonnelType": "Employee",
        "Manager_Name": "Wendy Whitaker",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210291/image"
      }
    },
    {
      "ccure_key": "329242",
      "EmployeeID": "329242",
      "EmpName": "Oâ€™Brien, Erin Elizabeth",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210100,
        "EmpName": "Oâ€™Brien, Erin Elizabeth",
        "EmployeeID": "329242",
        "PersonnelType": "Employee",
        "Manager_Name": "Sofia Graniello",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210100/image"
      }
    },
    {
      "ccure_key": "329422",
      "EmployeeID": "329422",
      "EmpName": "Cramer, Jim",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210268,
        "EmpName": "Cramer, Jim",
        "EmployeeID": "329422",
        "PersonnelType": "Employee",
        "Manager_Name": "Aditya Oberoi",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210268/image"
      }
    },
    {
      "ccure_key": "329438",
      "EmployeeID": "329438",
      "EmpName": "Panda, Pradosh Kumar",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210293,
        "EmpName": "Panda, Pradosh Kumar",
        "EmployeeID": "329438",
        "PersonnelType": "Employee",
        "Manager_Name": "Prem Chharang",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210293/image"
      }
    },
    {
      "ccure_key": "329467",
      "EmployeeID": "329467",
      "EmpName": "Uppuluri, Sravya",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210324,
        "EmpName": "Uppuluri, Sravya",
        "EmployeeID": "329467",
        "PersonnelType": "Employee",
        "Manager_Name": "Rohit Sarayan",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210324/image"
      }
    },
    {
      "ccure_key": "329507",
      "EmployeeID": "329507",
      "EmpName": "Oz, Ufuk Aouadi",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210369,
        "EmpName": "Oz, Ufuk Aouadi",
        "EmployeeID": "329507",
        "PersonnelType": "Employee",
        "Manager_Name": "Alexander Tenenbaum",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210369/image"
      }
    },
    {
      "ccure_key": "name::torres daniela",
      "EmployeeID": "",
      "EmpName": "Torres, Daniela",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209959,
        "EmpName": "Torres, Daniela",
        "EmployeeID": "",
        "PersonnelType": "Employee",
        "Manager_Name": "Senia Carrillo",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209959/image"
      }
    },
    {
      "ccure_key": "329513",
      "EmployeeID": "329513",
      "EmpName": "Martinez, Britney Dafaney",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210371,
        "EmpName": "Martinez, Britney Dafaney",
        "EmployeeID": "329513",
        "PersonnelType": "Employee",
        "Manager_Name": "Rene Gracia",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210371/image"
      }
    },
    {
      "ccure_key": "329483",
      "EmployeeID": "329483",
      "EmpName": "Barrio, Matias",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210341,
        "EmpName": "Barrio, Matias",
        "EmployeeID": "329483",
        "PersonnelType": "Employee",
        "Manager_Name": "Fernanda Ocampo",
        "Manager_WU_ID": "322269",
        "Profile_Disabled": false,
        "Total_Cards": 2,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210341/image"
      }
    },
    {
      "ccure_key": "329452",
      "EmployeeID": "329452",
      "EmpName": "Khan, Farhan Ahmed",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210310,
        "EmpName": "Khan, Farhan Ahmed",
        "EmployeeID": "329452",
        "PersonnelType": "Employee",
        "Manager_Name": "Manish Mehra",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210310/image"
      }
    },
    {
      "ccure_key": "329462",
      "EmployeeID": "329462",
      "EmpName": "Salazar, Irma Eli",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210319,
        "EmpName": "Salazar, Irma Eli",
        "EmployeeID": "329462",
        "PersonnelType": "Employee",
        "Manager_Name": "Rene Gracia",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 0,
        "Employee_Status": "Deactive",
        "imageUrl": "/api/employees/2097210319/image"
      }
    },
    {
      "ccure_key": "329486",
      "EmployeeID": "329486",
      "EmpName": "Lam, Joyce",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210338,
        "EmpName": "Lam, Joyce",
        "EmployeeID": "329486",
        "PersonnelType": "Employee",
        "Manager_Name": "Kathleen Stagi",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 0,
        "Employee_Status": "Deactive",
        "imageUrl": "/api/employees/2097210338/image"
      }
    },
    {
      "ccure_key": "329185",
      "EmployeeID": "329185",
      "EmpName": "Kolukuluri, Pavan kumar",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210028,
        "EmpName": "Kolukuluri, Pavan kumar",
        "EmployeeID": "329185",
        "PersonnelType": "Employee",
        "Manager_Name": "Vijay Kouru",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210028/image"
      }
    },
    {
      "ccure_key": "329456",
      "EmployeeID": "329456",
      "EmpName": "Ortiz, Samantha",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210315,
        "EmpName": "Ortiz, Samantha",
        "EmployeeID": "329456",
        "PersonnelType": "Employee",
        "Manager_Name": "Rene Gracia",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 0,
        "Employee_Status": "Deactive",
        "imageUrl": "/api/employees/2097210315/image"
      }
    },
    {
      "ccure_key": "329038",
      "EmployeeID": "329038",
      "EmpName": "Sahu, Suresh",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097209789,
        "EmpName": "Sahu, Suresh",
        "EmployeeID": "329038",
        "PersonnelType": "Employee",
        "Manager_Name": "Romita Kukreja",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209789/image"
      }
    },
    {
      "ccure_key": "329427",
      "EmployeeID": "329427",
      "EmpName": "Ramasamy, Thiru",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210278,
        "EmpName": "Ramasamy, Thiru",
        "EmployeeID": "329427",
        "PersonnelType": "Employee",
        "Manager_Name": "Luka Culic",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210278/image"
      }
    },
    {
      "ccure_key": "329484",
      "EmployeeID": "329484",
      "EmpName": "Huaman, Yonatan donato",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210340,
        "EmpName": "Huaman, Yonatan donato",
        "EmployeeID": "329484",
        "PersonnelType": "Employee",
        "Manager_Name": "Fernanda Ocampo",
        "Manager_WU_ID": "322269",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210340/image"
      }
    },
    {
      "ccure_key": "329472",
      "EmployeeID": "329472",
      "EmpName": "Taylor, Wayne",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210331,
        "EmpName": "Taylor, Wayne",
        "EmployeeID": "329472",
        "PersonnelType": "Employee",
        "Manager_Name": "Steve Jones",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210331/image"
      }
    },
    {
      "ccure_key": "329476",
      "EmployeeID": "329476",
      "EmpName": "Mathew, Austin",
      "PersonnelType": "Employee",
      "raw": {
        "id": 2097210335,
        "EmpName": "Mathew, Austin",
        "EmployeeID": "329476",
        "PersonnelType": "Employee",
        "Manager_Name": "Renu Bhargava",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 3,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210335/image"
      }
    }
  ],
  "missing_contractors_sample": [
    {
      "ccure_key": "W0027943",
      "EmployeeID": "W0027943",
      "EmpName": "Traexler, Bernd",
      "VendorCompany": null,
      "raw": {
        "id": 2097210276,
        "EmpName": "Traexler, Bernd",
        "EmployeeID": "W0027943",
        "PersonnelType": "Contractor",
        "Manager_Name": "",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210276/image"
      }
    },
    {
      "ccure_key": "W0027970",
      "EmployeeID": "W0027970",
      "EmpName": "Vargas, Dilma",
      "VendorCompany": null,
      "raw": {
        "id": 2097210342,
        "EmpName": "Vargas, Dilma",
        "EmployeeID": "W0027970",
        "PersonnelType": "Contractor",
        "Manager_Name": "Mayer Pereira Fallas",
        "Manager_WU_ID": "237998",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210342/image"
      }
    },
    {
      "ccure_key": "80726456",
      "EmployeeID": "80726456",
      "EmpName": "Gantinapall, Siva Sanakaravaraprasad",
      "VendorCompany": null,
      "raw": {
        "id": 2097197894,
        "EmpName": "Gantinapall, Siva Sanakaravaraprasad",
        "EmployeeID": "80726456",
        "PersonnelType": "Contractor",
        "Manager_Name": "Senthilnathan Ranganathan",
        "Manager_WU_ID": "322083",
        "Profile_Disabled": false,
        "Total_Cards": 0,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097197894/image"
      }
    },
    {
      "ccure_key": "name::janoria jyoti",
      "EmployeeID": "",
      "EmpName": "Janoria, Jyoti",
      "VendorCompany": null,
      "raw": {
        "id": 2097210043,
        "EmpName": "Janoria, Jyoti",
        "EmployeeID": "",
        "PersonnelType": "Contractor",
        "Manager_Name": "Sam Ferando",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210043/image"
      }
    },
    {
      "ccure_key": "C0008206",
      "EmployeeID": "C0008206",
      "EmpName": "Gorijavolu, Harshit",
      "VendorCompany": null,
      "raw": {
        "id": 2097209823,
        "EmpName": "Gorijavolu, Harshit",
        "EmployeeID": "C0008206",
        "PersonnelType": "Contractor",
        "Manager_Name": "Brenda Gillespie",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097209823/image"
      }
    },
    {
      "ccure_key": "name::james brett",
      "EmployeeID": "",
      "EmpName": "James, Brett",
      "VendorCompany": null,
      "raw": {
        "id": 2097210061,
        "EmpName": "James, Brett",
        "EmployeeID": "",
        "PersonnelType": "Contractor",
        "Manager_Name": "Annie Vassallo",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "Total_Cards": 1,
        "Active_Cards": 1,
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097210061/image"
      }
    }
  ],
  "report_path": null
}











# C:\Users\W0024618\Desktop\global-page\backend\attendance-analytics\data_compare_service.py
"""
Compare CCURE active lists (employees & contractors) with uploaded Active sheets (from disk).
Provides compare_ccure_vs_sheets(mode='full', stats_detail='ActiveProfiles', limit_list=200, export=False)

When export=True, writes Excel report to OUTPUT_DIR and returns 'report_path'.
"""

from datetime import datetime
import os
import re
import uuid
import logging
import sys
from pathlib import Path
import pandas as pd

logger = logging.getLogger("data_compare_service")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

# Settings fallback (matches app.py pattern)
try:
    from settings import OUTPUT_DIR as SETTINGS_OUTPUT_DIR, DATA_DIR as SETTINGS_DATA_DIR, RAW_UPLOAD_DIR as SETTINGS_RAW_UPLOAD_DIR
    OUTPUT_DIR = Path(SETTINGS_OUTPUT_DIR)
    DATA_DIR = Path(SETTINGS_DATA_DIR)
    RAW_UPLOAD_DIR = Path(SETTINGS_RAW_UPLOAD_DIR)
except Exception:
    OUTPUT_DIR = Path(__file__).resolve().parent / "output"
    DATA_DIR = Path(__file__).resolve().parent / "data"
    RAW_UPLOAD_DIR = DATA_DIR / "raw_uploads"

OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
DATA_DIR.mkdir(parents=True, exist_ok=True)
RAW_UPLOAD_DIR.mkdir(parents=True, exist_ok=True)

# ccure client helper (optional)
try:
    import ccure_client
except Exception:
    ccure_client = None
    logger.warning("ccure_client not importable; CCURE calls will return None")

# ---------- small normalizers (kept local) ----------
def _normalize_employee_key(x):
    if x is None:
        return None
    try:
        s = str(x).strip()
        if s == "" or s.lower() in ("nan", "none", "na", "null"):
            return None
        return s
    except Exception:
        return None

def _normalize_card_like(s):
    if s is None:
        return None
    try:
        ss = str(s).strip()
        if ss == "":
            return None
        digits = re.sub(r'\D+', '', ss)
        if digits == "":
            return None
        return digits.lstrip('0') or digits
    except Exception:
        return None

def _normalize_name(s):
    if s is None:
        return None
    try:
        t = str(s).strip().lower()
        t = re.sub(r'[^\w\s]', '', t)
        t = re.sub(r'\s+', ' ', t).strip()
        return t if t else None
    except Exception:
        return None

def _make_w_variant(s):
    if s is None:
        return None
    ss = str(s).strip()
    if ss.upper().startswith('W'):
        return ss
    return 'W' + ss

def _numeric_variants(s):
    out = set()
    if s is None:
        return out
    try:
        s = str(s)
        clean = re.sub(r'\D', '', s)
        if clean:
            out.add(clean)
            out.add(clean.lstrip('0') or clean)
            out.add('W' + clean)
    except Exception:
        pass
    return out

def _safe_int(v):
    try:
        if v is None:
            return None
        return int(v)
    except Exception:
        try:
            return int(float(v))
        except Exception:
            return None

# ---------- CCURE fetch helpers ----------
def _fetch_ccure_list(detail_name):
    """
    Uses ccure_client.fetch_all_stats(detail_name) if available, otherwise tries per-page fetch.
    Returns list of dicts or [].
    """
    if ccure_client is None:
        logger.warning("ccure_client missing - cannot fetch CCURE lists")
        return []
    try:
        if hasattr(ccure_client, "fetch_all_stats"):
            res = ccure_client.fetch_all_stats(detail_name, limit=500)
            return res or []
    except Exception:
        logger.exception("fetch_all_stats failed")
    # fallback to paged fetch if available
    try:
        data = []
        page = 1
        limit = 500
        while True:
            if not hasattr(ccure_client, "fetch_stats_page"):
                break
            page_res = ccure_client.fetch_stats_page(detail_name, page=page, limit=limit)
            if not page_res:
                break
            part = page_res.get("data") or []
            if not part:
                break
            data.extend(part)
            total = int(page_res.get("total") or len(data) or 0)
            if len(data) >= total:
                break
            page += 1
            if page > 1000:
                break
        return data
    except Exception:
        logger.exception("per-page fetch failed for %s", detail_name)
        return []

# ---------- helpers to find/load latest sheet from disk ----------
def _find_latest_file_for_kind(kind: str):
    """
    kind == 'employee' or 'contractor'
    Prefer canonical file in DATA_DIR: active_<kind>.*,
    otherwise pick latest in RAW_UPLOAD_DIR that contains the kind token.
    """
    # 1) canonical in DATA_DIR
    for ext in (".xlsx", ".xls", ".csv"):
        p = DATA_DIR / f"active_{kind}{ext}"
        if p.exists():
            return p

    # 2) fallback: find latest raw file with kind token in RAW_UPLOAD_DIR
    try:
        files = [p for p in RAW_UPLOAD_DIR.iterdir() if p.is_file() and kind in p.name.lower() and p.suffix.lower() in (".xlsx", ".xls", ".csv")]
        if not files:
            # last fallback: any active_{kind}.* in RAW_UPLOAD_DIR
            files = [p for p in RAW_UPLOAD_DIR.iterdir() if p.is_file() and f"active_{kind}" in p.name.lower()]
        if not files:
            return None
        files.sort(key=lambda p: p.stat().st_mtime, reverse=True)
        return files[0]
    except Exception:
        return None

def _read_table(path: Path):
    try:
        if path.suffix.lower() == ".csv":
            df = pd.read_csv(path, dtype=str)
        else:
            df = pd.read_excel(path, sheet_name=0, dtype=str)
        df.columns = [str(c).strip() for c in df.columns]
        return df.fillna("")
    except Exception:
        logger.exception("Failed to read file %s", path)
        return pd.DataFrame()

def _first_present_from_row(row, candidates):
    for c in candidates:
        if c in row and pd.notna(row[c]) and str(row[c]).strip() != "":
            return row[c]
    for k in row.index:
        for c in candidates:
            if k.strip().lower() == c.strip().lower():
                val = row[k]
                if pd.notna(val) and str(val).strip() != "":
                    return val
    return None

# ---------- disk-based loaders to replace DB loaders ----------
def _load_active_employees_disk():
    """
    Return (set of normalized employee_ids, dict mapping id -> row sample, total_rows)
    Reads the latest employee sheet from data/.
    """
    path = _find_latest_file_for_kind("employee")
    if not path:
        return set(), {}, 0
    df = _read_table(path)
    ids = set()
    mapping = {}
    id_cols = ['Employee ID','EmployeeID','Employee Id','EmpID','Emp Id','Employee_Id']
    name_cols = ['Full Name','FullName','EmpName','Name','First Name','FirstName','Last Name']
    location_cols = ['Location City','Location','Location Description','City']
    status_cols = ['Current Status','Status','Employee Status','Employee_Status','Status (Current)','CurrentStatus']

    for _, row in df.iterrows():
        raw_row = row.to_dict()
        emp_id = _first_present_from_row(row, id_cols)
        if emp_id is None or str(emp_id).strip() == "":
            continue
        emp_id = str(emp_id).strip()
        ids.add(emp_id)
        full_name = _first_present_from_row(row, name_cols) or ""
        mapping[emp_id] = {
            "employee_id": emp_id,
            "full_name": full_name,
            "location_city": _first_present_from_row(row, location_cols),
            "status": _first_present_from_row(row, status_cols),
            "raw": raw_row
        }
    return ids, mapping, len(df)

def _load_active_contractors_disk():
    """
    Return (set of candidate contractor ids, mapping, total_rows)
    Reads latest contractor sheet from data/.
    """
    path = _find_latest_file_for_kind("contractor")
    if not path:
        return set(), {}, 0
    df = _read_table(path)
    ids = set()
    mapping = {}
    wsid_cols = ['Worker System Id','Worker System ID','Worker ID','WorkerSystemId','WorkerId']
    ipass_cols = ['iPass ID','"W" iPass ID','IPassID','iPassID','Ipass ID','IpassID']
    name_cols = ['Full Name','FullName','Name']
    vendor_cols = ['Vendor Company Name','Vendor']

    for _, row in df.iterrows():
        raw_row = row.to_dict()
        wsid = _first_present_from_row(row, wsid_cols)
        ipass = _first_present_from_row(row, ipass_cols)
        full_name = _first_present_from_row(row, name_cols)
        if wsid:
            wsid = str(wsid).strip()
            ids.add(wsid)
            mapping[wsid] = {"worker_system_id": wsid, "full_name": full_name, "vendor": _first_present_from_row(row, vendor_cols), "raw": raw_row}
        if ipass:
            ipass = str(ipass).strip()
            ids.add(ipass)
            mapping[ipass] = {"ipass_id": ipass, "full_name": full_name, "vendor": _first_present_from_row(row, vendor_cols), "raw": raw_row}
            wvar = _make_w_variant(ipass)
            ids.add(wvar)
            mapping[wvar] = {"ipass_id": ipass, "w_ipass": wvar, "full_name": full_name, "raw": raw_row}
        for cand in (wsid, ipass):
            if cand:
                for v in _numeric_variants(cand):
                    ids.add(v)
                    if v not in mapping:
                        mapping[v] = {"derived_id": v, "full_name": full_name, "raw": raw_row}
    return ids, mapping, len(df)

# ---------- helpers to match ccure -> disk lists (same logic as before) ----------
def _employee_matches_disk(cid, emp_ids_disk, emp_map_disk, ccure_row):
    if cid in emp_ids_disk:
        return True
    for v in _numeric_variants(cid):
        if v in emp_ids_disk:
            return True
    try:
        ci = _safe_int(cid)
        if ci is not None:
            for dbk in emp_ids_disk:
                if _safe_int(dbk) == ci:
                    return True
    except Exception:
        pass
    card_cid = _normalize_card_like(cid)
    if card_cid:
        for dbk in emp_ids_disk:
            if _normalize_card_like(dbk) == card_cid:
                return True
    try:
        name = None
        if isinstance(ccure_row, dict):
            name = ccure_row.get("EmpName") or ccure_row.get("FullName") or ccure_row.get("Name")
        normname = _normalize_name(name)
        if normname:
            for dbk, dbv in emp_map_disk.items():
                if _normalize_name(dbv.get("full_name")) == normname:
                    return True
    except Exception:
        pass
    return False

def _contractor_matches_disk(cid, contr_ids_disk, contr_map_disk, ccure_row):
    if cid in contr_ids_disk:
        return True
    for v in _numeric_variants(cid):
        if v in contr_ids_disk:
            return True
    try:
        ci = _safe_int(cid)
        if ci is not None:
            for dbk in contr_ids_disk:
                if _safe_int(dbk) == ci:
                    return True
    except Exception:
        pass
    card_cid = _normalize_card_like(cid)
    if card_cid:
        for dbk in contr_ids_disk:
            if _normalize_card_like(dbk) == card_cid:
                return True
    try:
        name = None
        if isinstance(ccure_row, dict):
            name = ccure_row.get("EmpName") or ccure_row.get("FullName") or ccure_row.get("Name")
        normname = _normalize_name(name)
        if normname:
            for dbk, dbv in contr_map_disk.items():
                if _normalize_name(dbv.get("full_name")) == normname:
                    return True
    except Exception:
        pass
    return False

# ---------- core compare function ----------
def compare_ccure_vs_sheets(mode="full", stats_detail="ActiveProfiles", limit_list=200, export=False):
    """
    Main public function used by /ccure/compare.
    Reads latest uploaded sheets from disk instead of DB tables.
    """
    result = {
        "ccure_active_employees_count": None,
        "ccure_active_contractors_count": None,
        "active_sheet_employee_count": None,
        "active_sheet_contractor_count": None,
        "missing_employees_count": None,
        "missing_contractors_count": None,
        "missing_employees_sample": [],
        "missing_contractors_sample": [],
        "report_path": None
    }

    # 1) fetch CCURE lists
    ccure_emps = _fetch_ccure_list("ActiveEmployees")
    ccure_contrs = _fetch_ccure_list("ActiveContractors")

    result["ccure_active_employees_count"] = len(ccure_emps)
    result["ccure_active_contractors_count"] = len(ccure_contrs)

    # 2) load uploaded sheets from disk (preferred) â€” returns (ids_set, mapping, total_rows)
    emp_ids_disk, emp_map_disk, emp_total_rows = _load_active_employees_disk()
    contr_ids_disk, contr_map_disk, contr_total_rows = _load_active_contractors_disk()

    result["active_sheet_employee_count"] = int(emp_total_rows)
    result["active_sheet_contractor_count"] = int(contr_total_rows)

    # 3) build ccure id sets for employees
    ccure_emp_id_set = set()
    ccure_emp_rows_by_id = {}
    for row in ccure_emps:
        try:
            eid = _normalize_employee_key(row.get("EmployeeID") or row.get("employee_id") or row.get("EmpID") or row.get("Employee Id"))
            if not eid:
                eid = _normalize_card_like(row.get("CardNumber") or row.get("iPass ID") or row.get("IPassID") or row.get("Card"))
            if not eid:
                fname = _normalize_name(row.get("EmpName") or row.get("FullName") or row.get("Name"))
                if fname:
                    eid = f"name::{fname}"
            if eid:
                ccure_emp_id_set.add(eid)
                ccure_emp_rows_by_id[eid] = row
        except Exception:
            continue

    # 4) employees missing = ccure_emp_id_set - emp_ids_disk (but consider numeric variants, int equality, card-like, name match)
    expanded_emp_disk_ids = set(emp_ids_disk)
    for v in list(emp_ids_disk):
        for nv in _numeric_variants(v):
            expanded_emp_disk_ids.add(nv)

    missing_emp_ids = []
    for cid in ccure_emp_id_set:
        try:
            if str(cid).startswith("name::"):
                name = cid.split("::", 1)[1]
                found = False
                for dbk, dbv in emp_map_disk.items():
                    n = _normalize_name(dbv.get("full_name"))
                    if n and n == name:
                        found = True
                        break
                if not found:
                    missing_emp_ids.append(cid)
                continue

            ccure_row = ccure_emp_rows_by_id.get(cid) or {}
            if _employee_matches_disk(cid, expanded_emp_disk_ids, emp_map_disk, ccure_row):
                continue

            found = False
            for v in _numeric_variants(cid):
                if v in expanded_emp_disk_ids:
                    found = True
                    break
            if not found:
                missing_emp_ids.append(cid)
        except Exception:
            missing_emp_ids.append(cid)

    result["missing_employees_count"] = len(missing_emp_ids)
    samp_emp = []
    for mid in missing_emp_ids[:limit_list]:
        r = ccure_emp_rows_by_id.get(mid) or {}
        samp_emp.append({
            "ccure_key": mid,
            "EmployeeID": r.get("EmployeeID"),
            "EmpName": r.get("EmpName") or r.get("FullName") or r.get("Name"),
            "PersonnelType": r.get("PersonnelType"),
            "raw": r
        })
    result["missing_employees_sample"] = samp_emp

    # 5) contractors
    ccure_contr_id_set = set()
    ccure_contr_rows_by_id = {}
    for row in ccure_contrs:
        try:
            cand_ids = []
            e1 = _normalize_employee_key(row.get("EmployeeID") or row.get("employee_id") or row.get("Employee Id"))
            if e1:
                cand_ids.append(e1)
            ip = _normalize_employee_key(row.get("IPassID") or row.get("iPass ID") or row.get("iPass") or row.get("IPASSID"))
            if ip:
                cand_ids.append(ip)
                cand_ids.append(_make_w_variant(ip))
            cardlike = _normalize_card_like(row.get("CardNumber") or row.get("card_number") or row.get("Badge") or row.get("BadgeNo"))
            if cardlike:
                cand_ids.append(cardlike)
                cand_ids.extend(list(_numeric_variants(cardlike)))
            if not cand_ids:
                fname = _normalize_name(row.get("EmpName") or row.get("FullName") or row.get("Name"))
                if fname:
                    cand_ids.append(f"name::{fname}")
            for cid in cand_ids:
                if cid:
                    ccure_contr_id_set.add(cid)
                    ccure_contr_rows_by_id[cid] = row
            if not cand_ids:
                key = f"unknown::{uuid.uuid4().hex[:8]}"
                ccure_contr_id_set.add(key)
                ccure_contr_rows_by_id[key] = row
        except Exception:
            continue

    expanded_contr_disk_ids = set(contr_ids_disk)
    for v in list(contr_ids_disk):
        for nv in _numeric_variants(v):
            expanded_contr_disk_ids.add(nv)

    missing_contr_ids = []
    for cid in ccure_contr_id_set:
        try:
            if str(cid).startswith("name::"):
                name = cid.split("::", 1)[1]
                found = False
                for dbk, dbv in contr_map_disk.items():
                    n = _normalize_name(dbv.get("full_name"))
                    if n and n == name:
                        found = True
                        break
                if not found:
                    missing_contr_ids.append(cid)
                continue

            ccure_row = ccure_contr_rows_by_id.get(cid) or {}
            if _contractor_matches_disk(cid, expanded_contr_disk_ids, contr_map_disk, ccure_row):
                continue

            found = False
            for v in _numeric_variants(cid):
                if v in expanded_contr_disk_ids:
                    found = True
                    break
            if not found:
                missing_contr_ids.append(cid)
        except Exception:
            missing_contr_ids.append(cid)

    result["missing_contractors_count"] = len(missing_contr_ids)
    samp_contr = []
    for mid in missing_contr_ids[:limit_list]:
        r = ccure_contr_rows_by_id.get(mid) or {}
        samp_contr.append({
            "ccure_key": mid,
            "EmployeeID": r.get("EmployeeID"),
            "EmpName": r.get("EmpName") or r.get("FullName") or r.get("Name"),
            "VendorCompany": r.get("Vendor Company Name") or r.get("Vendor"),
            "raw": r
        })
    result["missing_contractors_sample"] = samp_contr

    # 6) optionally export report
    if export:
        try:
            OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
            ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
            fname = f"missing_vs_ccure_{ts}.xlsx"
            fullpath = OUTPUT_DIR / fname
            df_emp = pd.DataFrame(samp_emp) if samp_emp else pd.DataFrame(columns=["ccure_key","EmployeeID","EmpName","PersonnelType"])
            df_con = pd.DataFrame(samp_contr) if samp_contr else pd.DataFrame(columns=["ccure_key","EmployeeID","EmpName","VendorCompany"])
            try:
                with pd.ExcelWriter(fullpath, engine="openpyxl") as writer:
                    df_emp.to_excel(writer, sheet_name="MissingEmployees", index=False)
                    df_con.to_excel(writer, sheet_name="MissingContractors", index=False)
                result["report_path"] = fname
            except Exception:
                with pd.ExcelWriter(fullpath) as writer:
                    df_emp.to_excel(writer, sheet_name="MissingEmployees", index=False)
                    df_con.to_excel(writer, sheet_name="MissingContractors", index=False)
                result["report_path"] = fname
        except Exception:
            logger.exception("Failed to export report")
            result["report_path"] = None

    return result

# Expose public function name expected by app.py
__all__ = ["compare_ccure_vs_sheets", "compare_ccure_vs_sheets"]  # keep backwards compatibility
# End of data_compare_service.py











 # app.py (keep only /ccure/verify, removed /ccure/averages)
from fastapi import FastAPI, UploadFile, File, HTTPException, Query
from fastapi.responses import JSONResponse, FileResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
import shutil
import uuid
import json
import logging
from pathlib import Path
from datetime import date, datetime, timedelta
import re
import asyncio
from typing import Optional, Dict, Any

# --- DB / models imports (kept for endpoints that still use DB like headcount/attendance fallback) ---
from db import SessionLocal
from models import LiveSwipe, AttendanceSummary

# --- settings (optional override) ---
try:
    from settings import DATA_DIR as SETTINGS_DATA_DIR, OUTPUT_DIR as SETTINGS_OUTPUT_DIR
    DATA_DIR = Path(SETTINGS_DATA_DIR)
    OUTPUT_DIR = Path(SETTINGS_OUTPUT_DIR)
except Exception:
    DATA_DIR = Path(__file__).resolve().parent / "data"
    OUTPUT_DIR = Path(__file__).resolve().parent / "output"

RAW_UPLOADS_DIR = DATA_DIR / "raw_uploads"
DATA_DIR.mkdir(parents=True, exist_ok=True)
RAW_UPLOADS_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

app = FastAPI(title="Attendance Analytics")

logger = logging.getLogger("attendance_app")
logger.setLevel(logging.INFO)
if not logger.handlers:
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)

# ----------------- GLOBAL TIMEOUTS (UNIFY) -----------------
REGION_TIMEOUT_SECONDS = 20
COMPUTE_WAIT_TIMEOUT_SECONDS = 30
COMPUTE_SYNC_TIMEOUT_SECONDS = 60
# ----------------------------------------------------------

_allowed_origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://localhost:3008"
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=_allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

_broadcaster_clients = set()

def broadcast_ccure_update(payload: dict):
    if not _broadcaster_clients:
        return
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = None
    for q in list(_broadcaster_clients):
        try:
            if loop and loop.is_running():
                loop.call_soon_threadsafe(q.put_nowait, payload)
            else:
                q.put_nowait(payload)
        except Exception:
            logger.exception("Failed to push payload to SSE client (will remove client)")
            try:
                _broadcaster_clients.discard(q)
            except Exception:
                pass

async def _sse_event_generator(client_queue: asyncio.Queue):
    try:
        while True:
            payload = await client_queue.get()
            try:
                data = json.dumps(payload, default=str)
            except Exception:
                data = json.dumps({"error": "serialization error", "payload": str(payload)})
            yield f"data: {data}\n\n"
    finally:
        try:
            _broadcaster_clients.discard(client_queue)
        except Exception:
            pass
        return

@app.get("/ccure/stream")
async def ccure_stream():
    q = asyncio.Queue()
    _broadcaster_clients.add(q)
    generator = _sse_event_generator(q)
    headers = {"Cache-Control": "no-cache", "X-Accel-Buffering": "no"}
    return StreamingResponse(generator, media_type="text/event-stream", headers=headers)

def _guess_region_from_text(txt: str) -> str:
    if not txt:
        return "unknown"
    s = str(txt).strip().lower()
    s = re.sub(r"[,\-/()]", " ", s)
    if any(k in s for k in ("pune","quezon city","taguig city","bengaluru","hyderabad","chennai","manila","singapore","hong kong","beijing","shanghai","jakarta","kuala","osaka","tokyo","seoul","bangkok")):
        return "apac"
    if any(k in s for k in ("london","dublin","paris","frankfurt","amsterdam","stockholm","cape town","johannesburg","berlin","brussels","madrid","rome","milan")):
        return "emea"
    if any(k in s for k in ("mexico","bogota","buenos","santiago","sao","salvador","lima","caracas")):
        return "laca"
    if any(k in s for k in ("denver","new york","ny","chicago","toronto","vancouver","los angeles","san francisco","boston","houston","atlanta","miami")):
        return "namer"
    return "unknown"

@app.get("/headcount")
def api_headcount():
    try:
        totals = {"apac": 0, "emea": 0, "laca": 0, "namer": 0, "unknown": 0}
        with SessionLocal() as db:
            try:
                today = date.today()
                rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
                if rows:
                    for r in rows:
                        try:
                            partition = None
                            if r.derived and isinstance(r.derived, dict):
                                partition = r.derived.get("partition")
                            loc = partition or "unknown"
                            region = _guess_region_from_text(loc)
                            totals[region] = totals.get(region, 0) + 1
                        except Exception:
                            totals["unknown"] += 1
                else:
                    start = datetime.combine(today, datetime.min.time())
                    end = datetime.combine(today, datetime.max.time())
                    swipes = db.query(LiveSwipe).filter(LiveSwipe.timestamp >= start, LiveSwipe.timestamp <= end).all()
                    for s in swipes:
                        loc = s.partition or "unknown"
                        region = _guess_region_from_text(loc)
                        totals[region] = totals.get(region, 0) + 1
            except Exception:
                logger.exception("Failed to compute headcount regions")
        out = {
            "apac": int(totals.get("apac", 0)),
            "emea": int(totals.get("emea", 0)),
            "laca": int(totals.get("laca", 0)),
            "namer": int(totals.get("namer", 0))
        }
        return JSONResponse(out)
    except Exception as exc:
        logger.exception("api_headcount failed")
        raise HTTPException(status_code=500, detail=f"headcount error: {exc}")

# ---------- Helpers retained (normalize / safe conversions) -------------
def _normalize_employee_key(x) -> Optional[str]:
    if x is None:
        return None
    try:
        s = str(x).strip()
        if s == "" or s.lower() in ("nan", "none", "na", "null"):
            return None
        return s
    except Exception:
        return None

def _normalize_card_like(s) -> Optional[str]:
    if s is None:
        return None
    try:
        ss = str(s).strip()
        if ss == "":
            return None
        digits = re.sub(r'\D+', '', ss)
        if digits == "":
            return None
        return digits.lstrip('0') or digits
    except Exception:
        return None

def _safe_int(v):
    try:
        if v is None:
            return None
        return int(v)
    except Exception:
        try:
            return int(float(v))
        except Exception:
            return None

# ---------- build_ccure_averages (fallback) ------------------------------
def build_ccure_averages(start_date: Optional[str] = None, end_date: Optional[str] = None):
    """
    Fallback averages computation using AttendanceSummary only.
    Returns a compact shape (live_today, ccure_active, averages, notes).
    """
    try:
        def _parse_date_param(s):
            if not s:
                return None
            try:
                return datetime.strptime(s, "%Y-%m-%d").date()
            except Exception:
                try:
                    return date.fromisoformat(s)
                except Exception:
                    return None

        today = date.today()
        start_obj = _parse_date_param(start_date) if start_date else (today - timedelta(days=6))
        end_obj = _parse_date_param(end_date) if end_date else today
        if start_obj is None or end_obj is None or start_obj > end_obj:
            start_obj = today - timedelta(days=6)
            end_obj = today

        with SessionLocal() as db:
            try:
                att_rows = db.query(AttendanceSummary).filter(AttendanceSummary.date == today).all()
            except Exception:
                logger.exception("Failed to query AttendanceSummary")
                att_rows = []

            live_emp = 0
            live_contr = 0
            unknown_count = 0
            seen_keys = set()

            def classify_from_derived(derived):
                try:
                    if not derived or not isinstance(derived, dict):
                        return "contractor"
                    for k in ("PersonnelType","personnelType","personnel_type","Personnel Type","Type","personnel"):
                        v = derived.get(k)
                        if v and "employee" in str(v).strip().lower():
                            return "employee"
                    for k in ("Employee_Status","Employee Status","Status"):
                        v = derived.get(k)
                        if v and "terminated" in str(v).strip().lower():
                            return "employee"
                    return "contractor"
                except Exception:
                    return "contractor"

            if att_rows:
                for a in att_rows:
                    key = None
                    try:
                        key = _normalize_employee_key(a.employee_id)
                    except Exception:
                        key = None
                    if not key:
                        try:
                            key = _normalize_card_like(a.derived.get('card_number') if (a.derived and isinstance(a.derived, dict)) else None)
                        except Exception:
                            key = None
                    if not key:
                        unknown_count += 1
                        continue
                    if key in seen_keys:
                        continue
                    seen_keys.add(key)
                    cls = classify_from_derived(a.derived)
                    if cls == "employee":
                        live_emp += 1
                    elif cls == "contractor":
                        live_contr += 1
                    else:
                        unknown_count += 1

                live_total_reported = live_emp + live_contr + unknown_count
                live_total_details = len(att_rows)
            else:
                live_total_reported = 0
                live_total_details = 0
                try:
                    import region_clients
                    details = []
                    try:
                        details = region_clients.fetch_all_details(timeout=REGION_TIMEOUT_SECONDS) or []
                    except Exception:
                        logger.exception("region_clients.fetch_all_details failed in build_ccure_averages()")
                        details = []
                    if details:
                        for d in details:
                            try:
                                cls = "contractor"
                                for k in ("PersonnelType","personnelType","personnel_type","Personnel Type","Type","personnel"):
                                    v = d.get(k)
                                    if v and "employee" in str(v).strip().lower():
                                        cls = "employee"
                                        break
                                if cls == "employee":
                                    live_emp += 1
                                else:
                                    live_contr += 1
                                live_total_details += 1
                            except Exception:
                                continue
                        live_total_reported = live_emp + live_contr
                    else:
                        try:
                            regions = region_clients.fetch_all_regions(timeout=REGION_TIMEOUT_SECONDS) or []
                            for r in regions:
                                try:
                                    c = r.get("count")
                                    if isinstance(c, (int, float)):
                                        live_total_reported += int(c)
                                except Exception:
                                    continue
                        except Exception:
                            logger.exception("region_clients.fetch_all_regions failed in build_ccure_averages()")
                except Exception:
                    logger.exception("region_clients not importable in build_ccure_averages()")

            # compute avg range using AttendanceSummary if possible
            avg_range = None
            try:
                q = db.query(AttendanceSummary.date, AttendanceSummary.employee_id, AttendanceSummary.presence_count)\
                      .filter(AttendanceSummary.date >= start_obj, AttendanceSummary.date <= end_obj).all()
                by_date = {}
                for row in q:
                    d = row[0]
                    key = (row[1] or "").strip() if row[1] else None
                    if not key:
                        continue
                    if d not in by_date:
                        by_date[d] = set()
                    try:
                        presence_val = getattr(row, 'presence_count', row[2])
                        if int(presence_val) > 0:
                            by_date[d].add(key)
                    except Exception:
                        by_date[d].add(key)
                days_count = (end_obj - start_obj).days + 1
                daily_counts = [len(by_date.get(start_obj + timedelta(days=i), set())) for i in range(days_count)]
                if days_count and any(daily_counts):
                    avg_range = int(round(sum(daily_counts) / float(days_count)))
                else:
                    avg_range = None
            except Exception:
                logger.exception("Failed computing range average from AttendanceSummary")
                avg_range = None

        # fallback: use region history to compute avg_range if still None
        if avg_range is None:
            try:
                import region_clients
                entries = region_clients.fetch_all_history(timeout=REGION_TIMEOUT_SECONDS) or []
                agg = {}
                for e in entries:
                    try:
                        dstr = e.get("date")
                        if not dstr:
                            continue
                        region_obj = e.get("region") if isinstance(e.get("region"), dict) else None
                        emp = None
                        con = None
                        tot = None
                        if region_obj:
                            emp = _safe_int(region_obj.get("Employee"))
                            con = _safe_int(region_obj.get("Contractor"))
                            tot = _safe_int(region_obj.get("total")) or ((emp or 0) + (con or 0))
                        else:
                            emp = _safe_int(e.get("Employee"))
                            con = _safe_int(e.get("Contractor"))
                            tot = _safe_int(e.get("total"))
                        if emp is None and con is None:
                            continue
                        if tot is None:
                            tot = (emp or 0) + (con or 0)
                        if dstr not in agg:
                            agg[dstr] = {"total": 0, "count": 0}
                        agg[dstr]["total"] += tot or 0
                        agg[dstr]["count"] += 1
                    except Exception:
                        continue
                per_date_totals = []
                days_count = (end_obj - start_obj).days + 1
                for i in range(days_count):
                    dcheck = (start_obj + timedelta(days=i)).isoformat()
                    if dcheck in agg and agg[dcheck]["count"] > 0:
                        per_day_avg = float(agg[dcheck]["total"]) / float(agg[dcheck]["count"])
                        per_date_totals.append(per_day_avg)
                if per_date_totals:
                    avg_range = int(round(sum(per_date_totals) / float(len(per_date_totals))))
            except Exception:
                logger.exception("Failed computing avg_range from region history in fallback")

        # get ccure stats if available
        ccure_stats = {}
        try:
            import ccure_client
            if hasattr(ccure_client, "get_global_stats"):
                ccure_stats = ccure_client.get_global_stats() or {}
        except Exception:
            logger.debug("ccure_client.get_global_stats not available", exc_info=True)

        cc_active_emps = None
        cc_active_contractors = None
        try:
            if isinstance(ccure_stats, dict):
                a = ccure_stats.get("ActiveEmployees") or ccure_stats.get("active_employees") or None
                b = ccure_stats.get("ActiveContractors") or ccure_stats.get("active_contractors") or None
                if a is not None and str(a).strip() != "":
                    cc_active_emps = int(a)
                if b is not None and str(b).strip() != "":
                    cc_active_contractors = int(b)
        except Exception:
            cc_active_emps = cc_active_contractors = None

        emp_pct = None
        contr_pct = None
        overall_pct = None
        try:
            if isinstance(cc_active_emps, int) and cc_active_emps > 0:
                emp_pct = round((live_emp / float(cc_active_emps)) * 100.0, 2)
            if isinstance(cc_active_contractors, int) and cc_active_contractors > 0:
                contr_pct = round((live_contr / float(cc_active_contractors)) * 100.0, 2)
            if isinstance(cc_active_emps, int) and isinstance(cc_active_contractors, int) and (cc_active_emps + cc_active_contractors) > 0:
                overall_pct = round(((live_emp + live_contr) / float(cc_active_emps + cc_active_contractors)) * 100.0, 2)
        except Exception:
            emp_pct = contr_pct = overall_pct = None

        resp = {
            "date": today.isoformat(),
            "notes": f"Computed over range {start_obj.isoformat()} -> {end_obj.isoformat()}" if (start_date or end_date) else None,
            "live_today": {
                "employee": live_emp,
                "contractor": live_contr,
                "total_reported": live_total_reported,
                "total_from_details": live_total_details
            },
            "ccure_active": {
                "active_employees": cc_active_emps,
                "active_contractors": cc_active_contractors,
                "ccure_active_employees_reported": cc_active_emps,
                "ccure_active_contractors_reported": cc_active_contractors
            },
            "averages": {
                "employee_pct": emp_pct,
                "contractor_pct": contr_pct,
                "overall_pct": overall_pct,
                "avg_headcount_last_7_days": avg_range,
                "head_emp_pct_vs_ccure_today": emp_pct,
                "head_contractor_pct_vs_ccure_today": contr_pct,
                "headcount_overall_pct_vs_ccure_today": overall_pct,
                "history_avg_overall_last_7_days": avg_range
            }
        }

        return resp
    except Exception:
        logger.exception("build_ccure_averages failed")
        raise

# -------------------------
# Upload endpoints (store uploads under data/ and data/raw_uploads/ and rotate)
# -------------------------
ALLOWED_EXT = (".xls", ".xlsx", ".csv")

def _remove_old_files_for_kind(kind: str):
    """
    Remove previous canonical files and previous raw uploads that include kind in filename.
    """
    try:
        # canonical in DATA_DIR
        for p in DATA_DIR.iterdir():
            if p.is_file() and f"active_{kind}" in p.name.lower():
                try:
                    p.unlink()
                except Exception:
                    logger.warning("Could not remove old canonical file %s", p)
        # remove raw uploads for same kind to keep only latest raw (user requested)
        for p in RAW_UPLOADS_DIR.iterdir():
            if p.is_file() and kind in p.name.lower():
                try:
                    p.unlink()
                except Exception:
                    logger.warning("Could not remove old raw file %s", p)
    except Exception:
        logger.exception("error while removing old files for kind=%s", kind)

def _save_upload_and_rotate(upload_file: UploadFile, kind: str) -> dict:
    """
    Save the uploaded file as:
      - data/active_<kind>.<ext>     (canonical)
      - data/raw_uploads/<timestamp>_<kind>_<origname>  (raw trace)
    Remove previous files for same kind (both canonical & raw).
    Returns metadata dict.
    """
    fname = Path(upload_file.filename).name
    ext = Path(fname).suffix.lower()
    if ext not in ALLOWED_EXT:
        raise HTTPException(status_code=400, detail="Only .xls .xlsx .csv allowed")

    # rotate old files
    _remove_old_files_for_kind(kind)

    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    raw_name = f"{ts}_{kind}_{fname}"
    raw_path = RAW_UPLOADS_DIR / raw_name

    # Save raw
    try:
        with raw_path.open("wb") as out_f:
            shutil.copyfileobj(upload_file.file, out_f)
    finally:
        try:
            upload_file.file.close()
        except Exception:
            pass

    # Write canonical: keep same extension as original (simpler)
    canonical_path = DATA_DIR / f"active_{kind}{ext}"
    try:
        shutil.copy(raw_path, canonical_path)
    except Exception:
        logger.exception("Failed to write canonical copy for %s", canonical_path)

    info = {
        "raw_saved": str(raw_path),
        "canonical_saved": str(canonical_path),
        "original_filename": fname,
        "size_bytes": raw_path.stat().st_size if raw_path.exists() else None
    }
    logger.info("Uploaded %s: %s", kind, info)
    return info

@app.post("/upload/active-employees")
async def upload_active_employees(file: UploadFile = File(...)):
    """
    Upload Active Employee sheet:
      - stores raw to data/raw_uploads and canonical to data/active_employee.*
      - removes previous uploaded employee sheets (raw + canonical)
      - does NOT write rows into DB
    """
    if not file:
        raise HTTPException(status_code=400, detail="no file provided")
    try:
        info = _save_upload_and_rotate(file, kind="employee")
        return JSONResponse({"status": "ok", "detail": info})
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("employee upload failed")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/upload/active-contractors")
async def upload_active_contractors(file: UploadFile = File(...)):
    """
    Upload Active Contractor sheet:
      - stores raw to data/raw_uploads and canonical to data/active_contractor.*
      - removes previous uploaded contractor sheets (raw + canonical)
      - does NOT write rows into DB
    """
    if not file:
        raise HTTPException(status_code=400, detail="no file provided")
    try:
        info = _save_upload_and_rotate(file, kind="contractor")
        return JSONResponse({"status": "ok", "detail": info})
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("contractor upload failed")
        raise HTTPException(status_code=500, detail=str(e))

# ---------- map detailed -> compact (used when compute returns detailed) ----
def _map_detailed_to_resp(detailed: Dict[str, Any]) -> Dict[str, Any]:
    # unchanged mapping from earlier implementation (kept identical to previous)
    live_h = detailed.get("live_headcount", {}) or {}
    head_h = detailed.get("headcount", {}) or {}
    ccure_active_obj = detailed.get("ccure_active", {}) or {}
    averages_obj = detailed.get("averages", {}) or {}

    def to_int(v):
        try:
            return None if v is None else int(v)
        except Exception:
            try:
                return int(float(v))
            except Exception:
                return None

    live_employee = int(live_h.get("employee") or head_h.get("employee") or 0)
    live_contractor = int(live_h.get("contractor") or head_h.get("contractor") or 0)
    total_reported = int(
        live_h.get("currently_present_total")
        or head_h.get("total_visited_today")
        or (live_employee + live_contractor)
        or 0
    )
    total_from_details = int(head_h.get("total_visited_today") or 0)

    mapped_headcount = {
        "total_visited_today": int(head_h.get("total_visited_today") or 0),
        "employee": int(head_h.get("employee") or 0),
        "contractor": int(head_h.get("contractor") or 0),
        "by_location": head_h.get("by_location") or {}
    }

    resp = {
        "date": detailed.get("date"),
        "notes": detailed.get("notes"),
        "live_today": {
            "employee": live_employee,
            "contractor": live_contractor,
            "total_reported": total_reported,
            "total_from_details": total_from_details
        },
        "headcount": mapped_headcount,
        "live_headcount": live_h,
        "ccure_active": {
            "active_employees": ccure_active_obj.get("ccure_active_employees_reported")
                             or ccure_active_obj.get("active_employees"),
            "active_contractors": ccure_active_obj.get("ccure_active_contractors_reported")
                               or ccure_active_obj.get("active_contractors"),
            "ccure_active_employees_reported": ccure_active_obj.get("ccure_active_employees_reported"),
            "ccure_active_contractors_reported": ccure_active_obj.get("ccure_active_contractors_reported")
        },
        "averages": averages_obj
    }
    return resp

# ---------- build a verify-compatible summary from mapped payload -----------
def _build_verify_like_summary_from_mapped(mapped: Dict[str, Any], include_raw: bool = False) -> Dict[str, Any]:
    def to_int(v):
        try:
            return None if v is None else int(v)
        except Exception:
            try:
                return int(float(v))
            except Exception:
                return None

    cc = mapped.get("ccure_active", {}) or {}
    head = mapped.get("headcount", {}) or {}
    live_head = mapped.get("live_headcount", {}) or {}
    averages = mapped.get("averages", {}) or {}

    cc_emp = to_int(cc.get("ccure_active_employees_reported") or cc.get("active_employees"))
    cc_con = to_int(cc.get("ccure_active_contractors_reported") or cc.get("active_contractors"))

    head_total = to_int(head.get("total_visited_today") or mapped.get("live_today", {}).get("total_from_details"))
    head_emp = to_int(head.get("employee") or mapped.get("live_today", {}).get("employee"))
    head_con = to_int(head.get("contractor") or mapped.get("live_today", {}).get("contractor"))

    live_total = to_int(live_head.get("currently_present_total") or mapped.get("live_today", {}).get("total_reported"))
    live_emp = to_int(live_head.get("employee") or mapped.get("live_today", {}).get("employee"))
    live_con = to_int(live_head.get("contractor") or mapped.get("live_today", {}).get("contractor"))

    history_emp_avg = averages.get("history_avg_employee_last_7_days")
    history_con_avg = averages.get("history_avg_contractor_last_7_days")
    history_overall_avg = averages.get("history_avg_overall_last_7_days")

    def pct(n, d):
        try:
            if n is None or d is None:
                return None
            if float(d) == 0:
                return None
            return round((float(n) / float(d)) * 100.0, 2)
        except Exception:
            return None

    summary = {
        "date": mapped.get("date"),
        "ccure_reported": {
            "employees": cc_emp,
            "contractors": cc_con,
            "total_reported": (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None
        },
        "headcount_attendance_summary": {
            "total_visited_today": head_total,
            "employee": head_emp,
            "contractor": head_con,
        },
        "live_headcount_region_clients": {
            "currently_present_total": live_total,
            "employee": live_emp,
            "contractor": live_con,
        },
        "percentages_vs_ccure": {
            "head_employee_pct_vs_ccure_today": pct(head_emp, cc_emp),
            "head_contractor_pct_vs_ccure_today": pct(head_con, cc_con),
            "head_overall_pct_vs_ccure_today": pct(head_total, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None),
            "live_employee_pct_vs_ccure_today": pct(live_emp, cc_emp),
            "live_contractor_pct_vs_ccure_today": pct(live_con, cc_con),
            "live_overall_pct_vs_ccure_today": pct(live_total, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None),
            "history_employee_pct_vs_ccure": pct(history_emp_avg, cc_emp),
            "history_contractor_pct_vs_ccure": pct(history_con_avg, cc_con),
            "history_overall_pct_vs_ccure": pct(history_overall_avg, (cc_emp + cc_con) if (cc_emp is not None and cc_con is not None) else None)
        },
        "averages": {
            "history_avg_employee_last_7_days": history_emp_avg,
            "history_avg_contractor_last_7_days": history_con_avg,
            "history_avg_overall_last_7_days": history_overall_avg,
            "avg_headcount_last_7_days_db": averages.get("avg_headcount_last_7_days") or averages.get("avg_headcount_last_7_days_db"),
            "avg_headcount_per_site_last_7_days": averages.get("avg_headcount_per_site_last_7_days"),
            "employee_pct": averages.get("employee_pct"),
            "contractor_pct": averages.get("contractor_pct"),
            "overall_pct": averages.get("overall_pct"),
            **({k: v for k, v in averages.items() if k not in (
                "history_avg_employee_last_7_days",
                "history_avg_contractor_last_7_days",
                "history_avg_overall_last_7_days",
                "avg_headcount_last_7_days",
                "avg_headcount_last_7_days_db",
                "avg_headcount_per_site_last_7_days",
                "employee_pct","contractor_pct","overall_pct"
            )})
        },
        "notes": mapped.get("notes")
    }

    summary["headcount_details"] = {
        "total_visited_today": head_total,
        "employee": head_emp,
        "contractor": head_con,
        "by_location": head.get("by_location") if isinstance(head.get("by_location"), dict) else {}
    }
    summary["live_headcount_details"] = {
        "currently_present_total": live_total,
        "employee": live_emp,
        "contractor": live_con,
        "by_location": live_head.get("by_location") if isinstance(live_head.get("by_location"), dict) else {}
    }

    summary["ccure_active"] = {
        "active_employees": cc.get("active_employees") or cc.get("ccure_active_employees_reported"),
        "active_contractors": cc.get("active_contractors") or cc.get("ccure_active_contractors_reported"),
        "ccure_active_employees_reported": cc.get("ccure_active_employees_reported"),
        "ccure_active_contractors_reported": cc.get("ccure_active_contractors_reported")
    }

    return summary

# ---------- /ccure/verify (already present in your original) -----
@app.get("/ccure/verify")
def ccure_verify(
    raw: bool = Query(False, description="if true, include the raw compute payload for debugging"),
    start_date: Optional[str] = Query(None, description="YYYY-MM-DD start date (inclusive)"),
    end_date: Optional[str] = Query(None, description="YYYY-MM-DD end date (inclusive)")
):
    """
    Synchronous verification endpoint. Prefer compute_visit_averages() (synchronous call).
    If compute raises or fails, fall back to build_ccure_averages() so output shape remains consistent.
    """
    try:
        detailed = None
        try:
            from ccure_compare_service import compute_visit_averages
            detailed = compute_visit_averages(start_date, end_date, timeout=REGION_TIMEOUT_SECONDS)
        except Exception:
            logger.exception("compute_visit_averages() failed inside /ccure/verify; falling back")
            detailed = None

        if isinstance(detailed, dict):
            mapped = _map_detailed_to_resp(detailed)
            summary = _build_verify_like_summary_from_mapped(mapped, include_raw=raw)
            if raw and isinstance(detailed, dict):
                summary["raw"] = detailed
            return JSONResponse(summary)
        else:
            fallback = build_ccure_averages(start_date, end_date)
            mapped_fallback = {
                "date": fallback.get("date"),
                "notes": fallback.get("notes"),
                "live_today": fallback.get("live_today", {}),
                "headcount": {
                    "total_visited_today": fallback.get("live_today", {}).get("total_from_details") or fallback.get("live_today", {}).get("total_reported"),
                    "employee": fallback.get("live_today", {}).get("employee"),
                    "contractor": fallback.get("live_today", {}).get("contractor"),
                    "by_location": {}
                },
                "live_headcount": {
                    "currently_present_total": fallback.get("live_today", {}).get("total_reported"),
                    "employee": fallback.get("live_today", {}).get("employee"),
                    "contractor": fallback.get("live_today", {}).get("contractor"),
                    "by_location": {}
                },
                "ccure_active": fallback.get("ccure_active", {}),
                "averages": fallback.get("averages", {})
            }

            summary = _build_verify_like_summary_from_mapped(mapped_fallback, include_raw=raw)
            if raw:
                summary["raw"] = mapped_fallback
       
            return JSONResponse(summary)
    except Exception as e:
        logger.exception("ccure_verify failed")
        raise HTTPException(status_code=500, detail=f"ccure verify error: {e}")

# ---------- /ccure/compare -> uses data_compare_service.compare_ccure_vs_sheets ----------
@app.get("/ccure/compare")
def ccure_compare(
    mode: str = Query("full", description="full or stats"),
    stats_detail: str = Query("ActiveProfiles", description="when mode=stats use this"),
    limit_list: int = Query(200, ge=1, le=5000, description="max rows returned in list samples"),
    export: bool = Query(False, description="if true, writes Excel report to server and returns report_path")
):
    try:
        from data_compare_service import compare_ccure_vs_sheets
    except Exception as e:
        logger.exception("data_compare_service import failed")
        raise HTTPException(status_code=500, detail=f"compare service unavailable: {e}")

    res = compare_ccure_vs_sheets(mode=mode, stats_detail=stats_detail, limit_list=limit_list, export=export)
    if not isinstance(res, dict):
        return JSONResponse({"error": "compare service returned unexpected result"}, status_code=500)
    return JSONResponse(res)

@app.get("/ccure/report/{filename}")
def ccure_report_download(filename: str):
    try:
        safe_name = Path(filename).name
        full = OUTPUT_DIR / safe_name
        if not full.exists() or not full.is_file():
            raise HTTPException(status_code=404, detail="Report not found")
        return FileResponse(str(full),
                            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            filename=safe_name)
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Failed to serve report")
        raise HTTPException(status_code=500, detail=f"Failed to serve report: {e}")

# End of app.py
















// frontend/src/pages/GlobalPage.jsx
import React, { useState, useEffect, useRef } from 'react';
import {
  Box, Typography, CircularProgress, IconButton, Button, Paper, Divider,
  LinearProgress, Snackbar, Alert, List, ListItem, ListItemText
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import DescriptionIcon from '@mui/icons-material/Description';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import MapChart from '../components/MapChart.jsx';
import api from '../api';
import { useNavigate, Link } from 'react-router-dom';

/*
  Important:
  - Do NOT mix /api/headcount and /api/ccure/verify.
  - Region cards (APAC/EMEA/LACA/NAMER) come only from /api/headcount.
  - Live vs CCURE Summary now comes from /api/ccure/verify?raw=true.
  - Initial region totals are zero (keeps previous UI behaviour).
  - We implement polling for headcount and SSE for ccure/stream (realtime via SSE).
*/

export default function GlobalPage() {
  const navigate = useNavigate();

  // Region totals (headcount) - default to zeros so UI shows 0 immediately (preserve previous behaviour)
  const [counts, setCounts] = useState({ apac: 0, emea: 0, laca: 0, namer: 0 });
  const [selected, setSelected] = useState('global');

  // Averages/ccure state (left panel)
  const [averages, setAverages] = useState(null);
  const [loadingAverages, setLoadingAverages] = useState(true);
  const [averagesError, setAveragesError] = useState(null);

  // upload state
  const [uploading, setUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState(null);
  const [uploadError, setUploadError] = useState(null);

  // top-row file inputs
  const fileInputEmpRef = useRef();
  const fileInputContrRef = useRef();
  const [snack, setSnack] = useState({ open: false, severity: 'info', message: '' });

  // date-range state for top-right controls
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  // Polling refs for safe scheduling and backoff
  const headcountRef = useRef({ timerId: null, failureCount: 0, isFetching: false });
  const averagesRef = useRef({ timerId: null, failureCount: 0, isFetching: false });

  // -----------------------
  // HEADCOUNT POLLING ONLY (unchanged)
  // -----------------------
  useEffect(() => {
    let mounted = true;

    const fetchHeadcount = async () => {
      if (!mounted) return;
      if (headcountRef.current.isFetching) return;
      headcountRef.current.isFetching = true;

      try {
        // Important: only call /headcount here (proxy rewrites /api -> backend)
        const res = await api.get('/headcount');
        if (!mounted) return;
        const d = res.data;
        // We expect an object with keys apac/emea/laca/namer (defensive)
        if (d && typeof d === 'object') {
          const newCounts = {
            apac: Number(d.apac || 0),
            emea: Number(d.emea || 0),
            laca: Number(d.laca || 0),
            namer: Number(d.namer || 0),
          };
          setCounts(prev => {
            if (
              prev.apac === newCounts.apac &&
              prev.emea === newCounts.emea &&
              prev.laca === newCounts.laca &&
              prev.namer === newCounts.namer
            ) {
              return prev;
            }
            return newCounts;
          });
        } else {
          console.warn('[headcount] unexpected response shape - ignoring', d);
        }
        headcountRef.current.failureCount = 0;
      } catch (err) {
        headcountRef.current.failureCount = (headcountRef.current.failureCount || 0) + 1;
        console.warn('[headcount] fetch failed:', err?.message || err);
      } finally {
        headcountRef.current.isFetching = false;
        const f = headcountRef.current.failureCount || 0;
        const backoffMs = 15000 * Math.pow(2, Math.min(Math.max(f - 1, 0), 4)); // 15s..240s
        headcountRef.current.timerId = setTimeout(fetchHeadcount, backoffMs);
      }
    };

    fetchHeadcount();

    return () => {
      mounted = false;
      if (headcountRef.current.timerId) clearTimeout(headcountRef.current.timerId);
      headcountRef.current.isFetching = false;
    };
  }, []); // run once



  // AVERAGES: use SSE (direct to Python backend) with fallback initial fetch
  useEffect(() => {
    let stopped = false;
    let es = null;
    let backoff = 1000;

    // Allow override via VITE_PY_BACKEND; otherwise assume python at :8000
    const PY_BACKEND = (import.meta.env.VITE_PY_BACKEND || `${window.location.protocol}//${window.location.hostname}:8000`).replace(/\/$/, '');

    const connect = () => {
      if (stopped) return;
      try {
        // Directly connect to Python SSE endpoint (bypasses Vite proxy for streaming)
        es = new EventSource(`${PY_BACKEND}/ccure/stream`);
      } catch (err) {
        console.warn('SSE creation failed', err);
        es = null;
      }

      if (!es) {
        // fallback to polling if EventSource not supported or creation failed
        initialFetch();
        return;
      }

      es.onopen = () => {
        console.info('[SSE] connected to', `${PY_BACKEND}/ccure/stream`);
        backoff = 1000;
        setAveragesError(null);
      };

      es.onmessage = (evt) => {
        try {
          const payload = JSON.parse(evt.data);
          setAverages(payload);
          setLoadingAverages(false);
          setAveragesError(null);
        } catch (e) {
          console.warn('Failed to parse SSE message', e);
        }
      };

      es.onerror = (err) => {
        console.warn('[SSE] error/closed, attempting reconnect', err);
        try { es.close(); } catch (e) {}
        es = null;
        if (stopped) return;
        // exponential backoff reconnect (capped)
        setTimeout(() => {
          backoff = Math.min(backoff * 2, 30000);
          connect();
        }, backoff);
      };
    };

    const initialFetch = async () => {
      setLoadingAverages(true);
      setAveragesError(null);
      try {
        // <-- changed: call verify endpoint (raw=true) instead of /ccure/averages
        const res = await api.get('/ccure/verify?raw=true');
        setAverages(res.data);
        setLoadingAverages(false);
        setAveragesError(null);
      } catch (err) {
        console.warn('initial /ccure/verify?raw=true fetch failed', err);
        setLoadingAverages(false);
        setAveragesError(err);
      }
    };

    // Start with initial fetch so UI is populated quickly, then open SSE
    initialFetch();
    connect();

    return () => {
      stopped = true;
      if (es) {
        try { es.close(); } catch (e) {}
        es = null;
      }
    };
  }, []);



  // -----------------------
  // Upload helper (unchanged)
  // -----------------------
  const handleUpload = async (file, type) => {
    if (!file) return;
    const endpoint = type === 'employee' ? '/upload/active-employees' : '/upload/active-contractors';
    const fd = new FormData();
    fd.append('file', file, file.name);

    setUploading(true);
    setUploadResult(null);
    setUploadError(null);

    try {
      const res = await api.post(endpoint, fd, {
        headers: { 'Content-Type': 'multipart/form-data' },
        timeout: 120000
      });
      setUploadResult(res.data);
      setSnack({ open: true, severity: 'success', message: `Upload successful: ${file.name}` });
      // Optionally re-fetch averages/headcount after successful upload:
      try { await api.get('/ccure/verify?raw=true').then(r => setAverages(r.data)); } catch (_) {}
      try { await api.get('/headcount').then(r => {
        const d = r.data;
        if (d && typeof d === 'object') {
          setCounts(prev => ({
            apac: Number(d.apac || prev.apac || 0),
            emea: Number(d.emea || prev.emea || 0),
            laca: Number(d.laca || prev.laca || 0),
            namer: Number(d.namer || prev.namer || 0)
          }));
        }
      }) } catch (_) {}
    } catch (err) {
      console.error('Upload failed', err);
      setUploadError(err);
      setSnack({ open: true, severity: 'error', message: `Upload failed: ${file.name}` });
    } finally {
      setUploading(false);
    }
  };

  const onChooseEmployeeFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'employee'); e.target.value = null; };
  const onChooseContractorFile = (e) => { const f = e.target.files && e.target.files[0]; if (f) handleUpload(f, 'contractor'); e.target.value = null; };

  // apply date range to re-fetch /ccure/verify
  const applyDateRange = async () => {
    if (!startDate || !endDate) {
      setSnack({ open: true, severity: 'warning', message: 'Please select start and end dates' });
      return;
    }
    setLoadingAverages(true);
    setAveragesError(null);
    try {
      const res = await api.get(`/ccure/verify?raw=true&start_date=${startDate}&end_date=${endDate}`);
      setAverages(res.data);
      setLoadingAverages(false);
      setSnack({ open: true, severity: 'success', message: 'Averages updated' });
    } catch (err) {
      console.warn('applyDateRange failed', err);
      setLoadingAverages(false);
      setAveragesError(err);
      setSnack({ open: true, severity: 'error', message: 'Failed to update averages' });
    }
  };

  // safe helper for nested averages paths
  const safe = (path, fallback = null) => {
    if (!averages) return fallback;
    try {
      return path.split('.').reduce((a, k) => (a && a[k] !== undefined ? a[k] : fallback), averages);
    } catch {
      return fallback;
    }
  };

  // Derived values (updated to match /ccure/verify response shape)
 
  const ccureActiveEmployees = safe('ccure_reported.employees',
    safe('ccure_active.active_employees',
      safe('ccure_active.ccure_active_employees_reported', null)
    )
  );
  const ccureActiveContractors = safe('ccure_reported.contractors',
    safe('ccure_active.active_contractors',
      safe('ccure_active.ccure_active_contractors_reported', null)
    )
  );

  // headcount attendance summary (from AttendanceSummary / union)
  const headTotalVisited = safe('headcount_attendance_summary.total_visited_today',
    safe('headcount_details.total_visited_today', null)
  );
  const headEmployee = safe('headcount_attendance_summary.employee',
    safe('headcount_details.employee', null)
  );
  const headContractor = safe('headcount_attendance_summary.contractor',
    safe('headcount_details.contractor', null)
  );

  // live headcount from region clients
  const liveCurrentTotal = safe('live_headcount_region_clients.currently_present_total',
    safe('live_headcount_details.currently_present_total',
      null
    )
  );
  const liveEmp = safe('live_headcount_region_clients.employee',
    safe('live_headcount_details.employee', null)
  );
  const liveContr = safe('live_headcount_region_clients.contractor',
    safe('live_headcount_details.contractor', null)
  );

  // percentages (prefer top-level percentages_vs_ccure, fallback into averages compatibility keys)
  const empPct = safe('percentages_vs_ccure.head_employee_pct_vs_ccure_today',
    safe('averages.head_emp_pct_vs_ccure_today', null)
  );
  const conPct = safe('percentages_vs_ccure.head_contractor_pct_vs_ccure_today',
    safe('averages.head_contractor_pct_vs_ccure_today', null)
  );
  const overallPct = safe('percentages_vs_ccure.head_overall_pct_vs_ccure_today',
    safe('averages.headcount_overall_pct_vs_ccure_today', null)
  );

  // averages / 7-day
  const avg7 = safe('averages.history_avg_overall_last_7_days',
    safe('averages.avg_headcount_last_7_days',
      safe('averages.avg_headcount_last_7_days_db', null)
    )
  );

  // date
  const respDate = safe('date', null);

  // location-wise averages map (history_avg_by_location_last_7_days)
  const locationAvgsObj = safe('averages.history_avg_by_location_last_7_days',
    safe('history_avg_by_location_last_7_days',
      safe('raw.averages.history_avg_by_location_last_7_days', {})
    )
  );

  // convert to array for rendering (sort by avg_overall desc if present)
  const locationAvgsList = React.useMemo(() => {
    if (!locationAvgsObj || typeof locationAvgsObj !== 'object') return [];
    const arr = Object.entries(locationAvgsObj).map(([loc, vals]) => {
      return {
        location: loc,
        avg_employee_last_7_days: vals.avg_employee_last_7_days ?? vals.history_avg_employee_last_7_days ?? vals.avg_employee ?? null,
        avg_contractor_last_7_days: vals.avg_contractor_last_7_days ?? vals.history_avg_contractor_last_7_days ?? vals.avg_contractor ?? null,
        avg_overall_last_7_days: vals.avg_overall_last_7_days ?? vals.history_avg_overall_last_7_days ?? vals.avg_overall ?? null,
        history_days_counted: vals.history_days_counted ?? null
      };
    });
    // sort descending by overall avg (nulls to end)
    arr.sort((a, b) => (b.avg_overall_last_7_days ?? -Infinity) - (a.avg_overall_last_7_days ?? -Infinity));
    return arr;
  }, [locationAvgsObj]);

  // ------------------------------------------------------------
  // derive global total from headcount regions (APAC+EMEA+LACA+NAMER)
  // ------------------------------------------------------------
  const globalCount = Number((counts.apac || 0)) + Number((counts.emea || 0)) + Number((counts.laca || 0)) + Number((counts.namer || 0));

  // Helper style used to hide scrollbars but allow scrolling
  const hideScrollbarSx = {
    overflowY: 'auto',
    // hide scrollbar visual (webkit)
    '&::-webkit-scrollbar': { width: 0, height: 0 },
    // firefox
    scrollbarWidth: 'none',
    // ie
    msOverflowStyle: 'none',
  };

  // Render
  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh', overflow: 'hidden', bgcolor: 'background.default' }}>
      {/* Header */}
      <Box px={2} py={1} sx={{ backgroundColor: 'black', color: '#fff', borderBottom: '4px solid #FFD700', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <Box>
          <IconButton component={Link} to="/" sx={{ color: '#FFC72C' }}><HomeIcon fontSize="medium" /></IconButton>
          <IconButton component={Link} to="/reports" sx={{ color: '#FFC72C', ml: 1 }}><DescriptionIcon fontSize="medium" /></IconButton>
        </Box>

        <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <Box component="img" src="/wu-head-logo.png" alt="WU Logo" sx={{ height: { xs: 30, md: 55 }, mr: 2 }} />
          <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>Global Headcount Dashboard</Typography>
        </Box>

        <Box sx={{ width: 120 }} />
      </Box>

      {/* Top row: Uploads | GLOBAL + Region Cards | Date selectors */}
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 5, p: 1, flexWrap: 'wrap' }}>
        {/* Left: two small Upload boxes stacked (Employee above Contractor) */}
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
          <Paper sx={{ p: 1, width: 200, boxShadow: 1 }}>
            {/* <Typography variant="caption" color="text.secondary">Upload Active Employee Sheet</Typography> */}
            <input type="file" accept=".xls,.xlsx" style={{ display: 'none' }} ref={fileInputEmpRef} onChange={onChooseEmployeeFile} />
            <Button variant="contained" size="small" startIcon={<UploadFileIcon />} sx={{ mt: 1, width: '100%' }} onClick={() => fileInputEmpRef.current && fileInputEmpRef.current.click()} disabled={uploading}>
              Upload Employee
            </Button>
          </Paper>

          <Paper sx={{ p: 0, width: 200, boxShadow: 1 }}>
            {/* <Typography variant="caption" color="text.secondary">Upload Active Contractor Sheet</Typography> */}
            <input type="file" accept=".xls,.xlsx" style={{ display: 'none' }} ref={fileInputContrRef} onChange={onChooseContractorFile} />
            <Button variant="outlined" size="small" startIcon={<UploadFileIcon />} sx={{ mt: 1, width: '100%' }} onClick={() => fileInputContrRef.current && fileInputContrRef.current.click()} disabled={uploading}>
              Upload Contractor
            </Button>
          </Paper>
        </Box>

        {/* Middle: region cards */}
        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap', justifyContent: 'center' }}>
          {[
            { key: 'global', label: 'GLOBAL', count: globalCount, url: null, textColor: '#ffff' },
            { key: 'apac', label: 'APAC', count: counts.apac, url: 'http://10.199.22.57:3000/', textColor: '#ffff' },
            { key: 'emea', label: 'EMEA', count: counts.emea, url: 'http://10.199.22.57:3001/', textColor: '#ffff' },
            { key: 'laca', label: 'LACA', count: counts.laca, url: 'http://10.199.22.57:3003/', textColor: '#ffff' },
            { key: 'namer', label: 'NAMER', count: counts.namer, url:'http://10.199.22.57:3002/', textColor: '#ffff' },
          ].map(region => (
            <Box
              key={region.key}
              onClick={() => {
                if (region.key === 'global') {
                  const el = document.querySelector('[data-global-left-panel]');
                  if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' });
                  setSelected('global');
                  return;
                }
                // external region dashboards for others
                if (region.url) window.location.href = region.url;
              }}
              sx={{
                cursor: 'pointer',
                width: 200,
                height: 80,
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'center',
                alignItems: 'center',
                border: '4px solid rgba(255, 204, 0, 0.89)',
                borderRadius: 2,
                boxShadow: 3,
                color: region.textColor,
                '&:hover': { opacity: 0.95 },
              }}
            >
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: region.textColor, fontSize: { xs: '1.1rem' } }}>{region.label}</Typography>
              <Typography variant="h4" sx={{ fontWeight: 800, fontSize: { xs: '1.2rem', sm: '1.6rem' }, color: region.textColor }}>
                {region.count ?? 0}
              </Typography>
            </Box>
          ))}
        </Box>

        {/* Right: date selectors (Start & End side-by-side; Apply below right-aligned) */}
        <Box sx={{ marginLeft: 'auto', display: 'flex', flexDirection: 'column', alignItems: 'flex-end', gap: 1 }}>
          <Paper sx={{ p: 1, display: 'flex', gap: 1, alignItems: 'center', boxShadow: 1 }}>
            <Box sx={{ display: 'flex', flexDirection: 'column', width: 160 }}>
              <Typography variant="caption" color="text.secondary">Select Start date</Typography>
              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                style={{ width: '100%', height: 32, borderRadius: 4, border: '1px solid rgba(255,255,255,0.06)', padding: 4, background: 'transparent', color: 'inherit' }}
              />
            </Box>

            <Box sx={{ display: 'flex', flexDirection: 'column', width: 160 }}>
              <Typography variant="caption" color="text.secondary">Select End date</Typography>
              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                style={{ width: '100%', height: 32, borderRadius: 4, border: '1px solid rgba(255,255,255,0.06)', padding: 4, background: 'transparent', color: 'inherit' }}
              />
            </Box>
          </Paper>

          <Box sx={{ width: '100%', display: 'flex', justifyContent: 'space-between', mt: 0, alignItems: 'center' }}>
            <Button size="small" variant="contained" onClick={applyDateRange}>Apply</Button>
          </Box>
        </Box>
      </Box>

      {/* Main: left summary | center map | right averages */}
      <Box sx={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        {/* Left detail panel */}
        <Box
          data-global-left-panel
          sx={{
            width: { xs: 320, md: 360 },
            minWidth: { md: 320 },
            p: 2,
            bgcolor: 'background.paper',
            borderRight: '1px solid rgba(255,255,255,0.06)',
            display: 'flex',
            flexDirection: 'column',
            ...hideScrollbarSx,
            // ensure left panel takes full height and internal content can scroll (hidden scrollbar)
            height: '100%',
          }}
        >
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Live vs CCURE Summary</Typography>

          {loadingAverages ? (
            <Box sx={{ py: 2 }}><LinearProgress /></Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load CCURE averages</Alert>
          ) : averages ? (
            <>
              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">CCURE Active (reported)</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1, alignItems: 'center' }}>
                  <Box>
                    <Typography variant="h4" sx={{ fontWeight: 800 }}>{ccureActiveEmployees ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Employees</Typography>
                  </Box>
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{ccureActiveContractors ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Active Contractors</Typography>
                  </Box>
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="subtitle2" color="text.secondary">Live Today</Typography>
                  <Typography variant="caption" color="text.secondary">{respDate ?? ''}</Typography>
                </Box>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{headEmployee ?? liveEmp ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Employee</Typography>
                  </Box>
                  <Box>
                    <Typography variant="h5" sx={{ fontWeight: 800 }}>{headContractor ?? liveContr ?? 'â€”'}</Typography>
                    <Typography variant="caption" color="text.secondary">Contractor</Typography>
                  </Box>
                </Box>

                <Divider sx={{ my: 1 }} />

                <Box>
                  <Typography variant="caption" color="text.secondary">Totals</Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.75 }}>
                    <Typography variant="body2">Attendance total (today)</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{headTotalVisited ?? 'â€”'}</Typography>
                  </Box>

                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                    <Typography variant="body2">Live region total</Typography>
                    <Typography variant="body2" sx={{ fontWeight: 700 }}>{liveCurrentTotal ?? 'â€”'}</Typography>
                  </Box>

                  {/** Provide a detail rows total if available in response */}
                  {safe('headcount_details.total_visited_today', null) != null && (
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                      <Typography variant="body2">Detail rows total</Typography>
                      <Typography variant="body2" sx={{ fontWeight: 700 }}>{safe('headcount_details.total_visited_today', 'â€”')}</Typography>
                    </Box>
                  )}
                </Box>
              </Paper>

              <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.02)' }} elevation={0}>
                <Typography variant="subtitle2" color="text.secondary">Percentages vs CCURE</Typography>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">Employees</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{empPct != null ? `${empPct}%` : 'â€”'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="body2">Contractors</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{conPct != null ? `${conPct}%` : 'â€”'}</Typography>
                </Box>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
                  <Typography variant="body2">Overall</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{overallPct != null ? `${overallPct}%` : 'â€”'}</Typography>
                </Box>

                <Divider sx={{ my: 1 }} />
                <Typography variant="caption" color="text.secondary">Averages</Typography>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
                  <Typography variant="body2">7-day avg headcount</Typography>
                  <Typography variant="body2" sx={{ fontWeight: 700 }}>{avg7 ?? 'â€”'}</Typography>
                </Box>
              </Paper>

              {/* Upload controls intentionally removed from this left panel (moved to top-row) */}

              {averages.notes && (
                <Paper sx={{ p: 2, mb: 2, bgcolor: 'rgba(255,255,255,0.01)' }}>
                  <Typography variant="body2" sx={{ mt: 1 }}>{averages.notes}</Typography>
                </Paper>
              )}
            </>
          ) : (
            <Typography variant="body2" color="text.secondary">No data</Typography>
          )}
        </Box>

        {/* Center: map (flex) */}
        <Box sx={{ flex: 1, minWidth: 0, position: 'relative', display: 'flex', flexDirection: 'column' }}>
          <Box sx={{ flex: 1, minHeight: 0 }}>
            <MapChart selected={selected} onClickSite={r => setSelected(r)} initialZoom={1.8} />
          </Box>
        </Box>

        {/* Right side: Location averages panel */}
        <Box
          sx={{
            width: { xs: 320, md: 360 },
            minWidth: { md: 320 },
            borderLeft: '1px solid rgba(255,255,255,0.06)',
            bgcolor: 'background.paper',
            p: 2,
            display: 'flex',
            flexDirection: 'column',
            ...hideScrollbarSx,
            height: '100%',
          }}
        >
          <Typography variant="h6" sx={{ mb: 1, color: 'primary.main' }}>Location Averages</Typography>

          {loadingAverages ? (
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', py: 4 }}>
              <CircularProgress />
            </Box>
          ) : averagesError ? (
            <Alert severity="error">Failed to load location averages</Alert>
          ) : locationAvgsList.length === 0 ? (
            <Typography variant="body2" color="text.secondary">No location averages available</Typography>
          ) : (
            <List dense disablePadding sx={{ flex: 1 }}>
              {locationAvgsList.map(item => (
                <ListItem key={item.location} sx={{ alignItems: 'flex-start', py: 1.25, borderBottom: '1px solid rgba(255,255,255,0.03)' }}>
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography sx={{ fontWeight: 800 }}>{item.location}</Typography>
                        <Typography variant="body2" sx={{ fontWeight: 800 }}>{item.avg_overall_last_7_days != null ? Math.round(item.avg_overall_last_7_days) : 'â€”'}</Typography>
                      </Box>
                    }
                    secondary={
                      <Box sx={{ display: 'flex', gap: 2, mt: 0.5, flexWrap: 'wrap' }}>
                        <Typography variant="caption" color="text.secondary">Emp: <strong>{item.avg_employee_last_7_days != null ? Math.round(item.avg_employee_last_7_days) : 'â€”'}</strong></Typography>
                        <Typography variant="caption" color="text.secondary">Contr: <strong>{item.avg_contractor_last_7_days != null ? Math.round(item.avg_contractor_last_7_days) : 'â€”'}</strong></Typography>
                        {item.history_days_counted != null && <Typography variant="caption" color="text.secondary">Days: {item.history_days_counted}</Typography>}
                      </Box>
                    }
                  />
                </ListItem>
              ))}
            </List>
          )}
        </Box>
      </Box>

      <Snackbar open={snack.open} autoHideDuration={3500} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>
        <Alert severity={snack.severity} onClose={() => setSnack(prev => ({ ...prev, open: false }))}>{snack.message}</Alert>
      </Snackbar>
    </Box>
  );
}






{
  "users": [
    {
      "username": "Lloyds Das",
      "employeeId": "314345",
      "password": "password123",
      "permissions": {
        "can_grant": true,
        "device_health": true,
        "headcount": true,
        "ert": true,
        "associate_verify": true,
        "gsoc_reports": true,
        "global_duration": true
      }
    },
    {
      "username": "Pandey, Sonu",
      "employeeId": "326131",
      "password": "password123",
      "permissions": {
        "can_grant": true
      }
    },
    {
      "username": "Diwate, Swapnil",
      "employeeId": "W0024618",
      "password": "password123",
      "permissions": {
        "can_grant": true
      }
    }
  ]
}









// backend/routes/auth.js
import express from 'express';
import { readFile, writeFile } from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import crypto from 'crypto';

const router = express.Router();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const USERS_FILE = path.resolve(__dirname, '../config/users.json');

// In-memory token->employeeId map (lost on server restart)
const activeTokens = new Map();

async function loadUsers() {
  try {
    const raw = await readFile(USERS_FILE, 'utf8');
    const obj = JSON.parse(raw);
    return obj && Array.isArray(obj.users) ? obj.users : [];
  } catch (err) {
    // If missing file, return empty array
    return [];
  }
}

async function saveUsers(users) {
  const payload = { users };
  await writeFile(USERS_FILE, JSON.stringify(payload, null, 2), 'utf8');
}

function genToken() {
  return crypto.randomBytes(32).toString('hex');
}

function findUser(users, { username, employeeId }) {
  if (employeeId) {
    const byId = users.find(u => String(u.employeeId).toLowerCase() === String(employeeId).toLowerCase());
    if (byId) return byId;
  }
  if (username) {
    const byName = users.find(u => String(u.username).toLowerCase() === String(username).toLowerCase());
    if (byName) return byName;
    // also allow login by exact EmployeeID sent in username field
    const byId2 = users.find(u => String(u.employeeId).toLowerCase() === String(username).toLowerCase());
    if (byId2) return byId2;
  }
  return null;
}

// middleware to require token and attach user object to req.currentUser
async function requireAuth(req, res, next) {
  try {
    const auth = req.headers.authorization || '';
    if (!auth.startsWith('Bearer ')) return res.status(401).json({ detail: 'Missing auth token' });
    const token = auth.slice(7).trim();
    const empId = activeTokens.get(token);
    if (!empId) return res.status(401).json({ detail: 'Invalid or expired token' });

    const users = await loadUsers();
    const user = users.find(u => String(u.employeeId).toLowerCase() === String(empId).toLowerCase());
    if (!user) return res.status(401).json({ detail: 'Invalid token (user not found)' });

    req.currentUser = user;
    req.currentToken = token;
    next();
  } catch (err) {
    next(err);
  }
}

// --- POST /login
// body: { username, password }
router.post('/login', async (req, res, next) => {
  try {
    const { username, password } = req.body || {};
    if (!username || !password) return res.status(400).json({ detail: 'username and password are required' });

    const users = await loadUsers();
    const user = findUser(users, { username });
    if (!user) return res.status(401).json({ detail: 'Invalid credentials' });

    // plain-text compare for prototype. Replace with bcrypt in prod.
    if (String(user.password || '') !== String(password)) return res.status(401).json({ detail: 'Invalid credentials' });

    // generate token and store mapping
    const token = genToken();
    activeTokens.set(token, user.employeeId);

    // Return minimal user object (do not expose password)
    const safeUser = {
      username: user.username,
      employeeId: user.employeeId,
      // you can include additional fields if present
    };

    return res.json({ token, user: safeUser, permissions: user.permissions || {} });
  } catch (err) {
    next(err);
  }
});

// --- GET /me
// header: Authorization: Bearer <token>
router.get('/me', requireAuth, async (req, res, next) => {
  try {
    const user = req.currentUser;
    const safeUser = { username: user.username, employeeId: user.employeeId };
    return res.json({ user: safeUser, permissions: user.permissions || {} });
  } catch (err) {
    next(err);
  }
});

// --- POST /grant
// body: { grantee_employee_id, grantee_name, pages: ['headcount','ert', ...] }
// Only callers with currentUser.permissions.can_grant === true
router.post('/grant', requireAuth, async (req, res, next) => {
  try {
    const caller = req.currentUser;
    if (!caller.permissions || !caller.permissions.can_grant) return res.status(403).json({ detail: 'You do not have grant permission' });

    const { grantee_employee_id, grantee_name, pages } = req.body || {};
    if ((!grantee_employee_id && !grantee_name) || !Array.isArray(pages)) {
      return res.status(400).json({ detail: 'grantee_employee_id or grantee_name and pages[] are required' });
    }

    const users = await loadUsers();

    let grantee = findUser(users, { employeeId: grantee_employee_id, username: grantee_name });

    if (!grantee) {
      // create minimal user record (password blank) ‚Äî admin should set password later
      grantee = {
        username: grantee_name || (grantee_employee_id ? `emp-${grantee_employee_id}` : 'unknown'),
        employeeId: grantee_employee_id || `unknown-${Date.now()}`,
        password: '',
        permissions: {}
      };
      users.push(grantee);
    }

    if (!grantee.permissions) grantee.permissions = {};
    for (const p of pages) {
      grantee.permissions[p] = true;
    }

    await saveUsers(users);

    // Return updated grantee (sans password)
    const safeGrantee = { username: grantee.username, employeeId: grantee.employeeId, permissions: grantee.permissions };
    return res.json({ ok: true, grantee: safeGrantee });
  } catch (err) {
    next(err);
  }
});

// --- POST /revoke
// body: { grantee_employee_id, grantee_name, pages: ['headcount', ...] }
// Only callers with can_grant
router.post('/revoke', requireAuth, async (req, res, next) => {
  try {
    const caller = req.currentUser;
    if (!caller.permissions || !caller.permissions.can_grant) return res.status(403).json({ detail: 'You do not have grant permission' });

    const { grantee_employee_id, grantee_name, pages } = req.body || {};
    if ((!grantee_employee_id && !grantee_name) || !Array.isArray(pages)) {
      return res.status(400).json({ detail: 'grantee_employee_id or grantee_name and pages[] are required' });
    }

    const users = await loadUsers();
    const grantee = findUser(users, { employeeId: grantee_employee_id, username: grantee_name });
    if (!grantee) return res.status(404).json({ detail: 'Grantee not found' });

    if (!grantee.permissions) grantee.permissions = {};
    for (const p of pages) {
      delete grantee.permissions[p]; // remove key
    }

    await saveUsers(users);

    const safeGrantee = { username: grantee.username, employeeId: grantee.employeeId, permissions: grantee.permissions };
    return res.json({ ok: true, grantee: safeGrantee });
  } catch (err) {
    next(err);
  }
});

// --- GET /list  (debug; returns users without passwords)
router.get('/list', requireAuth, async (req, res, next) => {
  try {
    const users = await loadUsers();
    const safe = users.map(u => ({ username: u.username, employeeId: u.employeeId, permissions: u.permissions || {} }));
    return res.json({ users: safe });
  } catch (err) {
    next(err);
  }
});

export default router;









// C:\Users\W0024618\Desktop\global-page\backend\index.js
import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import reportsRouter from './routes/reports.js';
import headcountRouter from './routes/headcount.js';
import vipRouter       from './routes/vip.js';
import authRouter      from './routes/auth.js';   // <-- NEW

const __filename = fileURLToPath(import.meta.url);
const __dirname  = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3008;

// 1) Middleware
app.use(cors());              // enable CORS for all origins
app.use(express.json());      // parse JSON payloads

// 2) Static Assets (if you have any in ../public)
app.use(express.static(resolve(__dirname, '../public')));

// 3) API Routes
app.use('/api/headcount', headcountRouter);
app.use('/api/vip',       vipRouter);
app.use('/api/reports',   reportsRouter);
app.use('/api/auth',      authRouter);   // <-- NEW

// 4) Health-check endpoint (optional)
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', uptime: process.uptime() });
});

// 5) Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res
    .status(err.status || 500)
    .json({ error: err.message || 'Internal Server Error' });
});

// 6) Start server
app.listen(PORT, () => {
  console.log(`üåç Global-backend listening on http://localhost:${PORT}`);
});





















C:\Users\W0024618\Desktop\global-page\backend\config

add user.json file here 


Check package.json file 


C:\Users\W0024618\Desktop\global-page\package.json



{
  "name": "global-page",
  "version": "1.0.0",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start:backend": "cd backend && node index.js",
    "start:frontend": "cd frontend && npm run dev",
    "start": "concurrently \"npm run start:backend\" \"npm run start:frontend\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.11.0",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "mssql": "^11.0.1"
  }
}





alos check 

C:\Users\W0024618\Desktop\global-page\backend\index.js

// C:\Users\W0024618\Desktop\global-page\backend\index.js
import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import reportsRouter from './routes/reports.js';

import headcountRouter from './routes/headcount.js';
import vipRouter       from './routes/vip.js';
// import reportsRouter   from './routes/reports.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname  = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3008;

// 1) Middleware
app.use(cors());              // enable CORS for all origins
app.use(express.json());      // parse JSON payloads

// 2) Static Assets (if you have any in ../public)
app.use(express.static(resolve(__dirname, '../public')));

// 3) API Routes
app.use('/api/headcount', headcountRouter);
app.use('/api/vip',       vipRouter);
app.use('/api/reports',   reportsRouter);

// 4) Health-check endpoint (optional)
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', uptime: process.uptime() });
});

// 5) Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res
    .status(err.status || 500)
    .json({ error: err.message || 'Internal Server Error' });
});

// 6) Start server
app.listen(PORT, () => {
  console.log(`üåç Global-backend listening on http://localhost:${PORT}`);
});






and share me Fully Updated file carefully...

Create new file referring below file 





As per above suggestion i have update all file in details but in frontend Current Location is not added 
alos i have review the 4 Api for Location mapping is not mention any wherre fix this issue also check below each file carefefully


C:\Users\W0024618\Desktop\employee-verification\controllers\employeeController.js

// controllers/employeeController.js
const { getPool } = require('../config/db');

const getEmployees = async (req, res) => {
  console.log('🎯 [GET] /api/employees called');
  try {
    const pool = await getPool();
    console.log('✅ DB pool acquired');
    const result = await pool.request().query(`
      SELECT DISTINCT
        AP.ObjectID           AS EmployeeObjID,     
        AP.Name               AS "Emp Name",
        CASE AP.Int1
          WHEN 0 THEN AP.Text12
          ELSE CAST(AP.Int1 AS NVARCHAR)
        END                    AS "EmployeeID",
        PT.Name               AS "PersonnelType",
        AP.Text10             AS "Manager Name",
        AP.Int4               AS Manager_WU_ID,
        AI.Image              AS Image,
        AP.Disabled           AS Profile_Disabled,
        COUNT(ACR.Name)       AS Total_Cards,
        SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )                      AS Active_Cards,
        SUM(
          CASE
            WHEN ACR.ExpirationDateTime IS NOT NULL AND ACR.ExpirationDateTime < GETDATE()
            THEN 1 ELSE 0
          END
        )                      AS Expired_Cards,
        CASE
          WHEN AP.Disabled = 1 THEN 'Deactive'
          WHEN AP.Disabled = 0 THEN
            CASE
              WHEN SUM(
                CASE
                  WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
                    AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
                    AND (ACR.Lost IS NULL OR ACR.Lost = 0)
                    AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
                  THEN 1 ELSE 0
                END
              ) > 0 THEN 'Active'
              ELSE 'Deactive'
            END
          ELSE 'Deactive'
        END                    AS "Employee_Status"
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.Credential    ACR ON AP.Name = ACR.Name
      INNER JOIN ACVSCore.Access.PersonnelType PT  ON PT.ObjectID = AP.PersonnelTypeID
      INNER JOIN ACVSCore.Access.Images        AI  ON AI.ParentId = AP.ObjectID
      GROUP BY
        AP.ObjectID,
        AP.Name,
        AP.Int1,
        AP.Text12,
        PT.Name,
        AP.Text10,
        AP.Int4,
        AI.Image,
        AP.Disabled
      ORDER BY AP.Name
    `);
    console.log('✅ Query executed, rows:', result.recordset.length);

    const employees = result.recordset.map(emp => ({
      id:               emp.EmployeeObjID,
      EmpName:          emp["Emp Name"],
      EmployeeID:       emp.EmployeeID,
      PersonnelType:    emp.PersonnelType,
      Manager_Name:     emp["Manager Name"],
      Manager_WU_ID:    emp.Manager_WU_ID,
      Profile_Disabled: emp.Profile_Disabled,
      Total_Cards:      emp.Total_Cards,
      Active_Cards:     emp.Active_Cards,
      Employee_Status:  emp.Employee_Status,
      imageUrl:         `/api/employees/${emp.EmployeeObjID}/image`
    }));

    return res.json(employees);
  } catch (err) {
    console.error('❌ Error in getEmployees:', err.stack || err);
    return res.status(500).json({
      error: 'Internal Server Error',
      message: err.message
    });
  }
};

module.exports = { getEmployees };
// ............................................

// At the end of controllers/employeeController.js
const getEmployeeStats = async (req, res) => {
  try {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT
        COUNT(*) AS TotalProfiles,
        SUM(CASE WHEN AP.Disabled = 0 THEN 1 ELSE 0 END) AS ActiveProfiles,
        SUM(CASE WHEN AP.Disabled = 0 AND PT.Name = 'Employee' THEN 1 ELSE 0 END) AS ActiveEmployees,
        SUM(CASE WHEN AP.Disabled = 0 AND PT.Name = 'Contractor' THEN 1 ELSE 0 END) AS ActiveContractors,
        SUM(CASE WHEN AP.Disabled = 1 THEN 1 ELSE 0 END) AS TerminatedProfiles,
        SUM(CASE WHEN AP.Disabled = 1 AND PT.Name = 'Employee' THEN 1 ELSE 0 END) AS TerminatedEmployees,
        SUM(CASE WHEN AP.Disabled = 1 AND PT.Name = 'Contractor' THEN 1 ELSE 0 END) AS TerminatedContractors
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = AP.PersonnelTypeID
    `);
    res.json(result.recordset[0]);
  } catch (err) {
    console.error('❌ getEmployeeStats error', err.stack || err);
    res.status(500).json({ error: 'Failed to get stats' });
  }
};

module.exports.getEmployeeStats = getEmployeeStats;







C:\Users\W0024618\Desktop\employee-verification\controllers\employeeImageController.js


// controllers/employeeImageController.js
const sql       = require('mssql');
const { getPool } = require('../config/db');

async function getEmployeeImage(req, res) {
  console.log(`🎯 [GET] /api/employees/${req.params.id}/image called`);
  try {
    const pool = await getPool();
    console.log('✅ DB pool acquired for image');
    const result = await pool.request()
      .input('id', sql.BigInt, req.params.id)
      .query(`
        SELECT AI.Image AS ImageBuffer
        FROM ACVSCore.Access.Images AI
        WHERE AI.ParentId = @id
      `);
    console.log('✅ Image query rows:', result.recordset.length);

    if (!result.recordset.length || !result.recordset[0].ImageBuffer) {
      console.warn('⚠️ No image found for ID', req.params.id);
      return res.status(404).send('Image not found');
    }

    const buf = result.recordset[0].ImageBuffer;
    const header = buf.toString('hex', 0, 4).toLowerCase();
    let contentType = 'application/octet-stream';
    if (header.startsWith('ffd8')) contentType = 'image/jpeg';
    else if (header.startsWith('89504e47')) contentType = 'image/png';
    else if (header.startsWith('47494638')) contentType = 'image/gif';

    console.log('✅ Serving image, type:', contentType, 'size:', buf.length);
    res.setHeader('Content-Type', contentType);
    return res.send(buf);

  } catch (err) {
    console.error('❌ Error in getEmployeeImage:', err.stack || err);
    return res.status(500).send('Internal Server Error');
  }
}

module.exports = { getEmployeeImage };






C:\Users\W0024618\Desktop\employee-verification\controllers\employeeLocationController.js


// controllers/employeeLocationController.js
const axios = require('axios');
const sql = require('mssql');
const { getPool } = require('../config/db');

const OCCUPANCY_URLS = [
  'http://10.199.22.57:3006/api/occupancy/live-summary',
  'http://10.199.22.57:3007/api/occupancy/live-summary',
  'http://10.199.22.57:3008/api/occupancy/live-summary',
  'http://10.199.22.57:4000/api/occupancy/live-summary'
];

// Simple in-memory cache: { [employeeObjId]: { ts: Number, data: Object } }
const cache = {};
const CACHE_TTL_MS = 5000; // 5 seconds — tune as needed

function normalizeString(s) {
  if (!s && s !== 0) return '';
  return String(s).trim().toLowerCase();
}

function parseRecordTime(rec) {
  // Priority: LocaleMessageTime -> snapshotTime -> Dateonly + Swipe_Time
  if (rec.LocaleMessageTime) return new Date(rec.LocaleMessageTime);
  if (rec.snapshotTime) return new Date(rec.snapshotTime);
  if (rec.Dateonly && rec.Swipe_Time) {
    // e.g. "2025-08-11" + "00:02:41"
    return new Date(`${rec.Dateonly}T${rec.Swipe_Time}Z`);
  }
  return null;
}

async function getEmployeeLiveLocation(req, res) {
  const employeeObjId = req.params.id;
  if (!employeeObjId) return res.status(400).json({ error: 'Missing id' });

  // Serve cache if fresh
  const cached = cache[employeeObjId];
  if (cached && Date.now() - cached.ts < CACHE_TTL_MS) {
    return res.json({ cached: true, ...cached.data });
  }

  try {
    // 1) Fetch EmployeeID and Name from DB (same logic as getEmployees)
    const pool = await getPool();
    const empResult = await pool.request()
      .input('objid', sql.BigInt, employeeObjId)
      .query(`
        SELECT AP.ObjectID,
               AP.Name AS EmpName,
               AP.Int1,
               AP.Text12
        FROM ACVSCore.Access.Personnel AP
        WHERE AP.ObjectID = @objid
      `);

    if (!empResult.recordset.length) {
      return res.status(404).json({ error: 'Employee not found' });
    }

    const empRow = empResult.recordset[0];
    // EmployeeID logic mirroring existing query:
    const EmployeeID = (empRow.Int1 === 0 || empRow.Int1 === '0' || empRow.Int1 === null)
      ? (empRow.Text12 ? String(empRow.Text12) : '')
      : String(empRow.Int1);

    const empName = empRow.EmpName || '';

    // 2) Query occupancy endpoints concurrently
    const requests = OCCUPANCY_URLS.map(u => axios.get(u, { timeout: 3000 }).catch(e => ({ error: e, url: u })));
    const responses = await Promise.all(requests);

    // 3) Collect and flatten details
    let allDetails = [];
    for (const r of responses) {
      if (!r || r.error) {
        // Log but continue
        console.warn('Occupancy fetch failed for', r && r.url, r && r.error && r.error.message);
        continue;
      }
      if (r.data && Array.isArray(r.data.details)) {
        // Keep source url for debugging
        const src = r.config && r.config.url ? r.config.url : null;
        const annotated = r.data.details.map(d => ({ ...d, __source: src }));
        allDetails.push(...annotated);
      }
    }

    // 4) Find matches by EmployeeID (preferred), fallback to name (ObjectName1), then PersonGUID
    const normEmployeeID = normalizeString(EmployeeID);
    const normEmpName = normalizeString(empName);

    const matches = allDetails.filter(rec => {
      const recEmpId = normalizeString(rec.EmployeeID);
      if (recEmpId && normEmployeeID && recEmpId === normEmployeeID) return true;

      const recName = normalizeString(rec.ObjectName1);
      if (recName && normEmpName && recName === normEmpName) return true;

      if (rec.PersonGUID) {
        // optionally, you can compare GUIDs if you have them
      }
      return false;
    });

    if (!matches.length) {
      const result = { found: false, message: 'No recent swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    // 5) Select most recent
    let best = null;
    for (const m of matches) {
      const t = parseRecordTime(m);
      if (!t) continue;
      if (!best) best = { rec: m, time: t };
      else if (t > best.time) best = { rec: m, time: t };
    }

    if (!best) {
      const result = { found: false, message: 'No timestamped swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    const r = best.rec;
    const payload = {
      found: true,
      source: r.__source || null,
      partition: r.PartitionName2 || r.Partition || null,
      floor: r.floor || r.Text5 || null,
      door: r.Door || null,
      direction: r.Direction || null,
      timestampUTC: (best.time && best.time.toISOString()) || null,
      personnelType: r.PersonnelType || null,
      cardNumber: r.CardNumber || null,
      raw: r // include raw record for debugging if needed
    };

    cache[employeeObjId] = { ts: Date.now(), data: payload };

    return res.json(payload);

  } catch (err) {
    console.error('getEmployeeLiveLocation error', err && err.stack || err);
    return res.status(500).json({ error: 'Failed to fetch live location', message: err.message });
  }
}

module.exports = { getEmployeeLiveLocation };







C:\Users\W0024618\Desktop\employee-verification\routes\employeeRoutes.js



const express = require('express');
const router  = express.Router();

const { getEmployees }     = require('../controllers/employeeController');
const { getEmployeeImage } = require('../controllers/employeeImageController');

const { getEmployeeStats } = require('../controllers/employeeController');


const { getEmployeeLiveLocation } = require('../controllers/employeeLocationController');
router.get('/employees/:id/location', getEmployeeLiveLocation);

// Metadata endpoint
router.get('/employees', getEmployees);

// Image stream endpoint
router.get('/employees/:id/image', getEmployeeImage);

// ... other routes
router.get('/stats', getEmployeeStats);

module.exports = router;



C:\Users\W0024618\Desktop\employee-verification\server.js



// server.js
const express = require('express');
const cors = require('cors');
require('dotenv').config();

const employeeRoutes = require('./routes/employeeRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// ✅ Correct route
app.use('/api', employeeRoutes);

const PORT = process.env.PORT || 5001;

app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
});







C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\CurrentLocation.jsx


// CurrentLocation.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function CurrentLocation({ empId }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!empId) return;
    setLoading(true);
    setError('');
    setLoc(null);

    axios.get(`http://localhost:5001/api/employees/${empId}/location`, { timeout: 5000 })
      .then(res => {
        setLoc(res.data);
      })
      .catch(err => {
        console.error('Location load error', err);
        setError('Failed to load location');
      })
      .finally(() => setLoading(false));
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="current-location-card">
      <h4>Current location</h4>
      {loading && <div>Loading location…</div>}
      {error && <div className="muted">{error}</div>}
      {!loading && loc && !loc.found && <div className="muted">No recent swipe</div>}
      {!loading && loc && loc.found && (
        <div>
          <div className="loc-main">
            <strong>{loc.partition || '—'}</strong>
            {loc.floor && <span> · {loc.floor}</span>}
          </div>
          <div className="loc-sub">
            {loc.door && <div>{loc.door}</div>}
            {loc.direction && <div>Direction: {loc.direction}</div>}
            {loc.timestampUTC && (
              <div>
                Last seen:{" "}
                {new Date(loc.timestampUTC).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}
                {" (IST)"}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}




C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\EmployeeCard.jsx


// CurrentLocation.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function CurrentLocation({ empId }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!empId) return;
    setLoading(true);
    setError('');
    setLoc(null);

    axios.get(`http://localhost:5001/api/employees/${empId}/location`, { timeout: 5000 })
      .then(res => {
        setLoc(res.data);
      })
      .catch(err => {
        console.error('Location load error', err);
        setError('Failed to load location');
      })
      .finally(() => setLoading(false));
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="current-location-card">
      <h4>Current location</h4>
      {loading && <div>Loading location…</div>}
      {error && <div className="muted">{error}</div>}
      {!loading && loc && !loc.found && <div className="muted">No recent swipe</div>}
      {!loading && loc && loc.found && (
        <div>
          <div className="loc-main">
            <strong>{loc.partition || '—'}</strong>
            {loc.floor && <span> · {loc.floor}</span>}
          </div>
          <div className="loc-sub">
            {loc.door && <div>{loc.door}</div>}
            {loc.direction && <div>Direction: {loc.direction}</div>}
            {loc.timestampUTC && (
              <div>
                Last seen:{" "}
                {new Date(loc.timestampUTC).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}
                {" (IST)"}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}





C:\Users\W0024618\Desktop\employee-verification\frontend\src\App.js

// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';
function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  // Load all employees once
  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);



  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);


  // Live suggestions as you type
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return;
    }
    const matches = allEmployees.filter(emp =>
      (emp.EmployeeID || '').toLowerCase().includes(term) ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );
    setSuggestions(matches.slice(0, 40));
  }, [searchTerm, allEmployees]);



  const handleSearch = () => {
    setError('');
    const term = searchTerm.trim().toLowerCase();
    if (!term) return setError('Please enter name or ID');

    const found = allEmployees.find(emp =>
      (emp.EmployeeID || '').toLowerCase() === term ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );

    setSuggestions([]); // ⬅️ Clear suggestions here

    if (!found) {
      setSelected(null);
      setError('No matching employee');
    } else {
      selectEmployee(found);
    }
  };

  // Common logic when selecting an employee from search or history
  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName);
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  // Click a suggestion
  const pickSuggestion = emp => {
    if (!emp) {
      setSuggestions([]); // Clear if null
      return;
    }
    selectEmployee(emp);
    setSuggestions([]); // Also clear after selecting one
  };

  // Click a history item
  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
          
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">


        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
              suggestions={suggestions}
              onSelectSuggestion={pickSuggestion}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>






        <div className="right-panel">
          <div className="lists-container">
            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map(emp => (
                  <li key={emp.id} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>


      </div>
{/* 
       {stats && (
        <div className="stats-grid">
          {[
            ['Total Profiles', stats.TotalProfiles],
            ['Active Profiles', stats.ActiveProfiles],
            ['Active Employees', stats.ActiveEmployees],
            ['Active Contractors', stats.ActiveContractors],
            ['Terminated Profiles', stats.TerminatedProfiles],
            ['Terminated Employees', stats.TerminatedEmployees],
            ['Terminated Contractors', stats.TerminatedContractors],
          ].map(([label, val]) => (
            <div key={label} className="stat-box">
              <h3>{label}</h3>
              <p>{val}</p>
            </div>
          ))}
        </div>
      )}  */}


      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>

    </div>

  );
}
export default App;





C:\Users\W0024618\Desktop\employee-verification\frontend\src\index.js


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import './App.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();


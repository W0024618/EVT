// backend/config/dbConfig.js
import sql from 'mssql';

// shared options - increase requestTimeout to avoid short 15s default
const commonOpts = {
  requestTimeout: 300000, // 5 minutes
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
};

// lowercase keys only
const regions = {
  apac: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUPNQ0986V',
    database: 'ACVSUJournal_00010029',
    ...commonOpts
  },
  emea: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUFRA0986V',
    database: 'ACVSUJournal_00011028',
    ...commonOpts
  },
  laca: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUSJO0986V',
    database: 'ACVSUJournal_00010029',
    ...commonOpts
  },
  namer: {
    user: 'GSOC_Test',
    password: 'Westernccure@2025',
    server: 'SRVWUDEN0891V',
    database: 'ACVSUJournal_00010029',
    ...commonOpts
  }
};

const pools = {};

/**
 * @param {string} regionKey  one of the keys in `regions`, case-insensitive
 */
export async function getPool(regionKey) {
  const key = (regionKey || '').toLowerCase();
  const cfg = regions[key];
  if (!cfg) {
    throw new Error(`Unknown region: ${regionKey}`);
  }
  if (!pools[key]) {
    pools[key] = await new sql.ConnectionPool(cfg).connect();
  }
  return pools[key];
}

export { sql };











// backend/index.js (or routes file) â€” add this endpoint
import express from 'express';
import { getPool } from './config/dbConfig.js';

const app = express();
// ... your existing app setup (CORS, JSON, other routes)...

/**
 * GET /api/locations?region=apac
 * returns { locations: [ 'APAC.Default', 'JP.Tokyo', ... ] }
 */
app.get('/api/locations', async (req, res) => {
  const region = (req.query.region || '').toLowerCase();
  if (!region) {
    return res.status(400).json({ error: 'region query param required' });
  }
  try {
    const pool = await getPool(region);
    const sqlQuery = `
      SELECT DISTINCT PartitionName2 AS location
      FROM ACVSUJournalLog
      WHERE PartitionName2 IS NOT NULL AND LTRIM(RTRIM(PartitionName2)) <> ''
      ORDER BY PartitionName2;
    `;
    const result = await pool.request().query(sqlQuery);
    const locations = (result.recordset || []).map(r => r.location);
    return res.json({ locations });
  } catch (err) {
    console.error('locations endpoint error:', err);
    return res.status(500).json({ error: 'Failed to fetch locations' });
  }
});









// at top of ReportsPage component state declarations
const [locations, setLocations] = useState([]);         // fetched from backend
const [locationsLoading, setLocationsLoading] = useState(false);









<Select
  value={location}
  onChange={e => setLocation(e.target.value)}
  input={<OutlinedInput label="Location" />}
  disabled={!region || locationsLoading}
  sx={{
    color: '#fff',
    '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.12)' }
  }}
>
  {/* show fetched locations first; fallback to static map if fetch failed */}
  {(locations && locations.length ? locations : (LOCATION_MAP[region] || [])).map(loc => (
    <MenuItem key={loc} value={loc}>{loc.split('.').pop()}</MenuItem>
  ))}
</Select>











// fetch locations for selected region
useEffect(() => {
  let cancelled = false;
  async function loadLocations() {
    setLocationsLoading(true);
    try {
      const resp = await axios.get('/api/locations', { params: { region } });
      if (cancelled) return;
      const locs = (resp.data && resp.data.locations && resp.data.locations.length) ? resp.data.locations : (LOCATION_MAP[region] || []);
      setLocations(locs);
      // if nothing selected yet, default to first available location
      if (!location && locs && locs.length) setLocation(locs[0]);
    } catch (err) {
      console.error('Failed to load locations for region', region, err);
      // fallback to static map if backend fails
      const fallback = LOCATION_MAP[region] || [];
      setLocations(fallback);
      if (!location && fallback.length) setLocation(fallback[0]);
    } finally {
      setLocationsLoading(false);
    }
  }
  loadLocations();
  return () => { cancelled = true; };
}, [region]); // eslint-disable-line react-hooks/exhaustive-deps


















(index):64 cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
(anonymous) @ (index):64
react-dom-client.development.js:24867 Download the React DevTools for a better development experience: https://react.dev/link/react-devtools
:3008/api/occupancy/live-summary:1  Failed to load resource: net::ERR_NETWORK_IO_SUSPENDED
:3008/api/occupancy/live-summary:1  Failed to load resource: net::ERR_NETWORK_IO_SUSPENDED
WebSocketClient.js:13 WebSocket connection to 'ws://10.199.22.57:3000/ws' failed: 
WebSocketClient @ WebSocketClient.js:13
:3008/api/occupancy/live-summary:1  Failed to load resource: net::ERR_INTERNET_DISCONNECTED
WebSocketClient.js:13 WebSocket connection to 'ws://10.199.22.57:3000/ws' failed: 
WebSocketClient @ WebSocketClient.js:13

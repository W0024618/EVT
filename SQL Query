USE [ACVSCore];
GO

SET NOCOUNT ON;

;WITH EmpAgg AS (
    SELECT
      AP.ObjectID AS EmployeeObjID,
      AP.Name     AS EmpName,

      -- Contractor ID logic (same as your original)
      CASE WHEN AP.Int1 = 0 OR AP.Int1 IS NULL
           THEN AP.Text12
           ELSE CAST(AP.Int1 AS NVARCHAR(50))
      END AS ContractorID,

      ISNULL(PT.Name, '') AS PersonnelType,
      ISNULL(AP.Text5, '') AS PrimaryLocation,
      AP.Disabled         AS Profile_Disabled,

      ISNULL(AP.Text10, '')       AS ManagerName,
      ISNULL(AP.ManagerEmail, '') AS ManagerEmail,

      COUNT(ACR.Name) AS Profile_Cards,

      SUM(
        CASE
          WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
            AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
            AND (ACR.Lost IS NULL OR ACR.Lost = 0)
            AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards

    FROM ACVSCore.Access.Personnel AP
    LEFT JOIN ACVSCore.Access.Credential ACR
      ON AP.Name = ACR.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = AP.PersonnelTypeID

    -- exclude these personnel types
    WHERE (PT.Name IS NULL OR PT.Name NOT IN ('Employee', 'Terminated Personnel', 'Visitor', 'Temp Badge'))

    GROUP BY
      AP.ObjectID,
      AP.Name,
      AP.Int1,
      AP.Text12,
      PT.Name,
      AP.Text5,
      AP.Disabled,
      AP.Text10,
      AP.ManagerEmail
),
EmpAggWithStatus AS (
    SELECT
      EmployeeObjID,
      EmpName,
      ContractorID,
      PersonnelType,
      PrimaryLocation,
      Profile_Disabled,
      ManagerName,
      ManagerEmail,
      Profile_Cards,
      Active_Cards,
      CASE
        WHEN Profile_Disabled = 1 THEN 'Deactive'
        WHEN Profile_Disabled = 0 AND Active_Cards > 0 THEN 'Active'
        ELSE 'Deactive'
      END AS Employee_Status
    FROM EmpAgg
)

-- Final output: only the requested columns in the requested order
SELECT
  e.EmpName,
  e.ContractorID         AS [Contractor ID],
  e.PersonnelType,
  e.PrimaryLocation      AS [Primary Location],
  e.Employee_Status,
  e.ManagerName          AS [Manager Name],
  e.ManagerEmail         AS [Manager Email],

  -- Manager Status derived from manager profile Disabled flag + manager active cards
  ISNULL(
    CASE
      WHEN mgr.MgrObjectID IS NULL THEN 'Unknown'
      WHEN mgr.MgrDisabled = 1 THEN 'Deactive'
      WHEN mgr.MgrDisabled = 0 AND ISNULL(mgrCards.MgrActiveCards, 0) > 0 THEN 'Active'
      ELSE 'Deactive'
    END
  , 'Unknown') AS [Manager Status],

  -- Also provide manager personnel type (useful if you prefer type instead of status)
  ISNULL(mgr.MgrPersonnelType, '') AS [Manager Personnel Type]

FROM EmpAggWithStatus e

OUTER APPLY (
  -- try to find manager record by email first, then by name
  SELECT TOP (1)
    M.ObjectID     AS MgrObjectID,
    M.Name         AS MgrName,
    M.EmailAddress AS MgrEmail,
    M.Disabled     AS MgrDisabled,
    ISNULL(PTM.Name, '') AS MgrPersonnelType
  FROM ACVSCore.Access.Personnel M
  LEFT JOIN ACVSCore.Access.PersonnelType PTM
    ON PTM.ObjectID = M.PersonnelTypeID
  WHERE (
        (e.ManagerEmail <> '' AND M.EmailAddress = e.ManagerEmail)
     OR (e.ManagerName  <> '' AND M.Name = e.ManagerName)
  )
  ORDER BY M.ObjectID
) mgr

OUTER APPLY (
  -- count manager active cards (same active-card logic)
  SELECT
    SUM(
      CASE
        WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
          AND (C.Disabled IS NULL OR C.Disabled = 0)
          AND (C.Lost IS NULL OR C.Lost = 0)
          AND (C.Stolen IS NULL OR C.Stolen = 0)
        THEN 1 ELSE 0
      END
    ) AS MgrActiveCards
  FROM ACVSCore.Access.Credential C
  WHERE C.Name = mgr.MgrName
) mgrCards

ORDER BY e.EmpName;
GO
















Now We need only below Column in Exact same 

EmpName	Contractor ID	PersonnelType	Primary Location	Employee_Status	 Manager Name	Manager Email	Manager Status ( ACtive /Deactive ) or We can add here Manager Personnel Type  also 

SO Update Query as per Request carefully ..

USE [ACVSCore];
GO

SET NOCOUNT ON;

;WITH EmpAgg AS (
    SELECT
      AP.ObjectID           AS EmployeeObjID,
      AP.Name               AS EmpName,
      CASE WHEN AP.Int1 = 0 OR AP.Int1 IS NULL
           THEN AP.Text12
           ELSE CAST(AP.Int1 AS NVARCHAR(50))
      END AS EmployeeID,
      ISNULL(PT.Name, '')   AS PersonnelType,
      AP.Disabled           AS Profile_Disabled,
      ISNULL(AP.Text5, '')  AS PrimaryLocation,

      -- new columns requested
      ISNULL(AP.ManagerEmail, '')   AS ManagerEmail,      -- Manager email column
      ISNULL(AP.Text10, '')         AS ManagerName,       -- Text10 used for Manager Name
      ISNULL(AP.EmailAddress, '')   AS ContractorEmail,   -- EmailAddress used for Contractor Mail ID's
      ISNULL(AP.Text12, '')         AS ContractorID,      -- Text12 used for Contractor ID (also used above)

      COUNT(ACR.Name)       AS Profile_Cards,

      SUM(
        CASE
          WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
            AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
            AND (ACR.Lost IS NULL OR ACR.Lost = 0)
            AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards,

      CASE
        WHEN COUNT(ACR.Name) - SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        ) < 0 THEN 0
        ELSE COUNT(ACR.Name) - SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )
      END AS Deactive_Cards,

      -- Active card numbers
      ISNULL(
        STUFF(
          (
            SELECT ', ' + COALESCE(CAST(ACR2.CardNumber AS NVARCHAR(100)), CAST(ACR2.ObjectID AS NVARCHAR(50)))
            FROM ACVSCore.Access.Credential ACR2
            WHERE ACR2.Name = AP.Name
              AND (
                 (ACR2.ExpirationDateTime IS NULL OR ACR2.ExpirationDateTime >= GETDATE())
                 AND (ACR2.Disabled IS NULL OR ACR2.Disabled = 0)
                 AND (ACR2.Lost IS NULL OR ACR2.Lost = 0)
                 AND (ACR2.Stolen IS NULL OR ACR2.Stolen = 0)
              )
            FOR XML PATH(''), TYPE
          ).value('.', 'NVARCHAR(MAX)')
        , 1, 2, '')
      , '') AS Active_Card_Numbers,

      -- Deactive card numbers
      ISNULL(
        STUFF(
          (
            SELECT ', ' + COALESCE(CAST(ACR3.CardNumber AS NVARCHAR(100)), CAST(ACR3.ObjectID AS NVARCHAR(50)))
            FROM ACVSCore.Access.Credential ACR3
            WHERE ACR3.Name = AP.Name
              AND NOT (
                 (ACR3.ExpirationDateTime IS NULL OR ACR3.ExpirationDateTime >= GETDATE())
                 AND (ACR3.Disabled IS NULL OR ACR3.Disabled = 0)
                 AND (ACR3.Lost IS NULL OR ACR3.Lost = 0)
                 AND (ACR3.Stolen IS NULL OR ACR3.Stolen = 0)
              )
            FOR XML PATH(''), TYPE
          ).value('.', 'NVARCHAR(MAX)')
        , 1, 2, '')
      , '') AS Deactive_Card_Numbers

    FROM ACVSCore.Access.Personnel AP
    LEFT JOIN ACVSCore.Access.Credential ACR
      ON AP.Name = ACR.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = AP.PersonnelTypeID

    -- Exclude these personnel types (keep others, and keep rows where PersonnelType is NULL)
    WHERE (PT.Name IS NULL OR PT.Name NOT IN ('Employee', 'Terminated Personnel', 'Visitor', 'Temp Badge'))

    GROUP BY
      AP.ObjectID,
      AP.Name,
      AP.Int1,
      AP.Text12,
      PT.Name,
      AP.Disabled,
      AP.Text5,
      AP.ManagerEmail,
      AP.Text10,
      AP.EmailAddress
),
EmpAggWithStatus AS (
    SELECT
      EmployeeObjID,
      EmpName,
      EmployeeID,
      PersonnelType,
      Profile_Disabled,
      Profile_Cards,
      Active_Cards,
      Deactive_Cards,
      Active_Card_Numbers,
      Deactive_Card_Numbers,
      PrimaryLocation,
      ManagerEmail,
      ManagerName,
      ContractorEmail,
      ContractorID,
      CASE
        WHEN Profile_Disabled = 1 THEN 'Deactive'
        WHEN Profile_Disabled = 0 AND Active_Cards > 0 THEN 'Active'
        ELSE 'Deactive'
      END AS Employee_Status
    FROM EmpAgg
)

-- Final select: clearance columns removed as requested
SELECT
  e.EmployeeObjID,
  e.EmpName,
  e.EmployeeID,
  e.PersonnelType,
  e.PrimaryLocation         AS [Primary Location],
  e.Profile_Cards           AS [Profile cards],
  e.Active_Cards,
  e.Active_Card_Numbers     AS [Active card number],
  e.Deactive_Cards,
  e.Deactive_Card_Numbers   AS [Deactive card number],
  CASE WHEN img.Image IS NULL THEN 'No' ELSE 'Yes' END AS [Image],
  e.Employee_Status,
  -- newly requested fields
  e.ManagerName             AS [Manager Name],
  e.ManagerEmail            AS [Manager Email],
  e.ContractorEmail         AS [Contractor Email],
  e.ContractorID            AS [Contractor ID]
FROM EmpAggWithStatus e

OUTER APPLY (
    -- image presence check only (no binary returned)
    SELECT TOP (1) AI.Image
    FROM ACVSCore.Access.Images AI
    WHERE AI.ParentId = e.EmployeeObjID
      AND DATALENGTH(AI.Image) > 0
    ORDER BY AI.ObjectID DESC
) img

ORDER BY e.EmpName;
GO



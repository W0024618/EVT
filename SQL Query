USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- cleanup from previous runs
IF OBJECT_ID('tempdb..#ProvidedCards') IS NOT NULL DROP TABLE #ProvidedCards;
IF OBJECT_ID('tempdb..#Cred') IS NOT NULL DROP TABLE #Cred;
IF OBJECT_ID('tempdb..#EmpStatus') IS NOT NULL DROP TABLE #EmpStatus;
IF OBJECT_ID('tempdb..#MatchesFull') IS NOT NULL DROP TABLE #MatchesFull;
IF OBJECT_ID('tempdb..#MatchesFirst5') IS NOT NULL DROP TABLE #MatchesFirst5;
IF OBJECT_ID('tempdb..#MatchesLast5') IS NOT NULL DROP TABLE #MatchesLast5;
IF OBJECT_ID('tempdb..#SummaryAll') IS NOT NULL DROP TABLE #SummaryAll;
IF OBJECT_ID('tempdb..#DetailedMatches') IS NOT NULL DROP TABLE #DetailedMatches;

-- 1) Provided cards
SELECT val AS CardNumberProvided
INTO #ProvidedCards
FROM (VALUES
    ('452861'),('452811'),('224883'),('377733'),('82209'),('350387'),('451587'),('451598'),
    ('451591'),('451580'),('347837'),('379311'),('327305'),('372079'),('400270'),('348202'),
    ('380941'),('380934'),('378273'),('379934'),('240569'),('398771'),('314549'),('346417'),
    ('362191'),('348405'),('39998'),('400799'),('425816'),('225534'),('380942'),('347485'),
    ('287381'),('399671'),('378357'),('315288'),('451899'),('451985'),('452115'),('399708'),
    ('399092'),('327008'),('452164'),('282904'),('350545'),('444793'),('452813'),('380558'),
    ('452702'),('451973'),('452744'),('452321'),('380051'),('94636'),('13564'),('13403'),
    ('239748'),('211812'),('452514'),('449452'),('330227')
) AS t(val);

-- 2) Normalize credentials into temp table (snapshot)
SELECT
    C.ObjectID                                      AS CredentialObjectID,
    LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
    RIGHT(LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))), 5) AS Card_Last5,
    LEFT(LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))), 5)  AS Card_First5,
    C.Name                                          AS PersonnelName,
    P.ObjectID                                      AS PersonnelObjectID,
    P.Int1,
    P.Text12,
    P.Text5                                         AS PrimaryLocation,
    P.Disabled                                      AS Profile_Disabled,
    PT.Name                                         AS PersonnelType,
    CASE
      WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
       AND (C.Disabled IS NULL OR C.Disabled = 0)
       AND (C.Lost IS NULL OR C.Lost = 0)
       AND (C.Stolen IS NULL OR C.Stolen = 0)
      THEN 1 ELSE 0
    END AS IsCardActive,
    C.ExpirationDateTime,
    C.Disabled AS Credential_Disabled,
    C.Lost,
    C.Stolen
INTO #Cred
FROM ACVSCore.Access.Credential C
LEFT JOIN ACVSCore.Access.Personnel P ON P.Name = C.Name
LEFT JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = P.PersonnelTypeID
WHERE C.CardNumber IS NOT NULL
  AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> '';

-- 3) Per-person summary into temp table
SELECT
  PersonnelObjectID,
  PersonnelName,
  CASE WHEN Int1 = 0 OR Int1 IS NULL THEN Text12 ELSE CAST(Int1 AS NVARCHAR(50)) END AS EmployeeID,
  ISNULL(PrimaryLocation,'') AS PrimaryLocation,
  ISNULL(PersonnelType,'')   AS PersonnelType,
  ISNULL(Profile_Disabled,0) AS Profile_Disabled,
  SUM(IsCardActive)          AS Active_Cards
INTO #EmpStatus
FROM #Cred
GROUP BY PersonnelObjectID, PersonnelName, Int1, Text12, PrimaryLocation, PersonnelType, Profile_Disabled;

-- 4) Match sets (Full, First5, Last5)
SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_First5,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesFull
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.CardNumber_Norm = PC.CardNumberProvided;

SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_First5,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesLast5
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.Card_Last5 = RIGHT(PC.CardNumberProvided, 5)
WHERE C.CardNumber_Norm <> PC.CardNumberProvided; -- exclude exact full matches

SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_First5,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesFirst5
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.Card_First5 = LEFT(PC.CardNumberProvided, 5)
WHERE C.CardNumber_Norm <> PC.CardNumberProvided; -- exclude exact full matches

-- 5) Create properly-typed summary table (pre-created to avoid truncation)
CREATE TABLE #SummaryAll (
  ProvidedCard       NVARCHAR(100) NOT NULL,
  MatchType          NVARCHAR(20)  NOT NULL,
  TotalAssignments   INT           NOT NULL,
  DistinctEmployees  INT           NOT NULL,
  ActiveAssignments  INT           NOT NULL
);

-- insert aggregated rows for each match type
INSERT INTO #SummaryAll (ProvidedCard, MatchType, TotalAssignments, DistinctEmployees, ActiveAssignments)
SELECT CardNumberProvided, 'Full', COUNT(*), COUNT(DISTINCT PersonnelObjectID), ISNULL(SUM(IsCardActive),0)
FROM #MatchesFull
GROUP BY CardNumberProvided;

INSERT INTO #SummaryAll (ProvidedCard, MatchType, TotalAssignments, DistinctEmployees, ActiveAssignments)
SELECT CardNumberProvided, 'First5', COUNT(*), COUNT(DISTINCT PersonnelObjectID), ISNULL(SUM(IsCardActive),0)
FROM #MatchesFirst5
GROUP BY CardNumberProvided;

INSERT INTO #SummaryAll (ProvidedCard, MatchType, TotalAssignments, DistinctEmployees, ActiveAssignments)
SELECT CardNumberProvided, 'Last5', COUNT(*), COUNT(DISTINCT PersonnelObjectID), ISNULL(SUM(IsCardActive),0)
FROM #MatchesLast5
GROUP BY CardNumberProvided;

-- 6) Create properly-typed detailed table (pre-created to avoid truncation)
CREATE TABLE #DetailedMatches (
  MatchType                 NVARCHAR(20)   NOT NULL,
  ProvidedCard              NVARCHAR(100)  NOT NULL,
  MatchedCardNumber         NVARCHAR(100)  NOT NULL,
  MatchedCard_First5        NVARCHAR(10)   NULL,
  MatchedCard_Last5         NVARCHAR(10)   NULL,
  CredentialObjectID        NVARCHAR(100)  NULL,
  ThisAssignmentIsActive    INT            NULL,
  PersonnelObjectID         NVARCHAR(100)  NULL,
  EmpName                   NVARCHAR(250)  NULL,
  EmployeeID                NVARCHAR(100)  NULL,
  PersonnelType             NVARCHAR(150)  NULL,
  PrimaryLocation           NVARCHAR(250)  NULL,
  Profile_Disabled          INT            NULL,
  Employee_Status           NVARCHAR(50)   NULL
);

-- 7) Populate detailed table (Full, First5, Last5)
INSERT INTO #DetailedMatches
SELECT
  'Full' AS MatchType,
  MF.CardNumberProvided AS ProvidedCard,
  MF.CardNumber_Norm    AS MatchedCardNumber,
  MF.Card_First5        AS MatchedCard_First5,
  MF.Card_Last5         AS MatchedCard_Last5,
  CAST(MF.CredentialObjectID AS NVARCHAR(100)) AS CredentialObjectID,
  MF.IsCardActive       AS ThisAssignmentIsActive,
  CAST(ES.PersonnelObjectID AS NVARCHAR(100)) AS PersonnelObjectID,
  ES.PersonnelName      AS EmpName,
  ES.EmployeeID,
  ES.PersonnelType,
  ES.PrimaryLocation,
  ES.Profile_Disabled,
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesFull MF
LEFT JOIN #EmpStatus ES ON ES.PersonnelObjectID = MF.PersonnelObjectID;

INSERT INTO #DetailedMatches
SELECT
  'First5' AS MatchType,
  M1.CardNumberProvided AS ProvidedCard,
  M1.CardNumber_Norm    AS MatchedCardNumber,
  M1.Card_First5        AS MatchedCard_First5,
  M1.Card_Last5         AS MatchedCard_Last5,
  CAST(M1.CredentialObjectID AS NVARCHAR(100)) AS CredentialObjectID,
  M1.IsCardActive       AS ThisAssignmentIsActive,
  CAST(ES1.PersonnelObjectID AS NVARCHAR(100)) AS PersonnelObjectID,
  ES1.PersonnelName     AS EmpName,
  ES1.EmployeeID,
  ES1.PersonnelType,
  ES1.PrimaryLocation,
  ES1.Profile_Disabled,
  CASE
    WHEN ES1.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES1.Profile_Disabled = 0 AND ES1.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesFirst5 M1
LEFT JOIN #EmpStatus ES1 ON ES1.PersonnelObjectID = M1.PersonnelObjectID;

INSERT INTO #DetailedMatches
SELECT
  'Last5' AS MatchType,
  ML.CardNumberProvided AS ProvidedCard,
  ML.CardNumber_Norm    AS MatchedCardNumber,
  ML.Card_First5        AS MatchedCard_First5,
  ML.Card_Last5         AS MatchedCard_Last5,
  CAST(ML.CredentialObjectID AS NVARCHAR(100)) AS CredentialObjectID,
  ML.IsCardActive       AS ThisAssignmentIsActive,
  CAST(ES2.PersonnelObjectID AS NVARCHAR(100)) AS PersonnelObjectID,
  ES2.PersonnelName     AS EmpName,
  ES2.EmployeeID,
  ES2.PersonnelType,
  ES2.PrimaryLocation,
  ES2.Profile_Disabled,
  CASE
    WHEN ES2.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES2.Profile_Disabled = 0 AND ES2.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesLast5 ML
LEFT JOIN #EmpStatus ES2 ON ES2.PersonnelObjectID = ML.PersonnelObjectID;

-- ========== OUTPUT 1: Summary ==========
SELECT ProvidedCard, MatchType, TotalAssignments, DistinctEmployees, ActiveAssignments
FROM #SummaryAll
ORDER BY ProvidedCard,
  CASE WHEN MatchType = 'Full' THEN 1 WHEN MatchType = 'First5' THEN 2 WHEN MatchType = 'Last5' THEN 3 ELSE 4 END;

-- ========== OUTPUT 2: Detailed matches ==========
SELECT MatchType, ProvidedCard, MatchedCardNumber, MatchedCard_First5, MatchedCard_Last5,
       CredentialObjectID, ThisAssignmentIsActive,
       PersonnelObjectID, EmpName, EmployeeID, PersonnelType, PrimaryLocation, Profile_Disabled, Employee_Status
FROM #DetailedMatches
ORDER BY ProvidedCard,
  CASE WHEN MatchType = 'Full' THEN 1 WHEN MatchType = 'First5' THEN 2 WHEN MatchType = 'Last5' THEN 3 ELSE 4 END,
  EmpName;

-- optional cleanup (uncomment if you want)
-- DROP TABLE #ProvidedCards;
-- DROP TABLE #Cred;
-- DROP TABLE #EmpStatus;
-- DROP TABLE #MatchesFull;
-- DROP TABLE #MatchesFirst5;
-- DROP TABLE #MatchesLast5;
-- DROP TABLE #SummaryAll;
-- DROP TABLE #DetailedMatches;
GO
















Msg 8152, Level 16, State 30, Line 149
String or binary data would be truncated.
The statement has been terminated.
Msg 8152, Level 16, State 30, Line 150
String or binary data would be truncated.
The statement has been terminated.
Msg 8152, Level 16, State 30, Line 176
String or binary data would be truncated.
The statement has been terminated.
Msg 8152, Level 16, State 30, Line 199
String or binary data would be truncated.
The statement has been terminated.

Completion time: 2025-10-16T10:39:46.7489281+05:30

Read above error carefully and solve the issue and share me updated Query 




USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- cleanup from previous runs
IF OBJECT_ID('tempdb..#ProvidedCards') IS NOT NULL DROP TABLE #ProvidedCards;
IF OBJECT_ID('tempdb..#Cred') IS NOT NULL DROP TABLE #Cred;
IF OBJECT_ID('tempdb..#EmpStatus') IS NOT NULL DROP TABLE #EmpStatus;
IF OBJECT_ID('tempdb..#MatchesFull') IS NOT NULL DROP TABLE #MatchesFull;
IF OBJECT_ID('tempdb..#MatchesFirst5') IS NOT NULL DROP TABLE #MatchesFirst5;
IF OBJECT_ID('tempdb..#MatchesLast5') IS NOT NULL DROP TABLE #MatchesLast5;
IF OBJECT_ID('tempdb..#SummaryFull') IS NOT NULL DROP TABLE #SummaryFull;
IF OBJECT_ID('tempdb..#SummaryFirst5') IS NOT NULL DROP TABLE #SummaryFirst5;
IF OBJECT_ID('tempdb..#SummaryLast5') IS NOT NULL DROP TABLE #SummaryLast5;
IF OBJECT_ID('tempdb..#SummaryAll') IS NOT NULL DROP TABLE #SummaryAll;
IF OBJECT_ID('tempdb..#DetailedMatches') IS NOT NULL DROP TABLE #DetailedMatches;

-- 1) Provided cards
SELECT val AS CardNumberProvided
INTO #ProvidedCards
FROM (VALUES
    ('452861'),('452811'),('224883'),('377733'),('82209'),('350387'),('451587'),('451598'),
    ('451591'),('451580'),('347837'),('379311'),('327305'),('372079'),('400270'),('348202'),
    ('380941'),('380934'),('378273'),('379934'),('240569'),('398771'),('314549'),('346417'),
    ('362191'),('348405'),('39998'),('400799'),('425816'),('225534'),('380942'),('347485'),
    ('287381'),('399671'),('378357'),('315288'),('451899'),('451985'),('452115'),('399708'),
    ('399092'),('327008'),('452164'),('282904'),('350545'),('444793'),('452813'),('380558'),
    ('452702'),('451973'),('452744'),('452321'),('380051'),('94636'),('13564'),('13403'),
    ('239748'),('211812'),('452514'),('449452'),('330227')
) AS t(val);

-- 2) Normalize credentials into temp table
SELECT
    C.ObjectID                                      AS CredentialObjectID,
    LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
    RIGHT(LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))), 5) AS Card_Last5,
    LEFT(LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))), 5)  AS Card_First5,
    C.Name                                          AS PersonnelName,
    P.ObjectID                                      AS PersonnelObjectID,
    P.Int1,
    P.Text12,
    P.Text5                                         AS PrimaryLocation,
    P.Disabled                                      AS Profile_Disabled,
    PT.Name                                         AS PersonnelType,
    CASE
      WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
       AND (C.Disabled IS NULL OR C.Disabled = 0)
       AND (C.Lost IS NULL OR C.Lost = 0)
       AND (C.Stolen IS NULL OR C.Stolen = 0)
      THEN 1 ELSE 0
    END AS IsCardActive,
    C.ExpirationDateTime,
    C.Disabled AS Credential_Disabled,
    C.Lost,
    C.Stolen
INTO #Cred
FROM ACVSCore.Access.Credential C
LEFT JOIN ACVSCore.Access.Personnel P ON P.Name = C.Name
LEFT JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = P.PersonnelTypeID
WHERE C.CardNumber IS NOT NULL
  AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> '';

-- 3) Per-person summary into temp table
SELECT
  PersonnelObjectID,
  PersonnelName,
  CASE WHEN Int1 = 0 OR Int1 IS NULL THEN Text12 ELSE CAST(Int1 AS NVARCHAR(50)) END AS EmployeeID,
  ISNULL(PrimaryLocation,'') AS PrimaryLocation,
  ISNULL(PersonnelType,'')   AS PersonnelType,
  ISNULL(Profile_Disabled,0) AS Profile_Disabled,
  SUM(IsCardActive)          AS Active_Cards
INTO #EmpStatus
FROM #Cred
GROUP BY PersonnelObjectID, PersonnelName, Int1, Text12, PrimaryLocation, PersonnelType, Profile_Disabled;

-- 4) Match sets
SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_First5,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesFull
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.CardNumber_Norm = PC.CardNumberProvided;

SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_First5,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesLast5
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.Card_Last5 = RIGHT(PC.CardNumberProvided, 5)
WHERE C.CardNumber_Norm <> PC.CardNumberProvided; -- exclude exact full matches

SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_First5,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesFirst5
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.Card_First5 = LEFT(PC.CardNumberProvided, 5)
WHERE C.CardNumber_Norm <> PC.CardNumberProvided; -- exclude exact full matches

-- 5) Per-match summaries
SELECT
  CardNumberProvided AS ProvidedCard,
  'Full' AS MatchType,
  COUNT(*) AS TotalAssignments,
  COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
  ISNULL(SUM(IsCardActive),0) AS ActiveAssignments
INTO #SummaryFull
FROM #MatchesFull
GROUP BY CardNumberProvided;

SELECT
  CardNumberProvided AS ProvidedCard,
  'First5' AS MatchType,
  COUNT(*) AS TotalAssignments,
  COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
  ISNULL(SUM(IsCardActive),0) AS ActiveAssignments
INTO #SummaryFirst5
FROM #MatchesFirst5
GROUP BY CardNumberProvided;

SELECT
  CardNumberProvided AS ProvidedCard,
  'Last5' AS MatchType,
  COUNT(*) AS TotalAssignments,
  COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
  ISNULL(SUM(IsCardActive),0) AS ActiveAssignments
INTO #SummaryLast5
FROM #MatchesLast5
GROUP BY CardNumberProvided;

-- 6) Consolidate summary into one temp table for reliable ordering
SELECT * INTO #SummaryAll FROM #SummaryFull;
INSERT INTO #SummaryAll SELECT * FROM #SummaryFirst5;
INSERT INTO #SummaryAll SELECT * FROM #SummaryLast5;

-- 7) Build detailed matches into a single temp table
SELECT
  'Full' AS MatchType,
  MF.CardNumberProvided AS ProvidedCard,
  MF.CardNumber_Norm    AS MatchedCardNumber,
  MF.Card_First5        AS MatchedCard_First5,
  MF.Card_Last5         AS MatchedCard_Last5,
  MF.CredentialObjectID,
  MF.IsCardActive       AS ThisAssignmentIsActive,
  ES.PersonnelObjectID,
  ES.PersonnelName      AS EmpName,
  ES.EmployeeID,
  ES.PersonnelType,
  ES.PrimaryLocation,
  ES.Profile_Disabled,
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
INTO #DetailedMatches
FROM #MatchesFull MF
LEFT JOIN #EmpStatus ES ON ES.PersonnelObjectID = MF.PersonnelObjectID;

INSERT INTO #DetailedMatches
SELECT
  'First5' AS MatchType,
  M1.CardNumberProvided AS ProvidedCard,
  M1.CardNumber_Norm    AS MatchedCardNumber,
  M1.Card_First5        AS MatchedCard_First5,
  M1.Card_Last5         AS MatchedCard_Last5,
  M1.CredentialObjectID,
  M1.IsCardActive       AS ThisAssignmentIsActive,
  ES1.PersonnelObjectID,
  ES1.PersonnelName     AS EmpName,
  ES1.EmployeeID,
  ES1.PersonnelType,
  ES1.PrimaryLocation,
  ES1.Profile_Disabled,
  CASE
    WHEN ES1.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES1.Profile_Disabled = 0 AND ES1.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesFirst5 M1
LEFT JOIN #EmpStatus ES1 ON ES1.PersonnelObjectID = M1.PersonnelObjectID;

INSERT INTO #DetailedMatches
SELECT
  'Last5' AS MatchType,
  ML.CardNumberProvided AS ProvidedCard,
  ML.CardNumber_Norm    AS MatchedCardNumber,
  ML.Card_First5        AS MatchedCard_First5,
  ML.Card_Last5         AS MatchedCard_Last5,
  ML.CredentialObjectID,
  ML.IsCardActive       AS ThisAssignmentIsActive,
  ES2.PersonnelObjectID,
  ES2.PersonnelName     AS EmpName,
  ES2.EmployeeID,
  ES2.PersonnelType,
  ES2.PrimaryLocation,
  ES2.Profile_Disabled,
  CASE
    WHEN ES2.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES2.Profile_Disabled = 0 AND ES2.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesLast5 ML
LEFT JOIN #EmpStatus ES2 ON ES2.PersonnelObjectID = ML.PersonnelObjectID;

-- ========== OUTPUT 1: Summary ==========
SELECT ProvidedCard, MatchType, TotalAssignments, DistinctEmployees, ActiveAssignments
FROM #SummaryAll
ORDER BY ProvidedCard,
  CASE WHEN MatchType = 'Full' THEN 1 WHEN MatchType = 'First5' THEN 2 WHEN MatchType = 'Last5' THEN 3 ELSE 4 END;

-- ========== OUTPUT 2: Detailed matches ==========
SELECT MatchType, ProvidedCard, MatchedCardNumber, MatchedCard_First5, MatchedCard_Last5,
       CredentialObjectID, ThisAssignmentIsActive,
       PersonnelObjectID, EmpName, EmployeeID, PersonnelType, PrimaryLocation, Profile_Disabled, Employee_Status
FROM #DetailedMatches
ORDER BY ProvidedCard,
  CASE WHEN MatchType = 'Full' THEN 1 WHEN MatchType = 'First5' THEN 2 WHEN MatchType = 'Last5' THEN 3 ELSE 4 END,
  EmpName;

-- optional cleanup (uncomment if you want)
-- DROP TABLE #ProvidedCards;
-- DROP TABLE #Cred;
-- DROP TABLE #EmpStatus;
-- DROP TABLE #MatchesFull;
-- DROP TABLE #MatchesFirst5;
-- DROP TABLE #MatchesLast5;
-- DROP TABLE #SummaryFull;
-- DROP TABLE #SummaryFirst5;
-- DROP TABLE #SummaryLast5;
-- DROP TABLE #SummaryAll;
-- DROP TABLE #DetailedMatches;
GO


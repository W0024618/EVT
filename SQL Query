USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- Normalized credential rows with an "IsCardActive" flag and cleaned CardNumber
;WITH Cred AS (
    SELECT
        C.ObjectID            AS CredentialObjectID,
        C.CardNumber,
        -- normalize card number: trim and cast to NVARCHAR
        LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
        C.Name                AS PersonnelName,
        P.ObjectID            AS PersonnelObjectID,
        P.Int1,
        P.Text12,
        P.Text5               AS PrimaryLocation,
        P.Disabled            AS Profile_Disabled,
        PT.Name               AS PersonnelType,

        -- Is this credential considered active (per your logic)?
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
           AND (C.Disabled IS NULL OR C.Disabled = 0)
           AND (C.Lost IS NULL OR C.Lost = 0)
           AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END AS IsCardActive

    FROM ACVSCore.Access.Credential C
    LEFT JOIN ACVSCore.Access.Personnel P
      ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    WHERE C.CardNumber IS NOT NULL
      AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> ''
),

-- Per-person summary to determine if profile (person) has any active cards -> Employee_Status
EmpStatus AS (
    SELECT
      P.ObjectID AS PersonnelObjectID,
      P.Name     AS PersonnelName,
      CASE WHEN P.Int1 = 0 OR P.Int1 IS NULL THEN P.Text12 ELSE CAST(P.Int1 AS NVARCHAR(50)) END AS EmployeeID,
      ISNULL(P.Text5, '') AS PrimaryLocation,
      ISNULL(PT.Name, '') AS PersonnelType,
      P.Disabled AS Profile_Disabled,

      SUM(
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
            AND (C.Disabled IS NULL OR C.Disabled = 0)
            AND (C.Lost IS NULL OR C.Lost = 0)
            AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards

    FROM ACVSCore.Access.Personnel P
    LEFT JOIN ACVSCore.Access.Credential C
      ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    GROUP BY P.ObjectID, P.Name, P.Int1, P.Text12, P.Text5, PT.Name, P.Disabled
),

-- Card numbers that are assigned to more than one distinct personnel
DuplicateCards AS (
    SELECT
      C.CardNumber_Norm AS CardNumber,
      COUNT(DISTINCT C.PersonnelObjectID) AS DistinctPersonnelCount,
      SUM(C.IsCardActive) AS ActiveAssignments -- how many of the assignments are currently active
    FROM Cred C
    WHERE C.CardNumber_Norm IS NOT NULL AND C.CardNumber_Norm <> ''
    GROUP BY C.CardNumber_Norm
    HAVING COUNT(DISTINCT C.PersonnelObjectID) > 1
)

-- Final: list every employee who holds a card that appears in DuplicateCards
SELECT
  DC.CardNumber AS [Card Number],
  DC.DistinctPersonnelCount AS [Distinct Employees With This Card],
  DC.ActiveAssignments AS [Active Assignments For This Card],

  -- credential-specific info
  CR.CredentialObjectID AS [Credential ObjectID],
  CR.IsCardActive AS [This Assignment Active?], -- 1 = active, 0 = not active

  -- personnel info
  ES.PersonnelObjectID AS [EmployeeObjID],
  ES.PersonnelName   AS [EmpName],
  ES.EmployeeID      AS [EmployeeID],
  ES.PersonnelType   AS [PersonnelType],
  ES.PrimaryLocation AS [Primary Location],
  ES.Profile_Disabled AS [Profile_Disabled],

  -- derive an Employee_Status per person (consistent with your earlier logic)
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status

FROM DuplicateCards DC
INNER JOIN Cred CR
  ON CR.CardNumber_Norm = DC.CardNumber
INNER JOIN EmpStatus ES
  ON ES.PersonnelObjectID = CR.PersonnelObjectID

ORDER BY DC.CardNumber, ES.PersonnelName;
GO








USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- 1) Determine per-person basic info + whether the profile is active (has any active card)
;WITH EmpBasic AS (
    SELECT
        P.ObjectID                AS EmployeeObjID,
        P.Name                    AS EmpName,
        CASE WHEN P.Int1 = 0 OR P.Int1 IS NULL THEN P.Text12 ELSE CAST(P.Int1 AS NVARCHAR(50)) END AS EmployeeID,
        ISNULL(PT.Name,'')        AS PersonnelType,
        P.Disabled                AS Profile_Disabled,
        ISNULL(P.Text5, '')       AS PrimaryLocation,
        -- count of active cards per employee (same "active" definition you used)
        SUM(
          CASE
            WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
              AND (C.Disabled IS NULL OR C.Disabled = 0)
              AND (C.Lost IS NULL OR C.Lost = 0)
              AND (C.Stolen IS NULL OR C.Stolen = 0)
            THEN 1 ELSE 0
          END
        ) OVER (PARTITION BY P.ObjectID) AS Employee_ActiveCard_Count
    FROM ACVSCore.Access.Personnel P
    LEFT JOIN ACVSCore.Access.Credential C
      ON C.Name = P.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    GROUP BY
      P.ObjectID, P.Name, P.Int1, P.Text12, PT.Name, P.Disabled, P.Text5
),

-- 2) Normalize credential card-number/key and compute whether each credential instance is active
CredsNormalized AS (
    SELECT
        C.ObjectID                AS CredentialObjID,
        -- use CardNumber if available else fallback to ObjectID (string)
        COALESCE(CAST(NULLIF(LTRIM(RTRIM(C.CardNumber)), '') AS NVARCHAR(100)), CAST(C.ObjectID AS NVARCHAR(50))) AS CardKey,
        C.Name                    AS PersonnelName,    -- matches Personnel.Name
        P.ObjectID                AS EmployeeObjID,
        P.Name                    AS EmpName,
        CASE WHEN P.Int1 = 0 OR P.Int1 IS NULL THEN P.Text12 ELSE CAST(P.Int1 AS NVARCHAR(50)) END AS EmployeeID,
        -- credential active flag (same checks you used)
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
            AND (C.Disabled IS NULL OR C.Disabled = 0)
            AND (C.Lost IS NULL OR C.Lost = 0)
            AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END AS Credential_IsActive,
        C.ExpirationDateTime,
        C.Disabled                AS Credential_Disabled,
        C.Lost,
        C.Stolen
    FROM ACVSCore.Access.Credential C
    LEFT JOIN ACVSCore.Access.Personnel P
      ON P.Name = C.Name
),

-- 3) Find only those CardKey values that are assigned to more than one distinct employee
DuplicatedCards AS (
    SELECT
        CardKey,
        COUNT(DISTINCT EmployeeObjID) AS DistinctEmployeeCount,
        SUM(CASE WHEN Credential_IsActive = 1 THEN 1 ELSE 0 END) AS ActiveCredentialCount,
        SUM(CASE WHEN Credential_IsActive = 0 THEN 1 ELSE 0 END) AS DeactiveCredentialCount
    FROM CredsNormalized
    WHERE CardKey IS NOT NULL AND CardKey <> ''
    GROUP BY CardKey
    HAVING COUNT(DISTINCT EmployeeObjID) > 1
)

-- 4) Final: return rows for each employee who shares a duplicated CardKey, with useful context
SELECT
    dc.CardKey                                AS [CardNumber_Key],
    dc.DistinctEmployeeCount                  AS [Profiles_With_This_Card],
    dc.ActiveCredentialCount                  AS [Active_Creds_For_Card],
    dc.DeactiveCredentialCount                AS [Deactive_Creds_For_Card],

    cn.CredentialObjID                        AS [CredentialObjID],
    cn.Credential_IsActive                    AS [Credential_IsActive], -- 1 = this credential currently active

    eb.EmployeeObjID                          AS [EmployeeObjID],
    eb.EmpName                                AS [EmpName],
    eb.EmployeeID                             AS [EmployeeID],
    eb.PersonnelType                          AS [PersonnelType],
    eb.PrimaryLocation                        AS [PrimaryLocation],
    CASE WHEN eb.Profile_Disabled = 1 THEN 'ProfileDisabled'
         WHEN eb.Employee_ActiveCard_Count > 0 THEN 'ActiveProfile' ELSE 'DeactiveProfile'
    END                                       AS [Employee_Profile_Status],
    eb.Employee_ActiveCard_Count              AS [Employee_ActiveCard_Count]

FROM DuplicatedCards dc
INNER JOIN CredsNormalized cn
    ON cn.CardKey = dc.CardKey
INNER JOIN EmpBasic eb
    ON eb.EmployeeObjID = cn.EmployeeObjID

ORDER BY dc.CardKey, eb.EmpName;
GO









i want to find Duplicate Card Number 
Same card number with Diffrent Employee Prifile ..
So on Basis of Active Card and Deactive Card number 
Compare each card number and Display only Employee list 
Where card number is same but Diffrent Employeee..
Refer below Query and make new Query carefully




USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

;WITH EmpAgg AS (
    SELECT
      AP.ObjectID           AS EmployeeObjID,
      AP.Name               AS EmpName,
      CASE WHEN AP.Int1 = 0 OR AP.Int1 IS NULL
           THEN AP.Text12
           ELSE CAST(AP.Int1 AS NVARCHAR(50))
      END AS EmployeeID,
      ISNULL(PT.Name, '')   AS PersonnelType,
      AP.Disabled           AS Profile_Disabled,
      -- Primary location from Personnel.Text5
      ISNULL(AP.Text5, '')  AS PrimaryLocation,

      COUNT(ACR.Name)       AS Profile_Cards,

      SUM(
        CASE
          WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
            AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
            AND (ACR.Lost IS NULL OR ACR.Lost = 0)
            AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards,

      CASE
        WHEN COUNT(ACR.Name) - SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        ) < 0 THEN 0
        ELSE COUNT(ACR.Name) - SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )
      END AS Deactive_Cards,

      -- Active card numbers (CAST CardNumber to NVARCHAR to avoid varchar->numeric conversion)
      ISNULL(
        STUFF(
          (
            SELECT ', ' + COALESCE(CAST(ACR2.CardNumber AS NVARCHAR(100)), CAST(ACR2.ObjectID AS NVARCHAR(50)))
            FROM ACVSCore.Access.Credential ACR2
            WHERE ACR2.Name = AP.Name
              AND (
                 (ACR2.ExpirationDateTime IS NULL OR ACR2.ExpirationDateTime >= GETDATE())
                 AND (ACR2.Disabled IS NULL OR ACR2.Disabled = 0)
                 AND (ACR2.Lost IS NULL OR ACR2.Lost = 0)
                 AND (ACR2.Stolen IS NULL OR ACR2.Stolen = 0)
              )
            FOR XML PATH(''), TYPE
          ).value('.', 'NVARCHAR(MAX)')
        , 1, 2, '')
      , '') AS Active_Card_Numbers,

      -- Deactive card numbers (also cast)
      ISNULL(
        STUFF(
          (
            SELECT ', ' + COALESCE(CAST(ACR3.CardNumber AS NVARCHAR(100)), CAST(ACR3.ObjectID AS NVARCHAR(50)))
            FROM ACVSCore.Access.Credential ACR3
            WHERE ACR3.Name = AP.Name
              AND NOT (
                 (ACR3.ExpirationDateTime IS NULL OR ACR3.ExpirationDateTime >= GETDATE())
                 AND (ACR3.Disabled IS NULL OR ACR3.Disabled = 0)
                 AND (ACR3.Lost IS NULL OR ACR3.Lost = 0)
                 AND (ACR3.Stolen IS NULL OR ACR3.Stolen = 0)
              )
            FOR XML PATH(''), TYPE
          ).value('.', 'NVARCHAR(MAX)')
        , 1, 2, '')
      , '') AS Deactive_Card_Numbers

    FROM ACVSCore.Access.Personnel AP
    LEFT JOIN ACVSCore.Access.Credential ACR
      ON AP.Name = ACR.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = AP.PersonnelTypeID
    GROUP BY
      AP.ObjectID,
      AP.Name,
      AP.Int1,
      AP.Text12,
      PT.Name,
      AP.Disabled,
      AP.Text5
),
EmpAggWithStatus AS (
    SELECT
      EmployeeObjID,
      EmpName,
      EmployeeID,
      PersonnelType,
      Profile_Disabled,
      Profile_Cards,
      Active_Cards,
      Deactive_Cards,
      Active_Card_Numbers,
      Deactive_Card_Numbers,
      PrimaryLocation,
      CASE
        WHEN Profile_Disabled = 1 THEN 'Deactive'
        WHEN Profile_Disabled = 0 AND Active_Cards > 0 THEN 'Active'
        ELSE 'Deactive'
      END AS Employee_Status
    FROM EmpAgg
)

-- Final select: Clearance Count added BEFORE Clearance column
SELECT
  e.EmployeeObjID,
  e.EmpName,
  e.EmployeeID,
  e.PersonnelType,
  e.PrimaryLocation         AS [Primary Location],
  e.Profile_Cards           AS [Profile cards],
  e.Active_Cards,
  e.Active_Card_Numbers     AS [Active card number],
  e.Deactive_Cards,
  e.Deactive_Card_Numbers   AS [Deactive card number],
  CASE WHEN img.Image IS NULL THEN 'No' ELSE 'Yes' END AS [Image],
  e.Employee_Status,
  clr.ClearanceCount        AS [Clearance Count],      -- <-- NEW column
  clr.Clearances            AS [Clearance]
FROM EmpAggWithStatus e

OUTER APPLY (
    -- image presence check only (no binary returned)
    SELECT TOP (1) AI.Image
    FROM ACVSCore.Access.Images AI
    WHERE AI.ParentId = e.EmployeeObjID
      AND DATALENGTH(AI.Image) > 0
    ORDER BY AI.ObjectID DESC
) img

OUTER APPLY (
    -- return both clearance count and concatenated clearance names
    SELECT
      (SELECT COUNT(1) FROM ACVSCore.Access.PersonnelClearancePair APC_count WHERE APC_count.PersonnelID = e.EmployeeObjID) AS ClearanceCount,
      STUFF((
        SELECT ', ' + AC2.Name
        FROM ACVSCore.Access.PersonnelClearancePair APC2
        INNER JOIN ACVSCore.Access.Clearance AC2
          ON AC2.ObjectID = APC2.ClearanceID
        WHERE APC2.PersonnelID = e.EmployeeObjID
        FOR XML PATH(''), TYPE
      ).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS Clearances
) clr

ORDER BY e.EmpName;
GO

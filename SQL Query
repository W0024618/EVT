USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- 1) Provided cards into a temp table
SELECT val AS CardNumberProvided
INTO #ProvidedCards
FROM (VALUES
    ('452861'),('452811'),('224883'),('377733'),('82209'),('350387'),('451587'),('451598'),
    ('451591'),('451580'),('347837'),('379311'),('327305'),('372079'),('400270'),('348202'),
    ('380941'),('380934'),('378273'),('379934'),('240569'),('398771'),('314549'),('346417'),
    ('362191'),('348405'),('39998'),('400799'),('425816'),('225534'),('380942'),('347485'),
    ('287381'),('399671'),('378357'),('315288'),('451899'),('451985'),('452115'),('399708'),
    ('399092'),('327008'),('452164'),('282904'),('350545'),('444793'),('452813'),('380558'),
    ('452702'),('451973'),('452744'),('452321'),('380051'),('94636'),('13564'),('13403'),
    ('239748'),('211812'),('452514'),('449452'),('330227')
) AS t(val);

-- 2) Normalize credentials into a temp table (one-time snapshot)
SELECT
    C.ObjectID                                  AS CredentialObjectID,
    LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
    RIGHT(LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))), 5) AS Card_Last5,
    C.Name                                      AS PersonnelName,
    P.ObjectID                                  AS PersonnelObjectID,
    P.Int1,
    P.Text12,
    P.Text5                                     AS PrimaryLocation,
    P.Disabled                                  AS Profile_Disabled,
    PT.Name                                     AS PersonnelType,
    CASE
      WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
       AND (C.Disabled IS NULL OR C.Disabled = 0)
       AND (C.Lost IS NULL OR C.Lost = 0)
       AND (C.Stolen IS NULL OR C.Stolen = 0)
      THEN 1 ELSE 0
    END AS IsCardActive,
    C.ExpirationDateTime,
    C.Disabled AS Credential_Disabled,
    C.Lost,
    C.Stolen
INTO #Cred
FROM ACVSCore.Access.Credential C
LEFT JOIN ACVSCore.Access.Personnel P ON P.Name = C.Name
LEFT JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = P.PersonnelTypeID
WHERE C.CardNumber IS NOT NULL
  AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> '';

-- 3) Per-person summary (Active_Cards and derived fields) into temp table
SELECT
  PersonnelObjectID,
  PersonnelName,
  CASE WHEN Int1 = 0 OR Int1 IS NULL THEN Text12 ELSE CAST(Int1 AS NVARCHAR(50)) END AS EmployeeID,
  ISNULL(PrimaryLocation,'') AS PrimaryLocation,
  ISNULL(PersonnelType,'')   AS PersonnelType,
  ISNULL(Profile_Disabled,0) AS Profile_Disabled,
  SUM(IsCardActive)          AS Active_Cards
INTO #EmpStatus
FROM #Cred
GROUP BY PersonnelObjectID, PersonnelName, Int1, Text12, PrimaryLocation, PersonnelType, Profile_Disabled;

-- 4) Matches (Full & Last5) into temp tables
SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesFull
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.CardNumber_Norm = PC.CardNumberProvided;

SELECT
  PC.CardNumberProvided,
  C.CredentialObjectID,
  C.CardNumber_Norm,
  C.Card_Last5,
  C.IsCardActive,
  C.PersonnelObjectID
INTO #MatchesLast5
FROM #ProvidedCards PC
INNER JOIN #Cred C ON C.Card_Last5 = RIGHT(PC.CardNumberProvided, 5)
WHERE C.CardNumber_Norm <> PC.CardNumberProvided -- exclude exact full matches

-- 5) Summaries per provided card
SELECT
  CardNumberProvided AS ProvidedCard,
  'Full' AS MatchType,
  COUNT(*) AS TotalAssignments,
  COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
  ISNULL(SUM(IsCardActive),0) AS ActiveAssignments
INTO #SummaryFull
FROM #MatchesFull
GROUP BY CardNumberProvided;

SELECT
  CardNumberProvided AS ProvidedCard,
  'Last5' AS MatchType,
  COUNT(*) AS TotalAssignments,
  COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
  ISNULL(SUM(IsCardActive),0) AS ActiveAssignments
INTO #SummaryLast5
FROM #MatchesLast5
GROUP BY CardNumberProvided;

-- -------------- OUTPUT 1: consolidated summary (Full & Last5) --------------
SELECT ProvidedCard, MatchType, TotalAssignments, DistinctEmployees, ActiveAssignments
FROM (
  SELECT * FROM #SummaryFull
  UNION ALL
  SELECT * FROM #SummaryLast5
) s
ORDER BY ProvidedCard, MatchType DESC;  -- Full first, then Last5

-- -------------- OUTPUT 2: detailed matches (Full then Last5) --------------
SELECT
  'Full' AS MatchType,
  MF.CardNumberProvided AS ProvidedCard,
  MF.CardNumber_Norm    AS MatchedCardNumber,
  MF.Card_Last5         AS MatchedCard_Last5,
  MF.CredentialObjectID,
  MF.IsCardActive       AS ThisAssignmentIsActive,
  ES.PersonnelObjectID,
  ES.PersonnelName      AS EmpName,
  ES.EmployeeID,
  ES.PersonnelType,
  ES.PrimaryLocation,
  ES.Profile_Disabled,
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesFull MF
LEFT JOIN #EmpStatus ES ON ES.PersonnelObjectID = MF.PersonnelObjectID

UNION ALL

SELECT
  'Last5' AS MatchType,
  ML.CardNumberProvided AS ProvidedCard,
  ML.CardNumber_Norm    AS MatchedCardNumber,
  ML.Card_Last5         AS MatchedCard_Last5,
  ML.CredentialObjectID,
  ML.IsCardActive       AS ThisAssignmentIsActive,
  ES2.PersonnelObjectID,
  ES2.PersonnelName     AS EmpName,
  ES2.EmployeeID,
  ES2.PersonnelType,
  ES2.PrimaryLocation,
  ES2.Profile_Disabled,
  CASE
    WHEN ES2.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES2.Profile_Disabled = 0 AND ES2.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM #MatchesLast5 ML
LEFT JOIN #EmpStatus ES2 ON ES2.PersonnelObjectID = ML.PersonnelObjectID
ORDER BY ProvidedCard, MatchType DESC, EmpName;

-- optional: clean up temp tables (uncomment if you want)
-- DROP TABLE #ProvidedCards;
-- DROP TABLE #Cred;
-- DROP TABLE #EmpStatus;
-- DROP TABLE #MatchesFull;
-- DROP TABLE #MatchesLast5;
-- DROP TABLE #SummaryFull;
-- DROP TABLE #SummaryLast5;
GO

















USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- 1) your provided list
;WITH ProvidedCards AS (
    SELECT val AS CardNumberProvided
    FROM (VALUES
        ('452861'),('452811'),('224883'),('377733'),('82209'),('350387'),('451587'),('451598'),
        ('451591'),('451580'),('347837'),('379311'),('327305'),('372079'),('400270'),('348202'),
        ('380941'),('380934'),('378273'),('379934'),('240569'),('398771'),('314549'),('346417'),
        ('362191'),('348405'),('39998'),('400799'),('425816'),('225534'),('380942'),('347485'),
        ('287381'),('399671'),('378357'),('315288'),('451899'),('451985'),('452115'),('399708'),
        ('399092'),('327008'),('452164'),('282904'),('350545'),('444793'),('452813'),('380558'),
        ('452702'),('451973'),('452744'),('452321'),('380051'),('94636'),('13564'),('13403'),
        ('239748'),('211812'),('452514'),('449452'),('330227')
    ) AS t(val)
),

-- 2) normalized credentials + active flag
Cred AS (
    SELECT
        C.ObjectID                                    AS CredentialObjectID,
        LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
        -- last 5 characters (works if card shorter than 5 as RIGHT will return the whole string)
        RIGHT(LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))), 5) AS Card_Last5,
        C.Name                                        AS PersonnelName,
        P.ObjectID                                    AS PersonnelObjectID,
        P.Int1,
        P.Text12,
        P.Text5                                       AS PrimaryLocation,
        P.Disabled                                    AS Profile_Disabled,
        PT.Name                                       AS PersonnelType,
        -- per your active logic
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
           AND (C.Disabled IS NULL OR C.Disabled = 0)
           AND (C.Lost IS NULL OR C.Lost = 0)
           AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END AS IsCardActive,
        C.ExpirationDateTime,
        C.Disabled AS Credential_Disabled,
        C.Lost,
        C.Stolen
    FROM ACVSCore.Access.Credential C
    LEFT JOIN ACVSCore.Access.Personnel P ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = P.PersonnelTypeID
    WHERE C.CardNumber IS NOT NULL
      AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> ''
),

-- 3) per-person summary (to compute Employee_Status and Active_Cards)
EmpStatus AS (
    SELECT
      P.ObjectID AS PersonnelObjectID,
      P.Name     AS PersonnelName,
      CASE WHEN P.Int1 = 0 OR P.Int1 IS NULL THEN P.Text12 ELSE CAST(P.Int1 AS NVARCHAR(50)) END AS EmployeeID,
      ISNULL(P.Text5, '') AS PrimaryLocation,
      ISNULL(PT.Name, '') AS PersonnelType,
      P.Disabled AS Profile_Disabled,
      SUM(
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
            AND (C.Disabled IS NULL OR C.Disabled = 0)
            AND (C.Lost IS NULL OR C.Lost = 0)
            AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards
    FROM ACVSCore.Access.Personnel P
    LEFT JOIN ACVSCore.Access.Credential C ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = P.PersonnelTypeID
    GROUP BY P.ObjectID, P.Name, P.Int1, P.Text12, P.Text5, PT.Name, P.Disabled
),

-- 4) Full matches (credential card exactly equals provided card)
MatchesFull AS (
    SELECT
      PC.CardNumberProvided,
      CR.CredentialObjectID,
      CR.CardNumber_Norm,
      CR.Card_Last5,
      CR.IsCardActive,
      CR.PersonnelObjectID
    FROM ProvidedCards PC
    INNER JOIN Cred CR
      ON CR.CardNumber_Norm = PC.CardNumberProvided
),

-- 5) Last-5 matches: same last 5 digits but NOT exact full match (to avoid duplicate rows)
MatchesLast5 AS (
    SELECT
      PC.CardNumberProvided,
      CR.CredentialObjectID,
      CR.CardNumber_Norm,
      CR.Card_Last5,
      CR.IsCardActive,
      CR.PersonnelObjectID
    FROM ProvidedCards PC
    INNER JOIN Cred CR
      ON CR.Card_Last5 = RIGHT(PC.CardNumberProvided, 5)  -- match last 5
    WHERE CR.CardNumber_Norm <> PC.CardNumberProvided     -- exclude exact full matches
),

-- 6) Summaries per provided card and match type
Summary AS (
    SELECT
      CardNumberProvided AS ProvidedCard,
      'Full' AS MatchType,
      COUNT(*) AS TotalAssignments,
      COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
      SUM(IsCardActive) AS ActiveAssignments
    FROM MatchesFull
    GROUP BY CardNumberProvided

    UNION ALL

    SELECT
      CardNumberProvided AS ProvidedCard,
      'Last5' AS MatchType,
      COUNT(*) AS TotalAssignments,
      COUNT(DISTINCT PersonnelObjectID) AS DistinctEmployees,
      SUM(IsCardActive) AS ActiveAssignments
    FROM MatchesLast5
    GROUP BY CardNumberProvided
)

-- === OUTPUT 1: per-provided-card summary (Full & Last5) ===
SELECT
  S.ProvidedCard,
  S.MatchType,
  ISNULL(S.TotalAssignments,0)     AS TotalAssignments,
  ISNULL(S.DistinctEmployees,0)    AS DistinctEmployees,
  ISNULL(S.ActiveAssignments,0)    AS ActiveAssignments
FROM Summary S
ORDER BY S.ProvidedCard, S.MatchType DESC;  -- Full first then Last5
GO

-- === OUTPUT 2: detailed matching rows ===
-- Full matches first, then Last5 matches (Last5 excludes exact full matches)
SELECT
  'Full' AS MatchType,
  MF.CardNumberProvided          AS ProvidedCard,
  MF.CardNumber_Norm             AS MatchedCardNumber,
  MF.Card_Last5                  AS MatchedCard_Last5,
  MF.CredentialObjectID,
  MF.IsCardActive                AS ThisAssignmentIsActive,
  ES.PersonnelObjectID,
  ES.PersonnelName               AS EmpName,
  ES.EmployeeID,
  ES.PersonnelType,
  ES.PrimaryLocation,
  ES.Profile_Disabled,
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM MatchesFull MF
LEFT JOIN EmpStatus ES ON ES.PersonnelObjectID = MF.PersonnelObjectID

UNION ALL

SELECT
  'Last5' AS MatchType,
  ML.CardNumberProvided          AS ProvidedCard,
  ML.CardNumber_Norm             AS MatchedCardNumber,
  ML.Card_Last5                  AS MatchedCard_Last5,
  ML.CredentialObjectID,
  ML.IsCardActive                AS ThisAssignmentIsActive,
  ES.PersonnelObjectID,
  ES.PersonnelName               AS EmpName,
  ES.EmployeeID,
  ES.PersonnelType,
  ES.PrimaryLocation,
  ES.Profile_Disabled,
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status
FROM MatchesLast5 ML
LEFT JOIN EmpStatus ES ON ES.PersonnelObjectID = ML.PersonnelObjectID

ORDER BY ProvidedCard, MatchType DESC, EmpName;
GO















USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- Put your list here (as strings) so normalization matches Credential.CardNumber cast
;WITH ProvidedCards AS (
    SELECT val AS CardNumberProvided
    FROM (VALUES
        ('452861'),('452811'),('224883'),('377733'),('82209'),('350387'),('451587'),('451598'),
        ('451591'),('451580'),('347837'),('379311'),('327305'),('372079'),('400270'),('348202'),
        ('380941'),('380934'),('378273'),('379934'),('240569'),('398771'),('314549'),('346417'),
        ('362191'),('348405'),('39998'),('400799'),('425816'),('225534'),('380942'),('347485'),
        ('287381'),('399671'),('378357'),('315288'),('451899'),('451985'),('452115'),('399708'),
        ('399092'),('327008'),('452164'),('282904'),('350545'),('444793'),('452813'),('380558'),
        ('452702'),('451973'),('452744'),('452321'),('380051'),('94636'),('13564'),('13403'),
        ('239748'),('211812'),('452514'),('449452'),('330227')
    ) AS t(val)
),

-- Normalized credential rows with an "IsCardActive" flag and cleaned CardNumber
Cred AS (
    SELECT
        C.ObjectID            AS CredentialObjectID,
        C.CardNumber,
        LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
        C.Name                AS PersonnelName,
        P.ObjectID            AS PersonnelObjectID,
        P.Int1,
        P.Text12,
        P.Text5               AS PrimaryLocation,
        P.Disabled            AS Profile_Disabled,
        PT.Name               AS PersonnelType,

        -- Is this credential considered active (per your logic)?
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
           AND (C.Disabled IS NULL OR C.Disabled = 0)
           AND (C.Lost IS NULL OR C.Lost = 0)
           AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END AS IsCardActive

    FROM ACVSCore.Access.Credential C
    LEFT JOIN ACVSCore.Access.Personnel P
      ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    WHERE C.CardNumber IS NOT NULL
      AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> ''
),

-- Per-person summary to determine if profile (person) has any active cards -> Employee_Status
EmpStatus AS (
    SELECT
      P.ObjectID AS PersonnelObjectID,
      P.Name     AS PersonnelName,
      CASE WHEN P.Int1 = 0 OR P.Int1 IS NULL THEN P.Text12 ELSE CAST(P.Int1 AS NVARCHAR(50)) END AS EmployeeID,
      ISNULL(P.Text5, '') AS PrimaryLocation,
      ISNULL(PT.Name, '') AS PersonnelType,
      P.Disabled AS Profile_Disabled,

      SUM(
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
            AND (C.Disabled IS NULL OR C.Disabled = 0)
            AND (C.Lost IS NULL OR C.Lost = 0)
            AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards

    FROM ACVSCore.Access.Personnel P
    LEFT JOIN ACVSCore.Access.Credential C
      ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    GROUP BY P.ObjectID, P.Name, P.Int1, P.Text12, P.Text5, PT.Name, P.Disabled
),

-- Find those provided card numbers that exist in credentials and are assigned to >1 distinct personnel
DuplicateProvidedCards AS (
    SELECT
      C.CardNumber_Norm AS CardNumber,
      COUNT(DISTINCT C.PersonnelObjectID) AS DistinctPersonnelCount,
      SUM(C.IsCardActive) AS ActiveAssignments
    FROM Cred C
    INNER JOIN ProvidedCards PC
      ON C.CardNumber_Norm = PC.CardNumberProvided
    GROUP BY C.CardNumber_Norm
    HAVING COUNT(DISTINCT C.PersonnelObjectID) > 1
)

-- Final: list every employee who holds any of these duplicate-provided cards
SELECT
  DPC.CardNumber                       AS [Card Number],
  DPC.DistinctPersonnelCount           AS [Distinct Employees With This Card],
  DPC.ActiveAssignments                AS [Active Assignments For This Card],

  -- credential-specific info
  CR.CredentialObjectID                AS [Credential ObjectID],
  CR.IsCardActive                      AS [This Assignment Active?], -- 1 = active, 0 = not active

  -- personnel info
  ES.PersonnelObjectID                 AS [EmployeeObjID],
  ES.PersonnelName                     AS [EmpName],
  ES.EmployeeID                        AS [EmployeeID],
  ES.PersonnelType                     AS [PersonnelType],
  ES.PrimaryLocation                   AS [Primary Location],
  ES.Profile_Disabled                  AS [Profile_Disabled],

  -- derive an Employee_Status per person (consistent with your earlier logic)
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status

FROM DuplicateProvidedCards DPC
INNER JOIN Cred CR
  ON CR.CardNumber_Norm = DPC.CardNumber
INNER JOIN EmpStatus ES
  ON ES.PersonnelObjectID = CR.PersonnelObjectID

ORDER BY DPC.CardNumber, ES.PersonnelName;
GO

















when i run below Query we got large list ..
so compare Below listed card number WIth each Employee and retun Employyee If find Duoplicate card number 
452861
452811
224883
377733
82209
350387
451587
451598
451591
451580
347837
379311
327305
372079
400270
348202
380941
380934
378273
379934
240569
398771
314549
346417
362191
348405
39998
400799
425816
225534
380942
347485
287381
399671
378357
315288
451899
451985
452115
399708
399092
327008
452164
282904
350545
444793
452813
380558
452702
451973
452744
452321
380051
94636
13564
13403
239748
211812
452514
449452
330227

Compare only above listed card number with all card number and let check if any duplicate found
compare With active Card also deactive card..




USE [ACVSUJournal_00010021];
GO

SET NOCOUNT ON;

-- Normalized credential rows with an "IsCardActive" flag and cleaned CardNumber
;WITH Cred AS (
    SELECT
        C.ObjectID            AS CredentialObjectID,
        C.CardNumber,
        -- normalize card number: trim and cast to NVARCHAR
        LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) AS CardNumber_Norm,
        C.Name                AS PersonnelName,
        P.ObjectID            AS PersonnelObjectID,
        P.Int1,
        P.Text12,
        P.Text5               AS PrimaryLocation,
        P.Disabled            AS Profile_Disabled,
        PT.Name               AS PersonnelType,

        -- Is this credential considered active (per your logic)?
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
           AND (C.Disabled IS NULL OR C.Disabled = 0)
           AND (C.Lost IS NULL OR C.Lost = 0)
           AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END AS IsCardActive

    FROM ACVSCore.Access.Credential C
    LEFT JOIN ACVSCore.Access.Personnel P
      ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    WHERE C.CardNumber IS NOT NULL
      AND LTRIM(RTRIM(CAST(C.CardNumber AS NVARCHAR(100)))) <> ''
),

-- Per-person summary to determine if profile (person) has any active cards -> Employee_Status
EmpStatus AS (
    SELECT
      P.ObjectID AS PersonnelObjectID,
      P.Name     AS PersonnelName,
      CASE WHEN P.Int1 = 0 OR P.Int1 IS NULL THEN P.Text12 ELSE CAST(P.Int1 AS NVARCHAR(50)) END AS EmployeeID,
      ISNULL(P.Text5, '') AS PrimaryLocation,
      ISNULL(PT.Name, '') AS PersonnelType,
      P.Disabled AS Profile_Disabled,

      SUM(
        CASE
          WHEN (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
            AND (C.Disabled IS NULL OR C.Disabled = 0)
            AND (C.Lost IS NULL OR C.Lost = 0)
            AND (C.Stolen IS NULL OR C.Stolen = 0)
          THEN 1 ELSE 0
        END
      ) AS Active_Cards

    FROM ACVSCore.Access.Personnel P
    LEFT JOIN ACVSCore.Access.Credential C
      ON P.Name = C.Name
    LEFT JOIN ACVSCore.Access.PersonnelType PT
      ON PT.ObjectID = P.PersonnelTypeID
    GROUP BY P.ObjectID, P.Name, P.Int1, P.Text12, P.Text5, PT.Name, P.Disabled
),

-- Card numbers that are assigned to more than one distinct personnel
DuplicateCards AS (
    SELECT
      C.CardNumber_Norm AS CardNumber,
      COUNT(DISTINCT C.PersonnelObjectID) AS DistinctPersonnelCount,
      SUM(C.IsCardActive) AS ActiveAssignments -- how many of the assignments are currently active
    FROM Cred C
    WHERE C.CardNumber_Norm IS NOT NULL AND C.CardNumber_Norm <> ''
    GROUP BY C.CardNumber_Norm
    HAVING COUNT(DISTINCT C.PersonnelObjectID) > 1
)

-- Final: list every employee who holds a card that appears in DuplicateCards
SELECT
  DC.CardNumber AS [Card Number],
  DC.DistinctPersonnelCount AS [Distinct Employees With This Card],
  DC.ActiveAssignments AS [Active Assignments For This Card],

  -- credential-specific info
  CR.CredentialObjectID AS [Credential ObjectID],
  CR.IsCardActive AS [This Assignment Active?], -- 1 = active, 0 = not active

  -- personnel info
  ES.PersonnelObjectID AS [EmployeeObjID],
  ES.PersonnelName   AS [EmpName],
  ES.EmployeeID      AS [EmployeeID],
  ES.PersonnelType   AS [PersonnelType],
  ES.PrimaryLocation AS [Primary Location],
  ES.Profile_Disabled AS [Profile_Disabled],

  -- derive an Employee_Status per person (consistent with your earlier logic)
  CASE
    WHEN ES.Profile_Disabled = 1 THEN 'Deactive'
    WHEN ES.Profile_Disabled = 0 AND ES.Active_Cards > 0 THEN 'Active'
    ELSE 'Deactive'
  END AS Employee_Status

FROM DuplicateCards DC
INNER JOIN Cred CR
  ON CR.CardNumber_Norm = DC.CardNumber
INNER JOIN EmpStatus ES
  ON ES.PersonnelObjectID = CR.PersonnelObjectID

ORDER BY DC.CardNumber, ES.PersonnelName;
GO

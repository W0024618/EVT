import React, { useState, useRef, useEffect } from 'react';
import { FaUser, FaIdBadge, FaUserTie, FaIdCard, FaCheckCircle, FaClone, FaMapMarkerAlt  } from 'react-icons/fa';
import CurrentLocation from './CurrentLocation';
import { HiOutlineBuildingOffice2 } from "react-icons/hi2";
import './EmployeeCard.css';

export default function EmployeeCard({ emp }) {
  const [showMore, setShowMore] = useState(false);
  const [showCardsPopup, setShowCardsPopup] = useState(false);
  const [showClearancePopup, setShowClearancePopup] = useState(false);
  const cardsRef = useRef(null);
  const clearanceRef = useRef(null);

  if (!emp) return null;

  const rawStatus = emp.Employee_Status || 'Deactive';
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isRedStatus =
    normalizedStatus === 'deactive' || normalizedStatus === 'terminated';

  // close popups on outside click
  useEffect(() => {
    function handleDocClick(e) {
      if (showCardsPopup && cardsRef.current && !cardsRef.current.contains(e.target)) {
        setShowCardsPopup(false);
      }
      if (showClearancePopup && clearanceRef.current && !clearanceRef.current.contains(e.target)) {
        setShowClearancePopup(false);
      }
    }
    document.addEventListener('mousedown', handleDocClick);
    return () => document.removeEventListener('mousedown', handleDocClick);
  }, [showCardsPopup, showClearancePopup]);

  // helper to convert comma string -> array
  const toList = (csv) => {
    if (!csv) return [];
    return csv.split(',').map(s => s.trim()).filter(Boolean);
  };

  return (
    <div
      className="employee-card-container"
      data-status={normalizedStatus}
      style={{
        background: isRedStatus
          ? '#f55847'
          : 'linear-gradient(180deg, #131318 0%, #1d1d26 100%)',
      }}
    >
      {/* Left column */}
      <div className="left-col">
        <div className="photo-ring">
          <img
            className="photo"
            src={emp.imageUrl ? `http://localhost:5001${emp.imageUrl}` : '/images/no-photo.jpg'}
            alt={emp.EmpName || 'Employee photo'}
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/images/no-photo.jpg';
            }}
          />
        </div>

        <div className="photo-meta">
          <div className="emp-name">{emp.EmpName || '—'}</div>
          <div className="emp-role">{emp.PersonnelType || 'Employee'}</div>
          <div className={`status-pill ${normalizedStatus}`}>{rawStatus}</div>
        </div>
      </div>

      {/* Separator */}
      <div className="separator" aria-hidden />

      {/* Right column */}
      <div className="right-col">
        <h3 className="profile-title">Profile Details</h3>

        <table className="details-table" aria-label="employee details">
          <tbody>
            {/* Always visible */}
            <tr>
              <td className="label "><FaUser color='#FFDD00' /> Name</td>
              <td className="value v-color">{emp.EmpName || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdBadge color='#FFDD00' /> Employee ID</td>
              <td className="value v-color">{emp.EmployeeID || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaUserTie color='#FFDD00' /> Manager</td>
              <td className="value v-color">{emp.Manager_Name || '—'}</td>
            </tr>

            {/* Active Cards: now displays Total_Cards (as requested) */}
            <tr
              className="clickable-row"
              ref={cardsRef}
            >
              <td className="label"><FaIdCard /> Active Cards</td>
              <td
                className="value v-color clickable-cell"
                onClick={(e) => { e.stopPropagation(); setShowCardsPopup(prev => !prev); }}
                title="Click to view card details"
                role="button"
                tabIndex={0}
                onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { setShowCardsPopup(prev => !prev); } }}
              >
                {emp.Total_Cards ?? 0}
              </td>

              {/* Cards popup */}
              {showCardsPopup && (
                <td className="popup-td" colSpan="2">
                  <div className="popup-card">
                    <div className="popup-header">
                      <strong>Card Details</strong>
                      <button className="popup-close" onClick={() => setShowCardsPopup(false)}>✕</button>
                    </div>

                    <div className="popup-body">
                      <div><strong>Total_Cards:</strong> {emp.Total_Cards ?? 0}</div>
                      <div><strong>Active_Cards:</strong> {emp.Active_Cards ?? 0}</div>
                      <div><strong>Deactive_Cards:</strong> {emp.Deactive_Cards ?? 0}</div>

                      <div style={{ marginTop: 8 }}>
                        <strong>Active Card Numbers</strong>
                        <ul className="popup-list">
                          {toList(emp.Active_Card_Numbers).length === 0 && (<li>—</li>)}
                          {toList(emp.Active_Card_Numbers).map((c, i) => <li key={`ac-${i}`}>{c}</li>)}
                        </ul>
                      </div>

                      <div style={{ marginTop: 8 }}>
                        <strong>Deactive Card Numbers</strong>
                        <ul className="popup-list">
                          {toList(emp.Deactive_Card_Numbers).length === 0 && (<li>—</li>)}
                          {toList(emp.Deactive_Card_Numbers).map((c, i) => <li key={`dc-${i}`}>{c}</li>)}
                        </ul>
                      </div>
                    </div>
                  </div>
                </td>
              )}
            </tr>

            {/* Clearance row: shows ClearanceCount and clickable to open details */}
            <tr
              className="clickable-row"
              ref={clearanceRef}
            >
              <td className="label"><FaCheckCircle color='#FFDD00' /> Clearance</td>
              <td
                className="value v-color clickable-cell"
                onClick={(e) => { e.stopPropagation(); setShowClearancePopup(prev => !prev); }}
                title="Click to view clearance details"
                role="button"
                tabIndex={0}
                onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { setShowClearancePopup(prev => !prev); } }}
              >
                {emp.ClearanceCount ?? 0}
              </td>

              {showClearancePopup && (
                <td className="popup-td" colSpan="2">
                  <div className="popup-card">
                    <div className="popup-header">
                      <strong>Clearance Details</strong>
                      <button className="popup-close" onClick={() => setShowClearancePopup(false)}>✕</button>
                    </div>

                    <div className="popup-body">
                      <div><strong>ClearanceCount:</strong> {emp.ClearanceCount ?? 0}</div>
                      <div style={{ marginTop: 8 }}>
                        <strong>Clearances</strong>
                        <ul className="popup-list">
                          {(!emp.Clearances || emp.Clearances.trim() === '') && <li>—</li>}
                          {emp.Clearances && emp.Clearances.split(',').map((c, i) => <li key={`clr-${i}`}>{c.trim()}</li>)}
                        </ul>
                      </div>
                    </div>
                  </div>
                </td>
              )}
            </tr>

            <tr>
              <td className="label"><HiOutlineBuildingOffice2  color='#FFDD00' /> Company Name</td>
              <td className="value v-color">{emp.CompanyName || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaMapMarkerAlt color='#FFDD00' /> Primary Location</td>
              <td className="value v-color">{emp.PrimaryLocation || '—'}</td>
            </tr>

            <tr>
              <td colSpan="2" style={{ paddingTop: 1 }}>
                <CurrentLocation empId={emp.id ?? emp.EmployeeID} showMore={showMore} />
              </td>
            </tr>

            {/* Hidden until showMore is true */}
            {showMore && (
              <>
                <tr>
                  <td className="label"><FaClone /> Total Cards</td>
                  <td className="value">{emp.Total_Cards ?? 0}</td>
                </tr>
              </>
            )}
          </tbody>
        </table>

        {/* Toggle Button */}
        <button
          className="show-more-btn"
          onClick={() => setShowMore((prev) => !prev)}
        >
          {showMore ? 'Show Less' : 'Show More'}
        </button>
      </div>
    </div>
  );
}

























Now Integrate Frontned carefully check previous frontend file ...

Profile Details
 Name	Dass, Lloyds
 Employee ID	314345
 Manager	Karen Whalen
 Active Cards	4
 Company Name	WU Srvcs India Private Ltd
 Primary Location	Pune - Business Bay
Swipe Details
 Location	Pune · Podium Floor
 Zone	Green Zone
 Date	2025-10-09
 Time	11:19 AM
 Door	APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)
 Direction	InDirection
 Total Cards	5

currently Frontend display like this ...
Now i want to integrate like


 Active Cards	4 --Replace Active crads with "Total_Cards": 5,
When click Active cards generate small popup on UI and display 

        "Total_Cards": 5,
        "Active_Cards": 4,
        "Deactive_Cards": 1,
        "Active_Card_Numbers": "610110, 414105, 608457, 234498",
        "Deactive_Card_Numbers": "234462",

this data 

After Active cards add 
ClearanceCount": 9, -- Column 
When click clerance Count display Clerance details like
"ClearanceCount": 9,
        "Clearances": "APAC IN Mumbai IT Room Restricted Access, APAC IN Pune TEC MDF / IDF Room Restricted Access, APAC IN Pune TEC Maintenance / UPS Rooms Restricted Access, APAC PH Manila AROC Security Room  Restricted Access, APAC IN Pune TEC HR Room Restricted Access, APAC IN Pune TEC GSOC Room Restricted Access, APAC IN Pune TEC Tower B Gym Restricted Access, Global General Access, APAC IN Pune Tower B CEC & Mobile Test Lab Restricted Access"


kepp all remening as previous dont make unecessary changes 

refer below API responce and update IT carefully...

http://localhost:5001/api/employees
 {
        "id": 2097187256,
        "EmpName": "Dass, Lloyds",
        "EmployeeID": "314345",
        "PersonnelType": "Employee",
        "Manager_Name": "Karen Whalen ",
        "Manager_WU_ID": "0",
        "Profile_Disabled": false,
        "CompanyName": "WU Srvcs India Private Ltd",
        "PrimaryLocation": "Pune - Business Bay",
        "Total_Cards": 5,
        "Active_Cards": 4,
        "Deactive_Cards": 1,
        "Active_Card_Numbers": "610110, 414105, 608457, 234498",
        "Deactive_Card_Numbers": "234462",
        "Employee_Status": "Active",
        "imageUrl": "/api/employees/2097187256/image",
        "HasImage": true,
        "ClearanceCount": 9,
        "Clearances": "APAC IN Mumbai IT Room Restricted Access, APAC IN Pune TEC MDF / IDF Room Restricted Access, APAC IN Pune TEC Maintenance / UPS Rooms Restricted Access, APAC PH Manila AROC Security Room  Restricted Access, APAC IN Pune TEC HR Room Restricted Access, APAC IN Pune TEC GSOC Room Restricted Access, APAC IN Pune TEC Tower B Gym Restricted Access, Global General Access, APAC IN Pune Tower B CEC & Mobile Test Lab Restricted Access"
    },
    {






// C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\EmployeeCard.jsx
import React, { useState } from 'react';
import { FaUser, FaIdBadge, FaUserTie, FaIdCard, FaCheckCircle, FaClone, FaMapMarkerAlt  } from 'react-icons/fa';
import CurrentLocation from './CurrentLocation';
import { HiOutlineBuildingOffice2 } from "react-icons/hi2";
import './EmployeeCard.css';

export default function EmployeeCard({ emp }) {
  const [showMore, setShowMore] = useState(false);

  if (!emp) return null;

  const rawStatus = emp.Employee_Status || 'Deactive';
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isRedStatus =
    normalizedStatus === 'deactive' || normalizedStatus === 'terminated';

  return (
    <div
      className="employee-card-container"
      data-status={normalizedStatus}
      style={{
        background: isRedStatus
          ? '#f55847'
          : 'linear-gradient(180deg, #131318 0%, #1d1d26 100%)',
      }}
    >
      {/* Left column */}
      <div className="left-col">
        <div className="photo-ring">
          <img
            className="photo"
            src={emp.imageUrl ? `http://localhost:5001${emp.imageUrl}` : '/images/no-photo.jpg'}
            alt={emp.EmpName || 'Employee photo'}
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/images/no-photo.jpg';
            }}
          />
        </div>

        <div className="photo-meta">
          <div className="emp-name">{emp.EmpName || '—'}</div>
          <div className="emp-role">{emp.PersonnelType || 'Employee'}</div>
          <div className={`status-pill ${normalizedStatus}`}>{rawStatus}</div>
        </div>
      </div>

      {/* Separator */}
      <div className="separator" aria-hidden />

      {/* Right column */}
      <div className="right-col">
        <h3 className="profile-title">Profile Details</h3>

        <table className="details-table" aria-label="employee details">
          <tbody>
            {/* Always visible */}
            <tr>
              <td className="label "><FaUser color='#FFDD00' /> Name</td>
              <td className="value v-color">{emp.EmpName || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdBadge color='#FFDD00' /> Employee ID</td>
              <td className="value v-color">{emp.EmployeeID || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaUserTie color='#FFDD00' /> Manager</td>
              <td className="value v-color">{emp.Manager_Name || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdCard /> Active Cards</td>
              <td className="value v-color">{emp.Active_Cards ?? 0}</td>
            </tr>

            <tr>
              <td className="label"><HiOutlineBuildingOffice2  color='#FFDD00' /> Company Name</td>
              <td className="value v-color">{emp.CompanyName || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaMapMarkerAlt color='#FFDD00' /> Primary Location</td>
              <td className="value v-color">{emp.PrimaryLocation || '—'}</td>
            </tr>

            <tr>
              <td colSpan="2" style={{ paddingTop: 1 }}>
                <CurrentLocation empId={emp.id ?? emp.EmployeeID} showMore={showMore} />
              </td>



            </tr>

            {/* Hidden until showMore is true */}
            {showMore && (
              <>
                <tr>
                  <td className="label"><FaClone /> Total Cards</td>
                  <td className="value">{emp.Total_Cards ?? 0}</td>
                </tr>
              </>
            )}
          </tbody>
        </table>

        {/* Toggle Button */}
        <button
          className="show-more-btn"
          onClick={() => setShowMore((prev) => !prev)}
        >
          {showMore ? 'Show Less' : 'Show More'}
        </button>
      </div>
    </div>
  );
}














// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);

  // Update Related Results based on searchTerm
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();

    if (!term) {
      setSuggestions([]);
      return;
    }

    // const filtered = allEmployees.filter(emp => {
    //   if (!emp.EmpName) return false;

    //   // Check EmployeeID first
    //   const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
    //   if (id.includes(term)) return true;

    //   // Split name into components
    //   const nameParts = emp.EmpName.toLowerCase().split(' ');

    //   // Check each name component
    //   return nameParts.some(part => part.includes(term));
    // });



    const filtered = allEmployees.filter(emp => {
  if (!emp.EmpName && !emp.CardNumber && !emp.EmployeeID) return false;

  const termLower = term.toLowerCase();

  // Check EmployeeID
  if (emp.EmployeeID && emp.EmployeeID.toLowerCase().includes(termLower)) return true;

  // Check CardNumber
  if (emp.CardNumber && emp.CardNumber.toLowerCase().includes(termLower)) return true;

  // Check name components
  if (emp.EmpName) {
    const nameParts = emp.EmpName.toLowerCase().split(' ');
    return nameParts.some(part => part.includes(termLower));
  }

  return false;
});





    setSuggestions(filtered);
  }, [searchTerm, allEmployees]);



  const handleSearch = () => {
    const term = searchTerm.trim().toLowerCase();
    setError('');

    if (!term) {
      setSuggestions([]);
      setSelected(null);
      return setError('Please enter name or ID');
    }

 
const matches = allEmployees.filter(emp => {
  const termLower = term.toLowerCase();

  // Exact match on EmployeeID
  if (emp.EmployeeID && emp.EmployeeID.toLowerCase() === termLower) return true;

  // Exact match on CardNumber
  if (emp.CardNumber && emp.CardNumber.toString().toLowerCase() === termLower) return true;

  // Exact match on name components
  if (emp.EmpName) {
    const nameParts = emp.EmpName.toLowerCase().split(' ');
    return nameParts.some(part => part === termLower);
  }

  return false;
});


    if (matches.length === 1) {
      selectEmployee(matches[0]);
    } else if (matches.length > 1) {
      setSuggestions(matches);
      setError('Multiple matches found - please select one');
    } else {
      setSelected(null);
      setError('No exact matching employee found');
    }
  };

  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName || '');
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  const pickSuggestion = emp => {
    if (!emp) return;
    selectEmployee(emp);
  };

  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

        <div className="right-panel">
          <div className="lists-container">

            {/* <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.length === 0 && <li>No results</li>}
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div> */}


            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.length === 0 && searchTerm && <li>No matching employees found</li>}
                {!searchTerm && <li>Start typing to see suggestions</li>}
                {suggestions.map((emp, idx) => (
                  <li key={`${emp.EmployeeID ?? emp.EmpName}-${idx}`} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}


              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map((emp, idx) => (
                  <li key={`${emp.EmployeeID ?? emp.EmpName}-${idx}`} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </div>
  );
}

export default App;


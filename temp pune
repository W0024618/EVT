


// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\config\siteConfig.js
const sqlModule = require('mssql');
const { getPool: getPunePool } = require('./db'); // Pune pool logic
const punePoolPromise = getPunePool();            // use Pune pool as shared

// ---------------- Denver Config ----------------


const denverConfig = {
  user:     'GSOC_Test',
  password: 'Westernccure@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010028',
  options: { 
    encrypt: true,
    trustServerCertificate: true,
    enableArithAbort: true,
    connectTimeout: 30000,      // 30s connection timeout
    requestTimeout: 120000,     // 2min request timeout
    cancelTimeout: 30000        // 30s cancel timeout
  },
  pool: {
    max: 15,                    // Increased max connections
    min: 2,                     // Keep some connections ready
    idleTimeoutMillis: 60000,   // 1min idle timeout
    acquireTimeoutMillis: 120000, // 2min acquire timeout
    createTimeoutMillis: 30000, // 30s create timeout
    destroyTimeoutMillis: 30000, // 30s destroy timeout
    reapIntervalMillis: 1000,   // Check every second
    createRetryIntervalMillis: 200 // Retry quickly
  }
};


let denverPoolPromise = null;

async function getDenverPool(attempts = 5) {
  if (denverPoolPromise) return denverPoolPromise;

  denverPoolPromise = (async () => {
    try {
      const pool = await new sqlModule.ConnectionPool(denverConfig).connect();
      console.log('✅ Denver MSSQL pool connected');

      pool.on('error', err => {
        console.error('❌ Denver MSSQL pool error:', err);
        denverPoolPromise = null; // force reconnect
      });

      return pool;
    } catch (err) {
      console.error('❌ Denver MSSQL pool connection failed:', err);
      denverPoolPromise = null;

      if (attempts > 0) {
        console.log(`⏳ Retrying Denver pool connect (${attempts} left)…`);
        await new Promise(res => setTimeout(res, 3000));
        return getDenverPool(attempts - 1);
      }
      throw err;
    }
  })();

  // Global handlers for Denver errors
  sqlModule.on('error', err => {
    console.error('❌ Denver MSSQL global error:', err);
    if (err && err.name === 'TimeoutError') denverPoolPromise = null;
  });

  process.on('unhandledRejection', reason => {
    console.error('❌ Unhandled Rejection (Denver):', reason);
  });

  process.on('uncaughtException', err => {
    console.error('❌ Uncaught Exception (Denver):', err);
    // process.exit(1); // optional — or leave running in production
  });

  return denverPoolPromise;
}

// Kick off an initial connect so denverPoolPromise isn’t null on first use
denverPoolPromise = getDenverPool().catch(() => null);

// Keep-alive ping every 5 minutes
setInterval(async () => {
  try {
    const pool = await getDenverPool();
    if (pool) {
      try {
        await pool.request().query('SELECT 1');
      } catch (err) {
        console.warn('⚠️ Denver keep-alive query failed, resetting poolPromise:', err);
        denverPoolPromise = null;
      }
    }
  } catch (err) {
    console.error('⚠️ Denver keep-alive failed to get pool:', err);
    denverPoolPromise = null;
  }
}, 5 * 60 * 1000);

// ---------------- Exports ----------------
module.exports = {
  pune: {
    name: 'Pune',
    getPool: getPunePool,
    poolPromise: punePoolPromise,
    sql: sqlModule
  },
  denver: {
    name: 'Denver',
    getPool: getDenverPool,
    poolPromise: denverPoolPromise, // backward compatibility
    sql: sqlModule
  }
};

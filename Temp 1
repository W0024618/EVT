Now We Dont get Summary Correct Summary is Wrong in Backend as well Frontend Which need to fix....

When i Check manually For 

Row Labels	Contractor	Employee	Grand Total
Austin	      4	        51           55
Denver      	55        478       	533
Miami	        3	        21     	    24
New York     	2	       29	          31
Grand Total	  64      	579      	643

Whhen Check Manually using ssms this is correct Count ..
But in History page for same day 23rd Oct we got count like ...


City	     Employee	    Contractors	    Total
Denver	     476	       50	             529
Miami	        21	       3	          24
New York     	28        	2        	30
Austin TX	     51	        3         	55
             	576        	58       	638

Why this Count is Missing Which need to Fix ........

Also Here Calculation is Wrong 
ex-Austin TX	     51	        3         	55 
this is 54 but Ui display 55 Fix this issue carefully.....









// C:\Users\W0024618\Desktop\namer-occupancy-backend\src\services\occupancy.service.js

const { poolPromise, sql } = require('../config/db');
const roles = require('../utils/roles');

const partitionList = [
  'US.CO.OBS',           // Denver
  'US.FL.Miami',
  'US.NYC',
  'USA/Canada Default'
];

// Helper: safely join a list of strings into quoted SQL literals
function quoteList(arr) {
  return arr.map(s => `'${s.replace(/'/g, "''")}'`).join(',');
}

// Shared CTE for today’s “CardAdmitted” swipes
// NOTE: We do a door-first mapping and return that mapped value AS PartitionName2 in the CTE output.
// The WHERE filters still use the original t1.PartitionName2 so filtering behavior is unchanged.
const combinedQueryCTE = `
WITH CombinedQuery AS (
  SELECT
    DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
    t1.ObjectName1           AS ObjectName1,
    t1.ObjectName2           AS Door,
    CASE
      WHEN t3.Name IN ('Contractor','Terminated Contractor')
        THEN t2.Text12
      ELSE CAST(t2.Int1 AS NVARCHAR)
    END                       AS EmployeeID,
    COALESCE(
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
      sc.value
    )                         AS CardNumber,
    -- We'll return a door-first mapped partition under the name PartitionName2 (overwriting the original for the API response).
    CASE
      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
        OR t1.PartitionName2 = 'US.CO.OBS' THEN 'US.CO.OBS'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
        OR t1.PartitionName2 = 'USA/Canada Default' THEN 'USA/Canada Default'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' 
        OR t1.PartitionName2 = 'US.FL.Miami' THEN 'US.FL.Miami'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%'
        OR t1.PartitionName2 = 'US.NYC' THEN 'US.NYC'

      ELSE t1.PartitionName2
    END AS PartitionName2,

    t1.ObjectIdentity1        AS PersonGUID,
    t3.Name                   AS PersonnelType,
    t5d.value                 AS Direction,

    -- LogicalLocation: prefer door-based detection (case-insensitive), fallback to partition name
    CASE
      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
        THEN 'Denver-HQ'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
        THEN 'Austin Texas'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' THEN 'Miami'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%' 
        THEN 'New York'

      WHEN t1.PartitionName2 = 'US.CO.OBS' THEN 'Denver-HQ'
      WHEN t1.PartitionName2 = 'USA/Canada Default' THEN 'Austin Texas'
      WHEN t1.PartitionName2 = 'US.FL.Miami' THEN 'Miami'
      WHEN t1.PartitionName2 = 'US.NYC' THEN 'New York'
      ELSE 'Other'
    END AS LogicalLocation

  FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLog]       AS t1
  LEFT JOIN [ACVSCore].[Access].[Personnel]                 AS t2
    ON t1.ObjectIdentity1 = t2.GUID
  LEFT JOIN [ACVSCore].[Access].[PersonnelType]             AS t3
    ON t2.PersonnelTypeId = t3.ObjectID
  LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred] AS t5d
    ON t1.XmlGUID = t5d.GUID
    AND t5d.Value IN ('InDirection','OutDirection')
  LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxml]       AS t_xml
    ON t1.XmlGUID = t_xml.GUID
  LEFT JOIN (
    SELECT GUID, value
    FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred]
    WHERE Name IN ('Card','CHUID')
  ) AS sc
    ON t1.XmlGUID = sc.GUID
  WHERE
    t1.MessageType = 'CardAdmitted'
    AND t1.PartitionName2 IN (${ quoteList(partitionList) })
    AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
        = CONVERT(DATE, GETDATE())
)
`;

/**
 * Fetch today's live occupancy records.
 *
 * IMPORTANT: PartitionName2 returned here is the door-first mapped partition (e.g. HQ doors -> 'US.CO.OBS').
 * We intentionally do NOT return a separate MappedPartition column — PartitionName2 is the mapped value.
 */
exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const query = `
    ${combinedQueryCTE}
    SELECT
      LocaleMessageTime,
      ObjectName1,
      Door,
      EmployeeID,
      CardNumber,
      PartitionName2,
      LogicalLocation,
      PersonGUID,
      PersonnelType,
      Direction
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `;
  const result = await pool.request().query(query);
  return result.recordset;
};

/**
 * Fetch historical swipe data for the last `days` days
 * and optional single `location` (note: location filter still uses the raw t1.PartitionName2 in the CTE WHERE).
 */
exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);
  const locCondition = location
    ? `AND t1.PartitionName2 = @location`
    : `AND t1.PartitionName2 IN (${parts})`;

  const query = `
    WITH Hist AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2       AS Door,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
            THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END                   AS EmployeeID,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                     AS CardNumber,
        -- door-first mapped PartitionName2 (returned as PartitionName2)
        CASE
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
            OR t1.PartitionName2 = 'US.CO.OBS' THEN 'US.CO.OBS'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
            OR t1.PartitionName2 = 'USA/Canada Default' THEN 'USA/Canada Default'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' 
            OR t1.PartitionName2 = 'US.FL.Miami' THEN 'US.FL.Miami'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%'
            OR t1.PartitionName2 = 'US.NYC' THEN 'US.NYC'

          ELSE t1.PartitionName2
        END AS PartitionName2,
        t1.ObjectIdentity1   AS PersonGUID,
        t3.Name              AS PersonnelType,
        t5d.value            AS Direction,

        CASE
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
            THEN 'Denver-HQ'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
            THEN 'Austin Texas'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' THEN 'Miami'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%' 
            THEN 'New York'

          WHEN t1.PartitionName2 = 'US.CO.OBS' THEN 'Denver-HQ'
          WHEN t1.PartitionName2 = 'USA/Canada Default' THEN 'Austin Texas'
          WHEN t1.PartitionName2 = 'US.FL.Miami' THEN 'Miami'
          WHEN t1.PartitionName2 = 'US.NYC' THEN 'New York'
          ELSE 'Other'
        END AS LogicalLocation

      FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLog]       AS t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]                 AS t2
        ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]             AS t3
        ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred] AS t5d
        ON t1.XmlGUID = t5d.GUID
        AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxml]       AS t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
    WHERE
      t1.MessageType = 'CardAdmitted'
      ${locCondition}
      AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
          >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
    )
    SELECT
      LocaleMessageTime,
      ObjectName1,
      Door,
      EmployeeID,
      CardNumber,
      PartitionName2,       -- this is the mapped (door-first) partition
      LogicalLocation,
      PersonGUID,
      PersonnelType,
      Direction
    FROM Hist
    ORDER BY LocaleMessageTime ASC;
  `;

  const req = pool.request();
  if (location) req.input('location', sql.NVarChar, location);
  const result = await req.query(query);
  return result.recordset;
};

exports.fetchHistoricalOccupancy = async (location) =>
  exports.fetchHistoricalData({ days: 7, location: location || null });

/**
 * Fetch today's swipes for Denver security officers.
 * Use door-first PartitionName2 (returned from CTE) to identify Denver HQ swipes.
 */
exports.fetchSecuritySwipes = async () => {
  const pool = await poolPromise;
  const officers = quoteList(roles.securityOfficers);

  const query = `
    ${combinedQueryCTE}
    SELECT
      LocaleMessageTime,
      Door,
      EmployeeID,
      CardNumber,
      PersonnelType,
      PartitionName2,
      LogicalLocation,
      Direction
    FROM CombinedQuery
    WHERE
      EmployeeID IN (${officers})
      AND PartitionName2 = 'US.CO.OBS'
    ORDER BY LocaleMessageTime ASC;
  `;
  const result = await pool.request().query(query);
  return result.recordset;
};

/**
 * Count visitor badge swipes per floor today (returns door-first PartitionName2).
 */
exports.fetchVisitorCountsByFloor = async () => {
  const pool = await poolPromise;
  const query = `
    ${combinedQueryCTE}
    SELECT
      PartitionName2    AS PartitionName2,
      LogicalLocation,
      Door              AS Floor,
      COUNT(*)          AS visitorCount
    FROM CombinedQuery
    WHERE PersonnelType = 'Visitor'
    GROUP BY PartitionName2, LogicalLocation, Door;
  `;
  const result = await pool.request().query(query);
  return result.recordset;
};

/**
 * Fetch badge‐rejection rows for the last 7 days (incl. today)
 * and return both live‐today count and history.
 */
exports.fetchBadgeRejectionDetails = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
WITH CombinedQuery AS (
  SELECT
    DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
    t1.ObjectName1      AS ObjectName1,
    t1.ObjectName2      AS Door,
    -- return door-first mapped PartitionName2
    CASE
      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
        OR t1.PartitionName2 = 'US.CO.OBS' THEN 'US.CO.OBS'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
        OR t1.PartitionName2 = 'USA/Canada Default' THEN 'USA/Canada Default'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' 
        OR t1.PartitionName2 = 'US.FL.Miami' THEN 'US.FL.Miami'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%'
        OR t1.PartitionName2 = 'US.NYC' THEN 'US.NYC'

      ELSE t1.PartitionName2
    END AS PartitionName2,
    COALESCE(
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
      sc.value
    )                    AS CardNumber,
    t3.Name              AS PersonnelType,
    t5_rej.value         AS RejectionType,
    CASE
      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
        THEN 'Denver-HQ'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
        THEN 'Austin Texas'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' THEN 'Miami'

      WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
        OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%' 
        THEN 'New York'

      WHEN t1.PartitionName2 = 'US.CO.OBS' THEN 'Denver-HQ'
      WHEN t1.PartitionName2 = 'USA/Canada Default' THEN 'Austin Texas'
      WHEN t1.PartitionName2 = 'US.FL.Miami' THEN 'Miami'
      WHEN t1.PartitionName2 = 'US.NYC' THEN 'New York'
      ELSE 'Other'
    END AS LogicalLocation

  FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLog] AS t1
  LEFT JOIN [ACVSCore].[Access].[Personnel] AS t2
    ON t1.ObjectIdentity1 = t2.GUID
  LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
    ON t2.PersonnelTypeId = t3.ObjectID
  LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxml] AS t_xml
    ON t1.XmlGUID = t_xml.GUID
  LEFT JOIN (
    SELECT GUID, value
    FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred]
    WHERE Name IN ('Card','CHUID')
  ) AS sc
    ON t1.XmlGUID = sc.GUID
  LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred] AS t5_rej
    ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
  WHERE
    t1.MessageType = 'CardRejected'
    AND t1.PartitionName2 IN (${parts})
    AND CONVERT(DATE,
         DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)
        ) >= DATEADD(DAY, -7, CONVERT(DATE, GETDATE()))
)

SELECT
  LocaleMessageTime,
  CONVERT(date, LocaleMessageTime)    AS DateOnly,
  CONVERT(time(0), LocaleMessageTime) AS SwipeTime,
  CardNumber,
  PersonnelType,
  PartitionName2                     AS Location,  -- mapped partition returned here
  LogicalLocation,
  Door,
  RejectionType
FROM CombinedQuery
ORDER BY LocaleMessageTime DESC;
  `;

  const result = await pool.request().query(query);
  const rows = result.recordset;

  // compute today’s count
  const todayStr = new Date().toISOString().slice(0,10);
  const liveCount = rows.filter(r =>
    r.DateOnly.toISOString().slice(0,10) === todayStr
  ).length;

  return { liveCount, history: rows };
};

/**
 * Fetch IN/OUT swipes for service vendors for time calculations.
 */
exports.fetchVendorSwipes = async ({ vendorBadgeId }) => {
  const pool = await poolPromise;
  const query = `
    ${combinedQueryCTE}
    SELECT
      LocaleMessageTime,
      EmployeeID,
      CardNumber,
      Direction,
      PartitionName2,
      LogicalLocation
    FROM CombinedQuery
    WHERE CardNumber = @vendorBadgeId
    ORDER BY LocaleMessageTime ASC;
  `;
  const req = pool.request().input('vendorBadgeId', sql.NVarChar, vendorBadgeId);
  const result = await req.query(query);
  return result.recordset;
};










// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container, Box, Button, Typography, Table,
  TableHead, TableBody, TableRow, TableCell,
  Paper, TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

// Map partition code → friendly city/country
const partitionToDisplay = {
  'US.CO.OBS': { city: 'Denver', country: 'United States' },
  'US.FL.Miami': { city: 'Miami', country: 'United States' },
  'US.NYC': { city: 'New York', country: 'United States' },
  'USA/Canada Default': { city: 'Austin TX', country: 'United States' }
};

// LogicalLocation ↔ city (human readable)
const logicalToCity = {
  'Denver-HQ': 'Denver',
  'Austin Texas': 'Austin TX',
  'Miami': 'Miami',
  'New York': 'New York'
};

// LogicalLocation -> canonical partition mapping (used for robust filtering)
const logicalToPartition = {
  'Denver-HQ': 'US.CO.OBS',
  'Austin Texas': 'USA/Canada Default',
  'Miami': 'US.FL.Miami',
  'New York': 'US.NYC'
};

// NOTE: we do NOT import exceljs at top-level (avoid top-level await issues).
// Will lazy-import inside handleExport.

export default function History() {
  const { partition: partitionParam } = useParams();
  const decodedKey = partitionParam ? decodeURIComponent(partitionParam) : null;

  // stable list of partitions to show (either selected partition or all)
  const filteredPartitionKeys = useMemo(
    () => decodedKey ? [decodedKey] : Object.keys(partitionToDisplay),
    [decodedKey]
  );

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  const getIsoDate = (r) =>
    (r?.SwipeDate && typeof r.SwipeDate === 'string' && r.SwipeDate.slice(0, 10)) ||
    (r?.LocaleMessageTime && typeof r.LocaleMessageTime === 'string' && r.LocaleMessageTime.slice(0, 10)) ||
    '';

  // 12-hour time formatter for API ISO timestamps
  const formatApiTime12 = (isoOrTime) => {
    if (!isoOrTime || typeof isoOrTime !== 'string') return '';
    const m = isoOrTime.match(/T?(\d{2}):(\d{2}):(\d{2})/);
    if (!m) return '';
    let hh = parseInt(m[1], 10);
    const mm = m[2];
    const ss = m[3];
    if (Number.isNaN(hh)) return `${m[1]}:${mm}:${ss}`;
    const ampm = hh >= 12 ? 'PM' : 'AM';
    let h12 = hh % 12;
    if (h12 === 0) h12 = 12;
    return `${String(h12).padStart(2, '0')}:${mm}:${ss} ${ampm}`;
  };

  // helper: does this row belong to partition pk?
  const rowBelongsToPartition = (r, pk) => {
    if (!r) return false;
    const mapped = (r.MappedPartition || '').toString();
    const partitionName = r.PartitionName2 || '';
    if (mapped === pk) return true;
    if (partitionName === pk) return true;

    // check logical location mapping
    const logical = r.LogicalLocation || '';
    const logicalMappedPartition = logicalToPartition[logical];
    if (logicalMappedPartition === pk) return true;

    return false;
  };

  // Build partitionRows from details (prefer MappedPartition -> PartitionName2 -> LogicalLocation)
  const partitionRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');
    const result = [];

    filteredPartitionKeys.forEach(pk => {
      // Filter details for date and partition using robust criteria
      const rowsForPartition = (data.details || []).filter(r => {
        const dateMatch = getIsoDate(r) === ds;
        if (!dateMatch) return false;
        return rowBelongsToPartition(r, pk);
      });

      if (rowsForPartition.length === 0) {
        const disp = partitionToDisplay[pk];
        result.push({
          country: disp?.country || '',
          city: disp?.city || pk,
          employee: 0,
          contractor: 0,
          total: 0
        });
        return;
      }

      // Sort by time, keep last per person
      rowsForPartition.sort((a, b) => (a.LocaleMessageTime || '').localeCompare(b.LocaleMessageTime || ''));
      const lastByPerson = {};
      rowsForPartition.forEach(r => { lastByPerson[r.PersonGUID] = r; });

      const counts = { Employee: 0, Contractor: 0, Other: 0 };
      Object.values(lastByPerson).forEach(r => {
        if (r.Direction !== 'InDirection') return; // only count people currently inside
        const ptype = (r.PersonnelType || '').toLowerCase();
        if (ptype.includes('contractor')) counts.Contractor += 1;
        else if (ptype.includes('employee')) counts.Employee += 1;
        else counts.Other += 1;
      });

      const disp = partitionToDisplay[pk];
      result.push({
        country: disp?.country || '',
        city: disp?.city || pk,
        employee: counts.Employee,
        contractor: counts.Contractor,
        total: counts.Employee + counts.Contractor + counts.Other
      });
    });

    return result;
  }, [data, pickedDate, filteredPartitionKeys]);

  // detailRows for the details table: include rows where PartitionName2 OR MappedPartition OR LogicalLocation maps to selected keys
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    const all = (data.details || []).filter(r => {
      const dateMatch = getIsoDate(r) === ds;
      if (!dateMatch) return false;

      // if any selected pk matches by any mapping, include the row
      return filteredPartitionKeys.some(pk => rowBelongsToPartition(r, pk));
    });

    all.sort((a, b) => ((a.LocaleMessageTime || '')).localeCompare((b.LocaleMessageTime || '')));

    const lastByPerson = {};
    all.forEach(r => { lastByPerson[r.PersonGUID] = r; });

    return Object.values(lastByPerson).filter(r => r.Direction === 'InDirection');
  }, [data, pickedDate, filteredPartitionKeys]);

  // Fetch history once on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data) return null;

  // Excel export (lazy import exceljs)
  const handleExport = async () => {
    if (!pickedDate) return;

    try {
      const excelModule = await import('exceljs');
      const Excel = excelModule.default || excelModule;
      let wb;

      if (Excel && Excel.Workbook) wb = new Excel.Workbook();
      else if (typeof Excel === 'function') wb = new Excel();
      else throw new Error('ExcelJS Workbook constructor not found');

      // ---------- SHEET 1: WU Employee ----------
      const wsDetails = wb.addWorksheet('WU Employee');

      const detailsHeaders = [
        'Sr.No', 'Date', 'Time',
        'Employee Name', 'Employee ID', 'Personal Type',
        'Door Name', 'Location'
      ];

      wsDetails.mergeCells(`A1:${String.fromCharCode(64 + detailsHeaders.length)}1`);
      const detailsTitle = wsDetails.getCell('A1');
      detailsTitle.value = `${format(pickedDate, 'EEEE, d MMMM, yyyy')}`;
      detailsTitle.alignment = { horizontal: 'center', vertical: 'middle' };
      detailsTitle.font = { name: 'Calibri', size: 12, bold: true };

      const hdrRow = wsDetails.addRow(detailsHeaders);
      hdrRow.eachCell(cell => {
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC107' } };
        cell.font = { bold: true, color: { argb: 'FF000000' } };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
      });

      (detailRows || []).forEach((r, i) => {
        const dateVal = (r.LocaleMessageTime?.slice(0, 10)) || (r.SwipeDate?.slice(0, 10)) || '';
        const timeVal = formatApiTime12(r.LocaleMessageTime) || '';
        const name = r.ObjectName1 || '';
        const empId = r.EmployeeID || '';
        const ptype = r.PersonnelType || '';
        const door = r.Door || r.ObjectName2 || '';

        const location = (r.LogicalLocation && logicalToCity[r.LogicalLocation])
          || (r.MappedPartition && partitionToDisplay[r.MappedPartition]?.city)
          || (r.PartitionName2 && partitionToDisplay[r.PartitionName2]?.city)
          || r.PrimaryLocation
          || r.PartitionName2
          || '';

        const row = wsDetails.addRow([i + 1, dateVal, timeVal, name, empId, ptype, door, location]);

        row.eachCell((cell, colNumber) => {
          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
          cell.font = { name: 'Calibri', size: 11 };
          cell.alignment = colNumber === 1 ? { horizontal: 'center', vertical: 'middle' } : { horizontal: 'left', vertical: 'middle' };
        });

        if (i % 2 === 1) {
          row.eachCell(cell => {
            cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF7F7F7' } };
          });
        }
      });

      // Auto-fit columns
      wsDetails.columns.forEach((col, idx) => {
        let maxLen = 0;
        col.eachCell({ includeEmpty: true }, c => {
          const v = c.value === null || c.value === undefined ? '' : String(c.value).trim();
          if (v.length > maxLen) maxLen = v.length;
        });
        let width = maxLen + 2;
        if (idx === 0) width = Math.min(Math.max(width, 6), 10);
        else if (idx === 1) width = Math.min(Math.max(width, 10), 15);
        else if (idx === 2) width = Math.min(Math.max(width, 8), 12);
        else if (idx === 3) width = Math.min(Math.max(width, 15), 30);
        else if (idx === 4) width = Math.min(Math.max(width, 10), 18);
        else if (idx === 5) width = Math.min(Math.max(width, 12), 20);
        else if (idx === 6) width = Math.min(Math.max(width, 18), 40);
        else if (idx === 7) width = Math.min(Math.max(width, 18), 40);
        col.width = width;
      });

      wsDetails.views = [{ state: 'frozen', ySplit: 2 }];

      // ---------- SHEET 2: WU Summary ----------
      const ws = wb.addWorksheet('WU Summary');
      const r1 = ws.addRow(['Country', 'City', format(pickedDate, 'EEEE, d MMMM, yyyy'), null, null]);
      ws.mergeCells('C1:E1');
      const dateCell = ws.getCell('C1');
      dateCell.alignment = { horizontal: 'center', vertical: 'middle' };
      dateCell.font = { bold: true, size: 12 };
      dateCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };

      r1.eachCell((cell, colNumber) => {
        if (colNumber <= 2) {
          cell.font = { bold: true, size: 12 };
          cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };
        } else if (colNumber === 3) {
          cell.font = { bold: true, size: 12 };
          cell.alignment = { horizontal: 'center', vertical: 'middle' };
          cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };
        }
        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
      });

      const r2 = ws.addRow(['', '', 'Employee', 'Contractors', 'Total']);
      r2.eachCell(cell => {
        cell.font = { bold: true, size: 12 };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };
        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
      });

      (partitionRows || []).forEach(r => {
        const row = ws.addRow([r.country || '', r.city || '', r.employee || 0, r.contractor || 0, r.total || 0]);
        row.eachCell((cell, colNumber) => {
          cell.alignment = { vertical: 'middle', horizontal: colNumber >= 3 ? 'center' : 'left' };
          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
        });
      });

      const totalEmployees = (partitionRows || []).reduce((s, r) => s + (r.employee || 0), 0);
      const totalContractors = (partitionRows || []).reduce((s, r) => s + (r.contractor || 0), 0);
      const totalTotals = (partitionRows || []).reduce((s, r) => s + (r.total || 0), 0);

      const totalsRow = ws.addRow(['Total', '', totalEmployees, totalContractors, totalTotals]);
      totalsRow.eachCell((cell) => {
        cell.font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF808080' } };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
      });

      ws.columns.forEach((col, idx) => {
        let maxLen = 0;
        col.eachCell({ includeEmpty: true }, c => {
          const v = c.value === null || c.value === undefined ? '' : String(c.value).trim();
          if (v.length > maxLen) maxLen = v.length;
        });
        let width = maxLen + 2;
        if (idx === 0) width = Math.min(Math.max(width, 10), 20);
        else if (idx === 1) width = Math.min(Math.max(width, 10), 25);
        else if (idx === 2) width = Math.min(Math.max(width, 12), 20);
        else if (idx === 3) width = Math.min(Math.max(width, 12), 20);
        else if (idx === 4) width = Math.min(Math.max(width, 12), 20);
        col.width = width;
      });
      ws.views = [{ state: 'frozen', ySplit: 2 }];

      let cityName = '';
      if (filteredPartitionKeys.length === 1) {
        const selectedKey = filteredPartitionKeys[0];
        cityName = partitionToDisplay[selectedKey]?.city || '';
      }
      const filename = cityName
        ? `Western Union NAMER (${cityName}) Headcount Report - ${format(pickedDate, 'd MMMM yyyy')}.xlsx`
        : `Western Union NAMER Headcount Report - ${format(pickedDate, 'd MMMM yyyy')}.xlsx`;

      const buf = await wb.xlsx.writeBuffer();
      saveAs(new Blob([buf]), filename);

    } catch (err) {
      console.error('handleExport error:', err);
    }
  };

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* Top: always show DatePicker so user can pick a date */}
        <Box sx={{ px: 2, mb: 2 }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Select date"
              value={pickedDate}
              onChange={d => { setPickedDate(d); setShowDetails(false); }}
              renderInput={params => <TextField fullWidth {...params} />}
            />
          </LocalizationProvider>
          {!pickedDate && (
            <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
              Please pick a date to view region summary.
            </Typography>
          )}
        </Box>

        {/* Summary block: only render once a date is picked */}
        {pickedDate && (
          <Box display="flex" alignItems="flex-start" sx={{ px: 2, mb: 2, gap: 1 }}>
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={5} align="center"
                        sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#FFC107', border: '2px solid #000' }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {['Country', 'City', 'Employees', 'Contractors', 'Total'].map(h => (
                        <TableCell key={h}
                          align={['Country', 'City'].includes(h) ? 'left' : 'right'}
                          sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}
                        >
                          {h}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {partitionRows.map((r, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.contractor}</TableCell>
                        <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                          {r.total}
                        </TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      <TableCell align="right"
                        sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>

                <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                  <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }}
                    onClick={() => setShowDetails(v => !v)}>
                    {showDetails ? 'Hide Details' : 'See Details'}
                  </Button>
                  {showDetails && (
                    <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                      onClick={handleExport}>
                      Export to Excel
                    </Button>
                  )}
                </Box>
              </Paper>
            </Box>
          </Box>
        )}

        {/* Details table */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper elevation={1} sx={{ px: 4, py: 1, width: '100%', border: '3px solid #000', borderRadius: 2 }}>
              {detailRows.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {['Sr', 'Date', 'Time', 'Emp ID', 'Name', 'Type', 'Card', 'Door', 'Partition']
                        .map(h => (
                          <TableCell key={h} align="center"
                            sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                            {h}
                          </TableCell>
                        ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r, i) => (
                      <TableRow key={r.PersonGUID}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>

                        <TableCell sx={{ border: '2px solid #000' }}>
                          {getIsoDate(r)}
                        </TableCell>

                        <TableCell sx={{ border: '2px solid #000' }}>
                          {formatApiTime12(r.LocaleMessageTime || r.Swipe_Time || '')}
                        </TableCell>

                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.CardNumber}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>
                          {(r.LogicalLocation && logicalToCity[r.LogicalLocation])
                            || (r.MappedPartition && partitionToDisplay[r.MappedPartition]?.city)
                            || partitionToDisplay[r.PartitionName2]?.city
                            || r.PartitionName2}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography variant="body2" sx={{
                  color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic'
                }}>
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}



















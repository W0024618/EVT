-- fetch_swipe_with_image.sql
-- Note: This SQL expects parameters supplied via sp_executesql:
-- @startDate DATE, @endDate DATE, @location NVARCHAR(200), @regionKey NVARCHAR(30), @admitFilter NVARCHAR(10)
-- Do NOT add DECLARE assignments in this file.

;WITH CombinedQuery AS (
  SELECT 
    DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
    t1.ObjectName1,
    t1.PartitionName2       AS PartitionName2,
    t5_card.CardNumber,
    t5_admit.value          AS AdmitCode,
    t5_dir.value            AS Direction,
    t1.ObjectName2          AS Door,
    t5_rej.value            AS Rejection_Type,
    CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
         THEN t2.Text12
         ELSE CAST(t2.Int1 AS NVARCHAR)
    END                       AS EmployeeID,
    t3.Name                  AS PersonnelType,
    t1.MessageType,
    t1.XmlGUID,
    t2.ObjectID              AS PersonnelObjectID,
    t2.PrimaryPortrait       AS PrimaryPortraitId,
    CASE
      WHEN (UPPER(ISNULL(@regionKey,'')) = 'NAMER' OR t1.PartitionName2 LIKE 'US.%' OR t1.PartitionName2 LIKE 'USA%')
      THEN
        CASE
          WHEN t1.ObjectName2 LIKE '%HQ%' THEN 'Denver-HQ'
          WHEN t1.ObjectName2 LIKE '%Austin%' THEN 'Austin Texas'
          WHEN t1.ObjectName2 LIKE '%Miami%' THEN 'Miami'
          WHEN t1.ObjectName2 LIKE '%NYC%' THEN 'New York'
          ELSE t1.PartitionName2
        END
      WHEN (UPPER(ISNULL(@regionKey,'')) = 'APAC' OR t1.PartitionName2 LIKE 'APAC.%' OR t1.PartitionName2 LIKE 'APAC%')
      THEN
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
          WHEN t1.ObjectName2 LIKE '%HYD%' THEN 'Hyderabad'
          ELSE t1.PartitionName2
        END
      ELSE t1.PartitionName2
    END AS Location
  FROM ACVSUJournalLog AS t1
  LEFT JOIN ACVSCore.Access.Personnel     AS t2 ON t1.ObjectIdentity1 = t2.GUID
  LEFT JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeId   = t3.ObjectID
  LEFT JOIN ACVSUJournalLogxmlShred       AS t5_admit
    ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
  LEFT JOIN ACVSUJournalLogxmlShred       AS t5_dir
    ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
  LEFT JOIN ACVSUJournalLogxml             AS t_xml ON t1.XmlGUID = t_xml.GUID
  LEFT JOIN (
    SELECT GUID, [value]
    FROM ACVSUJournalLogxmlShred
    WHERE [Name] IN ('Card','CHUID')
  ) AS SCard ON t1.XmlGUID = SCard.GUID
  OUTER APPLY (
    SELECT COALESCE(
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
      SCard.[value]
    ) AS CardNumber
  ) AS t5_card
  LEFT JOIN ACVSUJournalLogxmlShred AS t5_rej
    ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
  WHERE
    t1.MessageType IN ('CardAdmitted' , 'CardRejected')
    AND (
      @location IS NULL
      OR t1.PartitionName2 = @location
      OR (
        (CASE
          WHEN (UPPER(ISNULL(@regionKey,'')) = 'NAMER' OR t1.PartitionName2 LIKE 'US.%' OR t1.PartitionName2 LIKE 'USA%')
          THEN
            CASE
              WHEN t1.ObjectName2 LIKE '%HQ%' THEN 'Denver-HQ'
              WHEN t1.ObjectName2 LIKE '%Austin%' THEN 'Austin Texas'
              WHEN t1.ObjectName2 LIKE '%Miami%' THEN 'Miami'
              WHEN t1.ObjectName2 LIKE '%NYC%' THEN 'New York'
              ELSE NULL
            END
          WHEN (UPPER(ISNULL(@regionKey,'')) = 'APAC' OR t1.PartitionName2 LIKE 'APAC.%' OR t1.PartitionName2 LIKE 'APAC%')
          THEN
            CASE
              WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
              WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
              WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
              WHEN t1.ObjectName2 LIKE '%HYD%' THEN 'Hyderabad'
              ELSE NULL
            END
          ELSE NULL
        END) = @location
      )
    )
    AND (
      UPPER(ISNULL(@admitFilter,'all')) = 'ALL'
      OR (UPPER(@admitFilter) = 'ADMIT'  AND t1.MessageType = 'CardAdmitted')
      OR (UPPER(@admitFilter) = 'REJECT' AND t1.MessageType = 'CardRejected')
    )
    AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) BETWEEN @startDate AND @endDate
)

SELECT
  cq.LocaleMessageTime,
  CONVERT(date,    cq.LocaleMessageTime) AS DateOnly,
  CONVERT(time(0), cq.LocaleMessageTime) AS Swipe_Time,
  cq.EmployeeID,
  cq.ObjectName1,
  cq.PersonnelType,
  cq.Location,
  cq.CardNumber,
  cq.AdmitCode,
  cq.Direction,
  cq.Door,
  cq.Rejection_Type,
  cq.PersonnelObjectID,
  cq.PrimaryPortraitId,
  Img.ImageId,
  Img.ImageBuffer
FROM CombinedQuery AS cq
OUTER APPLY (
  SELECT TOP(1)
    AI.ObjectID AS ImageId,
    AI.Image    AS ImageBuffer
  FROM ACVSCore.Access.Images AI
  WHERE
    (AI.ParentId = cq.PersonnelObjectID)
    OR (cq.PrimaryPortraitId IS NOT NULL AND AI.ObjectID = cq.PrimaryPortraitId)
  ORDER BY AI.ObjectID DESC
) AS Img
ORDER BY cq.LocaleMessageTime ASC;










# fetch_swipes.py (updated)
# Usage example:
# python fetch_swipes.py --region apac --start 2025-10-20 --end 2025-10-21 --location "Pune" --filter ADMIT

import os
import argparse
import pyodbc
import csv
from datetime import datetime

regions = {
  "apac": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUPNQ0986V",
    "database": "ACVSUJournal_00010030"
  },
  "emea": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUFRA0986V",
    "database": "ACVSUJournal_00011029"
  },
  "laca": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUSJO0986V",
    "database": "ACVSUJournal_00010030"
  },
  "namer": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUDEN0891V",
    "database": "ACVSUJournal_00010030"
  }
}

def select_odbc_driver():
    """Return a suitable ODBC driver name installed on the system."""
    drivers = [d for d in pyodbc.drivers() if d and d.strip()]
    # prefer modern official drivers
    prefer = ["ODBC Driver 18 for SQL Server", "ODBC Driver 17 for SQL Server"]
    for p in prefer:
        if p in drivers:
            return p
    # fallback to any "ODBC Driver" match
    for d in reversed(drivers):
        if "ODBC Driver" in d:
            return d
    return None

def get_connection(region_key):
    cfg = regions[region_key]
    driver = select_odbc_driver()
    if not driver:
        raise RuntimeError(
            "No suitable ODBC Driver found. Please install 'ODBC Driver 18 for SQL Server' or 'ODBC Driver 17 for SQL Server'.\n"
            "Download: https://learn.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server"
        )
    conn_str = (
        f"DRIVER={{{driver}}};SERVER={cfg['server']};DATABASE={cfg['database']};"
        f"UID={cfg['user']};PWD={cfg['password']};Encrypt=yes;TrustServerCertificate=yes;"
    )
    try:
        return pyodbc.connect(conn_str, timeout=30)
    except pyodbc.Error as e:
        # re-raise with more info
        raise RuntimeError(f"pyodbc connection error using driver '{driver}': {e}")

def run_query_and_save(region_key, start_date, end_date, location, regionKeyParam, admitFilter):
    sql_file = os.path.join(os.path.dirname(__file__), "fetch_swipe_with_image.sql")
    if not os.path.exists(sql_file):
        raise FileNotFoundError(f"SQL file not found: {sql_file}")

    with open(sql_file, "r", encoding="utf-8") as f:
        base_sql = f.read()

    # Escape single quotes for safe sp_executesql embedding
    base_sql_escaped = base_sql.replace("'", "''")

    # Build sp_executesql wrapper that declares parameter types and maps named params to placeholders
    wrapped_sql = (
        "EXEC sp_executesql N'"
        + base_sql_escaped
        + "', N'@startDate date,@endDate date,@location nvarchar(200),@regionKey nvarchar(30),@admitFilter nvarchar(10)', "
        + "@startDate=?, @endDate=?, @location=?, @regionKey=?, @admitFilter=?"
    )

    conn = get_connection(region_key)
    cur = conn.cursor()

    # Convert start/end to proper SQL date strings if they are str
    # pyodbc will map Python str -> nvarchar and SQL Server will convert; we can pass strings directly
    params = (start_date, end_date, location, regionKeyParam, admitFilter)

    try:
        cur.execute(wrapped_sql, params)
    except Exception as e:
        cur.close()
        conn.close()
        raise RuntimeError(f"Error executing query: {e}")

    out_csv = "swipe_results.csv"
    images_dir = "images"
    os.makedirs(images_dir, exist_ok=True)

    cols = [desc[0] for desc in cur.description] if cur.description else []
    with open(out_csv, "w", newline="", encoding="utf-8") as csvf:
        writer = csv.writer(csvf)
        if cols:
            writer.writerow(cols)
        else:
            writer.writerow(["NoColumnsReturned"])

        row_count = 0
        for row in cur:
            row_count += 1
            row_list = list(row)

            # Find ImageBuffer and ImageId columns if present
            image_idx = None
            imageid_idx = None
            if "ImageBuffer" in cols:
                image_idx = cols.index("ImageBuffer")
            if "ImageId" in cols:
                imageid_idx = cols.index("ImageId")

            if image_idx is not None and row_list[image_idx] is not None:
                img_bytes = row_list[image_idx]
                fname_id = row_list[imageid_idx] if imageid_idx is not None else f"img_{row_count}"
                # Build filename using LocaleMessageTime and EmployeeID if present
                ts_val = None
                if "LocaleMessageTime" in cols:
                    ts_val = row_list[cols.index("LocaleMessageTime")]
                if isinstance(ts_val, datetime):
                    ts_str = ts_val.strftime("%Y%m%d_%H%M%S")
                else:
                    ts_str = (str(ts_val) if ts_val is not None else f"row{row_count}").replace(":", "-").replace(" ", "_")
                emp_val = row_list[cols.index("EmployeeID")] if "EmployeeID" in cols else "unknown"
                image_filename = f"{ts_str}_emp{emp_val}_{fname_id}.jpg"
                image_path = os.path.join(images_dir, image_filename)
                try:
                    with open(image_path, "wb") as imgf:
                        imgf.write(img_bytes)
                    # replace binary with path for CSV readability
                    row_list[image_idx] = image_path
                except Exception as e:
                    row_list[image_idx] = f"<ERROR_WRITING_IMAGE:{e}>"

            writer.writerow(row_list)

    cur.close()
    conn.close()
    print(f"Done. Rows exported: {row_count}. CSV: {out_csv}. Images dir: {images_dir}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fetch swipe events and save images.")
    parser.add_argument("--region", required=True, choices=list(regions.keys()), help="Region key")
    parser.add_argument("--start", required=True, help="Start date (YYYY-MM-DD)")
    parser.add_argument("--end", required=True, help="End date (YYYY-MM-DD)")
    parser.add_argument("--location", default=None, help="Location filter (optional)")
    parser.add_argument("--filter", default="ALL", choices=["ALL","ADMIT","REJECT"], help="Admit filter")
    args = parser.parse_args()

    try:
        run_query_and_save(
            region_key = args.region,
            start_date = args.start,
            end_date = args.end,
            location = args.location,
            regionKeyParam = args.region,
            admitFilter = args.filter
        )
    except Exception as exc:
        print("ERROR:", exc)
        raise



















Check both file carefully and fix this issue and share me fully updated file carefully



(.venv) PS C:\projects\yolo_project> python fetch_swipes.py --region apac  --start 2025-10-20 --end 2025-10-21 --location "Pune" --filter ADMIT        
Traceback (most recent call last):
  File "C:\projects\yolo_project\fetch_swipes.py", line 119, in <module>
    run_query_and_save(
    ~~~~~~~~~~~~~~~~~~^
        region_key = args.region,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<4 lines>...
        admitFilter = args.filter
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\projects\yolo_project\fetch_swipes.py", line 54, in run_query_and_save
    conn = get_connection(region_key)
  File "C:\projects\yolo_project\fetch_swipes.py", line 47, in get_connection
    return pyodbc.connect(conn_str, timeout=30)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
pyodbc.InterfaceError: ('IM002', '[IM002] [Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified (0) (SQLDriverConnect)')
(.venv) PS C:\projects\yolo_project> 







C:\projects\yolo_project\fetch_swipe_with_image.sql

-- fetch_swipe_with_image.sql
-- Parametrized T-SQL for SQL Server
-- Returns swipe events + employee info + primary portrait image (binary)
-- Expects the caller to set/parameterize these variables (script uses DECLARE with placeholders).

DECLARE 
  @startDate DATE   = ?,
  @endDate   DATE   = ?,
  @location  NVARCHAR(200) = ?,
  @regionKey NVARCHAR(30)  = ?,
  @admitFilter NVARCHAR(10) = ?; -- 'ALL' | 'ADMIT' | 'REJECT'

;WITH CombinedQuery AS (
  SELECT 
    DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
    t1.ObjectName1,
    t1.PartitionName2       AS PartitionName2,
    t5_card.CardNumber,
    t5_admit.value          AS AdmitCode,
    t5_dir.value            AS Direction,
    t1.ObjectName2          AS Door,
    t5_rej.value            AS Rejection_Type,
    CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
         THEN t2.Text12
         ELSE CAST(t2.Int1 AS NVARCHAR)
    END                       AS EmployeeID,
    t3.Name                  AS PersonnelType,
    t1.MessageType,
    t1.XmlGUID,
    t2.ObjectID              AS PersonnelObjectID,
    t2.PrimaryPortrait       AS PrimaryPortraitId,
    CASE
      WHEN (UPPER(ISNULL(@regionKey,'')) = 'NAMER' OR t1.PartitionName2 LIKE 'US.%' OR t1.PartitionName2 LIKE 'USA%')
      THEN
        CASE
          WHEN t1.ObjectName2 LIKE '%HQ%' THEN 'Denver-HQ'
          WHEN t1.ObjectName2 LIKE '%Austin%' THEN 'Austin Texas'
          WHEN t1.ObjectName2 LIKE '%Miami%' THEN 'Miami'
          WHEN t1.ObjectName2 LIKE '%NYC%' THEN 'New York'
          ELSE t1.PartitionName2
        END
      WHEN (UPPER(ISNULL(@regionKey,'')) = 'APAC' OR t1.PartitionName2 LIKE 'APAC.%' OR t1.PartitionName2 LIKE 'APAC%')
      THEN
        CASE
          WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
          WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
          WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
          WHEN t1.ObjectName2 LIKE '%HYD%' THEN 'Hyderabad'
          ELSE t1.PartitionName2
        END
      ELSE t1.PartitionName2
    END AS Location
  FROM ACVSUJournalLog AS t1
  LEFT JOIN ACVSCore.Access.Personnel     AS t2 ON t1.ObjectIdentity1 = t2.GUID
  LEFT JOIN ACVSCore.Access.PersonnelType AS t3 ON t2.PersonnelTypeId   = t3.ObjectID
  LEFT JOIN ACVSUJournalLogxmlShred       AS t5_admit
    ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
  LEFT JOIN ACVSUJournalLogxmlShred       AS t5_dir
    ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
  LEFT JOIN ACVSUJournalLogxml             AS t_xml ON t1.XmlGUID = t_xml.GUID
  LEFT JOIN (
    SELECT GUID, [value]
    FROM ACVSUJournalLogxmlShred
    WHERE [Name] IN ('Card','CHUID')
  ) AS SCard ON t1.XmlGUID = SCard.GUID
  OUTER APPLY (
    SELECT COALESCE(
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
      SCard.[value]
    ) AS CardNumber
  ) AS t5_card
  LEFT JOIN ACVSUJournalLogxmlShred AS t5_rej
    ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
  WHERE
    t1.MessageType IN ('CardAdmitted' , 'CardRejected')
    AND (
      @location IS NULL
      OR t1.PartitionName2 = @location
      OR (
        (CASE
          WHEN (UPPER(ISNULL(@regionKey,'')) = 'NAMER' OR t1.PartitionName2 LIKE 'US.%' OR t1.PartitionName2 LIKE 'USA%')
          THEN
            CASE
              WHEN t1.ObjectName2 LIKE '%HQ%' THEN 'Denver-HQ'
              WHEN t1.ObjectName2 LIKE '%Austin%' THEN 'Austin Texas'
              WHEN t1.ObjectName2 LIKE '%Miami%' THEN 'Miami'
              WHEN t1.ObjectName2 LIKE '%NYC%' THEN 'New York'
              ELSE NULL
            END
          WHEN (UPPER(ISNULL(@regionKey,'')) = 'APAC' OR t1.PartitionName2 LIKE 'APAC.%' OR t1.PartitionName2 LIKE 'APAC%')
          THEN
            CASE
              WHEN t1.ObjectName2 LIKE 'APAC_PI%' THEN 'Taguig City'
              WHEN t1.ObjectName2 LIKE 'APAC_PH%' THEN 'Quezon City'
              WHEN t1.ObjectName2 LIKE '%PUN%' THEN 'Pune'
              WHEN t1.ObjectName2 LIKE '%HYD%' THEN 'Hyderabad'
              ELSE NULL
            END
          ELSE NULL
        END) = @location
      )
    )
    AND (
      UPPER(ISNULL(@admitFilter,'all')) = 'ALL'
      OR (UPPER(@admitFilter) = 'ADMIT'  AND t1.MessageType = 'CardAdmitted')
      OR (UPPER(@admitFilter) = 'REJECT' AND t1.MessageType = 'CardRejected')
    )
    AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) BETWEEN @startDate AND @endDate
)

SELECT
  cq.LocaleMessageTime,
  CONVERT(date,    cq.LocaleMessageTime) AS DateOnly,
  CONVERT(time(0), cq.LocaleMessageTime) AS Swipe_Time,
  cq.EmployeeID,
  cq.ObjectName1,
  cq.PersonnelType,
  cq.Location,
  cq.CardNumber,
  cq.AdmitCode,
  cq.Direction,
  cq.Door,
  cq.Rejection_Type,
  cq.PersonnelObjectID,
  cq.PrimaryPortraitId,
  Img.ImageId,
  Img.ImageBuffer
FROM CombinedQuery AS cq
OUTER APPLY (
  SELECT TOP(1)
    AI.ObjectID AS ImageId,
    AI.Image    AS ImageBuffer
  FROM ACVSCore.Access.Images AI
  WHERE
    (AI.ParentId = cq.PersonnelObjectID)
    OR (cq.PrimaryPortraitId IS NOT NULL AND AI.ObjectID = cq.PrimaryPortraitId)
  ORDER BY AI.ObjectID DESC
) AS Img
ORDER BY cq.LocaleMessageTime ASC;













# fetch_swipes.py
# Usage: python fetch_swipes.py --region namer --start 2025-10-20 --end 2025-10-21 --location "Austin Texas" --filter ADMIT

import os
import argparse
import pyodbc
import csv
from datetime import datetime

# ---------- Put your region DB connection details here (from your message) ----------
regions = {
  "apac": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUPNQ0986V",
    "database": "ACVSUJournal_00010030"
  },
  "emea": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUFRA0986V",
    "database": "ACVSUJournal_00011029"
  },
  "laca": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUSJO0986V",
    "database": "ACVSUJournal_00010030"
  },
  "namer": {
    "user": "GSOC_Test",
    "password": "Westernccure@2025",
    "server": "SRVWUDEN0891V",
    "database": "ACVSUJournal_00010030"
  }
}

# ---------- Helpers ----------
def get_connection(region_key):
    cfg = regions[region_key]
    # Use ODBC Driver 18 if available. If not, change to "ODBC Driver 17 for SQL Server".
    driver = "{ODBC Driver 18 for SQL Server}"
    conn_str = (
        f"DRIVER={driver};SERVER={cfg['server']};DATABASE={cfg['database']};"
        f"UID={cfg['user']};PWD={cfg['password']};Encrypt=yes;TrustServerCertificate=yes;"
    )
    return pyodbc.connect(conn_str, timeout=30)

def run_query_and_save(region_key, start_date, end_date, location, regionKeyParam, admitFilter):
    sql_file = os.path.join(os.path.dirname(__file__), "fetch_swipe_with_image.sql")
    with open(sql_file, "r", encoding="utf-8") as f:
        sql = f.read()

    conn = get_connection(region_key)
    cur = conn.cursor()

    # The SQL declares variables with positional parameters (?), so pass params in order
    params = (start_date, end_date, location, regionKeyParam, admitFilter)
    cur.execute(sql, params)

    # Prepare output
    out_csv = "swipe_results.csv"
    images_dir = "images"
    os.makedirs(images_dir, exist_ok=True)

    # Write CSV header using cursor.description
    cols = [desc[0] for desc in cur.description]
    with open(out_csv, "w", newline="", encoding="utf-8") as csvf:
        writer = csv.writer(csvf)
        writer.writerow(cols)  # header

        row_count = 0
        for row in cur:
            row_count += 1
            row_list = list(row)

            # Find ImageBuffer column index and ImageId index (if present)
            try:
                image_idx = cols.index("ImageBuffer")
                imageid_idx = cols.index("ImageId")
            except ValueError:
                image_idx = None
                imageid_idx = None

            # Save image if exists (binary)
            if image_idx is not None and row_list[image_idx] is not None:
                img_bytes = row_list[image_idx]
                fname_id = row_list[imageid_idx] if imageid_idx is not None else f"img_{row_count}"
                # Build safe file name with timestamp + id
                ts = row_list[cols.index("LocaleMessageTime")]
                if isinstance(ts, datetime):
                    ts_str = ts.strftime("%Y%m%d_%H%M%S")
                else:
                    ts_str = str(ts).replace(":", "-").replace(" ", "_")
                image_filename = f"{ts_str}_emp{row_list[cols.index('EmployeeID')]}_{fname_id}.jpg"
                image_path = os.path.join(images_dir, image_filename)
                with open(image_path, "wb") as imgf:
                    imgf.write(img_bytes)
                # Replace binary in CSV row with saved image path for easier review
                row_list[image_idx] = image_path

            # Write row to CSV
            writer.writerow(row_list)

    cur.close()
    conn.close()
    print(f"Done. Rows exported: {row_count}. CSV: {out_csv}. Images dir: {images_dir}")

# ---------- CLI ----------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fetch swipe events and save images.")
    parser.add_argument("--region", required=True, choices=list(regions.keys()), help="Region key")
    parser.add_argument("--start", required=True, help="Start date (YYYY-MM-DD)")
    parser.add_argument("--end", required=True, help="End date (YYYY-MM-DD)")
    parser.add_argument("--location", default=None, help="Location filter (optional)")
    parser.add_argument("--filter", default="ALL", choices=["ALL","ADMIT","REJECT"], help="Admit filter")
    args = parser.parse_args()

    run_query_and_save(
        region_key = args.region,
        start_date = args.start,
        end_date = args.end,
        location = args.location,
        regionKeyParam = args.region,
        admitFilter = args.filter
    )






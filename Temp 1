// --- Replace existing fetchHistoricalData with this implementation ---

/**
 * Fetch historical swipe data for the last `days` days.
 * Returns an object: { details: [...rows...], summaryByDate: [...summary...] }
 *
 * Summary is computed as: for each person & each date, pick the last swipe (by LocaleMessageTime).
 * If that last swipe Direction = 'InDirection' then we count them as present on that date;
 * grouping uses the door-first mapped PartitionName2 (so HQ doors => US.CO.OBS).
 */
exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);
  const locCondition = location
    ? `AND t1.PartitionName2 = @location`
    : `AND t1.PartitionName2 IN (${parts})`;

  // Hist CTE: same door-first mapping for PartitionName2 + LogicalLocation
  const query = `
    WITH Hist AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        t1.ObjectName2       AS Door,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
            THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END                   AS EmployeeID,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                     AS CardNumber,
        -- door-first mapped PartitionName2 (returned as PartitionName2)
        CASE
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
            OR t1.PartitionName2 = 'US.CO.OBS' THEN 'US.CO.OBS'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
            OR t1.PartitionName2 = 'USA/Canada Default' THEN 'USA/Canada Default'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' 
            OR t1.PartitionName2 = 'US.FL.Miami' THEN 'US.FL.Miami'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%'
            OR t1.PartitionName2 = 'US.NYC' THEN 'US.NYC'

          ELSE t1.PartitionName2
        END AS PartitionName2,
        t1.ObjectIdentity1   AS PersonGUID,
        t3.Name              AS PersonnelType,
        t5d.value            AS Direction,

        CASE
          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%US.CO.HQ.%'
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%HQ%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%DENVER%' 
            THEN 'Denver-HQ'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%AUSTIN TX%' 
            THEN 'Austin Texas'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%MIAMI%' THEN 'Miami'

          WHEN UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NYC%' 
            OR UPPER(ISNULL(t1.ObjectName2,'')) LIKE '%NEW YORK%' 
            THEN 'New York'

          WHEN t1.PartitionName2 = 'US.CO.OBS' THEN 'Denver-HQ'
          WHEN t1.PartitionName2 = 'USA/Canada Default' THEN 'Austin Texas'
          WHEN t1.PartitionName2 = 'US.FL.Miami' THEN 'Miami'
          WHEN t1.PartitionName2 = 'US.NYC' THEN 'New York'
          ELSE 'Other'
        END AS LogicalLocation

      FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLog]       AS t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]                 AS t2
        ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]             AS t3
        ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred] AS t5d
        ON t1.XmlGUID = t5d.GUID
        AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxml]       AS t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010030].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
    WHERE
      t1.MessageType = 'CardAdmitted'
      ${locCondition}
      AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
          >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
    ),

    -- LastSwipe picks the last swipe (by time) PER PersonGUID PER DATE
    LastSwipe AS (
      SELECT *,
        ROW_NUMBER() OVER (
          PARTITION BY PersonGUID, CONVERT(date, LocaleMessageTime)
          ORDER BY LocaleMessageTime DESC
        ) AS rn
      FROM Hist
    ),

    -- Build summary counts: only keep rn = 1 (last swipe) and Direction = 'InDirection' to count as present
    Summary AS (
      SELECT
        CONVERT(VARCHAR(10), CONVERT(date, LocaleMessageTime), 23) AS [date], -- yyyy-mm-dd
        DATENAME(WEEKDAY, CONVERT(date, LocaleMessageTime)) AS [day],
        PartitionName2,
        SUM(CASE WHEN LOWER(ISNULL(PersonnelType,'')) LIKE '%employee%' THEN 1 ELSE 0 END) AS Employee,
        SUM(CASE WHEN LOWER(ISNULL(PersonnelType,'')) LIKE '%contractor%' THEN 1 ELSE 0 END) AS Contractor,
        SUM(CASE WHEN LOWER(ISNULL(PersonnelType,'')) NOT LIKE '%employee%' AND LOWER(ISNULL(PersonnelType,'')) NOT LIKE '%contractor%' THEN 1 ELSE 0 END) AS OtherPresent
      FROM LastSwipe
      WHERE rn = 1 AND Direction = 'InDirection'
      GROUP BY CONVERT(date, LocaleMessageTime), PartitionName2, CONVERT(VARCHAR(10), CONVERT(date, LocaleMessageTime), 23)
    )

    -- final select: details + summary rows
    SELECT
      -- details: full rowset
      (SELECT LocaleMessageTime, ObjectName1, Door, EmployeeID, CardNumber, PartitionName2, LogicalLocation, PersonGUID, PersonnelType, Direction
       FROM Hist
       ORDER BY LocaleMessageTime ASC
       FOR JSON PATH) AS details_json,

      -- summary: aggregated per-date per-partition
      (SELECT
         s.[date],
         s.[day],
         s.PartitionName2 AS partitionCode,
         s.Employee, s.Contractor, s.OtherPresent
       FROM Summary s
       ORDER BY s.[date] DESC, s.PartitionName2
       FOR JSON PATH) AS summary_json
  `;

  const req = pool.request();
  if (location) req.input('location', sql.NVarChar, location);
  const result = await req.query(query);
  // result.recordset[0] contains details_json and summary_json strings
  const row = result.recordset[0] || {};
  const details = row.details_json ? JSON.parse(row.details_json) : [];
  const summaryRows = row.summary_json ? JSON.parse(row.summary_json) : [];

  // Transform summaryRows into the shape your frontend expects: summaryByDate array where each date has partitions map
  const summaryByDateMap = {};
  summaryRows.forEach(r => {
    const date = r.date;
    if (!summaryByDateMap[date]) {
      summaryByDateMap[date] = { date, day: r.day, region: { name: 'NAMER', total: 0, Employee: 0, Contractor: 0 }, partitions: {} };
    }
    summaryByDateMap[date].partitions[r.partitionCode] = {
      total: (r.Employee || 0) + (r.Contractor || 0) + (r.OtherPresent || 0),
      Employee: r.Employee || 0,
      Contractor: r.Contractor || 0
    };
    // update region totals
    summaryByDateMap[date].region.Employee += (r.Employee || 0);
    summaryByDateMap[date].region.Contractor += (r.Contractor || 0);
    summaryByDateMap[date].region.total += (r.Employee || 0) + (r.Contractor || 0) + (r.OtherPresent || 0);
  });

  const summaryByDate = Object.values(summaryByDateMap).sort((a,b)=> b.date.localeCompare(a.date));

  return { details, summaryByDate };
};










  // ---------- FRONTEND: build partitionRows (prefer server summary if available) ----------
  const partitionRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // If server provided a summaryByDate, use it (authoritative)
    if (Array.isArray(data.summaryByDate) && data.summaryByDate.length > 0) {
      const entry = data.summaryByDate.find(s => s.date === ds);
      if (!entry) {
        // return zero rows for the selected partitions if no summary row for that date
        return filteredPartitionKeys.map(pk => {
          const disp = partitionToDisplay[pk];
          return { country: disp?.country || '', city: disp?.city || pk, employee: 0, contractor: 0, total: 0 };
        });
      }

      return filteredPartitionKeys.map(pk => {
        const vals = entry.partitions && entry.partitions[pk] ? entry.partitions[pk] : { Employee: 0, Contractor: 0, total: 0 };
        const disp = partitionToDisplay[pk];
        return {
          country: disp?.country || '',
          city: disp?.city || pk,
          employee: vals.Employee || 0,
          contractor: vals.Contractor || 0,
          total: vals.total || ( (vals.Employee||0) + (vals.Contractor||0) )
        };
      });
    }

    // FALLBACK: compute locally but do robust per-partition dedupe (last swipe in that partition)
    const results = [];

    filteredPartitionKeys.forEach(pk => {
      // filter rows that match the date and that belong to this partition
      const rowsForPartition = (data.details || []).filter(r => {
        const dateMatch = getIsoDate(r) === ds;
        if (!dateMatch) return false;
        // Use partitionName (which backend now returns door-first) OR LogicalLocation mapping
        const partitionName = r.PartitionName2 || '';
        const logical = r.LogicalLocation || '';
        const logicalMapped = logicalToPartition[logical];
        return partitionName === pk || logicalMapped === pk;
      });

      if (rowsForPartition.length === 0) {
        const disp = partitionToDisplay[pk];
        results.push({ country: disp?.country || '', city: disp?.city || pk, employee: 0, contractor: 0, total: 0 });
        return;
      }

      // sort ascending, then keep last per person (last swipe in that partition)
      rowsForPartition.sort((a,b) => (a.LocaleMessageTime||'').localeCompare(b.LocaleMessageTime||''));
      const lastByPerson = {};
      rowsForPartition.forEach(r => { lastByPerson[r.PersonGUID] = r; });

      const counts = { Employee: 0, Contractor: 0, Other: 0 };
      Object.values(lastByPerson).forEach(r => {
        if (r.Direction !== 'InDirection') return;
        const ptype = (r.PersonnelType || '').toLowerCase();
        if (ptype.includes('contractor')) counts.Contractor += 1;
        else if (ptype.includes('employee')) counts.Employee += 1;
        else counts.Other += 1;
      });

      const disp = partitionToDisplay[pk];
      results.push({
        country: disp?.country || '',
        city: disp?.city || pk,
        employee: counts.Employee,
        contractor: counts.Contractor,
        total: counts.Employee + counts.Contractor + counts.Other
      });
    });

    return results;
  }, [data, pickedDate, filteredPartitionKeys]);

  // ---------- FRONTEND: detailRows (use server details but dedupe per-person across selected partitions) ----------
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // First try to use server details directly (it will be the same object returned by backend)
    const all = (data.details || []).filter(r => getIsoDate(r) === ds);

    // Keep rows that match any selected partition (using PartitionName2 or LogicalLocation)
    const rowsIncluded = all.filter(r => filteredPartitionKeys.some(pk => {
      const partitionName = r.PartitionName2 || '';
      const logicalMapped = logicalToPartition[r.LogicalLocation] || null;
      return partitionName === pk || logicalMapped === pk;
    }));

    // Sort chronologically and then pick last swipe per person (within the included set),
    // but ensure lastByPerson uses only rows included for the partition chosen in the UI.
    // For multi-partition views we still choose last swipe across included partitions,
    // which matches historical detail export logic.
    rowsIncluded.sort((a,b) => (a.LocaleMessageTime||'').localeCompare(b.LocaleMessageTime||''));
    const lastByPerson = {};
    rowsIncluded.forEach(r => { lastByPerson[r.PersonGUID] = r; });

    // Return only those whose final swipe was an entry
    return Object.values(lastByPerson).filter(r => r.Direction === 'InDirection');
  }, [data, pickedDate, filteredPartitionKeys]);

















Refer API Responce 

{
  "success": true,
  "summaryByDate": [
    {
      "date": "2025-10-18",
      "day": "Saturday",
      "region": {
        "name": "NAMER",
        "total": 12,
        "Employee": 6,
        "Contractor": 6
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 11,
          "Employee": 5,
          "Contractor": 6
        },
        "US.FL.Miami": {
          "total": 1,
          "Employee": 1,
          "Contractor": 0
        }
      }
    },
    {
      "date": "2025-10-19",
      "day": "Sunday",
      "region": {
        "name": "NAMER",
        "total": 8,
        "Employee": 5,
        "Contractor": 3
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 7,
          "Employee": 4,
          "Contractor": 3
        },
        "USA/Canada Default": {
          "total": 1,
          "Employee": 1,
          "Contractor": 0
        }
      }
    },
    {
      "date": "2025-10-20",
      "day": "Monday",
      "region": {
        "name": "NAMER",
        "total": 564,
        "Employee": 512,
        "Contractor": 52
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 487,
          "Employee": 442,
          "Contractor": 45
        },
        "US.FL.Miami": {
          "total": 14,
          "Employee": 12,
          "Contractor": 2
        },
        "USA/Canada Default": {
          "total": 41,
          "Employee": 37,
          "Contractor": 4
        },
        "US.NYC": {
          "total": 22,
          "Employee": 21,
          "Contractor": 1
        }
      }
    },
    {
      "date": "2025-10-21",
      "day": "Tuesday",
      "region": {
        "name": "NAMER",
        "total": 768,
        "Employee": 707,
        "Contractor": 61
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 636,
          "Employee": 583,
          "Contractor": 53
        },
        "US.FL.Miami": {
          "total": 24,
          "Employee": 21,
          "Contractor": 3
        },
        "USA/Canada Default": {
          "total": 67,
          "Employee": 63,
          "Contractor": 4
        },
        "US.NYC": {
          "total": 41,
          "Employee": 40,
          "Contractor": 1
        }
      }
    },
    {
      "date": "2025-10-22",
      "day": "Wednesday",
      "region": {
        "name": "NAMER",
        "total": 821,
        "Employee": 749,
        "Contractor": 72
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 675,
          "Employee": 612,
          "Contractor": 63
        },
        "US.FL.Miami": {
          "total": 27,
          "Employee": 24,
          "Contractor": 3
        },
        "USA/Canada Default": {
          "total": 70,
          "Employee": 66,
          "Contractor": 4
        },
        "US.NYC": {
          "total": 49,
          "Employee": 47,
          "Contractor": 2
        }
      }
    },
    {
      "date": "2025-10-23",
      "day": "Thursday",
      "region": {
        "name": "NAMER",
        "total": 642,
        "Employee": 578,
        "Contractor": 64
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 532,
          "Employee": 477,
          "Contractor": 55
        },
        "US.FL.Miami": {
          "total": 24,
          "Employee": 21,
          "Contractor": 3
        },
        "USA/Canada Default": {
          "total": 55,
          "Employee": 51,
          "Contractor": 4
        },
        "US.NYC": {
          "total": 31,
          "Employee": 29,
          "Contractor": 2
        }
      }
    },
    {
      "date": "2025-10-24",
      "day": "Friday",
      "region": {
        "name": "NAMER",
        "total": 356,
        "Employee": 305,
        "Contractor": 51
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 293,
          "Employee": 251,
          "Contractor": 42
        },
        "US.FL.Miami": {
          "total": 15,
          "Employee": 12,
          "Contractor": 3
        },
        "USA/Canada Default": {
          "total": 28,
          "Employee": 24,
          "Contractor": 4
        },
        "US.NYC": {
          "total": 20,
          "Employee": 18,
          "Contractor": 2
        }
      }
    },
    {
      "date": "2025-10-25",
      "day": "Saturday",
      "region": {
        "name": "NAMER",
        "total": 3,
        "Employee": 0,
        "Contractor": 3
      },
      "partitions": {
        "US.CO.OBS": {
          "total": 3,
          "Employee": 0,
          "Contractor": 3
        }
      }
    }
  ],
  "details": [
    {
      "LocaleMessageTime": "2025-10-18T00:34:07.000Z",
      "ObjectName1": "Angel, Maria",
      "Door": "US.CO.HQ. 13. Freight Elevator Lobby-OUT",
      "EmployeeID": "W0022449",
      "CardNumber": "618945",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "E0ECF741-9548-463A-9B4E-A3E55D50D4AC",
      "PersonnelType": "Contractor",
      "Direction": "OutDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T00:40:31.000Z",
      "ObjectName1": "Marchan, Daisy",
      "Door": "US.CO.HQ. 13. North Lobby Doors-IN",
      "EmployeeID": "W0027889",
      "CardNumber": "618077",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "9A581D4B-F62F-46ED-879B-6C9A48BF32E5",
      "PersonnelType": "Contractor",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T00:57:25.000Z",
      "ObjectName1": "Alonso, Alexander",
      "Door": "US.FL.MIAMI MAIN LOBBY DOOR 1",
      "EmployeeID": "305472",
      "CardNumber": "601255",
      "PartitionName2": "US.FL.Miami",
      "LogicalLocation": "Miami",
      "PersonGUID": "D59E6430-F946-4AAD-B977-B1983C9F325D",
      "PersonnelType": "Employee",
      "Direction": "OutDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T01:32:30.000Z",
      "ObjectName1": "Wajid, Abdul",
      "Door": "US.CO.HQ. 01. Retail North_10:03:1A",
      "EmployeeID": "W0028131",
      "CardNumber": "618809",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "18D3B2A1-4FA8-4CD3-AD0C-2E875D0F121F",
      "PersonnelType": "Contractor",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T01:35:01.000Z",
      "ObjectName1": "Alamo, Martin",
      "Door": "US.CO.HQ. 06. South Entrance-IN",
      "EmployeeID": "W0022451",
      "CardNumber": "613770",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "35327275-1D0C-4BF7-8817-6A76B5F9E29A",
      "PersonnelType": "Contractor",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T01:49:08.000Z",
      "ObjectName1": "Vargas, Erika",
      "Door": "US.CO.HQ. 01. Focus Area North-IN",
      "EmployeeID": "W0026176",
      "CardNumber": "617979",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "6F93B492-C95A-436E-996A-92202EFB9915",
      "PersonnelType": "Contractor",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T09:22:16.000Z",
      "ObjectName1": "Quigley, John",
      "Door": "US.CO.HQ. 06. South Center Hall Entry-IN",
      "EmployeeID": "244124",
      "CardNumber": "421140",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "E2D12F12-B607-4181-837D-89D836B84CB7",
      "PersonnelType": "Employee",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T09:40:05.000Z",
      "ObjectName1": "Oberoi, Aditya",
      "Door": "US.CO.HQ. 11. North Lobby Doors-IN",
      "EmployeeID": "328913",
      "CardNumber": "618211",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "5175E394-4240-49AB-80D4-D21D73AF14A4",
      "PersonnelType": "Employee",
      "Direction": "InDirection"
    },
    {
      "LocaleMessageTime": "2025-10-18T11:46:39.000Z",
      "ObjectName1": "Pena, Fernando",
      "Door": "US.CO.HQ. 13. North Lobby Doors-IN",
      "EmployeeID": "327219",
      "CardNumber": "613408",
      "PartitionName2": "US.CO.OBS",
      "LogicalLocation": "Denver-HQ",
      "PersonGUID": "AD1883FF-7400-4915-B8BD-7DE171FDB1A8",
      "PersonnelType": "Employee",
      "Direction": "InDirection"
    },





alos check and Refer NAMER HeadCount Query again and fix the issue carefully.....


-- Step 1: Build the temp table with corrected logical location using door name (ObjectName2)
SELECT
    t1.[ObjectName1],
    t1.[ObjectName2],
    CASE
        WHEN t2.[Int1] = 0 THEN t2.[Text12]
        ELSE CAST(t2.[Int1] AS NVARCHAR)
    END AS EmployeeID,
    t2.[PersonnelTypeID],
    t3.[Name], -- Personnel type
    t2.[Text5],
    t1.[PartitionName2],
 
    -- Assign accurate LogicalLocation using door name (ObjectName2)
    CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        WHEN t1.[ObjectName2] LIKE '%Austin%' THEN 'Austin'
        WHEN t1.[ObjectName2] LIKE '%Miami%' THEN 'Miami'
        WHEN t1.[ObjectName2] LIKE '%NYC%' THEN 'New York'
        ELSE 'Other'
    END AS LogicalLocation,
 
    t1.[MessageType],
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime
 
INTO #CombinedEmployeeData
FROM [ACVSUJournal_00010022].[dbo].[ACVSUJournalLog] AS t1
INNER JOIN [ACVSCore].[Access].[Personnel] AS t2
    ON t1.ObjectIdentity1 = t2.GUID
INNER JOIN [ACVSCore].[Access].[PersonnelType] AS t3
    ON t2.[PersonnelTypeID] = t3.[ObjectID];
 
-- Step 2: Select cleaned data for specific logical locations
SELECT DISTINCT
    [ObjectName1],
    [Name],
    EmployeeID,
    Text5,
    LogicalLocation,
    MessageType,
    CONVERT(DATE, LocaleMessageTime) AS [Date]
FROM #CombinedEmployeeData
WHERE
    CONVERT(DATE, LocaleMessageTime) = '2025-10-23'
    AND LogicalLocation IN ('Denver', 'Austin', 'Miami', 'New York')
    AND MessageType = 'CardAdmitted';

DROP TABLE #CombinedEmployeeData;


Only check Logic carefully




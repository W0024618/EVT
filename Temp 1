# test_rtsp.py
# Usage: python test_rtsp.py --excel Camera-door_details-updated.xlsx
import argparse, time, cv2, pandas as pd
from pathlib import Path

def try_open(url, timeout=6):
    # use FFMPEG backend if available
    cap = cv2.VideoCapture(url, cv2.CAP_FFMPEG)
    start = time.time()
    ok = False
    while time.time() - start < timeout:
        ret, frame = cap.read()
        if ret and frame is not None:
            ok = True
            break
    cap.release()
    return ok

def main(excel):
    df = pd.read_excel(excel, sheet_name='Cameras', dtype=str).fillna('')
    results = []
    for _, r in df.iterrows():
        cam = r.get('camera_id','').strip()
        rtsp = r.get('rtsp_url','').strip()
        if not rtsp:
            results.append((cam, rtsp, 'NO_URL'))
            continue
        try:
            ok = try_open(rtsp, timeout=6)
            results.append((cam, rtsp, 'OK' if ok else 'FAIL'))
        except Exception as e:
            results.append((cam, rtsp, f'ERROR:{e}'))
    out = Path('rtsp_test_results.csv')
    pd.DataFrame(results, columns=['camera_id','rtsp_url','status']).to_csv(out, index=False)
    print('Finished. Results:', out)

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument('--excel', default='Camera-door_details-updated.xlsx')
    args = p.parse_args()
    main(args.excel)










# ensure OpenCV is installed
pip install opencv-python-headless pandas openpyxl
python test_rtsp.py --excel Camera-door_details-updated.xlsx
# Check rtsp_test_results.csv







# test_rtsp.ps1
# Save Door_Camera_Map as CSV first (or use door_camera_map_cleaned.csv)
$csv = "door_camera_map_cleaned.csv"
if (-not (Test-Path $csv)) { Write-Error "$csv not found. Export Cameras sheet to this CSV."; exit 1 }
$rows = Import-Csv $csv
foreach ($r in $rows) {
  $rtsp = $r.rtsp_url
  $id = $r.camera_id
  if (-not $rtsp) { Write-Host "$id - NO_URL"; continue }
  $out = "$id-test.jpg"
  ffmpeg -rtsp_transport tcp -y -i $rtsp -frames:v 1 -t 5 $out 2>$null
  if (Test-Path $out) {
    Write-Host "$id - OK (frame saved)"
    Remove-Item $out
  } else {
    Write-Host "$id - FAIL"
  }
}







.\test_rtsp.ps1







# clip_extractor.py
# Usage example:
# python clip_extractor.py --rtsp "rtsp://user:pass@10.0.0.5/stream" --out swipe123_camA.mp4 --pre 5 --post 10
import argparse, subprocess
def main(rtsp, out, pre=5, post=10):
    total = int(pre) + int(post)
    # record for total seconds from live stream
    cmd = ['ffmpeg','-rtsp_transport','tcp','-y','-i', rtsp, '-t', str(total), '-c','copy', out]
    print("Running:", " ".join(cmd))
    subprocess.run(cmd)
if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument('--rtsp', required=True)
    p.add_argument('--out', required=True)
    p.add_argument('--pre', type=int, default=5)
    p.add_argument('--post', type=int, default=10)
    args = p.parse_args()
    main(args.rtsp, args.out, args.pre, args.post)











# yolo_infer.py
# Usage: python yolo_infer.py --model yolov8n.pt --source swipe123_camA.mp4
from ultralytics import YOLO
import argparse
def main(model, source, conf=0.25, imgsz=640):
    m = YOLO(model)
    m.predict(source=source, conf=conf, imgsz=imgsz)
if __name__ == "__main__":
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('--model', default='yolov8n.pt')
    p.add_argument('--source', required=True)
    p.add_argument('--conf', type=float, default=0.25)
    p.add_argument('--imgsz', type=int, default=640)
    args = p.parse_args()
    main(args.model, args.source, args.conf, args.imgsz)






# venv active
python yolo_infer.py --model .\yolov8n.pt --source .\swipe123_camA.mp4
# Output saved to runs/detect/... as before








mkdir C:\projects\yolo_project\camera_files
# move Camera-door_details-updated.xlsx into that folder (use Explorer or PowerShell Move-Item)



cd C:\projects\yolo_project
.\.venv\Scripts\Activate.ps1





pip install pandas pyodbc openpyxl opencv-python-headless ultralytics
# ffmpeg is system-level: download & install from https://ffmpeg.org/download.html and add to PATH



# set env vars to point to the target SQL Server (choose correct server/db)
$env:DB_SERVER = "SRVWUPNQ0986V"   # pick region server
$env:DB_NAME   = "ACVSUJournal_00010030"
$env:DB_USER   = "GSOC_Test"
$env:DB_PASS   = "Westernccure@2025"
cd .\camera_files
python import_cameras.py --excel "Camera-door_details-updated.xlsx"







cd .\camera_files
python test_rtsp.py --excel "Camera-door_details-updated.xlsx"
# inspect rtsp_test_results.csv





# first export door_camera_map_cleaned.csv or door_camera_map.csv (from Excel)
.\test_rtsp.ps1


python clip_extractor.py --rtsp "rtsp://user:pass@10.0.0.5/stream" --out swipe_test.mp4 --pre 5 --post 10



python yolo_infer.py --model .\yolov8n.pt --source .\swipe_test.mp4









C:\projects\yolo_project\camera_files\Camera-door_details-updated.xlsx



/* camera_registry.sql
   Run this in SSMS (connected to the target database) once to create table.
*/
IF OBJECT_ID('dbo.cameras', 'U') IS NOT NULL
  DROP TABLE dbo.cameras;
GO

CREATE TABLE dbo.cameras (
  camera_id NVARCHAR(128) PRIMARY KEY,
  camera_name NVARCHAR(256),
  camera_type NVARCHAR(64),
  ip_address NVARCHAR(128),
  rtsp_url NVARCHAR(1024),
  username NVARCHAR(128),
  password NVARCHAR(256),
  door_id NVARCHAR(128),
  location NVARCHAR(256),
  coverage_zone NVARCHAR(64),
  resolution NVARCHAR(32),
  fps FLOAT,
  preferred BIT,
  notes NVARCHAR(MAX),
  created_at DATETIME2 DEFAULT SYSUTCDATETIME()
);
GO






# import_cameras.py
# Usage:
# 1) set environment vars: DB_SERVER, DB_NAME, DB_USER, DB_PASS
# 2) activate your venv with pyodbc installed
# 3) python import_cameras.py --excel "Camera-door_details-updated.xlsx"
import os, argparse, pandas as pd, pyodbc

def select_driver():
    drivers = [d for d in pyodbc.drivers() if d and 'ODBC Driver' in d]
    if not drivers:
        raise RuntimeError('No ODBC Driver found. Install "ODBC Driver 18 for SQL Server" or "ODBC Driver 17".')
    return drivers[-1]

def get_conn():
    server = os.environ.get('DB_SERVER')
    database = os.environ.get('DB_NAME')
    user = os.environ.get('DB_USER')
    password = os.environ.get('DB_PASS')
    if not all([server,database,user,password]):
        raise RuntimeError('Set DB_SERVER, DB_NAME, DB_USER, DB_PASS environment variables before running.')
    driver = select_driver()
    conn_str = f"DRIVER={{{driver}}};SERVER={server};DATABASE={database};UID={user};PWD={password};Encrypt=yes;TrustServerCertificate=yes;"
    return pyodbc.connect(conn_str, timeout=30)

def normalize_pref(v):
    s = str(v).strip().lower()
    if s in ('yes','true','1'): return 1
    if s in ('no','false','0'): return 0
    return None

def main(excel_path):
    df = pd.read_excel(excel_path, sheet_name='Cameras', dtype=str).fillna('')
    conn = get_conn()
    cur = conn.cursor()
    sql = """INSERT INTO dbo.cameras
      (camera_id,camera_name,camera_type,ip_address,rtsp_url,username,password,door_id,location,coverage_zone,resolution,fps,preferred,notes)
      VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""
    for _, r in df.iterrows():
        fps_raw = r.get('fps','').strip()
        fps_val = float(fps_raw) if fps_raw!='' else None
        pref_val = normalize_pref(r.get('preferred',''))
        params = (
            str(r.get('camera_id','')).strip(),
            str(r.get('camera_name','')).strip(),
            str(r.get('camera_type','')).strip(),
            str(r.get('ip_address','')).strip(),
            str(r.get('rtsp_url','')).strip(),
            str(r.get('username','')).strip(),
            str(r.get('password','')).strip(),
            str(r.get('door_id','')).strip(),
            str(r.get('location','')).strip(),
            str(r.get('coverage_zone','')).strip(),
            str(r.get('resolution','')).strip(),
            fps_val,
            pref_val,
            str(r.get('notes','')).strip()
        )
        cur.execute(sql, params)
    conn.commit()
    cur.close()
    conn.close()
    print("Import complete.")

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument('--excel', default='Camera-door_details-updated.xlsx')
    args = ap.parse_args()
    main(args.excel)






cd C:\projects\yolo_project\camera_files
# activate your project .venv
.\.venv\Scripts\Activate.ps1
# set DB env vars (example)
$env:DB_SERVER = "SRVWUPNQ0986V"    # choose appropriate server from your region
$env:DB_NAME   = "ACVSUJournal_00010030"
$env:DB_USER   = "GSOC_Test"
$env:DB_PASS   = "Westernccure@2025"
# then run
pip install pyodbc pandas openpyxl
python import_cameras.py --excel "Camera-door_details-updated.xlsx"








